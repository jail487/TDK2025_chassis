========================================
統一速度控制系統使用說明
========================================

1. 系統初始化
--------------
在 main() 函式中調用：
```cpp
#include "location.h"

int main() {
    // 初始化統一速度控制系統
    initSpeedController();
    
    // 可選：自定義速度配置
    configureSpeedProfile(20.0f, 10.0f, 15.0f); // 最大速度20, 加速度10, 減速度15
    
    // 其他初始化代碼...
}
```

2. 速度配置參數
--------------
SpeedProfile 結構包含以下參數：
- max_speed: 最大速度 (預設 16.0f)
- acceleration: 加速度 (預設 8.0f)
- deceleration: 減速度 (預設 12.0f)
- jerk_limit: 加加速度限制 (預設 20.0f)
- min_speed_ratio: 最小速度比例 (預設 0.1f = 10%)

3. 統一速度控制的優勢
-------------------
✅ 所有導航函式現在都使用相同的加減速曲線
✅ 平滑的速度變化，減少機械衝擊
✅ 統一的速度限制和安全保護
✅ 可配置的加減速參數
✅ 三階段速度控制：加速(30%) - 恆速(40%) - 減速(30%)
✅ S曲線加減速，提供最平滑的運動

4. 各函式的速度控制特性
----------------------

followPath():
- 使用全域 move_speed 作為基準速度
- 線條丟失時自動降至最小速度
- 平滑的旋轉修正

path_moveDis():
- 自動軌跡速度計算
- 根據剩餘距離智能調速
- 平滑的停止控制

direct_move():
- 使用80%最大速度作為線性移動速度
- 角速度為線速度的10%
- 支援6個方向的移動

moveDistance():
- 複合運動支援（同時平移和旋轉）
- 智能軌跡規劃
- 座標系自動轉換

integral_move():
- 比例控制結合平滑加減速
- 精確的點位到達判斷
- 自動速度限制

5. 速度控制的三個階段
-------------------

階段1：加速階段 (0-30%路程)
- 使用S曲線平滑加速
- 從最小速度逐漸增加到最大速度

階段2：恆速階段 (30-70%路程)
- 維持最大速度
- 提供最高效率的移動

階段3：減速階段 (70-100%路程)
- 使用S曲線平滑減速
- 從最大速度逐漸降低到停止

6. 安全特性
-----------
- 自動速度限制：防止超過設定的最大速度
- 平滑停止：避免急停造成的機械衝擊
- 最小速度保護：確保在低速時仍有足夠的控制力
- 角速度限制：防止過快旋轉

7. 性能優化建議
--------------
- 對於精密操作：降低最大速度，提高控制精度
- 對於快速移動：提高最大速度和加速度
- 對於重載情況：降低加速度，增加減速度
- 對於平滑運動：啟用 jerk_limit 限制

8. 故障排除
-----------
如果運動不平滑：
1. 檢查加減速參數是否合理
2. 確認 updateSpeed() 被定期調用
3. 檢查時間步長是否穩定

如果速度過慢：
1. 增加 max_speed 參數
2. 檢查 min_speed_ratio 設定
3. 確認沒有不必要的速度限制

9. 與原系統的相容性
------------------
- 保持與 Chassis::setSpeed() 的相容性
- 保留原有的函式接口
- 漸進式升級，可與舊代碼共存

========================================
更新日期: 2025年9月15日
版本: v1.0
========================================