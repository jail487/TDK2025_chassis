
TDK2025_chassis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001baec  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010e8  0801bdc0  0801bdc0  0001cdc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801cea8  0801cea8  0001dea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  0801ceb0  0801ceb0  0001deb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  0801cec4  0801cec4  0001dec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000028c  24000000  0801cecc  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003cbc  24000290  0801d158  0001e290  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24003f4c  0801d158  0001ef4c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001e28c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005a702  00000000  00000000  0001e2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000774c  00000000  00000000  000789bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000027f8  00000000  00000000  00080108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001f3b  00000000  00000000  00082900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003effe  00000000  00000000  0008483b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003679c  00000000  00000000  000c3839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00183e32  00000000  00000000  000f9fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0027de07  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d02c  00000000  00000000  0027de4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  0028ae78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000290 	.word	0x24000290
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801bda4 	.word	0x0801bda4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000294 	.word	0x24000294
 800030c:	0801bda4 	.word	0x0801bda4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b988 	b.w	8000a60 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f806 	bl	8000768 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__udivmoddi4>:
 8000768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800076c:	9d08      	ldr	r5, [sp, #32]
 800076e:	468e      	mov	lr, r1
 8000770:	4604      	mov	r4, r0
 8000772:	4688      	mov	r8, r1
 8000774:	2b00      	cmp	r3, #0
 8000776:	d14a      	bne.n	800080e <__udivmoddi4+0xa6>
 8000778:	428a      	cmp	r2, r1
 800077a:	4617      	mov	r7, r2
 800077c:	d962      	bls.n	8000844 <__udivmoddi4+0xdc>
 800077e:	fab2 f682 	clz	r6, r2
 8000782:	b14e      	cbz	r6, 8000798 <__udivmoddi4+0x30>
 8000784:	f1c6 0320 	rsb	r3, r6, #32
 8000788:	fa01 f806 	lsl.w	r8, r1, r6
 800078c:	fa20 f303 	lsr.w	r3, r0, r3
 8000790:	40b7      	lsls	r7, r6
 8000792:	ea43 0808 	orr.w	r8, r3, r8
 8000796:	40b4      	lsls	r4, r6
 8000798:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800079c:	fa1f fc87 	uxth.w	ip, r7
 80007a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007a4:	0c23      	lsrs	r3, r4, #16
 80007a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ae:	fb01 f20c 	mul.w	r2, r1, ip
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0x62>
 80007b6:	18fb      	adds	r3, r7, r3
 80007b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007bc:	f080 80ea 	bcs.w	8000994 <__udivmoddi4+0x22c>
 80007c0:	429a      	cmp	r2, r3
 80007c2:	f240 80e7 	bls.w	8000994 <__udivmoddi4+0x22c>
 80007c6:	3902      	subs	r1, #2
 80007c8:	443b      	add	r3, r7
 80007ca:	1a9a      	subs	r2, r3, r2
 80007cc:	b2a3      	uxth	r3, r4
 80007ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80007d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007da:	fb00 fc0c 	mul.w	ip, r0, ip
 80007de:	459c      	cmp	ip, r3
 80007e0:	d909      	bls.n	80007f6 <__udivmoddi4+0x8e>
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007e8:	f080 80d6 	bcs.w	8000998 <__udivmoddi4+0x230>
 80007ec:	459c      	cmp	ip, r3
 80007ee:	f240 80d3 	bls.w	8000998 <__udivmoddi4+0x230>
 80007f2:	443b      	add	r3, r7
 80007f4:	3802      	subs	r0, #2
 80007f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007fa:	eba3 030c 	sub.w	r3, r3, ip
 80007fe:	2100      	movs	r1, #0
 8000800:	b11d      	cbz	r5, 800080a <__udivmoddi4+0xa2>
 8000802:	40f3      	lsrs	r3, r6
 8000804:	2200      	movs	r2, #0
 8000806:	e9c5 3200 	strd	r3, r2, [r5]
 800080a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800080e:	428b      	cmp	r3, r1
 8000810:	d905      	bls.n	800081e <__udivmoddi4+0xb6>
 8000812:	b10d      	cbz	r5, 8000818 <__udivmoddi4+0xb0>
 8000814:	e9c5 0100 	strd	r0, r1, [r5]
 8000818:	2100      	movs	r1, #0
 800081a:	4608      	mov	r0, r1
 800081c:	e7f5      	b.n	800080a <__udivmoddi4+0xa2>
 800081e:	fab3 f183 	clz	r1, r3
 8000822:	2900      	cmp	r1, #0
 8000824:	d146      	bne.n	80008b4 <__udivmoddi4+0x14c>
 8000826:	4573      	cmp	r3, lr
 8000828:	d302      	bcc.n	8000830 <__udivmoddi4+0xc8>
 800082a:	4282      	cmp	r2, r0
 800082c:	f200 8105 	bhi.w	8000a3a <__udivmoddi4+0x2d2>
 8000830:	1a84      	subs	r4, r0, r2
 8000832:	eb6e 0203 	sbc.w	r2, lr, r3
 8000836:	2001      	movs	r0, #1
 8000838:	4690      	mov	r8, r2
 800083a:	2d00      	cmp	r5, #0
 800083c:	d0e5      	beq.n	800080a <__udivmoddi4+0xa2>
 800083e:	e9c5 4800 	strd	r4, r8, [r5]
 8000842:	e7e2      	b.n	800080a <__udivmoddi4+0xa2>
 8000844:	2a00      	cmp	r2, #0
 8000846:	f000 8090 	beq.w	800096a <__udivmoddi4+0x202>
 800084a:	fab2 f682 	clz	r6, r2
 800084e:	2e00      	cmp	r6, #0
 8000850:	f040 80a4 	bne.w	800099c <__udivmoddi4+0x234>
 8000854:	1a8a      	subs	r2, r1, r2
 8000856:	0c03      	lsrs	r3, r0, #16
 8000858:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800085c:	b280      	uxth	r0, r0
 800085e:	b2bc      	uxth	r4, r7
 8000860:	2101      	movs	r1, #1
 8000862:	fbb2 fcfe 	udiv	ip, r2, lr
 8000866:	fb0e 221c 	mls	r2, lr, ip, r2
 800086a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800086e:	fb04 f20c 	mul.w	r2, r4, ip
 8000872:	429a      	cmp	r2, r3
 8000874:	d907      	bls.n	8000886 <__udivmoddi4+0x11e>
 8000876:	18fb      	adds	r3, r7, r3
 8000878:	f10c 38ff 	add.w	r8, ip, #4294967295
 800087c:	d202      	bcs.n	8000884 <__udivmoddi4+0x11c>
 800087e:	429a      	cmp	r2, r3
 8000880:	f200 80e0 	bhi.w	8000a44 <__udivmoddi4+0x2dc>
 8000884:	46c4      	mov	ip, r8
 8000886:	1a9b      	subs	r3, r3, r2
 8000888:	fbb3 f2fe 	udiv	r2, r3, lr
 800088c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000890:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000894:	fb02 f404 	mul.w	r4, r2, r4
 8000898:	429c      	cmp	r4, r3
 800089a:	d907      	bls.n	80008ac <__udivmoddi4+0x144>
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	f102 30ff 	add.w	r0, r2, #4294967295
 80008a2:	d202      	bcs.n	80008aa <__udivmoddi4+0x142>
 80008a4:	429c      	cmp	r4, r3
 80008a6:	f200 80ca 	bhi.w	8000a3e <__udivmoddi4+0x2d6>
 80008aa:	4602      	mov	r2, r0
 80008ac:	1b1b      	subs	r3, r3, r4
 80008ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008b2:	e7a5      	b.n	8000800 <__udivmoddi4+0x98>
 80008b4:	f1c1 0620 	rsb	r6, r1, #32
 80008b8:	408b      	lsls	r3, r1
 80008ba:	fa22 f706 	lsr.w	r7, r2, r6
 80008be:	431f      	orrs	r7, r3
 80008c0:	fa0e f401 	lsl.w	r4, lr, r1
 80008c4:	fa20 f306 	lsr.w	r3, r0, r6
 80008c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80008cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008d0:	4323      	orrs	r3, r4
 80008d2:	fa00 f801 	lsl.w	r8, r0, r1
 80008d6:	fa1f fc87 	uxth.w	ip, r7
 80008da:	fbbe f0f9 	udiv	r0, lr, r9
 80008de:	0c1c      	lsrs	r4, r3, #16
 80008e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80008e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80008e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80008ec:	45a6      	cmp	lr, r4
 80008ee:	fa02 f201 	lsl.w	r2, r2, r1
 80008f2:	d909      	bls.n	8000908 <__udivmoddi4+0x1a0>
 80008f4:	193c      	adds	r4, r7, r4
 80008f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80008fa:	f080 809c 	bcs.w	8000a36 <__udivmoddi4+0x2ce>
 80008fe:	45a6      	cmp	lr, r4
 8000900:	f240 8099 	bls.w	8000a36 <__udivmoddi4+0x2ce>
 8000904:	3802      	subs	r0, #2
 8000906:	443c      	add	r4, r7
 8000908:	eba4 040e 	sub.w	r4, r4, lr
 800090c:	fa1f fe83 	uxth.w	lr, r3
 8000910:	fbb4 f3f9 	udiv	r3, r4, r9
 8000914:	fb09 4413 	mls	r4, r9, r3, r4
 8000918:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800091c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000920:	45a4      	cmp	ip, r4
 8000922:	d908      	bls.n	8000936 <__udivmoddi4+0x1ce>
 8000924:	193c      	adds	r4, r7, r4
 8000926:	f103 3eff 	add.w	lr, r3, #4294967295
 800092a:	f080 8082 	bcs.w	8000a32 <__udivmoddi4+0x2ca>
 800092e:	45a4      	cmp	ip, r4
 8000930:	d97f      	bls.n	8000a32 <__udivmoddi4+0x2ca>
 8000932:	3b02      	subs	r3, #2
 8000934:	443c      	add	r4, r7
 8000936:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800093a:	eba4 040c 	sub.w	r4, r4, ip
 800093e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000942:	4564      	cmp	r4, ip
 8000944:	4673      	mov	r3, lr
 8000946:	46e1      	mov	r9, ip
 8000948:	d362      	bcc.n	8000a10 <__udivmoddi4+0x2a8>
 800094a:	d05f      	beq.n	8000a0c <__udivmoddi4+0x2a4>
 800094c:	b15d      	cbz	r5, 8000966 <__udivmoddi4+0x1fe>
 800094e:	ebb8 0203 	subs.w	r2, r8, r3
 8000952:	eb64 0409 	sbc.w	r4, r4, r9
 8000956:	fa04 f606 	lsl.w	r6, r4, r6
 800095a:	fa22 f301 	lsr.w	r3, r2, r1
 800095e:	431e      	orrs	r6, r3
 8000960:	40cc      	lsrs	r4, r1
 8000962:	e9c5 6400 	strd	r6, r4, [r5]
 8000966:	2100      	movs	r1, #0
 8000968:	e74f      	b.n	800080a <__udivmoddi4+0xa2>
 800096a:	fbb1 fcf2 	udiv	ip, r1, r2
 800096e:	0c01      	lsrs	r1, r0, #16
 8000970:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000974:	b280      	uxth	r0, r0
 8000976:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800097a:	463b      	mov	r3, r7
 800097c:	4638      	mov	r0, r7
 800097e:	463c      	mov	r4, r7
 8000980:	46b8      	mov	r8, r7
 8000982:	46be      	mov	lr, r7
 8000984:	2620      	movs	r6, #32
 8000986:	fbb1 f1f7 	udiv	r1, r1, r7
 800098a:	eba2 0208 	sub.w	r2, r2, r8
 800098e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000992:	e766      	b.n	8000862 <__udivmoddi4+0xfa>
 8000994:	4601      	mov	r1, r0
 8000996:	e718      	b.n	80007ca <__udivmoddi4+0x62>
 8000998:	4610      	mov	r0, r2
 800099a:	e72c      	b.n	80007f6 <__udivmoddi4+0x8e>
 800099c:	f1c6 0220 	rsb	r2, r6, #32
 80009a0:	fa2e f302 	lsr.w	r3, lr, r2
 80009a4:	40b7      	lsls	r7, r6
 80009a6:	40b1      	lsls	r1, r6
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b0:	430a      	orrs	r2, r1
 80009b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009b6:	b2bc      	uxth	r4, r7
 80009b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009bc:	0c11      	lsrs	r1, r2, #16
 80009be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009c2:	fb08 f904 	mul.w	r9, r8, r4
 80009c6:	40b0      	lsls	r0, r6
 80009c8:	4589      	cmp	r9, r1
 80009ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80009ce:	b280      	uxth	r0, r0
 80009d0:	d93e      	bls.n	8000a50 <__udivmoddi4+0x2e8>
 80009d2:	1879      	adds	r1, r7, r1
 80009d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80009d8:	d201      	bcs.n	80009de <__udivmoddi4+0x276>
 80009da:	4589      	cmp	r9, r1
 80009dc:	d81f      	bhi.n	8000a1e <__udivmoddi4+0x2b6>
 80009de:	eba1 0109 	sub.w	r1, r1, r9
 80009e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009e6:	fb09 f804 	mul.w	r8, r9, r4
 80009ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80009ee:	b292      	uxth	r2, r2
 80009f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009f4:	4542      	cmp	r2, r8
 80009f6:	d229      	bcs.n	8000a4c <__udivmoddi4+0x2e4>
 80009f8:	18ba      	adds	r2, r7, r2
 80009fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80009fe:	d2c4      	bcs.n	800098a <__udivmoddi4+0x222>
 8000a00:	4542      	cmp	r2, r8
 8000a02:	d2c2      	bcs.n	800098a <__udivmoddi4+0x222>
 8000a04:	f1a9 0102 	sub.w	r1, r9, #2
 8000a08:	443a      	add	r2, r7
 8000a0a:	e7be      	b.n	800098a <__udivmoddi4+0x222>
 8000a0c:	45f0      	cmp	r8, lr
 8000a0e:	d29d      	bcs.n	800094c <__udivmoddi4+0x1e4>
 8000a10:	ebbe 0302 	subs.w	r3, lr, r2
 8000a14:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a18:	3801      	subs	r0, #1
 8000a1a:	46e1      	mov	r9, ip
 8000a1c:	e796      	b.n	800094c <__udivmoddi4+0x1e4>
 8000a1e:	eba7 0909 	sub.w	r9, r7, r9
 8000a22:	4449      	add	r1, r9
 8000a24:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a28:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a2c:	fb09 f804 	mul.w	r8, r9, r4
 8000a30:	e7db      	b.n	80009ea <__udivmoddi4+0x282>
 8000a32:	4673      	mov	r3, lr
 8000a34:	e77f      	b.n	8000936 <__udivmoddi4+0x1ce>
 8000a36:	4650      	mov	r0, sl
 8000a38:	e766      	b.n	8000908 <__udivmoddi4+0x1a0>
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	e6fd      	b.n	800083a <__udivmoddi4+0xd2>
 8000a3e:	443b      	add	r3, r7
 8000a40:	3a02      	subs	r2, #2
 8000a42:	e733      	b.n	80008ac <__udivmoddi4+0x144>
 8000a44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a48:	443b      	add	r3, r7
 8000a4a:	e71c      	b.n	8000886 <__udivmoddi4+0x11e>
 8000a4c:	4649      	mov	r1, r9
 8000a4e:	e79c      	b.n	800098a <__udivmoddi4+0x222>
 8000a50:	eba1 0109 	sub.w	r1, r1, r9
 8000a54:	46c4      	mov	ip, r8
 8000a56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a5a:	fb09 f804 	mul.w	r8, r9, r4
 8000a5e:	e7c4      	b.n	80009ea <__udivmoddi4+0x282>

08000a60 <__aeabi_idiv0>:
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a6e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a72:	f019 f869 	bl	8019b48 <cosf>
 8000a76:	eef0 7a40 	vmov.f32	s15, s0
 8000a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a8e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a92:	f018 ff95 	bl	80199c0 <sinf>
 8000a96:	eef0 7a40 	vmov.f32	s15, s0
 8000a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <_ZNK8DC_motor9get_speedEv>:
class DC_motor{
public:
	void setup();
	void PI_run();
	void updateSpeed(int sign);
	float get_speed() const { return speed; } 
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	69db      	ldr	r3, [r3, #28]
 8000ab0:	ee07 3a90 	vmov	s15, r3
 8000ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>:
	void set_motor_parameter(float reduction_ratio,int resolution) ;
	void setPulse(float dutyCycle) ;
	void setDirection(bool direction) ;


	DC_motor(TIM_HandleTypeDef *_enc_htim, GPIO_TypeDef *_dirPort, uint16_t _dirPin, TIM_HandleTypeDef *_PWM_htim,
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6178      	str	r0, [r7, #20]
 8000acc:	6139      	str	r1, [r7, #16]
 8000ace:	60fa      	str	r2, [r7, #12]
 8000ad0:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ad4:	edc7 0a00 	vstr	s1, [r7]
 8000ad8:	817b      	strh	r3, [r7, #10]
			uint32_t _PWM_TIM_CHANNEL,float _kp,float _ki,bool dirpin) {
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	f04f 0200 	mov.w	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	f04f 0200 	mov.w	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	f04f 0200 	mov.w	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	f04f 0200 	mov.w	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	f04f 0200 	mov.w	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f04f 0200 	mov.w	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	f04f 0200 	mov.w	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	f04f 0200 	mov.w	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	f04f 0200 	mov.w	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	4a20      	ldr	r2, [pc, #128]	@ (8000ba8 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb+0xe4>)
 8000b26:	625a      	str	r2, [r3, #36]	@ 0x24
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	f04f 4285 	mov.w	r2, #1115684864	@ 0x42800000
 8000b36:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	f240 321f 	movw	r2, #799	@ 0x31f
 8000b44:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000b4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	f04f 0200 	mov.w	r2, #0
 8000b62:	645a      	str	r2, [r3, #68]	@ 0x44
		enc_htim = _enc_htim;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	649a      	str	r2, [r3, #72]	@ 0x48
		dirPort = _dirPort;
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	64da      	str	r2, [r3, #76]	@ 0x4c
		dirPin = _dirPin;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	897a      	ldrh	r2, [r7, #10]
 8000b74:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
		PWM_htim = _PWM_htim;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	6a3a      	ldr	r2, [r7, #32]
 8000b7c:	655a      	str	r2, [r3, #84]	@ 0x54
		PWM_TIM_CHANNEL = _PWM_TIM_CHANNEL;
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b82:	659a      	str	r2, [r3, #88]	@ 0x58
		kp = _kp;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	601a      	str	r2, [r3, #0]
		ki = _ki;
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
		dir_pin = dirpin;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	};
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	371c      	adds	r7, #28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	3a83126f 	.word	0x3a83126f

08000bac <_ZN7Chassis5setupEv>:
namespace Chassis {

// Pinpoint 狀態監控變數 (用於 Live Expressions 觀察)
pinpoint_status_t pinpoint_status = {};

void setup(){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
    // 初始化所有速度變數為零，防止殘留值
    v_x = 0.0f;
 8000bb0:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <_ZN7Chassis5setupEv+0x60>)
 8000bb2:	f04f 0200 	mov.w	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
    v_y = 0.0f;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <_ZN7Chassis5setupEv+0x64>)
 8000bba:	f04f 0200 	mov.w	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
    v_w = 0.0f;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <_ZN7Chassis5setupEv+0x68>)
 8000bc2:	f04f 0200 	mov.w	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
    cmd_v_x = 0.0f;
 8000bc8:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <_ZN7Chassis5setupEv+0x6c>)
 8000bca:	f04f 0200 	mov.w	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
    cmd_v_y = 0.0f;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <_ZN7Chassis5setupEv+0x70>)
 8000bd2:	f04f 0200 	mov.w	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
    cmd_v_w = 0.0f;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <_ZN7Chassis5setupEv+0x74>)
 8000bda:	f04f 0200 	mov.w	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
    world_v_x = 0.0f;
 8000be0:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <_ZN7Chassis5setupEv+0x78>)
 8000be2:	f04f 0200 	mov.w	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
    world_v_y = 0.0f;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <_ZN7Chassis5setupEv+0x7c>)
 8000bea:	f04f 0200 	mov.w	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
    
    wheel_FR.setup();
 8000bf0:	480e      	ldr	r0, [pc, #56]	@ (8000c2c <_ZN7Chassis5setupEv+0x80>)
 8000bf2:	f012 f8ee 	bl	8012dd2 <_ZN8DC_motor5setupEv>
    wheel_FL.setup();
 8000bf6:	480e      	ldr	r0, [pc, #56]	@ (8000c30 <_ZN7Chassis5setupEv+0x84>)
 8000bf8:	f012 f8eb 	bl	8012dd2 <_ZN8DC_motor5setupEv>
    wheel_BR.setup();
 8000bfc:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <_ZN7Chassis5setupEv+0x88>)
 8000bfe:	f012 f8e8 	bl	8012dd2 <_ZN8DC_motor5setupEv>
    wheel_BL.setup();
 8000c02:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <_ZN7Chassis5setupEv+0x8c>)
 8000c04:	f012 f8e5 	bl	8012dd2 <_ZN8DC_motor5setupEv>
    
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	240002b8 	.word	0x240002b8
 8000c10:	240002bc 	.word	0x240002bc
 8000c14:	240002c0 	.word	0x240002c0
 8000c18:	240002c4 	.word	0x240002c4
 8000c1c:	240002c8 	.word	0x240002c8
 8000c20:	240002cc 	.word	0x240002cc
 8000c24:	240002d0 	.word	0x240002d0
 8000c28:	240002d4 	.word	0x240002d4
 8000c2c:	24000334 	.word	0x24000334
 8000c30:	240002d8 	.word	0x240002d8
 8000c34:	240003ec 	.word	0x240003ec
 8000c38:	24000390 	.word	0x24000390
 8000c3c:	00000000 	.word	0x00000000

08000c40 <_ZN7Chassis18mecan_IK_transformEfff>:


void mecan_IK_transform(float _v_x, float _v_y, float _v_w) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b090      	sub	sp, #64	@ 0x40
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	ed87 0a03 	vstr	s0, [r7, #12]
 8000c4a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000c4e:	ed87 1a01 	vstr	s2, [r7, #4]
    // Chassis geometry factor
    float L = chassis_length / 1.0f;
 8000c52:	4b63      	ldr	r3, [pc, #396]	@ (8000de0 <_ZN7Chassis18mecan_IK_transformEfff+0x1a0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float W = chassis_width / 1.0f;
 8000c58:	4b62      	ldr	r3, [pc, #392]	@ (8000de4 <_ZN7Chassis18mecan_IK_transformEfff+0x1a4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    float a = L + W;
 8000c5e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000c62:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c6a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Calculate wheel speeds in cm/s
    float v1 = -_v_x + _v_y + _v_w * a / 2.0f; // Front Right
 8000c6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c72:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c7a:	edd7 6a01 	vldr	s13, [r7, #4]
 8000c7e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000c82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000c86:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000c8a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c92:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float v2 =  _v_x + _v_y - _v_w * a / 2.0f; // Front Left
 8000c96:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ca2:	edd7 6a01 	vldr	s13, [r7, #4]
 8000ca6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000caa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000cae:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000cb2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cba:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float v3 =  _v_x + _v_y + _v_w * a / 2.0f; // Back Right
 8000cbe:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cca:	edd7 6a01 	vldr	s13, [r7, #4]
 8000cce:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000cd2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000cd6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000cda:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ce2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float v4 = -_v_x + _v_y - _v_w * a / 2.0f; // Back Left
 8000ce6:	ed97 7a02 	vldr	s14, [r7, #8]
 8000cea:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cf2:	edd7 6a01 	vldr	s13, [r7, #4]
 8000cf6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000cfa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000cfe:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000d02:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d0a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Convert linear speed (cm/s) to RPS
    float w1 = v1 / (M_PI * wheel_diameter); // cm/s → RPS
 8000d0e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000d12:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d16:	4b34      	ldr	r3, [pc, #208]	@ (8000de8 <_ZN7Chassis18mecan_IK_transformEfff+0x1a8>)
 8000d18:	edd3 7a00 	vldr	s15, [r3]
 8000d1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d20:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 8000dd8 <_ZN7Chassis18mecan_IK_transformEfff+0x198>
 8000d24:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d28:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d30:	edc7 7a08 	vstr	s15, [r7, #32]
    float w2 = v2 / (M_PI * wheel_diameter); // cm/s → RPS
 8000d34:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000d38:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000de8 <_ZN7Chassis18mecan_IK_transformEfff+0x1a8>)
 8000d3e:	edd3 7a00 	vldr	s15, [r3]
 8000d42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d46:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8000dd8 <_ZN7Chassis18mecan_IK_transformEfff+0x198>
 8000d4a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d4e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d52:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d56:	edc7 7a07 	vstr	s15, [r7, #28]
    float w3 = v3 / (M_PI * wheel_diameter); // cm/s → RPS
 8000d5a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000d5e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d62:	4b21      	ldr	r3, [pc, #132]	@ (8000de8 <_ZN7Chassis18mecan_IK_transformEfff+0x1a8>)
 8000d64:	edd3 7a00 	vldr	s15, [r3]
 8000d68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d6c:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8000dd8 <_ZN7Chassis18mecan_IK_transformEfff+0x198>
 8000d70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d74:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d7c:	edc7 7a06 	vstr	s15, [r7, #24]
    float w4 = v4 / (M_PI * wheel_diameter); // cm/s → RPS
 8000d80:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d84:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d88:	4b17      	ldr	r3, [pc, #92]	@ (8000de8 <_ZN7Chassis18mecan_IK_transformEfff+0x1a8>)
 8000d8a:	edd3 7a00 	vldr	s15, [r3]
 8000d8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d92:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8000dd8 <_ZN7Chassis18mecan_IK_transformEfff+0x198>
 8000d96:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d9a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000da2:	edc7 7a05 	vstr	s15, [r7, #20]

    wheel_FR.setspeed(w1);
 8000da6:	ed97 0a08 	vldr	s0, [r7, #32]
 8000daa:	4810      	ldr	r0, [pc, #64]	@ (8000dec <_ZN7Chassis18mecan_IK_transformEfff+0x1ac>)
 8000dac:	f011 ffca 	bl	8012d44 <_ZN8DC_motor8setspeedEf>
    wheel_FL.setspeed(w2);
 8000db0:	ed97 0a07 	vldr	s0, [r7, #28]
 8000db4:	480e      	ldr	r0, [pc, #56]	@ (8000df0 <_ZN7Chassis18mecan_IK_transformEfff+0x1b0>)
 8000db6:	f011 ffc5 	bl	8012d44 <_ZN8DC_motor8setspeedEf>
    wheel_BR.setspeed(w3);
 8000dba:	ed97 0a06 	vldr	s0, [r7, #24]
 8000dbe:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <_ZN7Chassis18mecan_IK_transformEfff+0x1b4>)
 8000dc0:	f011 ffc0 	bl	8012d44 <_ZN8DC_motor8setspeedEf>
    wheel_BL.setspeed(w4);
 8000dc4:	ed97 0a05 	vldr	s0, [r7, #20]
 8000dc8:	480b      	ldr	r0, [pc, #44]	@ (8000df8 <_ZN7Chassis18mecan_IK_transformEfff+0x1b8>)
 8000dca:	f011 ffbb 	bl	8012d44 <_ZN8DC_motor8setspeedEf>
}
 8000dce:	bf00      	nop
 8000dd0:	3740      	adds	r7, #64	@ 0x40
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	54442d18 	.word	0x54442d18
 8000ddc:	400921fb 	.word	0x400921fb
 8000de0:	24000004 	.word	0x24000004
 8000de4:	24000000 	.word	0x24000000
 8000de8:	24000008 	.word	0x24000008
 8000dec:	24000334 	.word	0x24000334
 8000df0:	240002d8 	.word	0x240002d8
 8000df4:	240003ec 	.word	0x240003ec
 8000df8:	24000390 	.word	0x24000390
 8000dfc:	00000000 	.word	0x00000000

08000e00 <_ZN7Chassis18mecan_FK_transformEv>:

void mecan_FK_transform() {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	@ 0x30
 8000e04:	af00      	add	r7, sp, #0
    // 獲取各輪子的轉速 (RPS - 每秒轉數)
    float w1 = wheel_FR.get_speed(); // RPS
 8000e06:	485c      	ldr	r0, [pc, #368]	@ (8000f78 <_ZN7Chassis18mecan_FK_transformEv+0x178>)
 8000e08:	f7ff fe4c 	bl	8000aa4 <_ZNK8DC_motor9get_speedEv>
 8000e0c:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
    float w2 = wheel_FL.get_speed(); // RPS
 8000e10:	485a      	ldr	r0, [pc, #360]	@ (8000f7c <_ZN7Chassis18mecan_FK_transformEv+0x17c>)
 8000e12:	f7ff fe47 	bl	8000aa4 <_ZNK8DC_motor9get_speedEv>
 8000e16:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    float w3 = wheel_BR.get_speed(); // RPS
 8000e1a:	4859      	ldr	r0, [pc, #356]	@ (8000f80 <_ZN7Chassis18mecan_FK_transformEv+0x180>)
 8000e1c:	f7ff fe42 	bl	8000aa4 <_ZNK8DC_motor9get_speedEv>
 8000e20:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float w4 = wheel_BL.get_speed(); // RPS
 8000e24:	4857      	ldr	r0, [pc, #348]	@ (8000f84 <_ZN7Chassis18mecan_FK_transformEv+0x184>)
 8000e26:	f7ff fe3d 	bl	8000aa4 <_ZNK8DC_motor9get_speedEv>
 8000e2a:	ed87 0a08 	vstr	s0, [r7, #32]
    
    // 從 RPS 轉換為線速度 (cm/s)
    // 線速度 = RPS × π × 輪子直徑
    float v1 = w1 * M_PI * wheel_diameter; // Front Right (cm/s)
 8000e2e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000e32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e36:	ed9f 6b4e 	vldr	d6, [pc, #312]	@ 8000f70 <_ZN7Chassis18mecan_FK_transformEv+0x170>
 8000e3a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e3e:	4b52      	ldr	r3, [pc, #328]	@ (8000f88 <_ZN7Chassis18mecan_FK_transformEv+0x188>)
 8000e40:	edd3 7a00 	vldr	s15, [r3]
 8000e44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e48:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e4c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e50:	edc7 7a07 	vstr	s15, [r7, #28]
    float v2 = w2 * M_PI * wheel_diameter; // Front Left (cm/s)
 8000e54:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000e58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e5c:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8000f70 <_ZN7Chassis18mecan_FK_transformEv+0x170>
 8000e60:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e64:	4b48      	ldr	r3, [pc, #288]	@ (8000f88 <_ZN7Chassis18mecan_FK_transformEv+0x188>)
 8000e66:	edd3 7a00 	vldr	s15, [r3]
 8000e6a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e6e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e72:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e76:	edc7 7a06 	vstr	s15, [r7, #24]
    float v3 = w3 * M_PI * wheel_diameter; // Back Right (cm/s)
 8000e7a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000e7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e82:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8000f70 <_ZN7Chassis18mecan_FK_transformEv+0x170>
 8000e86:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e8a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f88 <_ZN7Chassis18mecan_FK_transformEv+0x188>)
 8000e8c:	edd3 7a00 	vldr	s15, [r3]
 8000e90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e94:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e9c:	edc7 7a05 	vstr	s15, [r7, #20]
    float v4 = w4 * M_PI * wheel_diameter; // Back Left (cm/s)
 8000ea0:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ea4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ea8:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8000f70 <_ZN7Chassis18mecan_FK_transformEv+0x170>
 8000eac:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000eb0:	4b35      	ldr	r3, [pc, #212]	@ (8000f88 <_ZN7Chassis18mecan_FK_transformEv+0x188>)
 8000eb2:	edd3 7a00 	vldr	s15, [r3]
 8000eb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eba:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ebe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ec2:	edc7 7a04 	vstr	s15, [r7, #16]
    
    // 麥克納姆輪逆運動學：從輪速計算底盤速度
    float L = chassis_length; // cm
 8000ec6:	4b31      	ldr	r3, [pc, #196]	@ (8000f8c <_ZN7Chassis18mecan_FK_transformEv+0x18c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	60fb      	str	r3, [r7, #12]
    float W = chassis_width;  // cm
 8000ecc:	4b30      	ldr	r3, [pc, #192]	@ (8000f90 <_ZN7Chassis18mecan_FK_transformEv+0x190>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60bb      	str	r3, [r7, #8]
    float a = L + W; // cm (與正向運動學一致)
 8000ed2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ed6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ede:	edc7 7a01 	vstr	s15, [r7, #4]
    // v1 = -v_x + v_y + v_w * a/2 (Front Right)
    // v2 =  v_x + v_y - v_w * a/2 (Front Left)  
    // v3 =  v_x + v_y + v_w * a/2 (Back Right)
    // v4 = -v_x + v_y - v_w * a/2 (Back Left)
    
    v_x = (v2 + v3 - v1 - v4) / 4.0f;  // X方向線速度 (cm/s)
 8000ee2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ee6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eee:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ef2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ef6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000efa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000efe:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8000f02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f06:	4b23      	ldr	r3, [pc, #140]	@ (8000f94 <_ZN7Chassis18mecan_FK_transformEv+0x194>)
 8000f08:	edc3 7a00 	vstr	s15, [r3]
    v_y = (v1 + v2 + v3 + v4) / 4.0f;   // Y方向線速度 (cm/s)
 8000f0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f10:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f18:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f20:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f28:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8000f2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f30:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <_ZN7Chassis18mecan_FK_transformEv+0x198>)
 8000f32:	edc3 7a00 	vstr	s15, [r3]
    v_w = (v1 - v2 + v3 - v4) / (2.0f * a); // 角速度 (rad/s)
 8000f36:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f42:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f4e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f56:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <_ZN7Chassis18mecan_FK_transformEv+0x19c>)
 8000f60:	edc3 7a00 	vstr	s15, [r3]
}
 8000f64:	bf00      	nop
 8000f66:	3730      	adds	r7, #48	@ 0x30
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	f3af 8000 	nop.w
 8000f70:	54442d18 	.word	0x54442d18
 8000f74:	400921fb 	.word	0x400921fb
 8000f78:	24000334 	.word	0x24000334
 8000f7c:	240002d8 	.word	0x240002d8
 8000f80:	240003ec 	.word	0x240003ec
 8000f84:	24000390 	.word	0x24000390
 8000f88:	24000008 	.word	0x24000008
 8000f8c:	24000004 	.word	0x24000004
 8000f90:	24000000 	.word	0x24000000
 8000f94:	240002b8 	.word	0x240002b8
 8000f98:	240002bc 	.word	0x240002bc
 8000f9c:	240002c0 	.word	0x240002c0

08000fa0 <_ZN7Chassis12localizationEv>:


void localization() {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
    // 永遠執行 encoder 定位計算 (用於 map_x, map_y, theta)
    // 方向角轉換用
    float cos_t = cos(theta);
 8000fa6:	4b52      	ldr	r3, [pc, #328]	@ (80010f0 <_ZN7Chassis12localizationEv+0x150>)
 8000fa8:	edd3 7a00 	vldr	s15, [r3]
 8000fac:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb0:	f7ff fd58 	bl	8000a64 <_ZSt3cosf>
 8000fb4:	ed87 0a01 	vstr	s0, [r7, #4]
    float sin_t = sin(theta);
 8000fb8:	4b4d      	ldr	r3, [pc, #308]	@ (80010f0 <_ZN7Chassis12localizationEv+0x150>)
 8000fba:	edd3 7a00 	vldr	s15, [r3]
 8000fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc2:	f7ff fd5f 	bl	8000a84 <_ZSt3sinf>
 8000fc6:	ed87 0a00 	vstr	s0, [r7]

    map_x += (v_x * cos_t - v_y * sin_t) * span;
 8000fca:	4b4a      	ldr	r3, [pc, #296]	@ (80010f4 <_ZN7Chassis12localizationEv+0x154>)
 8000fcc:	ed93 7a00 	vldr	s14, [r3]
 8000fd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fd8:	4b47      	ldr	r3, [pc, #284]	@ (80010f8 <_ZN7Chassis12localizationEv+0x158>)
 8000fda:	edd3 6a00 	vldr	s13, [r3]
 8000fde:	edd7 7a00 	vldr	s15, [r7]
 8000fe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fea:	4b44      	ldr	r3, [pc, #272]	@ (80010fc <_ZN7Chassis12localizationEv+0x15c>)
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ff4:	4b42      	ldr	r3, [pc, #264]	@ (8001100 <_ZN7Chassis12localizationEv+0x160>)
 8000ff6:	edd3 7a00 	vldr	s15, [r3]
 8000ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffe:	4b40      	ldr	r3, [pc, #256]	@ (8001100 <_ZN7Chassis12localizationEv+0x160>)
 8001000:	edc3 7a00 	vstr	s15, [r3]
    map_y += (v_x * sin_t + v_y * cos_t) * span;
 8001004:	4b3b      	ldr	r3, [pc, #236]	@ (80010f4 <_ZN7Chassis12localizationEv+0x154>)
 8001006:	ed93 7a00 	vldr	s14, [r3]
 800100a:	edd7 7a00 	vldr	s15, [r7]
 800100e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001012:	4b39      	ldr	r3, [pc, #228]	@ (80010f8 <_ZN7Chassis12localizationEv+0x158>)
 8001014:	edd3 6a00 	vldr	s13, [r3]
 8001018:	edd7 7a01 	vldr	s15, [r7, #4]
 800101c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001020:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001024:	4b35      	ldr	r3, [pc, #212]	@ (80010fc <_ZN7Chassis12localizationEv+0x15c>)
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800102e:	4b35      	ldr	r3, [pc, #212]	@ (8001104 <_ZN7Chassis12localizationEv+0x164>)
 8001030:	edd3 7a00 	vldr	s15, [r3]
 8001034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001038:	4b32      	ldr	r3, [pc, #200]	@ (8001104 <_ZN7Chassis12localizationEv+0x164>)
 800103a:	edc3 7a00 	vstr	s15, [r3]
    theta += v_w * span;
 800103e:	4b32      	ldr	r3, [pc, #200]	@ (8001108 <_ZN7Chassis12localizationEv+0x168>)
 8001040:	ed93 7a00 	vldr	s14, [r3]
 8001044:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <_ZN7Chassis12localizationEv+0x15c>)
 8001046:	edd3 7a00 	vldr	s15, [r3]
 800104a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104e:	4b28      	ldr	r3, [pc, #160]	@ (80010f0 <_ZN7Chassis12localizationEv+0x150>)
 8001050:	edd3 7a00 	vldr	s15, [r3]
 8001054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001058:	4b25      	ldr	r3, [pc, #148]	@ (80010f0 <_ZN7Chassis12localizationEv+0x150>)
 800105a:	edc3 7a00 	vstr	s15, [r3]

    if (theta > M_PI) {
 800105e:	4b24      	ldr	r3, [pc, #144]	@ (80010f0 <_ZN7Chassis12localizationEv+0x150>)
 8001060:	edd3 7a00 	vldr	s15, [r3]
 8001064:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001068:	ed9f 6b1b 	vldr	d6, [pc, #108]	@ 80010d8 <_ZN7Chassis12localizationEv+0x138>
 800106c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001074:	dd0e      	ble.n	8001094 <_ZN7Chassis12localizationEv+0xf4>
        theta -= 2 * M_PI;
 8001076:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <_ZN7Chassis12localizationEv+0x150>)
 8001078:	edd3 7a00 	vldr	s15, [r3]
 800107c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001080:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 80010e0 <_ZN7Chassis12localizationEv+0x140>
 8001084:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001088:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800108c:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <_ZN7Chassis12localizationEv+0x150>)
 800108e:	edc3 7a00 	vstr	s15, [r3]
    } else if (theta < -M_PI) {
        theta += 2 * M_PI;
    }
}
 8001092:	e01a      	b.n	80010ca <_ZN7Chassis12localizationEv+0x12a>
    } else if (theta < -M_PI) {
 8001094:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <_ZN7Chassis12localizationEv+0x150>)
 8001096:	edd3 7a00 	vldr	s15, [r3]
 800109a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800109e:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 80010e8 <_ZN7Chassis12localizationEv+0x148>
 80010a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	d400      	bmi.n	80010ae <_ZN7Chassis12localizationEv+0x10e>
}
 80010ac:	e00d      	b.n	80010ca <_ZN7Chassis12localizationEv+0x12a>
        theta += 2 * M_PI;
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <_ZN7Chassis12localizationEv+0x150>)
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010b8:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80010e0 <_ZN7Chassis12localizationEv+0x140>
 80010bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010c4:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <_ZN7Chassis12localizationEv+0x150>)
 80010c6:	edc3 7a00 	vstr	s15, [r3]
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	f3af 8000 	nop.w
 80010d8:	54442d18 	.word	0x54442d18
 80010dc:	400921fb 	.word	0x400921fb
 80010e0:	54442d18 	.word	0x54442d18
 80010e4:	401921fb 	.word	0x401921fb
 80010e8:	54442d18 	.word	0x54442d18
 80010ec:	c00921fb 	.word	0xc00921fb
 80010f0:	240002b4 	.word	0x240002b4
 80010f4:	240002b8 	.word	0x240002b8
 80010f8:	240002bc 	.word	0x240002bc
 80010fc:	2400000c 	.word	0x2400000c
 8001100:	240002ac 	.word	0x240002ac
 8001104:	240002b0 	.word	0x240002b0
 8001108:	240002c0 	.word	0x240002c0

0800110c <_ZN7Chassis8setSpeedEfff>:
void transfer_to_localspeed(){
	cmd_v_x = (world_v_x * cos(theta)) + (world_v_y * sin(theta));
	cmd_v_y = (-world_v_x * sin(theta)) + (world_v_y * cos(theta));
}

void setSpeed(float _v_x, float _v_y, float _v_w){
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	ed87 0a03 	vstr	s0, [r7, #12]
 8001116:	edc7 0a02 	vstr	s1, [r7, #8]
 800111a:	ed87 1a01 	vstr	s2, [r7, #4]
    cmd_v_x = _v_x;
 800111e:	4a18      	ldr	r2, [pc, #96]	@ (8001180 <_ZN7Chassis8setSpeedEfff+0x74>)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6013      	str	r3, [r2, #0]
    cmd_v_y = _v_y;
 8001124:	4a17      	ldr	r2, [pc, #92]	@ (8001184 <_ZN7Chassis8setSpeedEfff+0x78>)
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	6013      	str	r3, [r2, #0]
    cmd_v_w = _v_w;
 800112a:	4a17      	ldr	r2, [pc, #92]	@ (8001188 <_ZN7Chassis8setSpeedEfff+0x7c>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6013      	str	r3, [r2, #0]
    
    // 如果設定速度為零，同時清零實際速度（防止殘留）
    if (_v_x == 0.0f && _v_y == 0.0f && _v_w == 0.0f) {
 8001130:	edd7 7a03 	vldr	s15, [r7, #12]
 8001134:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113c:	d119      	bne.n	8001172 <_ZN7Chassis8setSpeedEfff+0x66>
 800113e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001142:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114a:	d112      	bne.n	8001172 <_ZN7Chassis8setSpeedEfff+0x66>
 800114c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001150:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001158:	d10b      	bne.n	8001172 <_ZN7Chassis8setSpeedEfff+0x66>
        v_x = 0.0f;
 800115a:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <_ZN7Chassis8setSpeedEfff+0x80>)
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
        v_y = 0.0f;
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <_ZN7Chassis8setSpeedEfff+0x84>)
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
        v_w = 0.0f;
 800116a:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <_ZN7Chassis8setSpeedEfff+0x88>)
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
    }
}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	240002c4 	.word	0x240002c4
 8001184:	240002c8 	.word	0x240002c8
 8001188:	240002cc 	.word	0x240002cc
 800118c:	240002b8 	.word	0x240002b8
 8001190:	240002bc 	.word	0x240002bc
 8001194:	240002c0 	.word	0x240002c0

08001198 <_ZN7Chassis11updateSpeedEv>:

void updateSpeed(){
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
    mecan_IK_transform(cmd_v_x,cmd_v_y,cmd_v_w);
 800119c:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <_ZN7Chassis11updateSpeedEv+0x70>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <_ZN7Chassis11updateSpeedEv+0x74>)
 80011a4:	ed93 7a00 	vldr	s14, [r3]
 80011a8:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <_ZN7Chassis11updateSpeedEv+0x78>)
 80011aa:	edd3 6a00 	vldr	s13, [r3]
 80011ae:	eeb0 1a66 	vmov.f32	s2, s13
 80011b2:	eef0 0a47 	vmov.f32	s1, s14
 80011b6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ba:	f7ff fd41 	bl	8000c40 <_ZN7Chassis18mecan_IK_transformEfff>
    wheel_FR.PI_run();
 80011be:	4815      	ldr	r0, [pc, #84]	@ (8001214 <_ZN7Chassis11updateSpeedEv+0x7c>)
 80011c0:	f011 fc8a 	bl	8012ad8 <_ZN8DC_motor6PI_runEv>
    wheel_FL.PI_run();
 80011c4:	4814      	ldr	r0, [pc, #80]	@ (8001218 <_ZN7Chassis11updateSpeedEv+0x80>)
 80011c6:	f011 fc87 	bl	8012ad8 <_ZN8DC_motor6PI_runEv>
    wheel_BR.PI_run();
 80011ca:	4814      	ldr	r0, [pc, #80]	@ (800121c <_ZN7Chassis11updateSpeedEv+0x84>)
 80011cc:	f011 fc84 	bl	8012ad8 <_ZN8DC_motor6PI_runEv>
    wheel_BL.PI_run();
 80011d0:	4813      	ldr	r0, [pc, #76]	@ (8001220 <_ZN7Chassis11updateSpeedEv+0x88>)
 80011d2:	f011 fc81 	bl	8012ad8 <_ZN8DC_motor6PI_runEv>
    wheel_FR.updateSpeed(1);
 80011d6:	2101      	movs	r1, #1
 80011d8:	480e      	ldr	r0, [pc, #56]	@ (8001214 <_ZN7Chassis11updateSpeedEv+0x7c>)
 80011da:	f011 fdc2 	bl	8012d62 <_ZN8DC_motor11updateSpeedEi>
    wheel_FL.updateSpeed(-1);
 80011de:	f04f 31ff 	mov.w	r1, #4294967295
 80011e2:	480d      	ldr	r0, [pc, #52]	@ (8001218 <_ZN7Chassis11updateSpeedEv+0x80>)
 80011e4:	f011 fdbd 	bl	8012d62 <_ZN8DC_motor11updateSpeedEi>
    wheel_BR.updateSpeed(1);
 80011e8:	2101      	movs	r1, #1
 80011ea:	480c      	ldr	r0, [pc, #48]	@ (800121c <_ZN7Chassis11updateSpeedEv+0x84>)
 80011ec:	f011 fdb9 	bl	8012d62 <_ZN8DC_motor11updateSpeedEi>
    wheel_BL.updateSpeed(-1);
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	480a      	ldr	r0, [pc, #40]	@ (8001220 <_ZN7Chassis11updateSpeedEv+0x88>)
 80011f6:	f011 fdb4 	bl	8012d62 <_ZN8DC_motor11updateSpeedEi>
    mecan_FK_transform();
 80011fa:	f7ff fe01 	bl	8000e00 <_ZN7Chassis18mecan_FK_transformEv>
    localization();
 80011fe:	f7ff fecf 	bl	8000fa0 <_ZN7Chassis12localizationEv>
    
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	240002c4 	.word	0x240002c4
 800120c:	240002c8 	.word	0x240002c8
 8001210:	240002cc 	.word	0x240002cc
 8001214:	24000334 	.word	0x24000334
 8001218:	240002d8 	.word	0x240002d8
 800121c:	240003ec 	.word	0x240003ec
 8001220:	24000390 	.word	0x24000390

08001224 <_Z41__static_initialization_and_destruction_0v>:


}
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af04      	add	r7, sp, #16
DC_motor wheel_FL ={&htim1,GPIOG,GPIO_PIN_11,&htim5,TIM_CHANNEL_1,4,20,1};
 800122a:	2301      	movs	r3, #1
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	2300      	movs	r3, #0
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	4b21      	ldr	r3, [pc, #132]	@ (80012b8 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800123a:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800123e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001242:	4a1e      	ldr	r2, [pc, #120]	@ (80012bc <_Z41__static_initialization_and_destruction_0v+0x98>)
 8001244:	491e      	ldr	r1, [pc, #120]	@ (80012c0 <_Z41__static_initialization_and_destruction_0v+0x9c>)
 8001246:	481f      	ldr	r0, [pc, #124]	@ (80012c4 <_Z41__static_initialization_and_destruction_0v+0xa0>)
 8001248:	f7ff fc3c 	bl	8000ac4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor wheel_FR ={&htim2,GPIOG,GPIO_PIN_14,&htim5,TIM_CHANNEL_2,4,20,1};
 800124c:	2301      	movs	r3, #1
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	2304      	movs	r3, #4
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800125c:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001260:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001264:	4a15      	ldr	r2, [pc, #84]	@ (80012bc <_Z41__static_initialization_and_destruction_0v+0x98>)
 8001266:	4918      	ldr	r1, [pc, #96]	@ (80012c8 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 8001268:	4818      	ldr	r0, [pc, #96]	@ (80012cc <_Z41__static_initialization_and_destruction_0v+0xa8>)
 800126a:	f7ff fc2b 	bl	8000ac4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor wheel_BL ={&htim8,GPIOG,GPIO_PIN_15,&htim5,TIM_CHANNEL_3,4,20,0};
 800126e:	2300      	movs	r3, #0
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	2308      	movs	r3, #8
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800127e:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001282:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001286:	4a0d      	ldr	r2, [pc, #52]	@ (80012bc <_Z41__static_initialization_and_destruction_0v+0x98>)
 8001288:	4911      	ldr	r1, [pc, #68]	@ (80012d0 <_Z41__static_initialization_and_destruction_0v+0xac>)
 800128a:	4812      	ldr	r0, [pc, #72]	@ (80012d4 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 800128c:	f7ff fc1a 	bl	8000ac4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor wheel_BR ={&htim4,GPIOD,GPIO_PIN_15,&htim5,TIM_CHANNEL_4,4,20,1};
 8001290:	2301      	movs	r3, #1
 8001292:	9302      	str	r3, [sp, #8]
 8001294:	230c      	movs	r3, #12
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <_Z41__static_initialization_and_destruction_0v+0x94>)
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 80012a0:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 80012a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012a8:	4a0b      	ldr	r2, [pc, #44]	@ (80012d8 <_Z41__static_initialization_and_destruction_0v+0xb4>)
 80012aa:	490c      	ldr	r1, [pc, #48]	@ (80012dc <_Z41__static_initialization_and_destruction_0v+0xb8>)
 80012ac:	480c      	ldr	r0, [pc, #48]	@ (80012e0 <_Z41__static_initialization_and_destruction_0v+0xbc>)
 80012ae:	f7ff fc09 	bl	8000ac4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	240009c8 	.word	0x240009c8
 80012bc:	58021800 	.word	0x58021800
 80012c0:	24000898 	.word	0x24000898
 80012c4:	240002d8 	.word	0x240002d8
 80012c8:	240008e4 	.word	0x240008e4
 80012cc:	24000334 	.word	0x24000334
 80012d0:	24000aac 	.word	0x24000aac
 80012d4:	24000390 	.word	0x24000390
 80012d8:	58020c00 	.word	0x58020c00
 80012dc:	2400097c 	.word	0x2400097c
 80012e0:	240003ec 	.word	0x240003ec

080012e4 <_GLOBAL__sub_I_pinpoint>:
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	f7ff ff9c 	bl	8001224 <_Z41__static_initialization_and_destruction_0v>
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	0a5a      	lsrs	r2, r3, #9
 8001300:	490f      	ldr	r1, [pc, #60]	@ (8001340 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8001302:	fba1 1202 	umull	r1, r2, r1, r2
 8001306:	09d2      	lsrs	r2, r2, #7
 8001308:	490e      	ldr	r1, [pc, #56]	@ (8001344 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800130a:	fb01 f202 	mul.w	r2, r1, r2
 800130e:	1a9b      	subs	r3, r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	0a5b      	lsrs	r3, r3, #9
 8001318:	4a09      	ldr	r2, [pc, #36]	@ (8001340 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800131a:	fba2 2303 	umull	r2, r3, r2, r3
 800131e:	09db      	lsrs	r3, r3, #7
 8001320:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	441a      	add	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	601a      	str	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	00044b83 	.word	0x00044b83
 8001344:	3b9aca00 	.word	0x3b9aca00

08001348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800134c:	f003 f826 	bl	800439c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001350:	f000 f83a 	bl	80013c8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001354:	f000 f8a6 	bl	80014a4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001358:	f001 fa62 	bl	8002820 <MX_GPIO_Init>
  MX_DMA_Init();
 800135c:	f001 f9f0 	bl	8002740 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001360:	f001 f90a 	bl	8002578 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001364:	f000 fc90 	bl	8001c88 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001368:	f000 fce4 	bl	8001d34 <MX_TIM5_Init>
  MX_TIM6_Init();
 800136c:	f000 fd5e 	bl	8001e2c <MX_TIM6_Init>
  MX_TIM15_Init();
 8001370:	f000 fed0 	bl	8002114 <MX_TIM15_Init>
  MX_TIM1_Init();
 8001374:	f000 fb84 	bl	8001a80 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001378:	f000 fbdc 	bl	8001b34 <MX_TIM2_Init>
  MX_I2C1_Init();
 800137c:	f000 fb00 	bl	8001980 <MX_I2C1_Init>
  MX_ADC3_Init();
 8001380:	f000 f9d6 	bl	8001730 <MX_ADC3_Init>
  MX_TIM7_Init();
 8001384:	f000 fd88 	bl	8001e98 <MX_TIM7_Init>
  MX_I2C2_Init();
 8001388:	f000 fb3a 	bl	8001a00 <MX_I2C2_Init>
  MX_TIM12_Init();
 800138c:	f000 fe14 	bl	8001fb8 <MX_TIM12_Init>
  MX_TIM23_Init();
 8001390:	f001 f846 	bl	8002420 <MX_TIM23_Init>
  MX_TIM24_Init();
 8001394:	f001 f89a 	bl	80024cc <MX_TIM24_Init>
  MX_TIM8_Init();
 8001398:	f000 fdb4 	bl	8001f04 <MX_TIM8_Init>
  MX_TIM13_Init();
 800139c:	f000 fe72 	bl	8002084 <MX_TIM13_Init>
  MX_ADC1_Init();
 80013a0:	f000 f8b0 	bl	8001504 <MX_ADC1_Init>
  MX_TIM3_Init();
 80013a4:	f000 fc1a 	bl	8001bdc <MX_TIM3_Init>
  MX_TIM16_Init();
 80013a8:	f000 ff46 	bl	8002238 <MX_TIM16_Init>
  MX_TIM17_Init();
 80013ac:	f000 ffbe 	bl	800232c <MX_TIM17_Init>
  MX_ADC2_Init();
 80013b0:	f000 f94c 	bl	800164c <MX_ADC2_Init>
  MX_USART2_UART_Init();
 80013b4:	f001 f92c 	bl	8002610 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 80013b8:	f000 fe88 	bl	80020cc <MX_TIM14_Init>
  MX_USART3_UART_Init();
 80013bc:	f001 f974 	bl	80026a8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //hadc1.Init.DMAContinuousRequests = ENABLE;
  main_function();
 80013c0:	f001 fbd8 	bl	8002b74 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <main+0x7c>

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b09c      	sub	sp, #112	@ 0x70
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d2:	224c      	movs	r2, #76	@ 0x4c
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f019 fdc9 	bl	801af6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2220      	movs	r2, #32
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f019 fdc3 	bl	801af6e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013e8:	2002      	movs	r0, #2
 80013ea:	f009 ff11 	bl	800b210 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	4b2b      	ldr	r3, [pc, #172]	@ (80014a0 <SystemClock_Config+0xd8>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	4a2a      	ldr	r2, [pc, #168]	@ (80014a0 <SystemClock_Config+0xd8>)
 80013f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013fc:	6193      	str	r3, [r2, #24]
 80013fe:	4b28      	ldr	r3, [pc, #160]	@ (80014a0 <SystemClock_Config+0xd8>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800140a:	bf00      	nop
 800140c:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <SystemClock_Config+0xd8>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001414:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001418:	d1f8      	bne.n	800140c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141a:	2302      	movs	r3, #2
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800141e:	2301      	movs	r3, #1
 8001420:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001422:	2340      	movs	r3, #64	@ 0x40
 8001424:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001426:	2302      	movs	r3, #2
 8001428:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800142a:	2300      	movs	r3, #0
 800142c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800142e:	2304      	movs	r3, #4
 8001430:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001432:	2320      	movs	r3, #32
 8001434:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001436:	2301      	movs	r3, #1
 8001438:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800143a:	2302      	movs	r3, #2
 800143c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800143e:	2302      	movs	r3, #2
 8001440:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001442:	230c      	movs	r3, #12
 8001444:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001446:	2300      	movs	r3, #0
 8001448:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001452:	4618      	mov	r0, r3
 8001454:	f009 ff16 	bl	800b284 <HAL_RCC_OscConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800145e:	f001 fb35 	bl	8002acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001462:	233f      	movs	r3, #63	@ 0x3f
 8001464:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001466:	2303      	movs	r3, #3
 8001468:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800146e:	2308      	movs	r3, #8
 8001470:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001472:	2340      	movs	r3, #64	@ 0x40
 8001474:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001476:	2340      	movs	r3, #64	@ 0x40
 8001478:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800147a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800147e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001480:	2340      	movs	r3, #64	@ 0x40
 8001482:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	2103      	movs	r1, #3
 8001488:	4618      	mov	r0, r3
 800148a:	f00a fad5 	bl	800ba38 <HAL_RCC_ClockConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001494:	f001 fb1a 	bl	8002acc <Error_Handler>
  }
}
 8001498:	bf00      	nop
 800149a:	3770      	adds	r7, #112	@ 0x70
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	58024800 	.word	0x58024800

080014a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b0ae      	sub	sp, #184	@ 0xb8
 80014a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014aa:	463b      	mov	r3, r7
 80014ac:	22b8      	movs	r2, #184	@ 0xb8
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f019 fd5c 	bl	801af6e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014b6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 80014c2:	2320      	movs	r3, #32
 80014c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 80014c6:	2381      	movs	r3, #129	@ 0x81
 80014c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80014d6:	2340      	movs	r3, #64	@ 0x40
 80014d8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	4618      	mov	r0, r3
 80014ec:	f00a fe30 	bl	800c150 <HAL_RCCEx_PeriphCLKConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80014f6:	f001 fae9 	bl	8002acc <Error_Handler>
  }
}
 80014fa:	bf00      	nop
 80014fc:	37b8      	adds	r7, #184	@ 0xb8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	@ 0x30
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800150a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001516:	463b      	mov	r3, r7
 8001518:	2224      	movs	r2, #36	@ 0x24
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f019 fd26 	bl	801af6e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001522:	4b45      	ldr	r3, [pc, #276]	@ (8001638 <MX_ADC1_Init+0x134>)
 8001524:	4a45      	ldr	r2, [pc, #276]	@ (800163c <MX_ADC1_Init+0x138>)
 8001526:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001528:	4b43      	ldr	r3, [pc, #268]	@ (8001638 <MX_ADC1_Init+0x134>)
 800152a:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800152e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001530:	4b41      	ldr	r3, [pc, #260]	@ (8001638 <MX_ADC1_Init+0x134>)
 8001532:	2208      	movs	r2, #8
 8001534:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001536:	4b40      	ldr	r3, [pc, #256]	@ (8001638 <MX_ADC1_Init+0x134>)
 8001538:	2201      	movs	r2, #1
 800153a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800153c:	4b3e      	ldr	r3, [pc, #248]	@ (8001638 <MX_ADC1_Init+0x134>)
 800153e:	2204      	movs	r2, #4
 8001540:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001542:	4b3d      	ldr	r3, [pc, #244]	@ (8001638 <MX_ADC1_Init+0x134>)
 8001544:	2200      	movs	r2, #0
 8001546:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001548:	4b3b      	ldr	r3, [pc, #236]	@ (8001638 <MX_ADC1_Init+0x134>)
 800154a:	2201      	movs	r2, #1
 800154c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800154e:	4b3a      	ldr	r3, [pc, #232]	@ (8001638 <MX_ADC1_Init+0x134>)
 8001550:	2203      	movs	r2, #3
 8001552:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001554:	4b38      	ldr	r3, [pc, #224]	@ (8001638 <MX_ADC1_Init+0x134>)
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800155c:	4b36      	ldr	r3, [pc, #216]	@ (8001638 <MX_ADC1_Init+0x134>)
 800155e:	2200      	movs	r2, #0
 8001560:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001562:	4b35      	ldr	r3, [pc, #212]	@ (8001638 <MX_ADC1_Init+0x134>)
 8001564:	2200      	movs	r2, #0
 8001566:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001568:	4b33      	ldr	r3, [pc, #204]	@ (8001638 <MX_ADC1_Init+0x134>)
 800156a:	2200      	movs	r2, #0
 800156c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800156e:	4b32      	ldr	r3, [pc, #200]	@ (8001638 <MX_ADC1_Init+0x134>)
 8001570:	2200      	movs	r2, #0
 8001572:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001574:	4b30      	ldr	r3, [pc, #192]	@ (8001638 <MX_ADC1_Init+0x134>)
 8001576:	2200      	movs	r2, #0
 8001578:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = ENABLE;
 800157a:	4b2f      	ldr	r3, [pc, #188]	@ (8001638 <MX_ADC1_Init+0x134>)
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 2;
 8001582:	4b2d      	ldr	r3, [pc, #180]	@ (8001638 <MX_ADC1_Init+0x134>)
 8001584:	2202      	movs	r2, #2
 8001586:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8001588:	4b2b      	ldr	r3, [pc, #172]	@ (8001638 <MX_ADC1_Init+0x134>)
 800158a:	2200      	movs	r2, #0
 800158c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800158e:	4b2a      	ldr	r3, [pc, #168]	@ (8001638 <MX_ADC1_Init+0x134>)
 8001590:	2200      	movs	r2, #0
 8001592:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001594:	4b28      	ldr	r3, [pc, #160]	@ (8001638 <MX_ADC1_Init+0x134>)
 8001596:	2201      	movs	r2, #1
 8001598:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800159a:	4827      	ldr	r0, [pc, #156]	@ (8001638 <MX_ADC1_Init+0x134>)
 800159c:	f003 facc 	bl	8004b38 <HAL_ADC_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80015a6:	f001 fa91 	bl	8002acc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	4820      	ldr	r0, [pc, #128]	@ (8001638 <MX_ADC1_Init+0x134>)
 80015b6:	f004 ff33 	bl	8006420 <HAL_ADCEx_MultiModeConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80015c0:	f001 fa84 	bl	8002acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001640 <MX_ADC1_Init+0x13c>)
 80015c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015c8:	2306      	movs	r3, #6
 80015ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015cc:	2301      	movs	r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015d0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80015d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015d6:	2304      	movs	r3, #4
 80015d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	4619      	mov	r1, r3
 80015e8:	4813      	ldr	r0, [pc, #76]	@ (8001638 <MX_ADC1_Init+0x134>)
 80015ea:	f003 ffe1 	bl	80055b0 <HAL_ADC_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80015f4:	f001 fa6a 	bl	8002acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015f8:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <MX_ADC1_Init+0x140>)
 80015fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015fc:	230c      	movs	r3, #12
 80015fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001600:	463b      	mov	r3, r7
 8001602:	4619      	mov	r1, r3
 8001604:	480c      	ldr	r0, [pc, #48]	@ (8001638 <MX_ADC1_Init+0x134>)
 8001606:	f003 ffd3 	bl	80055b0 <HAL_ADC_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8001610:	f001 fa5c 	bl	8002acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8001614:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <MX_ADC1_Init+0x144>)
 8001616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001618:	2312      	movs	r3, #18
 800161a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800161c:	463b      	mov	r3, r7
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	@ (8001638 <MX_ADC1_Init+0x134>)
 8001622:	f003 ffc5 	bl	80055b0 <HAL_ADC_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 800162c:	f001 fa4e 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	3730      	adds	r7, #48	@ 0x30
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	24000448 	.word	0x24000448
 800163c:	40022000 	.word	0x40022000
 8001640:	10c00010 	.word	0x10c00010
 8001644:	21800100 	.word	0x21800100
 8001648:	4b840000 	.word	0x4b840000

0800164c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	@ 0x28
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2224      	movs	r2, #36	@ 0x24
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f019 fc88 	bl	801af6e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800165e:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <MX_ADC2_Init+0xd8>)
 8001660:	4a31      	ldr	r2, [pc, #196]	@ (8001728 <MX_ADC2_Init+0xdc>)
 8001662:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001664:	4b2f      	ldr	r3, [pc, #188]	@ (8001724 <MX_ADC2_Init+0xd8>)
 8001666:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800166a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800166c:	4b2d      	ldr	r3, [pc, #180]	@ (8001724 <MX_ADC2_Init+0xd8>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001672:	4b2c      	ldr	r3, [pc, #176]	@ (8001724 <MX_ADC2_Init+0xd8>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001678:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <MX_ADC2_Init+0xd8>)
 800167a:	2204      	movs	r2, #4
 800167c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800167e:	4b29      	ldr	r3, [pc, #164]	@ (8001724 <MX_ADC2_Init+0xd8>)
 8001680:	2200      	movs	r2, #0
 8001682:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001684:	4b27      	ldr	r3, [pc, #156]	@ (8001724 <MX_ADC2_Init+0xd8>)
 8001686:	2200      	movs	r2, #0
 8001688:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800168a:	4b26      	ldr	r3, [pc, #152]	@ (8001724 <MX_ADC2_Init+0xd8>)
 800168c:	2201      	movs	r2, #1
 800168e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001690:	4b24      	ldr	r3, [pc, #144]	@ (8001724 <MX_ADC2_Init+0xd8>)
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001698:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <MX_ADC2_Init+0xd8>)
 800169a:	2200      	movs	r2, #0
 800169c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800169e:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <MX_ADC2_Init+0xd8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <MX_ADC2_Init+0xd8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001724 <MX_ADC2_Init+0xd8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80016b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <MX_ADC2_Init+0xd8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = ENABLE;
 80016b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <MX_ADC2_Init+0xd8>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 80016be:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <MX_ADC2_Init+0xd8>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80016c4:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <MX_ADC2_Init+0xd8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80016ca:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <MX_ADC2_Init+0xd8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <MX_ADC2_Init+0xd8>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016d6:	4813      	ldr	r0, [pc, #76]	@ (8001724 <MX_ADC2_Init+0xd8>)
 80016d8:	f003 fa2e 	bl	8004b38 <HAL_ADC_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_ADC2_Init+0x9a>
  {
    Error_Handler();
 80016e2:	f001 f9f3 	bl	8002acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80016e6:	4b11      	ldr	r3, [pc, #68]	@ (800172c <MX_ADC2_Init+0xe0>)
 80016e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016ea:	2306      	movs	r3, #6
 80016ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016f2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80016f6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016f8:	2304      	movs	r3, #4
 80016fa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	@ (8001724 <MX_ADC2_Init+0xd8>)
 800170c:	f003 ff50 	bl	80055b0 <HAL_ADC_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8001716:	f001 f9d9 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	@ 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	240004b8 	.word	0x240004b8
 8001728:	40022100 	.word	0x40022100
 800172c:	0c900008 	.word	0x0c900008

08001730 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	@ 0x28
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2224      	movs	r2, #36	@ 0x24
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f019 fc16 	bl	801af6e <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001742:	4b82      	ldr	r3, [pc, #520]	@ (800194c <MX_ADC3_Init+0x21c>)
 8001744:	4a82      	ldr	r2, [pc, #520]	@ (8001950 <MX_ADC3_Init+0x220>)
 8001746:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8001748:	4b80      	ldr	r3, [pc, #512]	@ (800194c <MX_ADC3_Init+0x21c>)
 800174a:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 800174e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001750:	4b7e      	ldr	r3, [pc, #504]	@ (800194c <MX_ADC3_Init+0x21c>)
 8001752:	2208      	movs	r2, #8
 8001754:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001756:	4b7d      	ldr	r3, [pc, #500]	@ (800194c <MX_ADC3_Init+0x21c>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800175c:	4b7b      	ldr	r3, [pc, #492]	@ (800194c <MX_ADC3_Init+0x21c>)
 800175e:	2201      	movs	r2, #1
 8001760:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001762:	4b7a      	ldr	r3, [pc, #488]	@ (800194c <MX_ADC3_Init+0x21c>)
 8001764:	2204      	movs	r2, #4
 8001766:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001768:	4b78      	ldr	r3, [pc, #480]	@ (800194c <MX_ADC3_Init+0x21c>)
 800176a:	2200      	movs	r2, #0
 800176c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800176e:	4b77      	ldr	r3, [pc, #476]	@ (800194c <MX_ADC3_Init+0x21c>)
 8001770:	2201      	movs	r2, #1
 8001772:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 12;
 8001774:	4b75      	ldr	r3, [pc, #468]	@ (800194c <MX_ADC3_Init+0x21c>)
 8001776:	220c      	movs	r2, #12
 8001778:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800177a:	4b74      	ldr	r3, [pc, #464]	@ (800194c <MX_ADC3_Init+0x21c>)
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001782:	4b72      	ldr	r3, [pc, #456]	@ (800194c <MX_ADC3_Init+0x21c>)
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001788:	4b70      	ldr	r3, [pc, #448]	@ (800194c <MX_ADC3_Init+0x21c>)
 800178a:	2200      	movs	r2, #0
 800178c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800178e:	4b6f      	ldr	r3, [pc, #444]	@ (800194c <MX_ADC3_Init+0x21c>)
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001796:	4b6d      	ldr	r3, [pc, #436]	@ (800194c <MX_ADC3_Init+0x21c>)
 8001798:	2200      	movs	r2, #0
 800179a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800179c:	4b6b      	ldr	r3, [pc, #428]	@ (800194c <MX_ADC3_Init+0x21c>)
 800179e:	2203      	movs	r2, #3
 80017a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017a2:	4b6a      	ldr	r3, [pc, #424]	@ (800194c <MX_ADC3_Init+0x21c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80017a8:	4b68      	ldr	r3, [pc, #416]	@ (800194c <MX_ADC3_Init+0x21c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80017ae:	4b67      	ldr	r3, [pc, #412]	@ (800194c <MX_ADC3_Init+0x21c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80017b6:	4b65      	ldr	r3, [pc, #404]	@ (800194c <MX_ADC3_Init+0x21c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80017bc:	4863      	ldr	r0, [pc, #396]	@ (800194c <MX_ADC3_Init+0x21c>)
 80017be:	f003 f9bb 	bl	8004b38 <HAL_ADC_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 80017c8:	f001 f980 	bl	8002acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017cc:	2301      	movs	r3, #1
 80017ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017d0:	2306      	movs	r3, #6
 80017d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017d8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80017dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017de:	2304      	movs	r3, #4
 80017e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	4619      	mov	r1, r3
 80017ee:	4857      	ldr	r0, [pc, #348]	@ (800194c <MX_ADC3_Init+0x21c>)
 80017f0:	f003 fede 	bl	80055b0 <HAL_ADC_ConfigChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80017fa:	f001 f967 	bl	8002acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017fe:	4b55      	ldr	r3, [pc, #340]	@ (8001954 <MX_ADC3_Init+0x224>)
 8001800:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001802:	230c      	movs	r3, #12
 8001804:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	4619      	mov	r1, r3
 800180a:	4850      	ldr	r0, [pc, #320]	@ (800194c <MX_ADC3_Init+0x21c>)
 800180c:	f003 fed0 	bl	80055b0 <HAL_ADC_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001816:	f001 f959 	bl	8002acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800181a:	4b4f      	ldr	r3, [pc, #316]	@ (8001958 <MX_ADC3_Init+0x228>)
 800181c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800181e:	2312      	movs	r3, #18
 8001820:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	4619      	mov	r1, r3
 8001826:	4849      	ldr	r0, [pc, #292]	@ (800194c <MX_ADC3_Init+0x21c>)
 8001828:	f003 fec2 	bl	80055b0 <HAL_ADC_ConfigChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001832:	f001 f94b 	bl	8002acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001836:	4b49      	ldr	r3, [pc, #292]	@ (800195c <MX_ADC3_Init+0x22c>)
 8001838:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800183a:	2318      	movs	r3, #24
 800183c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	4619      	mov	r1, r3
 8001842:	4842      	ldr	r0, [pc, #264]	@ (800194c <MX_ADC3_Init+0x21c>)
 8001844:	f003 feb4 	bl	80055b0 <HAL_ADC_ConfigChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_ADC3_Init+0x122>
  {
    Error_Handler();
 800184e:	f001 f93d 	bl	8002acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001852:	4b43      	ldr	r3, [pc, #268]	@ (8001960 <MX_ADC3_Init+0x230>)
 8001854:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001856:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800185a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	4619      	mov	r1, r3
 8001860:	483a      	ldr	r0, [pc, #232]	@ (800194c <MX_ADC3_Init+0x21c>)
 8001862:	f003 fea5 	bl	80055b0 <HAL_ADC_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_ADC3_Init+0x140>
  {
    Error_Handler();
 800186c:	f001 f92e 	bl	8002acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001870:	4b3c      	ldr	r3, [pc, #240]	@ (8001964 <MX_ADC3_Init+0x234>)
 8001872:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001874:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001878:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	4619      	mov	r1, r3
 800187e:	4833      	ldr	r0, [pc, #204]	@ (800194c <MX_ADC3_Init+0x21c>)
 8001880:	f003 fe96 	bl	80055b0 <HAL_ADC_ConfigChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_ADC3_Init+0x15e>
  {
    Error_Handler();
 800188a:	f001 f91f 	bl	8002acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800188e:	4b36      	ldr	r3, [pc, #216]	@ (8001968 <MX_ADC3_Init+0x238>)
 8001890:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001892:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8001896:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	4619      	mov	r1, r3
 800189c:	482b      	ldr	r0, [pc, #172]	@ (800194c <MX_ADC3_Init+0x21c>)
 800189e:	f003 fe87 	bl	80055b0 <HAL_ADC_ConfigChannel>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_ADC3_Init+0x17c>
  {
    Error_Handler();
 80018a8:	f001 f910 	bl	8002acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80018ac:	4b2f      	ldr	r3, [pc, #188]	@ (800196c <MX_ADC3_Init+0x23c>)
 80018ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80018b0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80018b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4824      	ldr	r0, [pc, #144]	@ (800194c <MX_ADC3_Init+0x21c>)
 80018bc:	f003 fe78 	bl	80055b0 <HAL_ADC_ConfigChannel>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_ADC3_Init+0x19a>
  {
    Error_Handler();
 80018c6:	f001 f901 	bl	8002acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80018ca:	4b29      	ldr	r3, [pc, #164]	@ (8001970 <MX_ADC3_Init+0x240>)
 80018cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80018ce:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80018d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	4619      	mov	r1, r3
 80018d8:	481c      	ldr	r0, [pc, #112]	@ (800194c <MX_ADC3_Init+0x21c>)
 80018da:	f003 fe69 	bl	80055b0 <HAL_ADC_ConfigChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_ADC3_Init+0x1b8>
  {
    Error_Handler();
 80018e4:	f001 f8f2 	bl	8002acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80018e8:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <MX_ADC3_Init+0x244>)
 80018ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80018ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4815      	ldr	r0, [pc, #84]	@ (800194c <MX_ADC3_Init+0x21c>)
 80018f8:	f003 fe5a 	bl	80055b0 <HAL_ADC_ConfigChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_ADC3_Init+0x1d6>
  {
    Error_Handler();
 8001902:	f001 f8e3 	bl	8002acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001906:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <MX_ADC3_Init+0x248>)
 8001908:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800190a:	f240 2306 	movw	r3, #518	@ 0x206
 800190e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	4619      	mov	r1, r3
 8001914:	480d      	ldr	r0, [pc, #52]	@ (800194c <MX_ADC3_Init+0x21c>)
 8001916:	f003 fe4b 	bl	80055b0 <HAL_ADC_ConfigChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_ADC3_Init+0x1f4>
  {
    Error_Handler();
 8001920:	f001 f8d4 	bl	8002acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001924:	4b15      	ldr	r3, [pc, #84]	@ (800197c <MX_ADC3_Init+0x24c>)
 8001926:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001928:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 800192c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4806      	ldr	r0, [pc, #24]	@ (800194c <MX_ADC3_Init+0x21c>)
 8001934:	f003 fe3c 	bl	80055b0 <HAL_ADC_ConfigChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_ADC3_Init+0x212>
  {
    Error_Handler();
 800193e:	f001 f8c5 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	@ 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	24000528 	.word	0x24000528
 8001950:	58026000 	.word	0x58026000
 8001954:	04300002 	.word	0x04300002
 8001958:	08600004 	.word	0x08600004
 800195c:	0c900008 	.word	0x0c900008
 8001960:	10c00010 	.word	0x10c00010
 8001964:	14f00020 	.word	0x14f00020
 8001968:	19200040 	.word	0x19200040
 800196c:	1d500080 	.word	0x1d500080
 8001970:	21800100 	.word	0x21800100
 8001974:	25b00200 	.word	0x25b00200
 8001978:	2a000400 	.word	0x2a000400
 800197c:	2e300800 	.word	0x2e300800

08001980 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001984:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <MX_I2C1_Init+0x74>)
 8001986:	4a1c      	ldr	r2, [pc, #112]	@ (80019f8 <MX_I2C1_Init+0x78>)
 8001988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 800198a:	4b1a      	ldr	r3, [pc, #104]	@ (80019f4 <MX_I2C1_Init+0x74>)
 800198c:	4a1b      	ldr	r2, [pc, #108]	@ (80019fc <MX_I2C1_Init+0x7c>)
 800198e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001990:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <MX_I2C1_Init+0x74>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001996:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <MX_I2C1_Init+0x74>)
 8001998:	2201      	movs	r2, #1
 800199a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800199c:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <MX_I2C1_Init+0x74>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019a2:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <MX_I2C1_Init+0x74>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019a8:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <MX_I2C1_Init+0x74>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ae:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <MX_I2C1_Init+0x74>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <MX_I2C1_Init+0x74>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019ba:	480e      	ldr	r0, [pc, #56]	@ (80019f4 <MX_I2C1_Init+0x74>)
 80019bc:	f007 ff5c 	bl	8009878 <HAL_I2C_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019c6:	f001 f881 	bl	8002acc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019ca:	2100      	movs	r1, #0
 80019cc:	4809      	ldr	r0, [pc, #36]	@ (80019f4 <MX_I2C1_Init+0x74>)
 80019ce:	f009 fb87 	bl	800b0e0 <HAL_I2CEx_ConfigAnalogFilter>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019d8:	f001 f878 	bl	8002acc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019dc:	2100      	movs	r1, #0
 80019de:	4805      	ldr	r0, [pc, #20]	@ (80019f4 <MX_I2C1_Init+0x74>)
 80019e0:	f009 fbc9 	bl	800b176 <HAL_I2CEx_ConfigDigitalFilter>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019ea:	f001 f86f 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	24000688 	.word	0x24000688
 80019f8:	40005400 	.word	0x40005400
 80019fc:	20a0c4df 	.word	0x20a0c4df

08001a00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a04:	4b1b      	ldr	r3, [pc, #108]	@ (8001a74 <MX_I2C2_Init+0x74>)
 8001a06:	4a1c      	ldr	r2, [pc, #112]	@ (8001a78 <MX_I2C2_Init+0x78>)
 8001a08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a74 <MX_I2C2_Init+0x74>)
 8001a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001a7c <MX_I2C2_Init+0x7c>)
 8001a0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001a10:	4b18      	ldr	r3, [pc, #96]	@ (8001a74 <MX_I2C2_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a16:	4b17      	ldr	r3, [pc, #92]	@ (8001a74 <MX_I2C2_Init+0x74>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a1c:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <MX_I2C2_Init+0x74>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a22:	4b14      	ldr	r3, [pc, #80]	@ (8001a74 <MX_I2C2_Init+0x74>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <MX_I2C2_Init+0x74>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <MX_I2C2_Init+0x74>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	@ (8001a74 <MX_I2C2_Init+0x74>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a3a:	480e      	ldr	r0, [pc, #56]	@ (8001a74 <MX_I2C2_Init+0x74>)
 8001a3c:	f007 ff1c 	bl	8009878 <HAL_I2C_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a46:	f001 f841 	bl	8002acc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4809      	ldr	r0, [pc, #36]	@ (8001a74 <MX_I2C2_Init+0x74>)
 8001a4e:	f009 fb47 	bl	800b0e0 <HAL_I2CEx_ConfigAnalogFilter>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a58:	f001 f838 	bl	8002acc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4805      	ldr	r0, [pc, #20]	@ (8001a74 <MX_I2C2_Init+0x74>)
 8001a60:	f009 fb89 	bl	800b176 <HAL_I2CEx_ConfigDigitalFilter>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a6a:	f001 f82f 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	240006dc 	.word	0x240006dc
 8001a78:	40005800 	.word	0x40005800
 8001a7c:	20a0c4df 	.word	0x20a0c4df

08001a80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	@ 0x30
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	2224      	movs	r2, #36	@ 0x24
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f019 fa6d 	bl	801af6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a94:	463b      	mov	r3, r7
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a9e:	4b23      	ldr	r3, [pc, #140]	@ (8001b2c <MX_TIM1_Init+0xac>)
 8001aa0:	4a23      	ldr	r2, [pc, #140]	@ (8001b30 <MX_TIM1_Init+0xb0>)
 8001aa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001aa4:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <MX_TIM1_Init+0xac>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aaa:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <MX_TIM1_Init+0xac>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b2c <MX_TIM1_Init+0xac>)
 8001ab2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ab6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <MX_TIM1_Init+0xac>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001abe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <MX_TIM1_Init+0xac>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <MX_TIM1_Init+0xac>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aca:	2303      	movs	r3, #3
 8001acc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	4619      	mov	r1, r3
 8001af4:	480d      	ldr	r0, [pc, #52]	@ (8001b2c <MX_TIM1_Init+0xac>)
 8001af6:	f00d f9af 	bl	800ee58 <HAL_TIM_Encoder_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001b00:	f000 ffe4 	bl	8002acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b04:	2300      	movs	r3, #0
 8001b06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b10:	463b      	mov	r3, r7
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <MX_TIM1_Init+0xac>)
 8001b16:	f00e f8bf 	bl	800fc98 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001b20:	f000 ffd4 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	3730      	adds	r7, #48	@ 0x30
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	24000898 	.word	0x24000898
 8001b30:	40010000 	.word	0x40010000

08001b34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	@ 0x30
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	2224      	movs	r2, #36	@ 0x24
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f019 fa13 	bl	801af6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b48:	463b      	mov	r3, r7
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b52:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <MX_TIM2_Init+0xa4>)
 8001b54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd8 <MX_TIM2_Init+0xa4>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b60:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd8 <MX_TIM2_Init+0xa4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <MX_TIM2_Init+0xa4>)
 8001b68:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <MX_TIM2_Init+0xa4>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b74:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <MX_TIM2_Init+0xa4>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b82:	2301      	movs	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b92:	2301      	movs	r3, #1
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b9e:	f107 030c 	add.w	r3, r7, #12
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	480c      	ldr	r0, [pc, #48]	@ (8001bd8 <MX_TIM2_Init+0xa4>)
 8001ba6:	f00d f957 	bl	800ee58 <HAL_TIM_Encoder_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001bb0:	f000 ff8c 	bl	8002acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4805      	ldr	r0, [pc, #20]	@ (8001bd8 <MX_TIM2_Init+0xa4>)
 8001bc2:	f00e f869 	bl	800fc98 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001bcc:	f000 ff7e 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	3730      	adds	r7, #48	@ 0x30
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	240008e4 	.word	0x240008e4

08001bdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08c      	sub	sp, #48	@ 0x30
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001be2:	f107 030c 	add.w	r3, r7, #12
 8001be6:	2224      	movs	r2, #36	@ 0x24
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f019 f9bf 	bl	801af6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bfa:	4b21      	ldr	r3, [pc, #132]	@ (8001c80 <MX_TIM3_Init+0xa4>)
 8001bfc:	4a21      	ldr	r2, [pc, #132]	@ (8001c84 <MX_TIM3_Init+0xa8>)
 8001bfe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c00:	4b1f      	ldr	r3, [pc, #124]	@ (8001c80 <MX_TIM3_Init+0xa4>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c06:	4b1e      	ldr	r3, [pc, #120]	@ (8001c80 <MX_TIM3_Init+0xa4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c80 <MX_TIM3_Init+0xa4>)
 8001c0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c14:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <MX_TIM3_Init+0xa4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1a:	4b19      	ldr	r3, [pc, #100]	@ (8001c80 <MX_TIM3_Init+0xa4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c20:	2303      	movs	r3, #3
 8001c22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	4619      	mov	r1, r3
 8001c4a:	480d      	ldr	r0, [pc, #52]	@ (8001c80 <MX_TIM3_Init+0xa4>)
 8001c4c:	f00d f904 	bl	800ee58 <HAL_TIM_Encoder_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c56:	f000 ff39 	bl	8002acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c62:	463b      	mov	r3, r7
 8001c64:	4619      	mov	r1, r3
 8001c66:	4806      	ldr	r0, [pc, #24]	@ (8001c80 <MX_TIM3_Init+0xa4>)
 8001c68:	f00e f816 	bl	800fc98 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c72:	f000 ff2b 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	3730      	adds	r7, #48	@ 0x30
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	24000930 	.word	0x24000930
 8001c84:	40000400 	.word	0x40000400

08001c88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08c      	sub	sp, #48	@ 0x30
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	2224      	movs	r2, #36	@ 0x24
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f019 f969 	bl	801af6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c9c:	463b      	mov	r3, r7
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ca6:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <MX_TIM4_Init+0xa4>)
 8001ca8:	4a21      	ldr	r2, [pc, #132]	@ (8001d30 <MX_TIM4_Init+0xa8>)
 8001caa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001cac:	4b1f      	ldr	r3, [pc, #124]	@ (8001d2c <MX_TIM4_Init+0xa4>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d2c <MX_TIM4_Init+0xa4>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <MX_TIM4_Init+0xa4>)
 8001cba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cbe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d2c <MX_TIM4_Init+0xa4>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc6:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <MX_TIM4_Init+0xa4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001cf0:	f107 030c 	add.w	r3, r7, #12
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480d      	ldr	r0, [pc, #52]	@ (8001d2c <MX_TIM4_Init+0xa4>)
 8001cf8:	f00d f8ae 	bl	800ee58 <HAL_TIM_Encoder_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001d02:	f000 fee3 	bl	8002acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d0e:	463b      	mov	r3, r7
 8001d10:	4619      	mov	r1, r3
 8001d12:	4806      	ldr	r0, [pc, #24]	@ (8001d2c <MX_TIM4_Init+0xa4>)
 8001d14:	f00d ffc0 	bl	800fc98 <HAL_TIMEx_MasterConfigSynchronization>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001d1e:	f000 fed5 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	3730      	adds	r7, #48	@ 0x30
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2400097c 	.word	0x2400097c
 8001d30:	40000800 	.word	0x40000800

08001d34 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	@ 0x28
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3a:	f107 031c 	add.w	r3, r7, #28
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d46:	463b      	mov	r3, r7
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
 8001d54:	615a      	str	r2, [r3, #20]
 8001d56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d58:	4b32      	ldr	r3, [pc, #200]	@ (8001e24 <MX_TIM5_Init+0xf0>)
 8001d5a:	4a33      	ldr	r2, [pc, #204]	@ (8001e28 <MX_TIM5_Init+0xf4>)
 8001d5c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 31;
 8001d5e:	4b31      	ldr	r3, [pc, #196]	@ (8001e24 <MX_TIM5_Init+0xf0>)
 8001d60:	221f      	movs	r2, #31
 8001d62:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d64:	4b2f      	ldr	r3, [pc, #188]	@ (8001e24 <MX_TIM5_Init+0xf0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 799;
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e24 <MX_TIM5_Init+0xf0>)
 8001d6c:	f240 321f 	movw	r2, #799	@ 0x31f
 8001d70:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d72:	4b2c      	ldr	r3, [pc, #176]	@ (8001e24 <MX_TIM5_Init+0xf0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d78:	4b2a      	ldr	r3, [pc, #168]	@ (8001e24 <MX_TIM5_Init+0xf0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001d7e:	4829      	ldr	r0, [pc, #164]	@ (8001e24 <MX_TIM5_Init+0xf0>)
 8001d80:	f00c feaa 	bl	800ead8 <HAL_TIM_PWM_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001d8a:	f000 fe9f 	bl	8002acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d96:	f107 031c 	add.w	r3, r7, #28
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4821      	ldr	r0, [pc, #132]	@ (8001e24 <MX_TIM5_Init+0xf0>)
 8001d9e:	f00d ff7b 	bl	800fc98 <HAL_TIMEx_MasterConfigSynchronization>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001da8:	f000 fe90 	bl	8002acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dac:	2360      	movs	r3, #96	@ 0x60
 8001dae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4818      	ldr	r0, [pc, #96]	@ (8001e24 <MX_TIM5_Init+0xf0>)
 8001dc4:	f00d fa84 	bl	800f2d0 <HAL_TIM_PWM_ConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001dce:	f000 fe7d 	bl	8002acc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dd2:	463b      	mov	r3, r7
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4812      	ldr	r0, [pc, #72]	@ (8001e24 <MX_TIM5_Init+0xf0>)
 8001dda:	f00d fa79 	bl	800f2d0 <HAL_TIM_PWM_ConfigChannel>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001de4:	f000 fe72 	bl	8002acc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001de8:	463b      	mov	r3, r7
 8001dea:	2208      	movs	r2, #8
 8001dec:	4619      	mov	r1, r3
 8001dee:	480d      	ldr	r0, [pc, #52]	@ (8001e24 <MX_TIM5_Init+0xf0>)
 8001df0:	f00d fa6e 	bl	800f2d0 <HAL_TIM_PWM_ConfigChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8001dfa:	f000 fe67 	bl	8002acc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dfe:	463b      	mov	r3, r7
 8001e00:	220c      	movs	r2, #12
 8001e02:	4619      	mov	r1, r3
 8001e04:	4807      	ldr	r0, [pc, #28]	@ (8001e24 <MX_TIM5_Init+0xf0>)
 8001e06:	f00d fa63 	bl	800f2d0 <HAL_TIM_PWM_ConfigChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM5_Init+0xe0>
  {
    Error_Handler();
 8001e10:	f000 fe5c 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e14:	4803      	ldr	r0, [pc, #12]	@ (8001e24 <MX_TIM5_Init+0xf0>)
 8001e16:	f001 fd23 	bl	8003860 <HAL_TIM_MspPostInit>

}
 8001e1a:	bf00      	nop
 8001e1c:	3728      	adds	r7, #40	@ 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	240009c8 	.word	0x240009c8
 8001e28:	40000c00 	.word	0x40000c00

08001e2c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e3c:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <MX_TIM6_Init+0x64>)
 8001e3e:	4a15      	ldr	r2, [pc, #84]	@ (8001e94 <MX_TIM6_Init+0x68>)
 8001e40:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 255;
 8001e42:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <MX_TIM6_Init+0x64>)
 8001e44:	22ff      	movs	r2, #255	@ 0xff
 8001e46:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e48:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <MX_TIM6_Init+0x64>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001e4e:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <MX_TIM6_Init+0x64>)
 8001e50:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e54:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <MX_TIM6_Init+0x64>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e5c:	480c      	ldr	r0, [pc, #48]	@ (8001e90 <MX_TIM6_Init+0x64>)
 8001e5e:	f00c fd5d 	bl	800e91c <HAL_TIM_Base_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001e68:	f000 fe30 	bl	8002acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	4619      	mov	r1, r3
 8001e78:	4805      	ldr	r0, [pc, #20]	@ (8001e90 <MX_TIM6_Init+0x64>)
 8001e7a:	f00d ff0d 	bl	800fc98 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e84:	f000 fe22 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	24000a14 	.word	0x24000a14
 8001e94:	40001000 	.word	0x40001000

08001e98 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ea8:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <MX_TIM7_Init+0x64>)
 8001eaa:	4a15      	ldr	r2, [pc, #84]	@ (8001f00 <MX_TIM7_Init+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 255;
 8001eae:	4b13      	ldr	r3, [pc, #76]	@ (8001efc <MX_TIM7_Init+0x64>)
 8001eb0:	22ff      	movs	r2, #255	@ 0xff
 8001eb2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <MX_TIM7_Init+0x64>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001eba:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <MX_TIM7_Init+0x64>)
 8001ebc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ec0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <MX_TIM7_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ec8:	480c      	ldr	r0, [pc, #48]	@ (8001efc <MX_TIM7_Init+0x64>)
 8001eca:	f00c fd27 	bl	800e91c <HAL_TIM_Base_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001ed4:	f000 fdfa 	bl	8002acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	@ (8001efc <MX_TIM7_Init+0x64>)
 8001ee6:	f00d fed7 	bl	800fc98 <HAL_TIMEx_MasterConfigSynchronization>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001ef0:	f000 fdec 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	24000a60 	.word	0x24000a60
 8001f00:	40001400 	.word	0x40001400

08001f04 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	@ 0x30
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f0a:	f107 030c 	add.w	r3, r7, #12
 8001f0e:	2224      	movs	r2, #36	@ 0x24
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f019 f82b 	bl	801af6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f18:	463b      	mov	r3, r7
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f22:	4b23      	ldr	r3, [pc, #140]	@ (8001fb0 <MX_TIM8_Init+0xac>)
 8001f24:	4a23      	ldr	r2, [pc, #140]	@ (8001fb4 <MX_TIM8_Init+0xb0>)
 8001f26:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f28:	4b21      	ldr	r3, [pc, #132]	@ (8001fb0 <MX_TIM8_Init+0xac>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2e:	4b20      	ldr	r3, [pc, #128]	@ (8001fb0 <MX_TIM8_Init+0xac>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001f34:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb0 <MX_TIM8_Init+0xac>)
 8001f36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f3a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb0 <MX_TIM8_Init+0xac>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f42:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb0 <MX_TIM8_Init+0xac>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f48:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <MX_TIM8_Init+0xac>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f56:	2301      	movs	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f66:	2301      	movs	r3, #1
 8001f68:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	4619      	mov	r1, r3
 8001f78:	480d      	ldr	r0, [pc, #52]	@ (8001fb0 <MX_TIM8_Init+0xac>)
 8001f7a:	f00c ff6d 	bl	800ee58 <HAL_TIM_Encoder_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001f84:	f000 fda2 	bl	8002acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f94:	463b      	mov	r3, r7
 8001f96:	4619      	mov	r1, r3
 8001f98:	4805      	ldr	r0, [pc, #20]	@ (8001fb0 <MX_TIM8_Init+0xac>)
 8001f9a:	f00d fe7d 	bl	800fc98 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001fa4:	f000 fd92 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	3730      	adds	r7, #48	@ 0x30
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	24000aac 	.word	0x24000aac
 8001fb4:	40010400 	.word	0x40010400

08001fb8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fca:	463b      	mov	r3, r7
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
 8001fd8:	615a      	str	r2, [r3, #20]
 8001fda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001fdc:	4b27      	ldr	r3, [pc, #156]	@ (800207c <MX_TIM12_Init+0xc4>)
 8001fde:	4a28      	ldr	r2, [pc, #160]	@ (8002080 <MX_TIM12_Init+0xc8>)
 8001fe0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001fe2:	4b26      	ldr	r3, [pc, #152]	@ (800207c <MX_TIM12_Init+0xc4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe8:	4b24      	ldr	r3, [pc, #144]	@ (800207c <MX_TIM12_Init+0xc4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001fee:	4b23      	ldr	r3, [pc, #140]	@ (800207c <MX_TIM12_Init+0xc4>)
 8001ff0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ff4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff6:	4b21      	ldr	r3, [pc, #132]	@ (800207c <MX_TIM12_Init+0xc4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800207c <MX_TIM12_Init+0xc4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002002:	481e      	ldr	r0, [pc, #120]	@ (800207c <MX_TIM12_Init+0xc4>)
 8002004:	f00c fd68 	bl	800ead8 <HAL_TIM_PWM_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 800200e:	f000 fd5d 	bl	8002acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	4816      	ldr	r0, [pc, #88]	@ (800207c <MX_TIM12_Init+0xc4>)
 8002022:	f00d fe39 	bl	800fc98 <HAL_TIMEx_MasterConfigSynchronization>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800202c:	f000 fd4e 	bl	8002acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002030:	2360      	movs	r3, #96	@ 0x60
 8002032:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002040:	463b      	mov	r3, r7
 8002042:	2200      	movs	r2, #0
 8002044:	4619      	mov	r1, r3
 8002046:	480d      	ldr	r0, [pc, #52]	@ (800207c <MX_TIM12_Init+0xc4>)
 8002048:	f00d f942 	bl	800f2d0 <HAL_TIM_PWM_ConfigChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8002052:	f000 fd3b 	bl	8002acc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002056:	463b      	mov	r3, r7
 8002058:	2204      	movs	r2, #4
 800205a:	4619      	mov	r1, r3
 800205c:	4807      	ldr	r0, [pc, #28]	@ (800207c <MX_TIM12_Init+0xc4>)
 800205e:	f00d f937 	bl	800f2d0 <HAL_TIM_PWM_ConfigChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM12_Init+0xb4>
  {
    Error_Handler();
 8002068:	f000 fd30 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800206c:	4803      	ldr	r0, [pc, #12]	@ (800207c <MX_TIM12_Init+0xc4>)
 800206e:	f001 fbf7 	bl	8003860 <HAL_TIM_MspPostInit>

}
 8002072:	bf00      	nop
 8002074:	3728      	adds	r7, #40	@ 0x28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	24000af8 	.word	0x24000af8
 8002080:	40001800 	.word	0x40001800

08002084 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002088:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <MX_TIM13_Init+0x40>)
 800208a:	4a0f      	ldr	r2, [pc, #60]	@ (80020c8 <MX_TIM13_Init+0x44>)
 800208c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 255;
 800208e:	4b0d      	ldr	r3, [pc, #52]	@ (80020c4 <MX_TIM13_Init+0x40>)
 8002090:	22ff      	movs	r2, #255	@ 0xff
 8002092:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002094:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <MX_TIM13_Init+0x40>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800209a:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <MX_TIM13_Init+0x40>)
 800209c:	f242 720f 	movw	r2, #9999	@ 0x270f
 80020a0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a2:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <MX_TIM13_Init+0x40>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <MX_TIM13_Init+0x40>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80020ae:	4805      	ldr	r0, [pc, #20]	@ (80020c4 <MX_TIM13_Init+0x40>)
 80020b0:	f00c fc34 	bl	800e91c <HAL_TIM_Base_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80020ba:	f000 fd07 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	24000b44 	.word	0x24000b44
 80020c8:	40001c00 	.word	0x40001c00

080020cc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80020d0:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <MX_TIM14_Init+0x40>)
 80020d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002110 <MX_TIM14_Init+0x44>)
 80020d4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 255;
 80020d6:	4b0d      	ldr	r3, [pc, #52]	@ (800210c <MX_TIM14_Init+0x40>)
 80020d8:	22ff      	movs	r2, #255	@ 0xff
 80020da:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <MX_TIM14_Init+0x40>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 80020e2:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <MX_TIM14_Init+0x40>)
 80020e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020e8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ea:	4b08      	ldr	r3, [pc, #32]	@ (800210c <MX_TIM14_Init+0x40>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <MX_TIM14_Init+0x40>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80020f6:	4805      	ldr	r0, [pc, #20]	@ (800210c <MX_TIM14_Init+0x40>)
 80020f8:	f00c fc10 	bl	800e91c <HAL_TIM_Base_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002102:	f000 fce3 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	24000b90 	.word	0x24000b90
 8002110:	40002000 	.word	0x40002000

08002114 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b098      	sub	sp, #96	@ 0x60
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800211a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002126:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	611a      	str	r2, [r3, #16]
 8002136:	615a      	str	r2, [r3, #20]
 8002138:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2234      	movs	r2, #52	@ 0x34
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f018 ff14 	bl	801af6e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002146:	4b3a      	ldr	r3, [pc, #232]	@ (8002230 <MX_TIM15_Init+0x11c>)
 8002148:	4a3a      	ldr	r2, [pc, #232]	@ (8002234 <MX_TIM15_Init+0x120>)
 800214a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 31;
 800214c:	4b38      	ldr	r3, [pc, #224]	@ (8002230 <MX_TIM15_Init+0x11c>)
 800214e:	221f      	movs	r2, #31
 8002150:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002152:	4b37      	ldr	r3, [pc, #220]	@ (8002230 <MX_TIM15_Init+0x11c>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 799;
 8002158:	4b35      	ldr	r3, [pc, #212]	@ (8002230 <MX_TIM15_Init+0x11c>)
 800215a:	f240 321f 	movw	r2, #799	@ 0x31f
 800215e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002160:	4b33      	ldr	r3, [pc, #204]	@ (8002230 <MX_TIM15_Init+0x11c>)
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002166:	4b32      	ldr	r3, [pc, #200]	@ (8002230 <MX_TIM15_Init+0x11c>)
 8002168:	2200      	movs	r2, #0
 800216a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216c:	4b30      	ldr	r3, [pc, #192]	@ (8002230 <MX_TIM15_Init+0x11c>)
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002172:	482f      	ldr	r0, [pc, #188]	@ (8002230 <MX_TIM15_Init+0x11c>)
 8002174:	f00c fcb0 	bl	800ead8 <HAL_TIM_PWM_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800217e:	f000 fca5 	bl	8002acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800218a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800218e:	4619      	mov	r1, r3
 8002190:	4827      	ldr	r0, [pc, #156]	@ (8002230 <MX_TIM15_Init+0x11c>)
 8002192:	f00d fd81 	bl	800fc98 <HAL_TIMEx_MasterConfigSynchronization>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800219c:	f000 fc96 	bl	8002acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021a0:	2360      	movs	r3, #96	@ 0x60
 80021a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021a8:	2300      	movs	r3, #0
 80021aa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021ac:	2300      	movs	r3, #0
 80021ae:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021b4:	2300      	movs	r3, #0
 80021b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021b8:	2300      	movs	r3, #0
 80021ba:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021c0:	2200      	movs	r2, #0
 80021c2:	4619      	mov	r1, r3
 80021c4:	481a      	ldr	r0, [pc, #104]	@ (8002230 <MX_TIM15_Init+0x11c>)
 80021c6:	f00d f883 	bl	800f2d0 <HAL_TIM_PWM_ConfigChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80021d0:	f000 fc7c 	bl	8002acc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021d8:	2204      	movs	r2, #4
 80021da:	4619      	mov	r1, r3
 80021dc:	4814      	ldr	r0, [pc, #80]	@ (8002230 <MX_TIM15_Init+0x11c>)
 80021de:	f00d f877 	bl	800f2d0 <HAL_TIM_PWM_ConfigChannel>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 80021e8:	f000 fc70 	bl	8002acc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002200:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002204:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	4619      	mov	r1, r3
 8002212:	4807      	ldr	r0, [pc, #28]	@ (8002230 <MX_TIM15_Init+0x11c>)
 8002214:	f00d fddc 	bl	800fdd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800221e:	f000 fc55 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002222:	4803      	ldr	r0, [pc, #12]	@ (8002230 <MX_TIM15_Init+0x11c>)
 8002224:	f001 fb1c 	bl	8003860 <HAL_TIM_MspPostInit>

}
 8002228:	bf00      	nop
 800222a:	3760      	adds	r7, #96	@ 0x60
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	24000bdc 	.word	0x24000bdc
 8002234:	40014000 	.word	0x40014000

08002238 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b094      	sub	sp, #80	@ 0x50
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800223e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	60da      	str	r2, [r3, #12]
 800224c:	611a      	str	r2, [r3, #16]
 800224e:	615a      	str	r2, [r3, #20]
 8002250:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002252:	463b      	mov	r3, r7
 8002254:	2234      	movs	r2, #52	@ 0x34
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f018 fe88 	bl	801af6e <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800225e:	4b31      	ldr	r3, [pc, #196]	@ (8002324 <MX_TIM16_Init+0xec>)
 8002260:	4a31      	ldr	r2, [pc, #196]	@ (8002328 <MX_TIM16_Init+0xf0>)
 8002262:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8002264:	4b2f      	ldr	r3, [pc, #188]	@ (8002324 <MX_TIM16_Init+0xec>)
 8002266:	221f      	movs	r2, #31
 8002268:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226a:	4b2e      	ldr	r3, [pc, #184]	@ (8002324 <MX_TIM16_Init+0xec>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 799;
 8002270:	4b2c      	ldr	r3, [pc, #176]	@ (8002324 <MX_TIM16_Init+0xec>)
 8002272:	f240 321f 	movw	r2, #799	@ 0x31f
 8002276:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002278:	4b2a      	ldr	r3, [pc, #168]	@ (8002324 <MX_TIM16_Init+0xec>)
 800227a:	2200      	movs	r2, #0
 800227c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800227e:	4b29      	ldr	r3, [pc, #164]	@ (8002324 <MX_TIM16_Init+0xec>)
 8002280:	2200      	movs	r2, #0
 8002282:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002284:	4b27      	ldr	r3, [pc, #156]	@ (8002324 <MX_TIM16_Init+0xec>)
 8002286:	2200      	movs	r2, #0
 8002288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800228a:	4826      	ldr	r0, [pc, #152]	@ (8002324 <MX_TIM16_Init+0xec>)
 800228c:	f00c fb46 	bl	800e91c <HAL_TIM_Base_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002296:	f000 fc19 	bl	8002acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800229a:	4822      	ldr	r0, [pc, #136]	@ (8002324 <MX_TIM16_Init+0xec>)
 800229c:	f00c fc1c 	bl	800ead8 <HAL_TIM_PWM_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80022a6:	f000 fc11 	bl	8002acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022aa:	2360      	movs	r3, #96	@ 0x60
 80022ac:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022b2:	2300      	movs	r3, #0
 80022b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022b6:	2300      	movs	r3, #0
 80022b8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022ca:	2200      	movs	r2, #0
 80022cc:	4619      	mov	r1, r3
 80022ce:	4815      	ldr	r0, [pc, #84]	@ (8002324 <MX_TIM16_Init+0xec>)
 80022d0:	f00c fffe 	bl	800f2d0 <HAL_TIM_PWM_ConfigChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80022da:	f000 fbf7 	bl	8002acc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002300:	463b      	mov	r3, r7
 8002302:	4619      	mov	r1, r3
 8002304:	4807      	ldr	r0, [pc, #28]	@ (8002324 <MX_TIM16_Init+0xec>)
 8002306:	f00d fd63 	bl	800fdd0 <HAL_TIMEx_ConfigBreakDeadTime>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8002310:	f000 fbdc 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002314:	4803      	ldr	r0, [pc, #12]	@ (8002324 <MX_TIM16_Init+0xec>)
 8002316:	f001 faa3 	bl	8003860 <HAL_TIM_MspPostInit>

}
 800231a:	bf00      	nop
 800231c:	3750      	adds	r7, #80	@ 0x50
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	24000c28 	.word	0x24000c28
 8002328:	40014400 	.word	0x40014400

0800232c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b094      	sub	sp, #80	@ 0x50
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002332:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	60da      	str	r2, [r3, #12]
 8002340:	611a      	str	r2, [r3, #16]
 8002342:	615a      	str	r2, [r3, #20]
 8002344:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002346:	463b      	mov	r3, r7
 8002348:	2234      	movs	r2, #52	@ 0x34
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f018 fe0e 	bl	801af6e <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002352:	4b31      	ldr	r3, [pc, #196]	@ (8002418 <MX_TIM17_Init+0xec>)
 8002354:	4a31      	ldr	r2, [pc, #196]	@ (800241c <MX_TIM17_Init+0xf0>)
 8002356:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 31;
 8002358:	4b2f      	ldr	r3, [pc, #188]	@ (8002418 <MX_TIM17_Init+0xec>)
 800235a:	221f      	movs	r2, #31
 800235c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235e:	4b2e      	ldr	r3, [pc, #184]	@ (8002418 <MX_TIM17_Init+0xec>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 799;
 8002364:	4b2c      	ldr	r3, [pc, #176]	@ (8002418 <MX_TIM17_Init+0xec>)
 8002366:	f240 321f 	movw	r2, #799	@ 0x31f
 800236a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236c:	4b2a      	ldr	r3, [pc, #168]	@ (8002418 <MX_TIM17_Init+0xec>)
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002372:	4b29      	ldr	r3, [pc, #164]	@ (8002418 <MX_TIM17_Init+0xec>)
 8002374:	2200      	movs	r2, #0
 8002376:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002378:	4b27      	ldr	r3, [pc, #156]	@ (8002418 <MX_TIM17_Init+0xec>)
 800237a:	2200      	movs	r2, #0
 800237c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800237e:	4826      	ldr	r0, [pc, #152]	@ (8002418 <MX_TIM17_Init+0xec>)
 8002380:	f00c facc 	bl	800e91c <HAL_TIM_Base_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800238a:	f000 fb9f 	bl	8002acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800238e:	4822      	ldr	r0, [pc, #136]	@ (8002418 <MX_TIM17_Init+0xec>)
 8002390:	f00c fba2 	bl	800ead8 <HAL_TIM_PWM_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800239a:	f000 fb97 	bl	8002acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800239e:	2360      	movs	r3, #96	@ 0x60
 80023a0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023a6:	2300      	movs	r3, #0
 80023a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023aa:	2300      	movs	r3, #0
 80023ac:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023b6:	2300      	movs	r3, #0
 80023b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023be:	2200      	movs	r2, #0
 80023c0:	4619      	mov	r1, r3
 80023c2:	4815      	ldr	r0, [pc, #84]	@ (8002418 <MX_TIM17_Init+0xec>)
 80023c4:	f00c ff84 	bl	800f2d0 <HAL_TIM_PWM_ConfigChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80023ce:	f000 fb7d 	bl	8002acc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80023f4:	463b      	mov	r3, r7
 80023f6:	4619      	mov	r1, r3
 80023f8:	4807      	ldr	r0, [pc, #28]	@ (8002418 <MX_TIM17_Init+0xec>)
 80023fa:	f00d fce9 	bl	800fdd0 <HAL_TIMEx_ConfigBreakDeadTime>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8002404:	f000 fb62 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002408:	4803      	ldr	r0, [pc, #12]	@ (8002418 <MX_TIM17_Init+0xec>)
 800240a:	f001 fa29 	bl	8003860 <HAL_TIM_MspPostInit>

}
 800240e:	bf00      	nop
 8002410:	3750      	adds	r7, #80	@ 0x50
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	24000c74 	.word	0x24000c74
 800241c:	40014800 	.word	0x40014800

08002420 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08c      	sub	sp, #48	@ 0x30
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002426:	f107 030c 	add.w	r3, r7, #12
 800242a:	2224      	movs	r2, #36	@ 0x24
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f018 fd9d 	bl	801af6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002434:	463b      	mov	r3, r7
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800243e:	4b21      	ldr	r3, [pc, #132]	@ (80024c4 <MX_TIM23_Init+0xa4>)
 8002440:	4a21      	ldr	r2, [pc, #132]	@ (80024c8 <MX_TIM23_Init+0xa8>)
 8002442:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8002444:	4b1f      	ldr	r3, [pc, #124]	@ (80024c4 <MX_TIM23_Init+0xa4>)
 8002446:	2200      	movs	r2, #0
 8002448:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244a:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <MX_TIM23_Init+0xa4>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8002450:	4b1c      	ldr	r3, [pc, #112]	@ (80024c4 <MX_TIM23_Init+0xa4>)
 8002452:	f04f 32ff 	mov.w	r2, #4294967295
 8002456:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002458:	4b1a      	ldr	r3, [pc, #104]	@ (80024c4 <MX_TIM23_Init+0xa4>)
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245e:	4b19      	ldr	r3, [pc, #100]	@ (80024c4 <MX_TIM23_Init+0xa4>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002464:	2303      	movs	r3, #3
 8002466:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800246c:	2301      	movs	r3, #1
 800246e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002470:	2300      	movs	r3, #0
 8002472:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002478:	2300      	movs	r3, #0
 800247a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800247c:	2301      	movs	r3, #1
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002480:	2300      	movs	r3, #0
 8002482:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	4619      	mov	r1, r3
 800248e:	480d      	ldr	r0, [pc, #52]	@ (80024c4 <MX_TIM23_Init+0xa4>)
 8002490:	f00c fce2 	bl	800ee58 <HAL_TIM_Encoder_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 800249a:	f000 fb17 	bl	8002acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80024a6:	463b      	mov	r3, r7
 80024a8:	4619      	mov	r1, r3
 80024aa:	4806      	ldr	r0, [pc, #24]	@ (80024c4 <MX_TIM23_Init+0xa4>)
 80024ac:	f00d fbf4 	bl	800fc98 <HAL_TIMEx_MasterConfigSynchronization>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 80024b6:	f000 fb09 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80024ba:	bf00      	nop
 80024bc:	3730      	adds	r7, #48	@ 0x30
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	24000cc0 	.word	0x24000cc0
 80024c8:	4000e000 	.word	0x4000e000

080024cc <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08c      	sub	sp, #48	@ 0x30
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024d2:	f107 030c 	add.w	r3, r7, #12
 80024d6:	2224      	movs	r2, #36	@ 0x24
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f018 fd47 	bl	801af6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e0:	463b      	mov	r3, r7
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80024ea:	4b21      	ldr	r3, [pc, #132]	@ (8002570 <MX_TIM24_Init+0xa4>)
 80024ec:	4a21      	ldr	r2, [pc, #132]	@ (8002574 <MX_TIM24_Init+0xa8>)
 80024ee:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 80024f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002570 <MX_TIM24_Init+0xa4>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002570 <MX_TIM24_Init+0xa4>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80024fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002570 <MX_TIM24_Init+0xa4>)
 80024fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002502:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002504:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <MX_TIM24_Init+0xa4>)
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250a:	4b19      	ldr	r3, [pc, #100]	@ (8002570 <MX_TIM24_Init+0xa4>)
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002510:	2303      	movs	r3, #3
 8002512:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002518:	2301      	movs	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800251c:	2300      	movs	r3, #0
 800251e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002524:	2300      	movs	r3, #0
 8002526:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002528:	2301      	movs	r3, #1
 800252a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800252c:	2300      	movs	r3, #0
 800252e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	4619      	mov	r1, r3
 800253a:	480d      	ldr	r0, [pc, #52]	@ (8002570 <MX_TIM24_Init+0xa4>)
 800253c:	f00c fc8c 	bl	800ee58 <HAL_TIM_Encoder_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 8002546:	f000 fac1 	bl	8002acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8002552:	463b      	mov	r3, r7
 8002554:	4619      	mov	r1, r3
 8002556:	4806      	ldr	r0, [pc, #24]	@ (8002570 <MX_TIM24_Init+0xa4>)
 8002558:	f00d fb9e 	bl	800fc98 <HAL_TIMEx_MasterConfigSynchronization>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 8002562:	f000 fab3 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	3730      	adds	r7, #48	@ 0x30
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	24000d0c 	.word	0x24000d0c
 8002574:	4000e400 	.word	0x4000e400

08002578 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800257c:	4b22      	ldr	r3, [pc, #136]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 800257e:	4a23      	ldr	r2, [pc, #140]	@ (800260c <MX_USART1_UART_Init+0x94>)
 8002580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002582:	4b21      	ldr	r3, [pc, #132]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 8002584:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800258a:	4b1f      	ldr	r3, [pc, #124]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002590:	4b1d      	ldr	r3, [pc, #116]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002596:	4b1c      	ldr	r3, [pc, #112]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800259c:	4b1a      	ldr	r3, [pc, #104]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 800259e:	220c      	movs	r2, #12
 80025a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a2:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a8:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ae:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ba:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025bc:	2200      	movs	r2, #0
 80025be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025c0:	4811      	ldr	r0, [pc, #68]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025c2:	f00d fcaf 	bl	800ff24 <HAL_UART_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80025cc:	f000 fa7e 	bl	8002acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025d0:	2100      	movs	r1, #0
 80025d2:	480d      	ldr	r0, [pc, #52]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025d4:	f00f fd20 	bl	8012018 <HAL_UARTEx_SetTxFifoThreshold>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80025de:	f000 fa75 	bl	8002acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025e2:	2100      	movs	r1, #0
 80025e4:	4808      	ldr	r0, [pc, #32]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025e6:	f00f fd55 	bl	8012094 <HAL_UARTEx_SetRxFifoThreshold>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80025f0:	f000 fa6c 	bl	8002acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80025f4:	4804      	ldr	r0, [pc, #16]	@ (8002608 <MX_USART1_UART_Init+0x90>)
 80025f6:	f00f fcd6 	bl	8011fa6 <HAL_UARTEx_DisableFifoMode>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002600:	f000 fa64 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	24000d58 	.word	0x24000d58
 800260c:	40011000 	.word	0x40011000

08002610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002614:	4b22      	ldr	r3, [pc, #136]	@ (80026a0 <MX_USART2_UART_Init+0x90>)
 8002616:	4a23      	ldr	r2, [pc, #140]	@ (80026a4 <MX_USART2_UART_Init+0x94>)
 8002618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800261a:	4b21      	ldr	r3, [pc, #132]	@ (80026a0 <MX_USART2_UART_Init+0x90>)
 800261c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002622:	4b1f      	ldr	r3, [pc, #124]	@ (80026a0 <MX_USART2_UART_Init+0x90>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002628:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <MX_USART2_UART_Init+0x90>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800262e:	4b1c      	ldr	r3, [pc, #112]	@ (80026a0 <MX_USART2_UART_Init+0x90>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002634:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <MX_USART2_UART_Init+0x90>)
 8002636:	220c      	movs	r2, #12
 8002638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800263a:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <MX_USART2_UART_Init+0x90>)
 800263c:	2200      	movs	r2, #0
 800263e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002640:	4b17      	ldr	r3, [pc, #92]	@ (80026a0 <MX_USART2_UART_Init+0x90>)
 8002642:	2200      	movs	r2, #0
 8002644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002646:	4b16      	ldr	r3, [pc, #88]	@ (80026a0 <MX_USART2_UART_Init+0x90>)
 8002648:	2200      	movs	r2, #0
 800264a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800264c:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <MX_USART2_UART_Init+0x90>)
 800264e:	2200      	movs	r2, #0
 8002650:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002652:	4b13      	ldr	r3, [pc, #76]	@ (80026a0 <MX_USART2_UART_Init+0x90>)
 8002654:	2200      	movs	r2, #0
 8002656:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002658:	4811      	ldr	r0, [pc, #68]	@ (80026a0 <MX_USART2_UART_Init+0x90>)
 800265a:	f00d fc63 	bl	800ff24 <HAL_UART_Init>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002664:	f000 fa32 	bl	8002acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002668:	2100      	movs	r1, #0
 800266a:	480d      	ldr	r0, [pc, #52]	@ (80026a0 <MX_USART2_UART_Init+0x90>)
 800266c:	f00f fcd4 	bl	8012018 <HAL_UARTEx_SetTxFifoThreshold>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002676:	f000 fa29 	bl	8002acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800267a:	2100      	movs	r1, #0
 800267c:	4808      	ldr	r0, [pc, #32]	@ (80026a0 <MX_USART2_UART_Init+0x90>)
 800267e:	f00f fd09 	bl	8012094 <HAL_UARTEx_SetRxFifoThreshold>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002688:	f000 fa20 	bl	8002acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800268c:	4804      	ldr	r0, [pc, #16]	@ (80026a0 <MX_USART2_UART_Init+0x90>)
 800268e:	f00f fc8a 	bl	8011fa6 <HAL_UARTEx_DisableFifoMode>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002698:	f000 fa18 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	24000dec 	.word	0x24000dec
 80026a4:	40004400 	.word	0x40004400

080026a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026ac:	4b22      	ldr	r3, [pc, #136]	@ (8002738 <MX_USART3_UART_Init+0x90>)
 80026ae:	4a23      	ldr	r2, [pc, #140]	@ (800273c <MX_USART3_UART_Init+0x94>)
 80026b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026b2:	4b21      	ldr	r3, [pc, #132]	@ (8002738 <MX_USART3_UART_Init+0x90>)
 80026b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002738 <MX_USART3_UART_Init+0x90>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002738 <MX_USART3_UART_Init+0x90>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002738 <MX_USART3_UART_Init+0x90>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <MX_USART3_UART_Init+0x90>)
 80026ce:	220c      	movs	r2, #12
 80026d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d2:	4b19      	ldr	r3, [pc, #100]	@ (8002738 <MX_USART3_UART_Init+0x90>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d8:	4b17      	ldr	r3, [pc, #92]	@ (8002738 <MX_USART3_UART_Init+0x90>)
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026de:	4b16      	ldr	r3, [pc, #88]	@ (8002738 <MX_USART3_UART_Init+0x90>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026e4:	4b14      	ldr	r3, [pc, #80]	@ (8002738 <MX_USART3_UART_Init+0x90>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026ea:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <MX_USART3_UART_Init+0x90>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026f0:	4811      	ldr	r0, [pc, #68]	@ (8002738 <MX_USART3_UART_Init+0x90>)
 80026f2:	f00d fc17 	bl	800ff24 <HAL_UART_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80026fc:	f000 f9e6 	bl	8002acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002700:	2100      	movs	r1, #0
 8002702:	480d      	ldr	r0, [pc, #52]	@ (8002738 <MX_USART3_UART_Init+0x90>)
 8002704:	f00f fc88 	bl	8012018 <HAL_UARTEx_SetTxFifoThreshold>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800270e:	f000 f9dd 	bl	8002acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002712:	2100      	movs	r1, #0
 8002714:	4808      	ldr	r0, [pc, #32]	@ (8002738 <MX_USART3_UART_Init+0x90>)
 8002716:	f00f fcbd 	bl	8012094 <HAL_UARTEx_SetRxFifoThreshold>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002720:	f000 f9d4 	bl	8002acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002724:	4804      	ldr	r0, [pc, #16]	@ (8002738 <MX_USART3_UART_Init+0x90>)
 8002726:	f00f fc3e 	bl	8011fa6 <HAL_UARTEx_DisableFifoMode>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002730:	f000 f9cc 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}
 8002738:	24000e80 	.word	0x24000e80
 800273c:	40004800 	.word	0x40004800

08002740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002746:	4b35      	ldr	r3, [pc, #212]	@ (800281c <MX_DMA_Init+0xdc>)
 8002748:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800274c:	4a33      	ldr	r2, [pc, #204]	@ (800281c <MX_DMA_Init+0xdc>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002756:	4b31      	ldr	r3, [pc, #196]	@ (800281c <MX_DMA_Init+0xdc>)
 8002758:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002764:	4b2d      	ldr	r3, [pc, #180]	@ (800281c <MX_DMA_Init+0xdc>)
 8002766:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800276a:	4a2c      	ldr	r2, [pc, #176]	@ (800281c <MX_DMA_Init+0xdc>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002774:	4b29      	ldr	r3, [pc, #164]	@ (800281c <MX_DMA_Init+0xdc>)
 8002776:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	200b      	movs	r0, #11
 8002788:	f004 f807 	bl	800679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800278c:	200b      	movs	r0, #11
 800278e:	f004 f81e 	bl	80067ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	2100      	movs	r1, #0
 8002796:	200c      	movs	r0, #12
 8002798:	f003 ffff 	bl	800679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800279c:	200c      	movs	r0, #12
 800279e:	f004 f816 	bl	80067ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2100      	movs	r1, #0
 80027a6:	200d      	movs	r0, #13
 80027a8:	f003 fff7 	bl	800679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80027ac:	200d      	movs	r0, #13
 80027ae:	f004 f80e 	bl	80067ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80027b2:	2200      	movs	r2, #0
 80027b4:	2100      	movs	r1, #0
 80027b6:	200e      	movs	r0, #14
 80027b8:	f003 ffef 	bl	800679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80027bc:	200e      	movs	r0, #14
 80027be:	f004 f806 	bl	80067ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2100      	movs	r1, #0
 80027c6:	200f      	movs	r0, #15
 80027c8:	f003 ffe7 	bl	800679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80027cc:	200f      	movs	r0, #15
 80027ce:	f003 fffe 	bl	80067ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	2010      	movs	r0, #16
 80027d8:	f003 ffdf 	bl	800679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027dc:	2010      	movs	r0, #16
 80027de:	f003 fff6 	bl	80067ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2100      	movs	r1, #0
 80027e6:	2011      	movs	r0, #17
 80027e8:	f003 ffd7 	bl	800679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80027ec:	2011      	movs	r0, #17
 80027ee:	f003 ffee 	bl	80067ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2100      	movs	r1, #0
 80027f6:	202f      	movs	r0, #47	@ 0x2f
 80027f8:	f003 ffcf 	bl	800679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80027fc:	202f      	movs	r0, #47	@ 0x2f
 80027fe:	f003 ffe6 	bl	80067ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002802:	2200      	movs	r2, #0
 8002804:	2100      	movs	r1, #0
 8002806:	2038      	movs	r0, #56	@ 0x38
 8002808:	f003 ffc7 	bl	800679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800280c:	2038      	movs	r0, #56	@ 0x38
 800280e:	f003 ffde 	bl	80067ce <HAL_NVIC_EnableIRQ>

}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	58024400 	.word	0x58024400

08002820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08e      	sub	sp, #56	@ 0x38
 8002824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	609a      	str	r2, [r3, #8]
 8002832:	60da      	str	r2, [r3, #12]
 8002834:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002836:	4b9e      	ldr	r3, [pc, #632]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 8002838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800283c:	4a9c      	ldr	r2, [pc, #624]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 800283e:	f043 0310 	orr.w	r3, r3, #16
 8002842:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002846:	4b9a      	ldr	r3, [pc, #616]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 8002848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	623b      	str	r3, [r7, #32]
 8002852:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002854:	4b96      	ldr	r3, [pc, #600]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 8002856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800285a:	4a95      	ldr	r2, [pc, #596]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002864:	4b92      	ldr	r3, [pc, #584]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 8002866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	61fb      	str	r3, [r7, #28]
 8002870:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002872:	4b8f      	ldr	r3, [pc, #572]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 8002874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002878:	4a8d      	ldr	r2, [pc, #564]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 800287a:	f043 0320 	orr.w	r3, r3, #32
 800287e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002882:	4b8b      	ldr	r3, [pc, #556]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 8002884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002890:	4b87      	ldr	r3, [pc, #540]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 8002892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002896:	4a86      	ldr	r2, [pc, #536]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 8002898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800289c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028a0:	4b83      	ldr	r3, [pc, #524]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 80028a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	4b80      	ldr	r3, [pc, #512]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 80028b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028b4:	4a7e      	ldr	r2, [pc, #504]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028be:	4b7c      	ldr	r3, [pc, #496]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 80028c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028cc:	4b78      	ldr	r3, [pc, #480]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 80028ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028d2:	4a77      	ldr	r2, [pc, #476]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028dc:	4b74      	ldr	r3, [pc, #464]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 80028de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028ea:	4b71      	ldr	r3, [pc, #452]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 80028ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028f0:	4a6f      	ldr	r2, [pc, #444]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 80028f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028fa:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 80028fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002908:	4b69      	ldr	r3, [pc, #420]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 800290a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800290e:	4a68      	ldr	r2, [pc, #416]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 8002910:	f043 0308 	orr.w	r3, r3, #8
 8002914:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002918:	4b65      	ldr	r3, [pc, #404]	@ (8002ab0 <MX_GPIO_Init+0x290>)
 800291a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002926:	2200      	movs	r2, #0
 8002928:	f64c 71fe 	movw	r1, #53246	@ 0xcffe
 800292c:	4861      	ldr	r0, [pc, #388]	@ (8002ab4 <MX_GPIO_Init+0x294>)
 800292e:	f006 ff6f 	bl	8009810 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002932:	2200      	movs	r2, #0
 8002934:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002938:	485f      	ldr	r0, [pc, #380]	@ (8002ab8 <MX_GPIO_Init+0x298>)
 800293a:	f006 ff69 	bl	8009810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 800293e:	2200      	movs	r2, #0
 8002940:	f64c 411e 	movw	r1, #52254	@ 0xcc1e
 8002944:	485d      	ldr	r0, [pc, #372]	@ (8002abc <MX_GPIO_Init+0x29c>)
 8002946:	f006 ff63 	bl	8009810 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800294a:	2200      	movs	r2, #0
 800294c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002950:	485b      	ldr	r0, [pc, #364]	@ (8002ac0 <MX_GPIO_Init+0x2a0>)
 8002952:	f006 ff5d 	bl	8009810 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB11 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002956:	f643 0302 	movw	r3, #14338	@ 0x3802
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800295c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002960:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800296a:	4619      	mov	r1, r3
 800296c:	4852      	ldr	r0, [pc, #328]	@ (8002ab8 <MX_GPIO_Init+0x298>)
 800296e:	f006 fd8f 	bl	8009490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002972:	2304      	movs	r3, #4
 8002974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002976:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800297a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800297c:	2301      	movs	r3, #1
 800297e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002984:	4619      	mov	r1, r3
 8002986:	484c      	ldr	r0, [pc, #304]	@ (8002ab8 <MX_GPIO_Init+0x298>)
 8002988:	f006 fd82 	bl	8009490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800298c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002992:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800299c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029a0:	4619      	mov	r1, r3
 80029a2:	4848      	ldr	r0, [pc, #288]	@ (8002ac4 <MX_GPIO_Init+0x2a4>)
 80029a4:	f006 fd74 	bl	8009490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029a8:	2301      	movs	r3, #1
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ba:	4619      	mov	r1, r3
 80029bc:	483d      	ldr	r0, [pc, #244]	@ (8002ab4 <MX_GPIO_Init+0x294>)
 80029be:	f006 fd67 	bl	8009490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG2 PG3 PG4
                           PG5 PG6 PG7 PG8
                           PG9 PG10 PG11 PG14
                           PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80029c2:	f64c 73fe 	movw	r3, #53246	@ 0xcffe
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c8:	2301      	movs	r3, #1
 80029ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d0:	2300      	movs	r3, #0
 80029d2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029d8:	4619      	mov	r1, r3
 80029da:	4836      	ldr	r0, [pc, #216]	@ (8002ab4 <MX_GPIO_Init+0x294>)
 80029dc:	f006 fd58 	bl	8009490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 80029e0:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029f4:	4619      	mov	r1, r3
 80029f6:	4834      	ldr	r0, [pc, #208]	@ (8002ac8 <MX_GPIO_Init+0x2a8>)
 80029f8:	f006 fd4a 	bl	8009490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a02:	2301      	movs	r3, #1
 8002a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a12:	4619      	mov	r1, r3
 8002a14:	4828      	ldr	r0, [pc, #160]	@ (8002ab8 <MX_GPIO_Init+0x298>)
 8002a16:	f006 fd3b 	bl	8009490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD14 PD15
                           PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 8002a1a:	f64c 431e 	movw	r3, #52254	@ 0xcc1e
 8002a1e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a20:	2301      	movs	r3, #1
 8002a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a30:	4619      	mov	r1, r3
 8002a32:	4822      	ldr	r0, [pc, #136]	@ (8002abc <MX_GPIO_Init+0x29c>)
 8002a34:	f006 fd2c 	bl	8009490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a38:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2300      	movs	r3, #0
 8002a48:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a4e:	4619      	mov	r1, r3
 8002a50:	481b      	ldr	r0, [pc, #108]	@ (8002ac0 <MX_GPIO_Init+0x2a0>)
 8002a52:	f006 fd1d 	bl	8009490 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2100      	movs	r1, #0
 8002a5a:	2006      	movs	r0, #6
 8002a5c:	f003 fe9d 	bl	800679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a60:	2006      	movs	r0, #6
 8002a62:	f003 feb4 	bl	80067ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2100      	movs	r1, #0
 8002a6a:	2007      	movs	r0, #7
 8002a6c:	f003 fe95 	bl	800679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002a70:	2007      	movs	r0, #7
 8002a72:	f003 feac 	bl	80067ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2100      	movs	r1, #0
 8002a7a:	2008      	movs	r0, #8
 8002a7c:	f003 fe8d 	bl	800679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002a80:	2008      	movs	r0, #8
 8002a82:	f003 fea4 	bl	80067ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2017      	movs	r0, #23
 8002a8c:	f003 fe85 	bl	800679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a90:	2017      	movs	r0, #23
 8002a92:	f003 fe9c 	bl	80067ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2028      	movs	r0, #40	@ 0x28
 8002a9c:	f003 fe7d 	bl	800679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002aa0:	2028      	movs	r0, #40	@ 0x28
 8002aa2:	f003 fe94 	bl	80067ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002aa6:	bf00      	nop
 8002aa8:	3738      	adds	r7, #56	@ 0x38
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	58024400 	.word	0x58024400
 8002ab4:	58021800 	.word	0x58021800
 8002ab8:	58020400 	.word	0x58020400
 8002abc:	58020c00 	.word	0x58020c00
 8002ac0:	58020800 	.word	0x58020800
 8002ac4:	58021400 	.word	0x58021400
 8002ac8:	58021000 	.word	0x58021000

08002acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad0:	b672      	cpsid	i
}
 8002ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <Error_Handler+0x8>

08002ad8 <_Z5setupv>:
//  }
//}


int pb2 = 0;
void setup(){
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim7);
 8002adc:	4819      	ldr	r0, [pc, #100]	@ (8002b44 <_Z5setupv+0x6c>)
 8002ade:	f00b ff75 	bl	800e9cc <HAL_TIM_Base_Start_IT>
	ROS1::init();
 8002ae2:	f012 ff75 	bl	80159d0 <_ZN4ROS14initEv>

	pb2++;
 8002ae6:	4b18      	ldr	r3, [pc, #96]	@ (8002b48 <_Z5setupv+0x70>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3301      	adds	r3, #1
 8002aec:	4a16      	ldr	r2, [pc, #88]	@ (8002b48 <_Z5setupv+0x70>)
 8002aee:	6013      	str	r3, [r2, #0]


	//ros_setup();
	path_setup();
 8002af0:	f015 fdde 	bl	80186b0 <_Z10path_setupv>
	HAL_TIM_Base_Start_IT(&htim6);
 8002af4:	4815      	ldr	r0, [pc, #84]	@ (8002b4c <_Z5setupv+0x74>)
 8002af6:	f00b ff69 	bl	800e9cc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8002afa:	4815      	ldr	r0, [pc, #84]	@ (8002b50 <_Z5setupv+0x78>)
 8002afc:	f00b ff66 	bl	800e9cc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 8002b00:	4814      	ldr	r0, [pc, #80]	@ (8002b54 <_Z5setupv+0x7c>)
 8002b02:	f00b ff63 	bl	800e9cc <HAL_TIM_Base_Start_IT>
	
	// setup() 內部會調用 pinpoint_init() 並設置診斷代碼
	Chassis::setup();
 8002b06:	f7fe f851 	bl	8000bac <_ZN7Chassis5setupEv>
	// 0xF3 = 找到其他設備但不是 Pinpoint
	// 0x31-0x39 = 找到 Pinpoint 的地址

	//path_setup();
//	ros_setup();
	lifterSetup();
 8002b0a:	f00f ff11 	bl	8012930 <lifterSetup>
	Chassis::setSpeed(0,0,0);
 8002b0e:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 8002b58 <_Z5setupv+0x80>
 8002b12:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8002b58 <_Z5setupv+0x80>
 8002b16:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8002b58 <_Z5setupv+0x80>
 8002b1a:	f7fe faf7 	bl	800110c <_ZN7Chassis8setSpeedEfff>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET){
 8002b1e:	e001      	b.n	8002b24 <_Z5setupv+0x4c>
			ROS1::spinCycle();
 8002b20:	f012 ff84 	bl	8015a2c <_ZN4ROS19spinCycleEv>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET){
 8002b24:	2104      	movs	r1, #4
 8002b26:	480d      	ldr	r0, [pc, #52]	@ (8002b5c <_Z5setupv+0x84>)
 8002b28:	f006 fe5a 	bl	80097e0 <HAL_GPIO_ReadPin>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	bf0c      	ite	eq
 8002b32:	2301      	moveq	r3, #1
 8002b34:	2300      	movne	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f1      	bne.n	8002b20 <_Z5setupv+0x48>
		}
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	24000a60 	.word	0x24000a60
 8002b48:	24001100 	.word	0x24001100
 8002b4c:	24000a14 	.word	0x24000a14
 8002b50:	24000b44 	.word	0x24000b44
 8002b54:	24000b90 	.word	0x24000b90
 8002b58:	00000000 	.word	0x00000000
 8002b5c:	58020400 	.word	0x58020400

08002b60 <_Z4loopv>:

void loop(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
	stage_1();
 8002b64:	f016 fa30 	bl	8018fc8 <_Z7stage_1v>
    stage_2();
 8002b68:	f016 fcb6 	bl	80194d8 <_Z7stage_2v>
	stage_3();
 8002b6c:	f016 fcf6 	bl	801955c <_Z7stage_3v>
}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <main_function>:


void main_function(){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
	setup();
 8002b78:	f7ff ffae 	bl	8002ad8 <_Z5setupv>
	while(1){
		if (ttest == 1){
 8002b7c:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <main_function+0x20>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d102      	bne.n	8002b8a <main_function+0x16>
			testt();
 8002b84:	f016 fd6c 	bl	8019660 <_Z5testtv>
		}
		else{
		loop();
		}
		break;
 8002b88:	e001      	b.n	8002b8e <main_function+0x1a>
		loop();
 8002b8a:	f7ff ffe9 	bl	8002b60 <_Z4loopv>
		break;
 8002b8e:	bf00      	nop
	}
}
 8002b90:	bf00      	nop
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	240010fc 	.word	0x240010fc

08002b98 <HAL_TIM_PeriodElapsedCallback>:



extern int ach_stage ;
int pub = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim){
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

	if (htim -> Instance == TIM6){
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0f      	ldr	r2, [pc, #60]	@ (8002be4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d109      	bne.n	8002bbe <HAL_TIM_PeriodElapsedCallback+0x26>
		//if (!start_flag) return;

//		if(ttest){
		chassis_move();
 8002baa:	f015 fcd5 	bl	8018558 <_Z12chassis_movev>
		Chassis::updateSpeed(); // 更新底盤系統（包含 Pinpoint 更新）
 8002bae:	f7fe faf3 	bl	8001198 <_ZN7Chassis11updateSpeedEv>
		ms++;
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	4a0b      	ldr	r2, [pc, #44]	@ (8002be8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002bba:	6013      	str	r3, [r2, #0]

	   // path();
//		lifter_measuredistance();
	    //test++;
	    }
}
 8002bbc:	e00d      	b.n	8002bda <HAL_TIM_PeriodElapsedCallback+0x42>
	else if (htim -> Instance == TIM7){
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bec <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d108      	bne.n	8002bda <HAL_TIM_PeriodElapsedCallback+0x42>
		ROS1::pub_chassis_pose();
 8002bc8:	f012 ff40 	bl	8015a4c <_ZN4ROS116pub_chassis_poseEv>
		ROS1::pub_current_stage();
 8002bcc:	f012 ff68 	bl	8015aa0 <_ZN4ROS117pub_current_stageEv>
		pub++;
 8002bd0:	4b07      	ldr	r3, [pc, #28]	@ (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	4a06      	ldr	r2, [pc, #24]	@ (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002bd8:	6013      	str	r3, [r2, #0]
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40001000 	.word	0x40001000
 8002be8:	240010f4 	.word	0x240010f4
 8002bec:	40001400 	.word	0x40001400
 8002bf0:	24001104 	.word	0x24001104

08002bf4 <HAL_ADC_ConvCpltCallback>:

int adc1 = 0,adc3 = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	if (hadc -> Instance == ADC1){
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a0b      	ldr	r2, [pc, #44]	@ (8002c30 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d104      	bne.n	8002c10 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1++;
 8002c06:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <HAL_ADC_ConvCpltCallback+0x40>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	4a09      	ldr	r2, [pc, #36]	@ (8002c34 <HAL_ADC_ConvCpltCallback+0x40>)
 8002c0e:	6013      	str	r3, [r2, #0]
	}
	if (hadc -> Instance == ADC3){
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a08      	ldr	r2, [pc, #32]	@ (8002c38 <HAL_ADC_ConvCpltCallback+0x44>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d104      	bne.n	8002c24 <HAL_ADC_ConvCpltCallback+0x30>
		adc3++;
 8002c1a:	4b08      	ldr	r3, [pc, #32]	@ (8002c3c <HAL_ADC_ConvCpltCallback+0x48>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	4a06      	ldr	r2, [pc, #24]	@ (8002c3c <HAL_ADC_ConvCpltCallback+0x48>)
 8002c22:	6013      	str	r3, [r2, #0]
	}
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	40022000 	.word	0x40022000
 8002c34:	24001108 	.word	0x24001108
 8002c38:	58026000 	.word	0x58026000
 8002c3c:	2400110c 	.word	0x2400110c

08002c40 <HAL_UART_TxCpltCallback>:

int ee = 0;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a06      	ldr	r2, [pc, #24]	@ (8002c68 <HAL_UART_TxCpltCallback+0x28>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d104      	bne.n	8002c5c <HAL_UART_TxCpltCallback+0x1c>
		ee++;
 8002c52:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <HAL_UART_TxCpltCallback+0x2c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3301      	adds	r3, #1
 8002c58:	4a04      	ldr	r2, [pc, #16]	@ (8002c6c <HAL_UART_TxCpltCallback+0x2c>)
 8002c5a:	6013      	str	r3, [r2, #0]
		//處理接收到的資料
	}
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40004800 	.word	0x40004800
 8002c6c:	24001110 	.word	0x24001110

08002c70 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	80fb      	strh	r3, [r7, #6]
		switch (GPIO_Pin) {
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d110      	bne.n	8002ca2 <HAL_GPIO_EXTI_Callback+0x32>
			case GPIO_PIN_2:
				//pb2++;

			if (HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_RESET){
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	4619      	mov	r1, r3
 8002c84:	480a      	ldr	r0, [pc, #40]	@ (8002cb0 <HAL_GPIO_EXTI_Callback+0x40>)
 8002c86:	f006 fdab 	bl	80097e0 <HAL_GPIO_ReadPin>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bf0c      	ite	eq
 8002c90:	2301      	moveq	r3, #1
 8002c92:	2300      	movne	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_GPIO_EXTI_Callback+0x36>
				start_flag = true;
 8002c9a:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <HAL_GPIO_EXTI_Callback+0x44>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
		  
		  }
				//count++;
				break;
 8002ca0:	e001      	b.n	8002ca6 <HAL_GPIO_EXTI_Callback+0x36>
			default:
				// 處理 GPIO_PIN_3 的中斷
				break;
 8002ca2:	bf00      	nop
 8002ca4:	e000      	b.n	8002ca8 <HAL_GPIO_EXTI_Callback+0x38>
				break;
 8002ca6:	bf00      	nop
			// 可以根據需要添加更多的 case
		}
	}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	58020400 	.word	0x58020400
 8002cb4:	240010f8 	.word	0x240010f8

08002cb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf4 <HAL_MspInit+0x3c>)
 8002cc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cc4:	4a0b      	ldr	r2, [pc, #44]	@ (8002cf4 <HAL_MspInit+0x3c>)
 8002cc6:	f043 0302 	orr.w	r3, r3, #2
 8002cca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002cce:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <HAL_MspInit+0x3c>)
 8002cd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2100      	movs	r1, #0
 8002ce0:	2005      	movs	r0, #5
 8002ce2:	f003 fd5a 	bl	800679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002ce6:	2005      	movs	r0, #5
 8002ce8:	f003 fd71 	bl	80067ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cec:	bf00      	nop
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	58024400 	.word	0x58024400

08002cf8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b090      	sub	sp, #64	@ 0x40
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4aaf      	ldr	r2, [pc, #700]	@ (8002fd4 <HAL_ADC_MspInit+0x2dc>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	f040 8087 	bne.w	8002e2a <HAL_ADC_MspInit+0x132>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002d1c:	4bae      	ldr	r3, [pc, #696]	@ (8002fd8 <HAL_ADC_MspInit+0x2e0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3301      	adds	r3, #1
 8002d22:	4aad      	ldr	r2, [pc, #692]	@ (8002fd8 <HAL_ADC_MspInit+0x2e0>)
 8002d24:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002d26:	4bac      	ldr	r3, [pc, #688]	@ (8002fd8 <HAL_ADC_MspInit+0x2e0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d10e      	bne.n	8002d4c <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002d2e:	4bab      	ldr	r3, [pc, #684]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002d30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d34:	4aa9      	ldr	r2, [pc, #676]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002d36:	f043 0320 	orr.w	r3, r3, #32
 8002d3a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002d3e:	4ba7      	ldr	r3, [pc, #668]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4c:	4ba3      	ldr	r3, [pc, #652]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d52:	4aa2      	ldr	r2, [pc, #648]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d5c:	4b9f      	ldr	r3, [pc, #636]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d6a:	4b9c      	ldr	r3, [pc, #624]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d70:	4a9a      	ldr	r2, [pc, #616]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002d72:	f043 0304 	orr.w	r3, r3, #4
 8002d76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d7a:	4b98      	ldr	r3, [pc, #608]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	623b      	str	r3, [r7, #32]
 8002d86:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d88:	2310      	movs	r3, #16
 8002d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4891      	ldr	r0, [pc, #580]	@ (8002fe0 <HAL_ADC_MspInit+0x2e8>)
 8002d9c:	f006 fb78 	bl	8009490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002da0:	2330      	movs	r3, #48	@ 0x30
 8002da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002da4:	2303      	movs	r3, #3
 8002da6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002db0:	4619      	mov	r1, r3
 8002db2:	488c      	ldr	r0, [pc, #560]	@ (8002fe4 <HAL_ADC_MspInit+0x2ec>)
 8002db4:	f006 fb6c 	bl	8009490 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002db8:	4b8b      	ldr	r3, [pc, #556]	@ (8002fe8 <HAL_ADC_MspInit+0x2f0>)
 8002dba:	4a8c      	ldr	r2, [pc, #560]	@ (8002fec <HAL_ADC_MspInit+0x2f4>)
 8002dbc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002dbe:	4b8a      	ldr	r3, [pc, #552]	@ (8002fe8 <HAL_ADC_MspInit+0x2f0>)
 8002dc0:	2209      	movs	r2, #9
 8002dc2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dc4:	4b88      	ldr	r3, [pc, #544]	@ (8002fe8 <HAL_ADC_MspInit+0x2f0>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dca:	4b87      	ldr	r3, [pc, #540]	@ (8002fe8 <HAL_ADC_MspInit+0x2f0>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002dd0:	4b85      	ldr	r3, [pc, #532]	@ (8002fe8 <HAL_ADC_MspInit+0x2f0>)
 8002dd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dd6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dd8:	4b83      	ldr	r3, [pc, #524]	@ (8002fe8 <HAL_ADC_MspInit+0x2f0>)
 8002dda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002dde:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002de0:	4b81      	ldr	r3, [pc, #516]	@ (8002fe8 <HAL_ADC_MspInit+0x2f0>)
 8002de2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002de6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002de8:	4b7f      	ldr	r3, [pc, #508]	@ (8002fe8 <HAL_ADC_MspInit+0x2f0>)
 8002dea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002df0:	4b7d      	ldr	r3, [pc, #500]	@ (8002fe8 <HAL_ADC_MspInit+0x2f0>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002df6:	4b7c      	ldr	r3, [pc, #496]	@ (8002fe8 <HAL_ADC_MspInit+0x2f0>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002dfc:	487a      	ldr	r0, [pc, #488]	@ (8002fe8 <HAL_ADC_MspInit+0x2f0>)
 8002dfe:	f003 fd01 	bl	8006804 <HAL_DMA_Init>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8002e08:	f7ff fe60 	bl	8002acc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a76      	ldr	r2, [pc, #472]	@ (8002fe8 <HAL_ADC_MspInit+0x2f0>)
 8002e10:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e12:	4a75      	ldr	r2, [pc, #468]	@ (8002fe8 <HAL_ADC_MspInit+0x2f0>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	2012      	movs	r0, #18
 8002e1e:	f003 fcbc 	bl	800679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002e22:	2012      	movs	r0, #18
 8002e24:	f003 fcd3 	bl	80067ce <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002e28:	e0d0      	b.n	8002fcc <HAL_ADC_MspInit+0x2d4>
  else if(hadc->Instance==ADC2)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a70      	ldr	r2, [pc, #448]	@ (8002ff0 <HAL_ADC_MspInit+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d13b      	bne.n	8002eac <HAL_ADC_MspInit+0x1b4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002e34:	4b68      	ldr	r3, [pc, #416]	@ (8002fd8 <HAL_ADC_MspInit+0x2e0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	4a67      	ldr	r2, [pc, #412]	@ (8002fd8 <HAL_ADC_MspInit+0x2e0>)
 8002e3c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002e3e:	4b66      	ldr	r3, [pc, #408]	@ (8002fd8 <HAL_ADC_MspInit+0x2e0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d10e      	bne.n	8002e64 <HAL_ADC_MspInit+0x16c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002e46:	4b65      	ldr	r3, [pc, #404]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002e48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e4c:	4a63      	ldr	r2, [pc, #396]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002e4e:	f043 0320 	orr.w	r3, r3, #32
 8002e52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002e56:	4b61      	ldr	r3, [pc, #388]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e64:	4b5d      	ldr	r3, [pc, #372]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e6a:	4a5c      	ldr	r2, [pc, #368]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e74:	4b59      	ldr	r3, [pc, #356]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e82:	2340      	movs	r3, #64	@ 0x40
 8002e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e86:	2303      	movs	r3, #3
 8002e88:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e92:	4619      	mov	r1, r3
 8002e94:	4852      	ldr	r0, [pc, #328]	@ (8002fe0 <HAL_ADC_MspInit+0x2e8>)
 8002e96:	f006 fafb 	bl	8009490 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	2012      	movs	r0, #18
 8002ea0:	f003 fc7b 	bl	800679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002ea4:	2012      	movs	r0, #18
 8002ea6:	f003 fc92 	bl	80067ce <HAL_NVIC_EnableIRQ>
}
 8002eaa:	e08f      	b.n	8002fcc <HAL_ADC_MspInit+0x2d4>
  else if(hadc->Instance==ADC3)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a50      	ldr	r2, [pc, #320]	@ (8002ff4 <HAL_ADC_MspInit+0x2fc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	f040 808a 	bne.w	8002fcc <HAL_ADC_MspInit+0x2d4>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002eb8:	4b48      	ldr	r3, [pc, #288]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ebe:	4a47      	ldr	r2, [pc, #284]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002ec0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ec8:	4b44      	ldr	r3, [pc, #272]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ece:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ed6:	4b41      	ldr	r3, [pc, #260]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002edc:	4a3f      	ldr	r2, [pc, #252]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002ede:	f043 0320 	orr.w	r3, r3, #32
 8002ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef4:	4b39      	ldr	r3, [pc, #228]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002efa:	4a38      	ldr	r2, [pc, #224]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002efc:	f043 0304 	orr.w	r3, r3, #4
 8002f00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f04:	4b35      	ldr	r3, [pc, #212]	@ (8002fdc <HAL_ADC_MspInit+0x2e4>)
 8002f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002f12:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 8002f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f24:	4619      	mov	r1, r3
 8002f26:	4834      	ldr	r0, [pc, #208]	@ (8002ff8 <HAL_ADC_MspInit+0x300>)
 8002f28:	f006 fab2 	bl	8009490 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f30:	2303      	movs	r3, #3
 8002f32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4829      	ldr	r0, [pc, #164]	@ (8002fe4 <HAL_ADC_MspInit+0x2ec>)
 8002f40:	f006 faa6 	bl	8009490 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002f44:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8002f48:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002f4c:	f001 fab8 	bl	80044c0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002f50:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8002f54:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002f58:	f001 fab2 	bl	80044c0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream5;
 8002f5c:	4b27      	ldr	r3, [pc, #156]	@ (8002ffc <HAL_ADC_MspInit+0x304>)
 8002f5e:	4a28      	ldr	r2, [pc, #160]	@ (8003000 <HAL_ADC_MspInit+0x308>)
 8002f60:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002f62:	4b26      	ldr	r3, [pc, #152]	@ (8002ffc <HAL_ADC_MspInit+0x304>)
 8002f64:	2273      	movs	r2, #115	@ 0x73
 8002f66:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f68:	4b24      	ldr	r3, [pc, #144]	@ (8002ffc <HAL_ADC_MspInit+0x304>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f6e:	4b23      	ldr	r3, [pc, #140]	@ (8002ffc <HAL_ADC_MspInit+0x304>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002f74:	4b21      	ldr	r3, [pc, #132]	@ (8002ffc <HAL_ADC_MspInit+0x304>)
 8002f76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f7a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ffc <HAL_ADC_MspInit+0x304>)
 8002f7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f82:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f84:	4b1d      	ldr	r3, [pc, #116]	@ (8002ffc <HAL_ADC_MspInit+0x304>)
 8002f86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f8a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ffc <HAL_ADC_MspInit+0x304>)
 8002f8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f92:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002f94:	4b19      	ldr	r3, [pc, #100]	@ (8002ffc <HAL_ADC_MspInit+0x304>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f9a:	4b18      	ldr	r3, [pc, #96]	@ (8002ffc <HAL_ADC_MspInit+0x304>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002fa0:	4816      	ldr	r0, [pc, #88]	@ (8002ffc <HAL_ADC_MspInit+0x304>)
 8002fa2:	f003 fc2f 	bl	8006804 <HAL_DMA_Init>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_ADC_MspInit+0x2b8>
      Error_Handler();
 8002fac:	f7ff fd8e 	bl	8002acc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a12      	ldr	r2, [pc, #72]	@ (8002ffc <HAL_ADC_MspInit+0x304>)
 8002fb4:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fb6:	4a11      	ldr	r2, [pc, #68]	@ (8002ffc <HAL_ADC_MspInit+0x304>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 1, 0);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	207f      	movs	r0, #127	@ 0x7f
 8002fc2:	f003 fbea 	bl	800679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002fc6:	207f      	movs	r0, #127	@ 0x7f
 8002fc8:	f003 fc01 	bl	80067ce <HAL_NVIC_EnableIRQ>
}
 8002fcc:	bf00      	nop
 8002fce:	3740      	adds	r7, #64	@ 0x40
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40022000 	.word	0x40022000
 8002fd8:	24001114 	.word	0x24001114
 8002fdc:	58024400 	.word	0x58024400
 8002fe0:	58020000 	.word	0x58020000
 8002fe4:	58020800 	.word	0x58020800
 8002fe8:	24000598 	.word	0x24000598
 8002fec:	40020010 	.word	0x40020010
 8002ff0:	40022100 	.word	0x40022100
 8002ff4:	58026000 	.word	0x58026000
 8002ff8:	58021400 	.word	0x58021400
 8002ffc:	24000610 	.word	0x24000610
 8003000:	40020088 	.word	0x40020088

08003004 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b0ba      	sub	sp, #232	@ 0xe8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800301c:	f107 0318 	add.w	r3, r7, #24
 8003020:	22b8      	movs	r2, #184	@ 0xb8
 8003022:	2100      	movs	r1, #0
 8003024:	4618      	mov	r0, r3
 8003026:	f017 ffa2 	bl	801af6e <memset>
  if(hi2c->Instance==I2C1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a99      	ldr	r2, [pc, #612]	@ (8003294 <HAL_I2C_MspInit+0x290>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d173      	bne.n	800311c <HAL_I2C_MspInit+0x118>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003034:	f04f 0208 	mov.w	r2, #8
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003046:	f107 0318 	add.w	r3, r7, #24
 800304a:	4618      	mov	r0, r3
 800304c:	f009 f880 	bl	800c150 <HAL_RCCEx_PeriphCLKConfig>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003056:	f7ff fd39 	bl	8002acc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800305a:	4b8f      	ldr	r3, [pc, #572]	@ (8003298 <HAL_I2C_MspInit+0x294>)
 800305c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003060:	4a8d      	ldr	r2, [pc, #564]	@ (8003298 <HAL_I2C_MspInit+0x294>)
 8003062:	f043 0302 	orr.w	r3, r3, #2
 8003066:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800306a:	4b8b      	ldr	r3, [pc, #556]	@ (8003298 <HAL_I2C_MspInit+0x294>)
 800306c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003078:	23c0      	movs	r3, #192	@ 0xc0
 800307a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800307e:	2312      	movs	r3, #18
 8003080:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003084:	2301      	movs	r3, #1
 8003086:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308a:	2300      	movs	r3, #0
 800308c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003090:	2304      	movs	r3, #4
 8003092:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003096:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800309a:	4619      	mov	r1, r3
 800309c:	487f      	ldr	r0, [pc, #508]	@ (800329c <HAL_I2C_MspInit+0x298>)
 800309e:	f006 f9f7 	bl	8009490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030a2:	4b7d      	ldr	r3, [pc, #500]	@ (8003298 <HAL_I2C_MspInit+0x294>)
 80030a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030a8:	4a7b      	ldr	r2, [pc, #492]	@ (8003298 <HAL_I2C_MspInit+0x294>)
 80030aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80030ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030b2:	4b79      	ldr	r3, [pc, #484]	@ (8003298 <HAL_I2C_MspInit+0x294>)
 80030b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream6;
 80030c0:	4b77      	ldr	r3, [pc, #476]	@ (80032a0 <HAL_I2C_MspInit+0x29c>)
 80030c2:	4a78      	ldr	r2, [pc, #480]	@ (80032a4 <HAL_I2C_MspInit+0x2a0>)
 80030c4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80030c6:	4b76      	ldr	r3, [pc, #472]	@ (80032a0 <HAL_I2C_MspInit+0x29c>)
 80030c8:	2221      	movs	r2, #33	@ 0x21
 80030ca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030cc:	4b74      	ldr	r3, [pc, #464]	@ (80032a0 <HAL_I2C_MspInit+0x29c>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030d2:	4b73      	ldr	r3, [pc, #460]	@ (80032a0 <HAL_I2C_MspInit+0x29c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030d8:	4b71      	ldr	r3, [pc, #452]	@ (80032a0 <HAL_I2C_MspInit+0x29c>)
 80030da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030de:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030e0:	4b6f      	ldr	r3, [pc, #444]	@ (80032a0 <HAL_I2C_MspInit+0x29c>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030e6:	4b6e      	ldr	r3, [pc, #440]	@ (80032a0 <HAL_I2C_MspInit+0x29c>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80030ec:	4b6c      	ldr	r3, [pc, #432]	@ (80032a0 <HAL_I2C_MspInit+0x29c>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030f2:	4b6b      	ldr	r3, [pc, #428]	@ (80032a0 <HAL_I2C_MspInit+0x29c>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030f8:	4b69      	ldr	r3, [pc, #420]	@ (80032a0 <HAL_I2C_MspInit+0x29c>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80030fe:	4868      	ldr	r0, [pc, #416]	@ (80032a0 <HAL_I2C_MspInit+0x29c>)
 8003100:	f003 fb80 	bl	8006804 <HAL_DMA_Init>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_MspInit+0x10a>
    {
      Error_Handler();
 800310a:	f7ff fcdf 	bl	8002acc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a63      	ldr	r2, [pc, #396]	@ (80032a0 <HAL_I2C_MspInit+0x29c>)
 8003112:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003114:	4a62      	ldr	r2, [pc, #392]	@ (80032a0 <HAL_I2C_MspInit+0x29c>)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800311a:	e0b7      	b.n	800328c <HAL_I2C_MspInit+0x288>
  else if(hi2c->Instance==I2C2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a61      	ldr	r2, [pc, #388]	@ (80032a8 <HAL_I2C_MspInit+0x2a4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	f040 80b2 	bne.w	800328c <HAL_I2C_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003128:	f04f 0208 	mov.w	r2, #8
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8003134:	2300      	movs	r3, #0
 8003136:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800313a:	f107 0318 	add.w	r3, r7, #24
 800313e:	4618      	mov	r0, r3
 8003140:	f009 f806 	bl	800c150 <HAL_RCCEx_PeriphCLKConfig>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_MspInit+0x14a>
      Error_Handler();
 800314a:	f7ff fcbf 	bl	8002acc <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800314e:	4b52      	ldr	r3, [pc, #328]	@ (8003298 <HAL_I2C_MspInit+0x294>)
 8003150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003154:	4a50      	ldr	r2, [pc, #320]	@ (8003298 <HAL_I2C_MspInit+0x294>)
 8003156:	f043 0320 	orr.w	r3, r3, #32
 800315a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800315e:	4b4e      	ldr	r3, [pc, #312]	@ (8003298 <HAL_I2C_MspInit+0x294>)
 8003160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800316c:	2303      	movs	r3, #3
 800316e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003172:	2312      	movs	r3, #18
 8003174:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003178:	2301      	movs	r3, #1
 800317a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317e:	2300      	movs	r3, #0
 8003180:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003184:	2304      	movs	r3, #4
 8003186:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800318a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800318e:	4619      	mov	r1, r3
 8003190:	4846      	ldr	r0, [pc, #280]	@ (80032ac <HAL_I2C_MspInit+0x2a8>)
 8003192:	f006 f97d 	bl	8009490 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003196:	4b40      	ldr	r3, [pc, #256]	@ (8003298 <HAL_I2C_MspInit+0x294>)
 8003198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800319c:	4a3e      	ldr	r2, [pc, #248]	@ (8003298 <HAL_I2C_MspInit+0x294>)
 800319e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003298 <HAL_I2C_MspInit+0x294>)
 80031a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80031b4:	4b3e      	ldr	r3, [pc, #248]	@ (80032b0 <HAL_I2C_MspInit+0x2ac>)
 80031b6:	4a3f      	ldr	r2, [pc, #252]	@ (80032b4 <HAL_I2C_MspInit+0x2b0>)
 80031b8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 80031ba:	4b3d      	ldr	r3, [pc, #244]	@ (80032b0 <HAL_I2C_MspInit+0x2ac>)
 80031bc:	2223      	movs	r2, #35	@ 0x23
 80031be:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031c0:	4b3b      	ldr	r3, [pc, #236]	@ (80032b0 <HAL_I2C_MspInit+0x2ac>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c6:	4b3a      	ldr	r3, [pc, #232]	@ (80032b0 <HAL_I2C_MspInit+0x2ac>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031cc:	4b38      	ldr	r3, [pc, #224]	@ (80032b0 <HAL_I2C_MspInit+0x2ac>)
 80031ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031d2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031d4:	4b36      	ldr	r3, [pc, #216]	@ (80032b0 <HAL_I2C_MspInit+0x2ac>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031da:	4b35      	ldr	r3, [pc, #212]	@ (80032b0 <HAL_I2C_MspInit+0x2ac>)
 80031dc:	2200      	movs	r2, #0
 80031de:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80031e0:	4b33      	ldr	r3, [pc, #204]	@ (80032b0 <HAL_I2C_MspInit+0x2ac>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80031e6:	4b32      	ldr	r3, [pc, #200]	@ (80032b0 <HAL_I2C_MspInit+0x2ac>)
 80031e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031ec:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031ee:	4b30      	ldr	r3, [pc, #192]	@ (80032b0 <HAL_I2C_MspInit+0x2ac>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80031f4:	482e      	ldr	r0, [pc, #184]	@ (80032b0 <HAL_I2C_MspInit+0x2ac>)
 80031f6:	f003 fb05 	bl	8006804 <HAL_DMA_Init>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_I2C_MspInit+0x200>
      Error_Handler();
 8003200:	f7ff fc64 	bl	8002acc <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a2a      	ldr	r2, [pc, #168]	@ (80032b0 <HAL_I2C_MspInit+0x2ac>)
 8003208:	63da      	str	r2, [r3, #60]	@ 0x3c
 800320a:	4a29      	ldr	r2, [pc, #164]	@ (80032b0 <HAL_I2C_MspInit+0x2ac>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream3;
 8003210:	4b29      	ldr	r3, [pc, #164]	@ (80032b8 <HAL_I2C_MspInit+0x2b4>)
 8003212:	4a2a      	ldr	r2, [pc, #168]	@ (80032bc <HAL_I2C_MspInit+0x2b8>)
 8003214:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8003216:	4b28      	ldr	r3, [pc, #160]	@ (80032b8 <HAL_I2C_MspInit+0x2b4>)
 8003218:	2224      	movs	r2, #36	@ 0x24
 800321a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800321c:	4b26      	ldr	r3, [pc, #152]	@ (80032b8 <HAL_I2C_MspInit+0x2b4>)
 800321e:	2240      	movs	r2, #64	@ 0x40
 8003220:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003222:	4b25      	ldr	r3, [pc, #148]	@ (80032b8 <HAL_I2C_MspInit+0x2b4>)
 8003224:	2200      	movs	r2, #0
 8003226:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003228:	4b23      	ldr	r3, [pc, #140]	@ (80032b8 <HAL_I2C_MspInit+0x2b4>)
 800322a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800322e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003230:	4b21      	ldr	r3, [pc, #132]	@ (80032b8 <HAL_I2C_MspInit+0x2b4>)
 8003232:	2200      	movs	r2, #0
 8003234:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003236:	4b20      	ldr	r3, [pc, #128]	@ (80032b8 <HAL_I2C_MspInit+0x2b4>)
 8003238:	2200      	movs	r2, #0
 800323a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800323c:	4b1e      	ldr	r3, [pc, #120]	@ (80032b8 <HAL_I2C_MspInit+0x2b4>)
 800323e:	2200      	movs	r2, #0
 8003240:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003242:	4b1d      	ldr	r3, [pc, #116]	@ (80032b8 <HAL_I2C_MspInit+0x2b4>)
 8003244:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003248:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800324a:	4b1b      	ldr	r3, [pc, #108]	@ (80032b8 <HAL_I2C_MspInit+0x2b4>)
 800324c:	2200      	movs	r2, #0
 800324e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8003250:	4819      	ldr	r0, [pc, #100]	@ (80032b8 <HAL_I2C_MspInit+0x2b4>)
 8003252:	f003 fad7 	bl	8006804 <HAL_DMA_Init>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_I2C_MspInit+0x25c>
      Error_Handler();
 800325c:	f7ff fc36 	bl	8002acc <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a15      	ldr	r2, [pc, #84]	@ (80032b8 <HAL_I2C_MspInit+0x2b4>)
 8003264:	639a      	str	r2, [r3, #56]	@ 0x38
 8003266:	4a14      	ldr	r2, [pc, #80]	@ (80032b8 <HAL_I2C_MspInit+0x2b4>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800326c:	2200      	movs	r2, #0
 800326e:	2100      	movs	r1, #0
 8003270:	2021      	movs	r0, #33	@ 0x21
 8003272:	f003 fa92 	bl	800679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003276:	2021      	movs	r0, #33	@ 0x21
 8003278:	f003 faa9 	bl	80067ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800327c:	2200      	movs	r2, #0
 800327e:	2100      	movs	r1, #0
 8003280:	2022      	movs	r0, #34	@ 0x22
 8003282:	f003 fa8a 	bl	800679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003286:	2022      	movs	r0, #34	@ 0x22
 8003288:	f003 faa1 	bl	80067ce <HAL_NVIC_EnableIRQ>
}
 800328c:	bf00      	nop
 800328e:	37e8      	adds	r7, #232	@ 0xe8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40005400 	.word	0x40005400
 8003298:	58024400 	.word	0x58024400
 800329c:	58020400 	.word	0x58020400
 80032a0:	24000730 	.word	0x24000730
 80032a4:	400200a0 	.word	0x400200a0
 80032a8:	40005800 	.word	0x40005800
 80032ac:	58021400 	.word	0x58021400
 80032b0:	240007a8 	.word	0x240007a8
 80032b4:	40020040 	.word	0x40020040
 80032b8:	24000820 	.word	0x24000820
 80032bc:	40020058 	.word	0x40020058

080032c0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b096      	sub	sp, #88	@ 0x58
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4ab3      	ldr	r2, [pc, #716]	@ (80035ac <HAL_TIM_Encoder_MspInit+0x2ec>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d12f      	bne.n	8003342 <HAL_TIM_Encoder_MspInit+0x82>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032e2:	4bb3      	ldr	r3, [pc, #716]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 80032e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032e8:	4ab1      	ldr	r2, [pc, #708]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80032f2:	4baf      	ldr	r3, [pc, #700]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 80032f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80032fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003300:	4bab      	ldr	r3, [pc, #684]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 8003302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003306:	4aaa      	ldr	r2, [pc, #680]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 8003308:	f043 0310 	orr.w	r3, r3, #16
 800330c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003310:	4ba7      	ldr	r3, [pc, #668]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 8003312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800331c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800331e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003322:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332c:	2300      	movs	r3, #0
 800332e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003330:	2301      	movs	r3, #1
 8003332:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003334:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003338:	4619      	mov	r1, r3
 800333a:	489e      	ldr	r0, [pc, #632]	@ (80035b4 <HAL_TIM_Encoder_MspInit+0x2f4>)
 800333c:	f006 f8a8 	bl	8009490 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM24_MspInit 1 */

    /* USER CODE END TIM24_MspInit 1 */
  }

}
 8003340:	e180      	b.n	8003644 <HAL_TIM_Encoder_MspInit+0x384>
  else if(htim_encoder->Instance==TIM2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800334a:	d14d      	bne.n	80033e8 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800334c:	4b98      	ldr	r3, [pc, #608]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 800334e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003352:	4a97      	ldr	r2, [pc, #604]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800335c:	4b94      	ldr	r3, [pc, #592]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 800335e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800336a:	4b91      	ldr	r3, [pc, #580]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 800336c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003370:	4a8f      	ldr	r2, [pc, #572]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800337a:	4b8d      	ldr	r3, [pc, #564]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 800337c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	637b      	str	r3, [r7, #52]	@ 0x34
 8003386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003388:	4b89      	ldr	r3, [pc, #548]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 800338a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800338e:	4a88      	ldr	r2, [pc, #544]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 8003390:	f043 0302 	orr.w	r3, r3, #2
 8003394:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003398:	4b85      	ldr	r3, [pc, #532]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 800339a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80033a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80033a6:	2320      	movs	r3, #32
 80033a8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033aa:	2302      	movs	r3, #2
 80033ac:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b2:	2300      	movs	r3, #0
 80033b4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033b6:	2301      	movs	r3, #1
 80033b8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ba:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80033be:	4619      	mov	r1, r3
 80033c0:	487d      	ldr	r0, [pc, #500]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x2f8>)
 80033c2:	f006 f865 	bl	8009490 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033c6:	2308      	movs	r3, #8
 80033c8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ca:	2302      	movs	r3, #2
 80033cc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d2:	2300      	movs	r3, #0
 80033d4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033d6:	2301      	movs	r3, #1
 80033d8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033da:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80033de:	4619      	mov	r1, r3
 80033e0:	4876      	ldr	r0, [pc, #472]	@ (80035bc <HAL_TIM_Encoder_MspInit+0x2fc>)
 80033e2:	f006 f855 	bl	8009490 <HAL_GPIO_Init>
}
 80033e6:	e12d      	b.n	8003644 <HAL_TIM_Encoder_MspInit+0x384>
  else if(htim_encoder->Instance==TIM3)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a74      	ldr	r2, [pc, #464]	@ (80035c0 <HAL_TIM_Encoder_MspInit+0x300>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d12e      	bne.n	8003450 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033f2:	4b6f      	ldr	r3, [pc, #444]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 80033f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033f8:	4a6d      	ldr	r2, [pc, #436]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 80033fa:	f043 0302 	orr.w	r3, r3, #2
 80033fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003402:	4b6b      	ldr	r3, [pc, #428]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 8003404:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800340e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003410:	4b67      	ldr	r3, [pc, #412]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 8003412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003416:	4a66      	ldr	r2, [pc, #408]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003420:	4b63      	ldr	r3, [pc, #396]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 8003422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800342c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800342e:	2330      	movs	r3, #48	@ 0x30
 8003430:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003432:	2302      	movs	r3, #2
 8003434:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343a:	2300      	movs	r3, #0
 800343c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800343e:	2302      	movs	r3, #2
 8003440:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003442:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003446:	4619      	mov	r1, r3
 8003448:	485c      	ldr	r0, [pc, #368]	@ (80035bc <HAL_TIM_Encoder_MspInit+0x2fc>)
 800344a:	f006 f821 	bl	8009490 <HAL_GPIO_Init>
}
 800344e:	e0f9      	b.n	8003644 <HAL_TIM_Encoder_MspInit+0x384>
  else if(htim_encoder->Instance==TIM4)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a5b      	ldr	r2, [pc, #364]	@ (80035c4 <HAL_TIM_Encoder_MspInit+0x304>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d12f      	bne.n	80034ba <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800345a:	4b55      	ldr	r3, [pc, #340]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 800345c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003460:	4a53      	ldr	r2, [pc, #332]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 8003462:	f043 0304 	orr.w	r3, r3, #4
 8003466:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800346a:	4b51      	ldr	r3, [pc, #324]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 800346c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
 8003476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003478:	4b4d      	ldr	r3, [pc, #308]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 800347a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800347e:	4a4c      	ldr	r2, [pc, #304]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 8003480:	f043 0308 	orr.w	r3, r3, #8
 8003484:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003488:	4b49      	ldr	r3, [pc, #292]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 800348a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	623b      	str	r3, [r7, #32]
 8003494:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003496:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800349a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349c:	2302      	movs	r3, #2
 800349e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a4:	2300      	movs	r3, #0
 80034a6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80034a8:	2302      	movs	r3, #2
 80034aa:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034ac:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80034b0:	4619      	mov	r1, r3
 80034b2:	4845      	ldr	r0, [pc, #276]	@ (80035c8 <HAL_TIM_Encoder_MspInit+0x308>)
 80034b4:	f005 ffec 	bl	8009490 <HAL_GPIO_Init>
}
 80034b8:	e0c4      	b.n	8003644 <HAL_TIM_Encoder_MspInit+0x384>
  else if(htim_encoder->Instance==TIM8)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a43      	ldr	r2, [pc, #268]	@ (80035cc <HAL_TIM_Encoder_MspInit+0x30c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d13e      	bne.n	8003542 <HAL_TIM_Encoder_MspInit+0x282>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80034c4:	4b3a      	ldr	r3, [pc, #232]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 80034c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034ca:	4a39      	ldr	r2, [pc, #228]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 80034cc:	f043 0302 	orr.w	r3, r3, #2
 80034d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034d4:	4b36      	ldr	r3, [pc, #216]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 80034d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	61fb      	str	r3, [r7, #28]
 80034e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034e2:	4b33      	ldr	r3, [pc, #204]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 80034e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034e8:	4a31      	ldr	r2, [pc, #196]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 80034ea:	f043 0304 	orr.w	r3, r3, #4
 80034ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034f2:	4b2f      	ldr	r3, [pc, #188]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 80034f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003500:	23c0      	movs	r3, #192	@ 0xc0
 8003502:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	2302      	movs	r3, #2
 8003506:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350c:	2300      	movs	r3, #0
 800350e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003510:	2303      	movs	r3, #3
 8003512:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003514:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003518:	4619      	mov	r1, r3
 800351a:	482d      	ldr	r0, [pc, #180]	@ (80035d0 <HAL_TIM_Encoder_MspInit+0x310>)
 800351c:	f005 ffb8 	bl	8009490 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003520:	2200      	movs	r2, #0
 8003522:	2100      	movs	r1, #0
 8003524:	202c      	movs	r0, #44	@ 0x2c
 8003526:	f003 f938 	bl	800679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800352a:	202c      	movs	r0, #44	@ 0x2c
 800352c:	f003 f94f 	bl	80067ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003530:	2200      	movs	r2, #0
 8003532:	2100      	movs	r1, #0
 8003534:	202d      	movs	r0, #45	@ 0x2d
 8003536:	f003 f930 	bl	800679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800353a:	202d      	movs	r0, #45	@ 0x2d
 800353c:	f003 f947 	bl	80067ce <HAL_NVIC_EnableIRQ>
}
 8003540:	e080      	b.n	8003644 <HAL_TIM_Encoder_MspInit+0x384>
  else if(htim_encoder->Instance==TIM23)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a23      	ldr	r2, [pc, #140]	@ (80035d4 <HAL_TIM_Encoder_MspInit+0x314>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d147      	bne.n	80035dc <HAL_TIM_Encoder_MspInit+0x31c>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800354c:	4b18      	ldr	r3, [pc, #96]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 800354e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003552:	4a17      	ldr	r2, [pc, #92]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 8003554:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003558:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800355c:	4b14      	ldr	r3, [pc, #80]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 800355e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003562:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800356a:	4b11      	ldr	r3, [pc, #68]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 800356c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003570:	4a0f      	ldr	r2, [pc, #60]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 8003572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003576:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800357a:	4b0d      	ldr	r3, [pc, #52]	@ (80035b0 <HAL_TIM_Encoder_MspInit+0x2f0>)
 800357c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003588:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800358c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358e:	2302      	movs	r3, #2
 8003590:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	2300      	movs	r3, #0
 8003594:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003596:	2300      	movs	r3, #0
 8003598:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 800359a:	230d      	movs	r3, #13
 800359c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800359e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80035a2:	4619      	mov	r1, r3
 80035a4:	480c      	ldr	r0, [pc, #48]	@ (80035d8 <HAL_TIM_Encoder_MspInit+0x318>)
 80035a6:	f005 ff73 	bl	8009490 <HAL_GPIO_Init>
}
 80035aa:	e04b      	b.n	8003644 <HAL_TIM_Encoder_MspInit+0x384>
 80035ac:	40010000 	.word	0x40010000
 80035b0:	58024400 	.word	0x58024400
 80035b4:	58021000 	.word	0x58021000
 80035b8:	58020000 	.word	0x58020000
 80035bc:	58020400 	.word	0x58020400
 80035c0:	40000400 	.word	0x40000400
 80035c4:	40000800 	.word	0x40000800
 80035c8:	58020c00 	.word	0x58020c00
 80035cc:	40010400 	.word	0x40010400
 80035d0:	58020800 	.word	0x58020800
 80035d4:	4000e000 	.word	0x4000e000
 80035d8:	58021800 	.word	0x58021800
  else if(htim_encoder->Instance==TIM24)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1a      	ldr	r2, [pc, #104]	@ (800364c <HAL_TIM_Encoder_MspInit+0x38c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d12e      	bne.n	8003644 <HAL_TIM_Encoder_MspInit+0x384>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80035e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003650 <HAL_TIM_Encoder_MspInit+0x390>)
 80035e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80035ec:	4a18      	ldr	r2, [pc, #96]	@ (8003650 <HAL_TIM_Encoder_MspInit+0x390>)
 80035ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035f2:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80035f6:	4b16      	ldr	r3, [pc, #88]	@ (8003650 <HAL_TIM_Encoder_MspInit+0x390>)
 80035f8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80035fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003604:	4b12      	ldr	r3, [pc, #72]	@ (8003650 <HAL_TIM_Encoder_MspInit+0x390>)
 8003606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800360a:	4a11      	ldr	r2, [pc, #68]	@ (8003650 <HAL_TIM_Encoder_MspInit+0x390>)
 800360c:	f043 0320 	orr.w	r3, r3, #32
 8003610:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003614:	4b0e      	ldr	r3, [pc, #56]	@ (8003650 <HAL_TIM_Encoder_MspInit+0x390>)
 8003616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003622:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003626:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003628:	2302      	movs	r3, #2
 800362a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362c:	2300      	movs	r3, #0
 800362e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003630:	2300      	movs	r3, #0
 8003632:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8003634:	230e      	movs	r3, #14
 8003636:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003638:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800363c:	4619      	mov	r1, r3
 800363e:	4805      	ldr	r0, [pc, #20]	@ (8003654 <HAL_TIM_Encoder_MspInit+0x394>)
 8003640:	f005 ff26 	bl	8009490 <HAL_GPIO_Init>
}
 8003644:	bf00      	nop
 8003646:	3758      	adds	r7, #88	@ 0x58
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	4000e400 	.word	0x4000e400
 8003650:	58024400 	.word	0x58024400
 8003654:	58021400 	.word	0x58021400

08003658 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a20      	ldr	r2, [pc, #128]	@ (80036e8 <HAL_TIM_PWM_MspInit+0x90>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d10f      	bne.n	800368a <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800366a:	4b20      	ldr	r3, [pc, #128]	@ (80036ec <HAL_TIM_PWM_MspInit+0x94>)
 800366c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003670:	4a1e      	ldr	r2, [pc, #120]	@ (80036ec <HAL_TIM_PWM_MspInit+0x94>)
 8003672:	f043 0308 	orr.w	r3, r3, #8
 8003676:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800367a:	4b1c      	ldr	r3, [pc, #112]	@ (80036ec <HAL_TIM_PWM_MspInit+0x94>)
 800367c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM15_MspInit 1 */

    /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003688:	e028      	b.n	80036dc <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM12)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a18      	ldr	r2, [pc, #96]	@ (80036f0 <HAL_TIM_PWM_MspInit+0x98>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d10f      	bne.n	80036b4 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003694:	4b15      	ldr	r3, [pc, #84]	@ (80036ec <HAL_TIM_PWM_MspInit+0x94>)
 8003696:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800369a:	4a14      	ldr	r2, [pc, #80]	@ (80036ec <HAL_TIM_PWM_MspInit+0x94>)
 800369c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80036a4:	4b11      	ldr	r3, [pc, #68]	@ (80036ec <HAL_TIM_PWM_MspInit+0x94>)
 80036a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	693b      	ldr	r3, [r7, #16]
}
 80036b2:	e013      	b.n	80036dc <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM15)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a0e      	ldr	r2, [pc, #56]	@ (80036f4 <HAL_TIM_PWM_MspInit+0x9c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d10e      	bne.n	80036dc <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80036be:	4b0b      	ldr	r3, [pc, #44]	@ (80036ec <HAL_TIM_PWM_MspInit+0x94>)
 80036c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036c4:	4a09      	ldr	r2, [pc, #36]	@ (80036ec <HAL_TIM_PWM_MspInit+0x94>)
 80036c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036ce:	4b07      	ldr	r3, [pc, #28]	@ (80036ec <HAL_TIM_PWM_MspInit+0x94>)
 80036d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	68fb      	ldr	r3, [r7, #12]
}
 80036dc:	bf00      	nop
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	40000c00 	.word	0x40000c00
 80036ec:	58024400 	.word	0x58024400
 80036f0:	40001800 	.word	0x40001800
 80036f4:	40014000 	.word	0x40014000

080036f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a4f      	ldr	r2, [pc, #316]	@ (8003844 <HAL_TIM_Base_MspInit+0x14c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d117      	bne.n	800373a <HAL_TIM_Base_MspInit+0x42>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800370a:	4b4f      	ldr	r3, [pc, #316]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 800370c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003710:	4a4d      	ldr	r2, [pc, #308]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 8003712:	f043 0310 	orr.w	r3, r3, #16
 8003716:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800371a:	4b4b      	ldr	r3, [pc, #300]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 800371c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003728:	2200      	movs	r2, #0
 800372a:	2100      	movs	r1, #0
 800372c:	2036      	movs	r0, #54	@ 0x36
 800372e:	f003 f834 	bl	800679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003732:	2036      	movs	r0, #54	@ 0x36
 8003734:	f003 f84b 	bl	80067ce <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003738:	e07f      	b.n	800383a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a43      	ldr	r2, [pc, #268]	@ (800384c <HAL_TIM_Base_MspInit+0x154>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d117      	bne.n	8003774 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003744:	4b40      	ldr	r3, [pc, #256]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 8003746:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800374a:	4a3f      	ldr	r2, [pc, #252]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 800374c:	f043 0320 	orr.w	r3, r3, #32
 8003750:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003754:	4b3c      	ldr	r3, [pc, #240]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 8003756:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	2100      	movs	r1, #0
 8003766:	2037      	movs	r0, #55	@ 0x37
 8003768:	f003 f817 	bl	800679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800376c:	2037      	movs	r0, #55	@ 0x37
 800376e:	f003 f82e 	bl	80067ce <HAL_NVIC_EnableIRQ>
}
 8003772:	e062      	b.n	800383a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM13)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a35      	ldr	r2, [pc, #212]	@ (8003850 <HAL_TIM_Base_MspInit+0x158>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d117      	bne.n	80037ae <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800377e:	4b32      	ldr	r3, [pc, #200]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 8003780:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003784:	4a30      	ldr	r2, [pc, #192]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 8003786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800378a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800378e:	4b2e      	ldr	r3, [pc, #184]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 8003790:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800379c:	2200      	movs	r2, #0
 800379e:	2100      	movs	r1, #0
 80037a0:	202c      	movs	r0, #44	@ 0x2c
 80037a2:	f002 fffa 	bl	800679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80037a6:	202c      	movs	r0, #44	@ 0x2c
 80037a8:	f003 f811 	bl	80067ce <HAL_NVIC_EnableIRQ>
}
 80037ac:	e045      	b.n	800383a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM14)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a28      	ldr	r2, [pc, #160]	@ (8003854 <HAL_TIM_Base_MspInit+0x15c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d117      	bne.n	80037e8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80037b8:	4b23      	ldr	r3, [pc, #140]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 80037ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037be:	4a22      	ldr	r2, [pc, #136]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 80037c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80037c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 80037ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80037d6:	2200      	movs	r2, #0
 80037d8:	2100      	movs	r1, #0
 80037da:	202d      	movs	r0, #45	@ 0x2d
 80037dc:	f002 ffdd 	bl	800679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80037e0:	202d      	movs	r0, #45	@ 0x2d
 80037e2:	f002 fff4 	bl	80067ce <HAL_NVIC_EnableIRQ>
}
 80037e6:	e028      	b.n	800383a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003858 <HAL_TIM_Base_MspInit+0x160>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d10f      	bne.n	8003812 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80037f2:	4b15      	ldr	r3, [pc, #84]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 80037f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037f8:	4a13      	ldr	r2, [pc, #76]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 80037fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003802:	4b11      	ldr	r3, [pc, #68]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 8003804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
}
 8003810:	e013      	b.n	800383a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM17)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a11      	ldr	r2, [pc, #68]	@ (800385c <HAL_TIM_Base_MspInit+0x164>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d10e      	bne.n	800383a <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800381c:	4b0a      	ldr	r3, [pc, #40]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 800381e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003822:	4a09      	ldr	r2, [pc, #36]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 8003824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003828:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800382c:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <HAL_TIM_Base_MspInit+0x150>)
 800382e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003832:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]
}
 800383a:	bf00      	nop
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40001000 	.word	0x40001000
 8003848:	58024400 	.word	0x58024400
 800384c:	40001400 	.word	0x40001400
 8003850:	40001c00 	.word	0x40001c00
 8003854:	40002000 	.word	0x40002000
 8003858:	40014400 	.word	0x40014400
 800385c:	40014800 	.word	0x40014800

08003860 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08c      	sub	sp, #48	@ 0x30
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003868:	f107 031c 	add.w	r3, r7, #28
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a5e      	ldr	r2, [pc, #376]	@ (80039f8 <HAL_TIM_MspPostInit+0x198>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d11f      	bne.n	80038c2 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003882:	4b5e      	ldr	r3, [pc, #376]	@ (80039fc <HAL_TIM_MspPostInit+0x19c>)
 8003884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003888:	4a5c      	ldr	r2, [pc, #368]	@ (80039fc <HAL_TIM_MspPostInit+0x19c>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003892:	4b5a      	ldr	r3, [pc, #360]	@ (80039fc <HAL_TIM_MspPostInit+0x19c>)
 8003894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80038a0:	230f      	movs	r3, #15
 80038a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a4:	2302      	movs	r3, #2
 80038a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80038a8:	2302      	movs	r3, #2
 80038aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ac:	2300      	movs	r3, #0
 80038ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80038b0:	2302      	movs	r3, #2
 80038b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b4:	f107 031c 	add.w	r3, r7, #28
 80038b8:	4619      	mov	r1, r3
 80038ba:	4851      	ldr	r0, [pc, #324]	@ (8003a00 <HAL_TIM_MspPostInit+0x1a0>)
 80038bc:	f005 fde8 	bl	8009490 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80038c0:	e095      	b.n	80039ee <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM12)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a4f      	ldr	r2, [pc, #316]	@ (8003a04 <HAL_TIM_MspPostInit+0x1a4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d120      	bne.n	800390e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038cc:	4b4b      	ldr	r3, [pc, #300]	@ (80039fc <HAL_TIM_MspPostInit+0x19c>)
 80038ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038d2:	4a4a      	ldr	r2, [pc, #296]	@ (80039fc <HAL_TIM_MspPostInit+0x19c>)
 80038d4:	f043 0302 	orr.w	r3, r3, #2
 80038d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038dc:	4b47      	ldr	r3, [pc, #284]	@ (80039fc <HAL_TIM_MspPostInit+0x19c>)
 80038de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80038ea:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80038ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f0:	2302      	movs	r3, #2
 80038f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f8:	2300      	movs	r3, #0
 80038fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80038fc:	2302      	movs	r3, #2
 80038fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003900:	f107 031c 	add.w	r3, r7, #28
 8003904:	4619      	mov	r1, r3
 8003906:	4840      	ldr	r0, [pc, #256]	@ (8003a08 <HAL_TIM_MspPostInit+0x1a8>)
 8003908:	f005 fdc2 	bl	8009490 <HAL_GPIO_Init>
}
 800390c:	e06f      	b.n	80039ee <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a3e      	ldr	r2, [pc, #248]	@ (8003a0c <HAL_TIM_MspPostInit+0x1ac>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d11f      	bne.n	8003958 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003918:	4b38      	ldr	r3, [pc, #224]	@ (80039fc <HAL_TIM_MspPostInit+0x19c>)
 800391a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800391e:	4a37      	ldr	r2, [pc, #220]	@ (80039fc <HAL_TIM_MspPostInit+0x19c>)
 8003920:	f043 0310 	orr.w	r3, r3, #16
 8003924:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003928:	4b34      	ldr	r3, [pc, #208]	@ (80039fc <HAL_TIM_MspPostInit+0x19c>)
 800392a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003936:	2360      	movs	r3, #96	@ 0x60
 8003938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393a:	2302      	movs	r3, #2
 800393c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393e:	2300      	movs	r3, #0
 8003940:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003942:	2300      	movs	r3, #0
 8003944:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003946:	2304      	movs	r3, #4
 8003948:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800394a:	f107 031c 	add.w	r3, r7, #28
 800394e:	4619      	mov	r1, r3
 8003950:	482f      	ldr	r0, [pc, #188]	@ (8003a10 <HAL_TIM_MspPostInit+0x1b0>)
 8003952:	f005 fd9d 	bl	8009490 <HAL_GPIO_Init>
}
 8003956:	e04a      	b.n	80039ee <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM16)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a2d      	ldr	r2, [pc, #180]	@ (8003a14 <HAL_TIM_MspPostInit+0x1b4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d120      	bne.n	80039a4 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003962:	4b26      	ldr	r3, [pc, #152]	@ (80039fc <HAL_TIM_MspPostInit+0x19c>)
 8003964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003968:	4a24      	ldr	r2, [pc, #144]	@ (80039fc <HAL_TIM_MspPostInit+0x19c>)
 800396a:	f043 0302 	orr.w	r3, r3, #2
 800396e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003972:	4b22      	ldr	r3, [pc, #136]	@ (80039fc <HAL_TIM_MspPostInit+0x19c>)
 8003974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003980:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003986:	2302      	movs	r3, #2
 8003988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398a:	2300      	movs	r3, #0
 800398c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800398e:	2300      	movs	r3, #0
 8003990:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003992:	2301      	movs	r3, #1
 8003994:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003996:	f107 031c 	add.w	r3, r7, #28
 800399a:	4619      	mov	r1, r3
 800399c:	481a      	ldr	r0, [pc, #104]	@ (8003a08 <HAL_TIM_MspPostInit+0x1a8>)
 800399e:	f005 fd77 	bl	8009490 <HAL_GPIO_Init>
}
 80039a2:	e024      	b.n	80039ee <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM17)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a18 <HAL_TIM_MspPostInit+0x1b8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d11f      	bne.n	80039ee <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ae:	4b13      	ldr	r3, [pc, #76]	@ (80039fc <HAL_TIM_MspPostInit+0x19c>)
 80039b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039b4:	4a11      	ldr	r2, [pc, #68]	@ (80039fc <HAL_TIM_MspPostInit+0x19c>)
 80039b6:	f043 0302 	orr.w	r3, r3, #2
 80039ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039be:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <HAL_TIM_MspPostInit+0x19c>)
 80039c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80039cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80039d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d2:	2302      	movs	r3, #2
 80039d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039da:	2300      	movs	r3, #0
 80039dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80039de:	2301      	movs	r3, #1
 80039e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e2:	f107 031c 	add.w	r3, r7, #28
 80039e6:	4619      	mov	r1, r3
 80039e8:	4807      	ldr	r0, [pc, #28]	@ (8003a08 <HAL_TIM_MspPostInit+0x1a8>)
 80039ea:	f005 fd51 	bl	8009490 <HAL_GPIO_Init>
}
 80039ee:	bf00      	nop
 80039f0:	3730      	adds	r7, #48	@ 0x30
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40000c00 	.word	0x40000c00
 80039fc:	58024400 	.word	0x58024400
 8003a00:	58020000 	.word	0x58020000
 8003a04:	40001800 	.word	0x40001800
 8003a08:	58020400 	.word	0x58020400
 8003a0c:	40014000 	.word	0x40014000
 8003a10:	58021000 	.word	0x58021000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800

08003a1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b0bc      	sub	sp, #240	@ 0xf0
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a24:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	60da      	str	r2, [r3, #12]
 8003a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a34:	f107 0320 	add.w	r3, r7, #32
 8003a38:	22b8      	movs	r2, #184	@ 0xb8
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f017 fa96 	bl	801af6e <memset>
  if(huart->Instance==USART1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a7f      	ldr	r2, [pc, #508]	@ (8003c44 <HAL_UART_MspInit+0x228>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	f040 80ae 	bne.w	8003baa <HAL_UART_MspInit+0x18e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a4e:	f04f 0201 	mov.w	r2, #1
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a60:	f107 0320 	add.w	r3, r7, #32
 8003a64:	4618      	mov	r0, r3
 8003a66:	f008 fb73 	bl	800c150 <HAL_RCCEx_PeriphCLKConfig>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003a70:	f7ff f82c 	bl	8002acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a74:	4b74      	ldr	r3, [pc, #464]	@ (8003c48 <HAL_UART_MspInit+0x22c>)
 8003a76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a7a:	4a73      	ldr	r2, [pc, #460]	@ (8003c48 <HAL_UART_MspInit+0x22c>)
 8003a7c:	f043 0310 	orr.w	r3, r3, #16
 8003a80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a84:	4b70      	ldr	r3, [pc, #448]	@ (8003c48 <HAL_UART_MspInit+0x22c>)
 8003a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	61fb      	str	r3, [r7, #28]
 8003a90:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a92:	4b6d      	ldr	r3, [pc, #436]	@ (8003c48 <HAL_UART_MspInit+0x22c>)
 8003a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a98:	4a6b      	ldr	r2, [pc, #428]	@ (8003c48 <HAL_UART_MspInit+0x22c>)
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003aa2:	4b69      	ldr	r3, [pc, #420]	@ (8003c48 <HAL_UART_MspInit+0x22c>)
 8003aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ab0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003ab4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab8:	2302      	movs	r3, #2
 8003aba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003aca:	2307      	movs	r3, #7
 8003acc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	485d      	ldr	r0, [pc, #372]	@ (8003c4c <HAL_UART_MspInit+0x230>)
 8003ad8:	f005 fcda 	bl	8009490 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream4;
 8003adc:	4b5c      	ldr	r3, [pc, #368]	@ (8003c50 <HAL_UART_MspInit+0x234>)
 8003ade:	4a5d      	ldr	r2, [pc, #372]	@ (8003c54 <HAL_UART_MspInit+0x238>)
 8003ae0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003ae2:	4b5b      	ldr	r3, [pc, #364]	@ (8003c50 <HAL_UART_MspInit+0x234>)
 8003ae4:	222a      	movs	r2, #42	@ 0x2a
 8003ae6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ae8:	4b59      	ldr	r3, [pc, #356]	@ (8003c50 <HAL_UART_MspInit+0x234>)
 8003aea:	2240      	movs	r2, #64	@ 0x40
 8003aec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aee:	4b58      	ldr	r3, [pc, #352]	@ (8003c50 <HAL_UART_MspInit+0x234>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003af4:	4b56      	ldr	r3, [pc, #344]	@ (8003c50 <HAL_UART_MspInit+0x234>)
 8003af6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003afa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003afc:	4b54      	ldr	r3, [pc, #336]	@ (8003c50 <HAL_UART_MspInit+0x234>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b02:	4b53      	ldr	r3, [pc, #332]	@ (8003c50 <HAL_UART_MspInit+0x234>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003b08:	4b51      	ldr	r3, [pc, #324]	@ (8003c50 <HAL_UART_MspInit+0x234>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003b0e:	4b50      	ldr	r3, [pc, #320]	@ (8003c50 <HAL_UART_MspInit+0x234>)
 8003b10:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003b14:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b16:	4b4e      	ldr	r3, [pc, #312]	@ (8003c50 <HAL_UART_MspInit+0x234>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003b1c:	484c      	ldr	r0, [pc, #304]	@ (8003c50 <HAL_UART_MspInit+0x234>)
 8003b1e:	f002 fe71 	bl	8006804 <HAL_DMA_Init>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8003b28:	f7fe ffd0 	bl	8002acc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a48      	ldr	r2, [pc, #288]	@ (8003c50 <HAL_UART_MspInit+0x234>)
 8003b30:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003b32:	4a47      	ldr	r2, [pc, #284]	@ (8003c50 <HAL_UART_MspInit+0x234>)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream1;
 8003b38:	4b47      	ldr	r3, [pc, #284]	@ (8003c58 <HAL_UART_MspInit+0x23c>)
 8003b3a:	4a48      	ldr	r2, [pc, #288]	@ (8003c5c <HAL_UART_MspInit+0x240>)
 8003b3c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003b3e:	4b46      	ldr	r3, [pc, #280]	@ (8003c58 <HAL_UART_MspInit+0x23c>)
 8003b40:	2229      	movs	r2, #41	@ 0x29
 8003b42:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b44:	4b44      	ldr	r3, [pc, #272]	@ (8003c58 <HAL_UART_MspInit+0x23c>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b4a:	4b43      	ldr	r3, [pc, #268]	@ (8003c58 <HAL_UART_MspInit+0x23c>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b50:	4b41      	ldr	r3, [pc, #260]	@ (8003c58 <HAL_UART_MspInit+0x23c>)
 8003b52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b56:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b58:	4b3f      	ldr	r3, [pc, #252]	@ (8003c58 <HAL_UART_MspInit+0x23c>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c58 <HAL_UART_MspInit+0x23c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003b64:	4b3c      	ldr	r3, [pc, #240]	@ (8003c58 <HAL_UART_MspInit+0x23c>)
 8003b66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b6a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8003c58 <HAL_UART_MspInit+0x23c>)
 8003b6e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003b72:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b74:	4b38      	ldr	r3, [pc, #224]	@ (8003c58 <HAL_UART_MspInit+0x23c>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003b7a:	4837      	ldr	r0, [pc, #220]	@ (8003c58 <HAL_UART_MspInit+0x23c>)
 8003b7c:	f002 fe42 	bl	8006804 <HAL_DMA_Init>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 8003b86:	f7fe ffa1 	bl	8002acc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a32      	ldr	r2, [pc, #200]	@ (8003c58 <HAL_UART_MspInit+0x23c>)
 8003b8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003b92:	4a31      	ldr	r2, [pc, #196]	@ (8003c58 <HAL_UART_MspInit+0x23c>)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	2025      	movs	r0, #37	@ 0x25
 8003b9e:	f002 fdfc 	bl	800679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ba2:	2025      	movs	r0, #37	@ 0x25
 8003ba4:	f002 fe13 	bl	80067ce <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8003ba8:	e111      	b.n	8003dce <HAL_UART_MspInit+0x3b2>
  else if(huart->Instance==USART2)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a2c      	ldr	r2, [pc, #176]	@ (8003c60 <HAL_UART_MspInit+0x244>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d159      	bne.n	8003c68 <HAL_UART_MspInit+0x24c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003bb4:	f04f 0202 	mov.w	r2, #2
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bc6:	f107 0320 	add.w	r3, r7, #32
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f008 fac0 	bl	800c150 <HAL_RCCEx_PeriphCLKConfig>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_UART_MspInit+0x1be>
      Error_Handler();
 8003bd6:	f7fe ff79 	bl	8002acc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bda:	4b1b      	ldr	r3, [pc, #108]	@ (8003c48 <HAL_UART_MspInit+0x22c>)
 8003bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003be0:	4a19      	ldr	r2, [pc, #100]	@ (8003c48 <HAL_UART_MspInit+0x22c>)
 8003be2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003be6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003bea:	4b17      	ldr	r3, [pc, #92]	@ (8003c48 <HAL_UART_MspInit+0x22c>)
 8003bec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bf8:	4b13      	ldr	r3, [pc, #76]	@ (8003c48 <HAL_UART_MspInit+0x22c>)
 8003bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bfe:	4a12      	ldr	r2, [pc, #72]	@ (8003c48 <HAL_UART_MspInit+0x22c>)
 8003c00:	f043 0308 	orr.w	r3, r3, #8
 8003c04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c08:	4b0f      	ldr	r3, [pc, #60]	@ (8003c48 <HAL_UART_MspInit+0x22c>)
 8003c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003c16:	2360      	movs	r3, #96	@ 0x60
 8003c18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c2e:	2307      	movs	r3, #7
 8003c30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c34:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003c38:	4619      	mov	r1, r3
 8003c3a:	480a      	ldr	r0, [pc, #40]	@ (8003c64 <HAL_UART_MspInit+0x248>)
 8003c3c:	f005 fc28 	bl	8009490 <HAL_GPIO_Init>
}
 8003c40:	e0c5      	b.n	8003dce <HAL_UART_MspInit+0x3b2>
 8003c42:	bf00      	nop
 8003c44:	40011000 	.word	0x40011000
 8003c48:	58024400 	.word	0x58024400
 8003c4c:	58020000 	.word	0x58020000
 8003c50:	24000f14 	.word	0x24000f14
 8003c54:	40020070 	.word	0x40020070
 8003c58:	24000f8c 	.word	0x24000f8c
 8003c5c:	40020028 	.word	0x40020028
 8003c60:	40004400 	.word	0x40004400
 8003c64:	58020c00 	.word	0x58020c00
  else if(huart->Instance==USART3)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a5a      	ldr	r2, [pc, #360]	@ (8003dd8 <HAL_UART_MspInit+0x3bc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	f040 80ad 	bne.w	8003dce <HAL_UART_MspInit+0x3b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003c74:	f04f 0202 	mov.w	r2, #2
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003c80:	2300      	movs	r3, #0
 8003c82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c86:	f107 0320 	add.w	r3, r7, #32
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f008 fa60 	bl	800c150 <HAL_RCCEx_PeriphCLKConfig>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_UART_MspInit+0x27e>
      Error_Handler();
 8003c96:	f7fe ff19 	bl	8002acc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c9a:	4b50      	ldr	r3, [pc, #320]	@ (8003ddc <HAL_UART_MspInit+0x3c0>)
 8003c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ca0:	4a4e      	ldr	r2, [pc, #312]	@ (8003ddc <HAL_UART_MspInit+0x3c0>)
 8003ca2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ca6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003caa:	4b4c      	ldr	r3, [pc, #304]	@ (8003ddc <HAL_UART_MspInit+0x3c0>)
 8003cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003cb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cb8:	4b48      	ldr	r3, [pc, #288]	@ (8003ddc <HAL_UART_MspInit+0x3c0>)
 8003cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cbe:	4a47      	ldr	r2, [pc, #284]	@ (8003ddc <HAL_UART_MspInit+0x3c0>)
 8003cc0:	f043 0308 	orr.w	r3, r3, #8
 8003cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003cc8:	4b44      	ldr	r3, [pc, #272]	@ (8003ddc <HAL_UART_MspInit+0x3c0>)
 8003cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	60bb      	str	r3, [r7, #8]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003cd6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003cda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cea:	2300      	movs	r3, #0
 8003cec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003cf0:	2307      	movs	r3, #7
 8003cf2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cf6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4838      	ldr	r0, [pc, #224]	@ (8003de0 <HAL_UART_MspInit+0x3c4>)
 8003cfe:	f005 fbc7 	bl	8009490 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream7;
 8003d02:	4b38      	ldr	r3, [pc, #224]	@ (8003de4 <HAL_UART_MspInit+0x3c8>)
 8003d04:	4a38      	ldr	r2, [pc, #224]	@ (8003de8 <HAL_UART_MspInit+0x3cc>)
 8003d06:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003d08:	4b36      	ldr	r3, [pc, #216]	@ (8003de4 <HAL_UART_MspInit+0x3c8>)
 8003d0a:	222d      	movs	r2, #45	@ 0x2d
 8003d0c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d0e:	4b35      	ldr	r3, [pc, #212]	@ (8003de4 <HAL_UART_MspInit+0x3c8>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d14:	4b33      	ldr	r3, [pc, #204]	@ (8003de4 <HAL_UART_MspInit+0x3c8>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d1a:	4b32      	ldr	r3, [pc, #200]	@ (8003de4 <HAL_UART_MspInit+0x3c8>)
 8003d1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d20:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d22:	4b30      	ldr	r3, [pc, #192]	@ (8003de4 <HAL_UART_MspInit+0x3c8>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d28:	4b2e      	ldr	r3, [pc, #184]	@ (8003de4 <HAL_UART_MspInit+0x3c8>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8003de4 <HAL_UART_MspInit+0x3c8>)
 8003d30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d34:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003d36:	4b2b      	ldr	r3, [pc, #172]	@ (8003de4 <HAL_UART_MspInit+0x3c8>)
 8003d38:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003d3c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d3e:	4b29      	ldr	r3, [pc, #164]	@ (8003de4 <HAL_UART_MspInit+0x3c8>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003d44:	4827      	ldr	r0, [pc, #156]	@ (8003de4 <HAL_UART_MspInit+0x3c8>)
 8003d46:	f002 fd5d 	bl	8006804 <HAL_DMA_Init>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_UART_MspInit+0x338>
      Error_Handler();
 8003d50:	f7fe febc 	bl	8002acc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a23      	ldr	r2, [pc, #140]	@ (8003de4 <HAL_UART_MspInit+0x3c8>)
 8003d58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003d5c:	4a21      	ldr	r2, [pc, #132]	@ (8003de4 <HAL_UART_MspInit+0x3c8>)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA2_Stream0;
 8003d62:	4b22      	ldr	r3, [pc, #136]	@ (8003dec <HAL_UART_MspInit+0x3d0>)
 8003d64:	4a22      	ldr	r2, [pc, #136]	@ (8003df0 <HAL_UART_MspInit+0x3d4>)
 8003d66:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003d68:	4b20      	ldr	r3, [pc, #128]	@ (8003dec <HAL_UART_MspInit+0x3d0>)
 8003d6a:	222e      	movs	r2, #46	@ 0x2e
 8003d6c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8003dec <HAL_UART_MspInit+0x3d0>)
 8003d70:	2240      	movs	r2, #64	@ 0x40
 8003d72:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d74:	4b1d      	ldr	r3, [pc, #116]	@ (8003dec <HAL_UART_MspInit+0x3d0>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003dec <HAL_UART_MspInit+0x3d0>)
 8003d7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d80:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d82:	4b1a      	ldr	r3, [pc, #104]	@ (8003dec <HAL_UART_MspInit+0x3d0>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d88:	4b18      	ldr	r3, [pc, #96]	@ (8003dec <HAL_UART_MspInit+0x3d0>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003d8e:	4b17      	ldr	r3, [pc, #92]	@ (8003dec <HAL_UART_MspInit+0x3d0>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003d94:	4b15      	ldr	r3, [pc, #84]	@ (8003dec <HAL_UART_MspInit+0x3d0>)
 8003d96:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003d9a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d9c:	4b13      	ldr	r3, [pc, #76]	@ (8003dec <HAL_UART_MspInit+0x3d0>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003da2:	4812      	ldr	r0, [pc, #72]	@ (8003dec <HAL_UART_MspInit+0x3d0>)
 8003da4:	f002 fd2e 	bl	8006804 <HAL_DMA_Init>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_UART_MspInit+0x396>
      Error_Handler();
 8003dae:	f7fe fe8d 	bl	8002acc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a0d      	ldr	r2, [pc, #52]	@ (8003dec <HAL_UART_MspInit+0x3d0>)
 8003db6:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003db8:	4a0c      	ldr	r2, [pc, #48]	@ (8003dec <HAL_UART_MspInit+0x3d0>)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	2027      	movs	r0, #39	@ 0x27
 8003dc4:	f002 fce9 	bl	800679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003dc8:	2027      	movs	r0, #39	@ 0x27
 8003dca:	f002 fd00 	bl	80067ce <HAL_NVIC_EnableIRQ>
}
 8003dce:	bf00      	nop
 8003dd0:	37f0      	adds	r7, #240	@ 0xf0
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40004800 	.word	0x40004800
 8003ddc:	58024400 	.word	0x58024400
 8003de0:	58020c00 	.word	0x58020c00
 8003de4:	24001004 	.word	0x24001004
 8003de8:	400200b8 	.word	0x400200b8
 8003dec:	2400107c 	.word	0x2400107c
 8003df0:	40020410 	.word	0x40020410

08003df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003df8:	bf00      	nop
 8003dfa:	e7fd      	b.n	8003df8 <NMI_Handler+0x4>

08003dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <HardFault_Handler+0x4>

08003e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e08:	bf00      	nop
 8003e0a:	e7fd      	b.n	8003e08 <MemManage_Handler+0x4>

08003e0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e10:	bf00      	nop
 8003e12:	e7fd      	b.n	8003e10 <BusFault_Handler+0x4>

08003e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e18:	bf00      	nop
 8003e1a:	e7fd      	b.n	8003e18 <UsageFault_Handler+0x4>

08003e1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e20:	bf00      	nop
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e4a:	f000 fb19 	bl	8004480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003e52:	b480      	push	{r7}
 8003e54:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003e64:	2001      	movs	r0, #1
 8003e66:	f005 fcec 	bl	8009842 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003e72:	2002      	movs	r0, #2
 8003e74:	f005 fce5 	bl	8009842 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003e78:	bf00      	nop
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003e80:	2004      	movs	r0, #4
 8003e82:	f005 fcde 	bl	8009842 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e90:	4802      	ldr	r0, [pc, #8]	@ (8003e9c <DMA1_Stream0_IRQHandler+0x10>)
 8003e92:	f003 ffdd 	bl	8007e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	24000598 	.word	0x24000598

08003ea0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003ea4:	4802      	ldr	r0, [pc, #8]	@ (8003eb0 <DMA1_Stream1_IRQHandler+0x10>)
 8003ea6:	f003 ffd3 	bl	8007e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	24000f8c 	.word	0x24000f8c

08003eb4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8003eb8:	4802      	ldr	r0, [pc, #8]	@ (8003ec4 <DMA1_Stream2_IRQHandler+0x10>)
 8003eba:	f003 ffc9 	bl	8007e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	240007a8 	.word	0x240007a8

08003ec8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8003ecc:	4802      	ldr	r0, [pc, #8]	@ (8003ed8 <DMA1_Stream3_IRQHandler+0x10>)
 8003ece:	f003 ffbf 	bl	8007e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	24000820 	.word	0x24000820

08003edc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003ee0:	4802      	ldr	r0, [pc, #8]	@ (8003eec <DMA1_Stream4_IRQHandler+0x10>)
 8003ee2:	f003 ffb5 	bl	8007e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	24000f14 	.word	0x24000f14

08003ef0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003ef4:	4802      	ldr	r0, [pc, #8]	@ (8003f00 <DMA1_Stream5_IRQHandler+0x10>)
 8003ef6:	f003 ffab 	bl	8007e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	24000610 	.word	0x24000610

08003f04 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003f08:	4802      	ldr	r0, [pc, #8]	@ (8003f14 <DMA1_Stream6_IRQHandler+0x10>)
 8003f0a:	f003 ffa1 	bl	8007e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	24000730 	.word	0x24000730

08003f18 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003f1c:	4803      	ldr	r0, [pc, #12]	@ (8003f2c <ADC_IRQHandler+0x14>)
 8003f1e:	f001 f8ef 	bl	8005100 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003f22:	4803      	ldr	r0, [pc, #12]	@ (8003f30 <ADC_IRQHandler+0x18>)
 8003f24:	f001 f8ec 	bl	8005100 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003f28:	bf00      	nop
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	24000448 	.word	0x24000448
 8003f30:	240004b8 	.word	0x240004b8

08003f34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003f38:	2080      	movs	r0, #128	@ 0x80
 8003f3a:	f005 fc82 	bl	8009842 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003f48:	4802      	ldr	r0, [pc, #8]	@ (8003f54 <I2C2_EV_IRQHandler+0x10>)
 8003f4a:	f005 ff3f 	bl	8009dcc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	240006dc 	.word	0x240006dc

08003f58 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003f5c:	4802      	ldr	r0, [pc, #8]	@ (8003f68 <I2C2_ER_IRQHandler+0x10>)
 8003f5e:	f005 ff4f 	bl	8009e00 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	240006dc 	.word	0x240006dc

08003f6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f70:	4802      	ldr	r0, [pc, #8]	@ (8003f7c <USART1_IRQHandler+0x10>)
 8003f72:	f00c f8f3 	bl	801015c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	24000d58 	.word	0x24000d58

08003f80 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f84:	4802      	ldr	r0, [pc, #8]	@ (8003f90 <USART3_IRQHandler+0x10>)
 8003f86:	f00c f8e9 	bl	801015c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	24000e80 	.word	0x24000e80

08003f94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003f98:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003f9c:	f005 fc51 	bl	8009842 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003fa0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003fa4:	f005 fc4d 	bl	8009842 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003fa8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003fac:	f005 fc49 	bl	8009842 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003fb0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003fb4:	f005 fc45 	bl	8009842 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003fb8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003fbc:	f005 fc41 	bl	8009842 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003fc0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003fc4:	f005 fc3d 	bl	8009842 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fc8:	bf00      	nop
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003fd0:	4803      	ldr	r0, [pc, #12]	@ (8003fe0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8003fd2:	f00b f875 	bl	800f0c0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8003fd6:	4803      	ldr	r0, [pc, #12]	@ (8003fe4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8003fd8:	f00b f872 	bl	800f0c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003fdc:	bf00      	nop
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	24000aac 	.word	0x24000aac
 8003fe4:	24000b44 	.word	0x24000b44

08003fe8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003fec:	4803      	ldr	r0, [pc, #12]	@ (8003ffc <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8003fee:	f00b f867 	bl	800f0c0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8003ff2:	4803      	ldr	r0, [pc, #12]	@ (8004000 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8003ff4:	f00b f864 	bl	800f0c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003ff8:	bf00      	nop
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	24000aac 	.word	0x24000aac
 8004000:	24000b90 	.word	0x24000b90

08004004 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004008:	4802      	ldr	r0, [pc, #8]	@ (8004014 <DMA1_Stream7_IRQHandler+0x10>)
 800400a:	f003 ff21 	bl	8007e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800400e:	bf00      	nop
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	24001004 	.word	0x24001004

08004018 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800401c:	4802      	ldr	r0, [pc, #8]	@ (8004028 <TIM6_DAC_IRQHandler+0x10>)
 800401e:	f00b f84f 	bl	800f0c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	24000a14 	.word	0x24000a14

0800402c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004030:	4802      	ldr	r0, [pc, #8]	@ (800403c <TIM7_IRQHandler+0x10>)
 8004032:	f00b f845 	bl	800f0c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	24000a60 	.word	0x24000a60

08004040 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004044:	4802      	ldr	r0, [pc, #8]	@ (8004050 <DMA2_Stream0_IRQHandler+0x10>)
 8004046:	f003 ff03 	bl	8007e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800404a:	bf00      	nop
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	2400107c 	.word	0x2400107c

08004054 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8004058:	4802      	ldr	r0, [pc, #8]	@ (8004064 <ADC3_IRQHandler+0x10>)
 800405a:	f001 f851 	bl	8005100 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800405e:	bf00      	nop
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	24000528 	.word	0x24000528

08004068 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return 1;
 800406c:	2301      	movs	r3, #1
}
 800406e:	4618      	mov	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <_kill>:

int _kill(int pid, int sig)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004082:	f017 f817 	bl	801b0b4 <__errno>
 8004086:	4603      	mov	r3, r0
 8004088:	2216      	movs	r2, #22
 800408a:	601a      	str	r2, [r3, #0]
  return -1;
 800408c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <_exit>:

void _exit (int status)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80040a0:	f04f 31ff 	mov.w	r1, #4294967295
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff ffe7 	bl	8004078 <_kill>
  while (1) {}    /* Make sure we hang here */
 80040aa:	bf00      	nop
 80040ac:	e7fd      	b.n	80040aa <_exit+0x12>

080040ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b086      	sub	sp, #24
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	e00a      	b.n	80040d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80040c0:	f3af 8000 	nop.w
 80040c4:	4601      	mov	r1, r0
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	60ba      	str	r2, [r7, #8]
 80040cc:	b2ca      	uxtb	r2, r1
 80040ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	3301      	adds	r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	dbf0      	blt.n	80040c0 <_read+0x12>
  }

  return len;
 80040de:	687b      	ldr	r3, [r7, #4]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	e009      	b.n	800410e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	60ba      	str	r2, [r7, #8]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	3301      	adds	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	429a      	cmp	r2, r3
 8004114:	dbf1      	blt.n	80040fa <_write+0x12>
  }
  return len;
 8004116:	687b      	ldr	r3, [r7, #4]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <_close>:

int _close(int file)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004128:	f04f 33ff 	mov.w	r3, #4294967295
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004148:	605a      	str	r2, [r3, #4]
  return 0;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <_isatty>:

int _isatty(int file)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004160:	2301      	movs	r3, #1
}
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800416e:	b480      	push	{r7}
 8004170:	b085      	sub	sp, #20
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004190:	4a14      	ldr	r2, [pc, #80]	@ (80041e4 <_sbrk+0x5c>)
 8004192:	4b15      	ldr	r3, [pc, #84]	@ (80041e8 <_sbrk+0x60>)
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800419c:	4b13      	ldr	r3, [pc, #76]	@ (80041ec <_sbrk+0x64>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d102      	bne.n	80041aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041a4:	4b11      	ldr	r3, [pc, #68]	@ (80041ec <_sbrk+0x64>)
 80041a6:	4a12      	ldr	r2, [pc, #72]	@ (80041f0 <_sbrk+0x68>)
 80041a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041aa:	4b10      	ldr	r3, [pc, #64]	@ (80041ec <_sbrk+0x64>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4413      	add	r3, r2
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d207      	bcs.n	80041c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041b8:	f016 ff7c 	bl	801b0b4 <__errno>
 80041bc:	4603      	mov	r3, r0
 80041be:	220c      	movs	r2, #12
 80041c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041c2:	f04f 33ff 	mov.w	r3, #4294967295
 80041c6:	e009      	b.n	80041dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041c8:	4b08      	ldr	r3, [pc, #32]	@ (80041ec <_sbrk+0x64>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041ce:	4b07      	ldr	r3, [pc, #28]	@ (80041ec <_sbrk+0x64>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4413      	add	r3, r2
 80041d6:	4a05      	ldr	r2, [pc, #20]	@ (80041ec <_sbrk+0x64>)
 80041d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041da:	68fb      	ldr	r3, [r7, #12]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	24050000 	.word	0x24050000
 80041e8:	00000400 	.word	0x00000400
 80041ec:	24001118 	.word	0x24001118
 80041f0:	24003f50 	.word	0x24003f50

080041f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80041f8:	4b3e      	ldr	r3, [pc, #248]	@ (80042f4 <SystemInit+0x100>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fe:	4a3d      	ldr	r2, [pc, #244]	@ (80042f4 <SystemInit+0x100>)
 8004200:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004204:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004208:	4b3b      	ldr	r3, [pc, #236]	@ (80042f8 <SystemInit+0x104>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	2b06      	cmp	r3, #6
 8004212:	d807      	bhi.n	8004224 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004214:	4b38      	ldr	r3, [pc, #224]	@ (80042f8 <SystemInit+0x104>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f023 030f 	bic.w	r3, r3, #15
 800421c:	4a36      	ldr	r2, [pc, #216]	@ (80042f8 <SystemInit+0x104>)
 800421e:	f043 0307 	orr.w	r3, r3, #7
 8004222:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004224:	4b35      	ldr	r3, [pc, #212]	@ (80042fc <SystemInit+0x108>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a34      	ldr	r2, [pc, #208]	@ (80042fc <SystemInit+0x108>)
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004230:	4b32      	ldr	r3, [pc, #200]	@ (80042fc <SystemInit+0x108>)
 8004232:	2200      	movs	r2, #0
 8004234:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004236:	4b31      	ldr	r3, [pc, #196]	@ (80042fc <SystemInit+0x108>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4930      	ldr	r1, [pc, #192]	@ (80042fc <SystemInit+0x108>)
 800423c:	4b30      	ldr	r3, [pc, #192]	@ (8004300 <SystemInit+0x10c>)
 800423e:	4013      	ands	r3, r2
 8004240:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004242:	4b2d      	ldr	r3, [pc, #180]	@ (80042f8 <SystemInit+0x104>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800424e:	4b2a      	ldr	r3, [pc, #168]	@ (80042f8 <SystemInit+0x104>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 030f 	bic.w	r3, r3, #15
 8004256:	4a28      	ldr	r2, [pc, #160]	@ (80042f8 <SystemInit+0x104>)
 8004258:	f043 0307 	orr.w	r3, r3, #7
 800425c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800425e:	4b27      	ldr	r3, [pc, #156]	@ (80042fc <SystemInit+0x108>)
 8004260:	2200      	movs	r2, #0
 8004262:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004264:	4b25      	ldr	r3, [pc, #148]	@ (80042fc <SystemInit+0x108>)
 8004266:	2200      	movs	r2, #0
 8004268:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800426a:	4b24      	ldr	r3, [pc, #144]	@ (80042fc <SystemInit+0x108>)
 800426c:	2200      	movs	r2, #0
 800426e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004270:	4b22      	ldr	r3, [pc, #136]	@ (80042fc <SystemInit+0x108>)
 8004272:	4a24      	ldr	r2, [pc, #144]	@ (8004304 <SystemInit+0x110>)
 8004274:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004276:	4b21      	ldr	r3, [pc, #132]	@ (80042fc <SystemInit+0x108>)
 8004278:	4a23      	ldr	r2, [pc, #140]	@ (8004308 <SystemInit+0x114>)
 800427a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800427c:	4b1f      	ldr	r3, [pc, #124]	@ (80042fc <SystemInit+0x108>)
 800427e:	4a23      	ldr	r2, [pc, #140]	@ (800430c <SystemInit+0x118>)
 8004280:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004282:	4b1e      	ldr	r3, [pc, #120]	@ (80042fc <SystemInit+0x108>)
 8004284:	2200      	movs	r2, #0
 8004286:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004288:	4b1c      	ldr	r3, [pc, #112]	@ (80042fc <SystemInit+0x108>)
 800428a:	4a20      	ldr	r2, [pc, #128]	@ (800430c <SystemInit+0x118>)
 800428c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800428e:	4b1b      	ldr	r3, [pc, #108]	@ (80042fc <SystemInit+0x108>)
 8004290:	2200      	movs	r2, #0
 8004292:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004294:	4b19      	ldr	r3, [pc, #100]	@ (80042fc <SystemInit+0x108>)
 8004296:	4a1d      	ldr	r2, [pc, #116]	@ (800430c <SystemInit+0x118>)
 8004298:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800429a:	4b18      	ldr	r3, [pc, #96]	@ (80042fc <SystemInit+0x108>)
 800429c:	2200      	movs	r2, #0
 800429e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80042a0:	4b16      	ldr	r3, [pc, #88]	@ (80042fc <SystemInit+0x108>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a15      	ldr	r2, [pc, #84]	@ (80042fc <SystemInit+0x108>)
 80042a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80042ac:	4b13      	ldr	r3, [pc, #76]	@ (80042fc <SystemInit+0x108>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80042b2:	4b12      	ldr	r3, [pc, #72]	@ (80042fc <SystemInit+0x108>)
 80042b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80042b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d113      	bne.n	80042e8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80042c0:	4b0e      	ldr	r3, [pc, #56]	@ (80042fc <SystemInit+0x108>)
 80042c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80042c6:	4a0d      	ldr	r2, [pc, #52]	@ (80042fc <SystemInit+0x108>)
 80042c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80042d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004310 <SystemInit+0x11c>)
 80042d2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80042d6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80042d8:	4b08      	ldr	r3, [pc, #32]	@ (80042fc <SystemInit+0x108>)
 80042da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80042de:	4a07      	ldr	r2, [pc, #28]	@ (80042fc <SystemInit+0x108>)
 80042e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80042e8:	bf00      	nop
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	e000ed00 	.word	0xe000ed00
 80042f8:	52002000 	.word	0x52002000
 80042fc:	58024400 	.word	0x58024400
 8004300:	eaf6ed7f 	.word	0xeaf6ed7f
 8004304:	02020200 	.word	0x02020200
 8004308:	01ff0000 	.word	0x01ff0000
 800430c:	01010280 	.word	0x01010280
 8004310:	52004000 	.word	0x52004000

08004314 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8004318:	4b09      	ldr	r3, [pc, #36]	@ (8004340 <ExitRun0Mode+0x2c>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	4a08      	ldr	r2, [pc, #32]	@ (8004340 <ExitRun0Mode+0x2c>)
 800431e:	f043 0302 	orr.w	r3, r3, #2
 8004322:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8004324:	bf00      	nop
 8004326:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <ExitRun0Mode+0x2c>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f9      	beq.n	8004326 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8004332:	bf00      	nop
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	58024800 	.word	0x58024800

08004344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004344:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8004380 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8004348:	f7ff ffe4 	bl	8004314 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800434c:	f7ff ff52 	bl	80041f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004350:	480c      	ldr	r0, [pc, #48]	@ (8004384 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004352:	490d      	ldr	r1, [pc, #52]	@ (8004388 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004354:	4a0d      	ldr	r2, [pc, #52]	@ (800438c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004358:	e002      	b.n	8004360 <LoopCopyDataInit>

0800435a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800435a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800435c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800435e:	3304      	adds	r3, #4

08004360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004364:	d3f9      	bcc.n	800435a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004366:	4a0a      	ldr	r2, [pc, #40]	@ (8004390 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004368:	4c0a      	ldr	r4, [pc, #40]	@ (8004394 <LoopFillZerobss+0x22>)
  movs r3, #0
 800436a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800436c:	e001      	b.n	8004372 <LoopFillZerobss>

0800436e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800436e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004370:	3204      	adds	r2, #4

08004372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004374:	d3fb      	bcc.n	800436e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004376:	f016 fea3 	bl	801b0c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800437a:	f7fc ffe5 	bl	8001348 <main>
  bx  lr
 800437e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004380:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004384:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004388:	2400028c 	.word	0x2400028c
  ldr r2, =_sidata
 800438c:	0801cecc 	.word	0x0801cecc
  ldr r2, =_sbss
 8004390:	24000290 	.word	0x24000290
  ldr r4, =_ebss
 8004394:	24003f4c 	.word	0x24003f4c

08004398 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004398:	e7fe      	b.n	8004398 <BDMA_Channel0_IRQHandler>
	...

0800439c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043a2:	2003      	movs	r0, #3
 80043a4:	f002 f9ee 	bl	8006784 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043a8:	f007 fcfc 	bl	800bda4 <HAL_RCC_GetSysClockFreq>
 80043ac:	4602      	mov	r2, r0
 80043ae:	4b15      	ldr	r3, [pc, #84]	@ (8004404 <HAL_Init+0x68>)
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	0a1b      	lsrs	r3, r3, #8
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	4913      	ldr	r1, [pc, #76]	@ (8004408 <HAL_Init+0x6c>)
 80043ba:	5ccb      	ldrb	r3, [r1, r3]
 80043bc:	f003 031f 	and.w	r3, r3, #31
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
 80043c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004404 <HAL_Init+0x68>)
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	4a0e      	ldr	r2, [pc, #56]	@ (8004408 <HAL_Init+0x6c>)
 80043d0:	5cd3      	ldrb	r3, [r2, r3]
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	fa22 f303 	lsr.w	r3, r2, r3
 80043dc:	4a0b      	ldr	r2, [pc, #44]	@ (800440c <HAL_Init+0x70>)
 80043de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043e0:	4a0b      	ldr	r2, [pc, #44]	@ (8004410 <HAL_Init+0x74>)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043e6:	2000      	movs	r0, #0
 80043e8:	f000 f814 	bl	8004414 <HAL_InitTick>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e002      	b.n	80043fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80043f6:	f7fe fc5f 	bl	8002cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	58024400 	.word	0x58024400
 8004408:	0801c91c 	.word	0x0801c91c
 800440c:	24000014 	.word	0x24000014
 8004410:	24000010 	.word	0x24000010

08004414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800441c:	4b15      	ldr	r3, [pc, #84]	@ (8004474 <HAL_InitTick+0x60>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e021      	b.n	800446c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004428:	4b13      	ldr	r3, [pc, #76]	@ (8004478 <HAL_InitTick+0x64>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4b11      	ldr	r3, [pc, #68]	@ (8004474 <HAL_InitTick+0x60>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	4619      	mov	r1, r3
 8004432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004436:	fbb3 f3f1 	udiv	r3, r3, r1
 800443a:	fbb2 f3f3 	udiv	r3, r2, r3
 800443e:	4618      	mov	r0, r3
 8004440:	f002 f9d3 	bl	80067ea <HAL_SYSTICK_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e00e      	b.n	800446c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b0f      	cmp	r3, #15
 8004452:	d80a      	bhi.n	800446a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004454:	2200      	movs	r2, #0
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	f04f 30ff 	mov.w	r0, #4294967295
 800445c:	f002 f99d 	bl	800679a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004460:	4a06      	ldr	r2, [pc, #24]	@ (800447c <HAL_InitTick+0x68>)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	e000      	b.n	800446c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	2400001c 	.word	0x2400001c
 8004478:	24000010 	.word	0x24000010
 800447c:	24000018 	.word	0x24000018

08004480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004484:	4b06      	ldr	r3, [pc, #24]	@ (80044a0 <HAL_IncTick+0x20>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	4b06      	ldr	r3, [pc, #24]	@ (80044a4 <HAL_IncTick+0x24>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4413      	add	r3, r2
 8004490:	4a04      	ldr	r2, [pc, #16]	@ (80044a4 <HAL_IncTick+0x24>)
 8004492:	6013      	str	r3, [r2, #0]
}
 8004494:	bf00      	nop
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	2400001c 	.word	0x2400001c
 80044a4:	2400111c 	.word	0x2400111c

080044a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  return uwTick;
 80044ac:	4b03      	ldr	r3, [pc, #12]	@ (80044bc <HAL_GetTick+0x14>)
 80044ae:	681b      	ldr	r3, [r3, #0]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	2400111c 	.word	0x2400111c

080044c0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80044ca:	4b07      	ldr	r3, [pc, #28]	@ (80044e8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	43db      	mvns	r3, r3
 80044d2:	401a      	ands	r2, r3
 80044d4:	4904      	ldr	r1, [pc, #16]	@ (80044e8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	4313      	orrs	r3, r2
 80044da:	604b      	str	r3, [r1, #4]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	58000400 	.word	0x58000400

080044ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	609a      	str	r2, [r3, #8]
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	609a      	str	r2, [r3, #8]
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a18      	ldr	r2, [pc, #96]	@ (80045c4 <LL_ADC_SetChannelPreselection+0x70>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d027      	beq.n	80045b6 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800456c:	2b00      	cmp	r3, #0
 800456e:	d107      	bne.n	8004580 <LL_ADC_SetChannelPreselection+0x2c>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	0e9b      	lsrs	r3, r3, #26
 8004574:	f003 031f 	and.w	r3, r3, #31
 8004578:	2201      	movs	r2, #1
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	e015      	b.n	80045ac <LL_ADC_SetChannelPreselection+0x58>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	fa93 f3a3 	rbit	r3, r3
 800458a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8004596:	2320      	movs	r3, #32
 8004598:	e003      	b.n	80045a2 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	fab3 f383 	clz	r3, r3
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	2201      	movs	r2, #1
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	69d2      	ldr	r2, [r2, #28]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 80045b6:	bf00      	nop
 80045b8:	371c      	adds	r7, #28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	58026000 	.word	0x58026000

080045c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3360      	adds	r3, #96	@ 0x60
 80045da:	461a      	mov	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4a10      	ldr	r2, [pc, #64]	@ (8004628 <LL_ADC_SetOffset+0x60>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d10b      	bne.n	8004604 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004602:	e00b      	b.n	800461c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	430b      	orrs	r3, r1
 8004616:	431a      	orrs	r2, r3
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	601a      	str	r2, [r3, #0]
}
 800461c:	bf00      	nop
 800461e:	371c      	adds	r7, #28
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	58026000 	.word	0x58026000

0800462c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3360      	adds	r3, #96	@ 0x60
 800463a:	461a      	mov	r2, r3
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	fa01 f303 	lsl.w	r3, r1, r3
 8004678:	431a      	orrs	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	611a      	str	r2, [r3, #16]
}
 800467e:	bf00      	nop
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
	...

0800468c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4a0c      	ldr	r2, [pc, #48]	@ (80046cc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00e      	beq.n	80046be <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3360      	adds	r3, #96	@ 0x60
 80046a4:	461a      	mov	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	431a      	orrs	r2, r3
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	601a      	str	r2, [r3, #0]
  }
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	58026000 	.word	0x58026000

080046d0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4a0c      	ldr	r2, [pc, #48]	@ (8004710 <LL_ADC_SetOffsetSaturation+0x40>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d10e      	bne.n	8004702 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3360      	adds	r3, #96	@ 0x60
 80046e8:	461a      	mov	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	431a      	orrs	r2, r3
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8004702:	bf00      	nop
 8004704:	371c      	adds	r7, #28
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	58026000 	.word	0x58026000

08004714 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a0c      	ldr	r2, [pc, #48]	@ (8004754 <LL_ADC_SetOffsetSign+0x40>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d10e      	bne.n	8004746 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3360      	adds	r3, #96	@ 0x60
 800472c:	461a      	mov	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	431a      	orrs	r2, r3
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004746:	bf00      	nop
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	58026000 	.word	0x58026000

08004758 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3360      	adds	r3, #96	@ 0x60
 8004768:	461a      	mov	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a0c      	ldr	r2, [pc, #48]	@ (80047a8 <LL_ADC_SetOffsetState+0x50>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d108      	bne.n	800478c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	431a      	orrs	r2, r3
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800478a:	e007      	b.n	800479c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	431a      	orrs	r2, r3
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	601a      	str	r2, [r3, #0]
}
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	58026000 	.word	0x58026000

080047ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b087      	sub	sp, #28
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3330      	adds	r3, #48	@ 0x30
 80047e2:	461a      	mov	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	f003 030c 	and.w	r3, r3, #12
 80047ee:	4413      	add	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	211f      	movs	r1, #31
 80047fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004802:	43db      	mvns	r3, r3
 8004804:	401a      	ands	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	0e9b      	lsrs	r3, r3, #26
 800480a:	f003 011f 	and.w	r1, r3, #31
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	fa01 f303 	lsl.w	r3, r1, r3
 8004818:	431a      	orrs	r2, r3
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800481e:	bf00      	nop
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f023 0203 	bic.w	r2, r3, #3
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	60da      	str	r2, [r3, #12]
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f043 0201 	orr.w	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	60da      	str	r2, [r3, #12]
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a08      	ldr	r2, [pc, #32]	@ (80048a0 <LL_ADC_REG_SetDMATransferMode+0x30>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d107      	bne.n	8004892 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f023 0203 	bic.w	r2, r3, #3
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	60da      	str	r2, [r3, #12]
  }
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	58026000 	.word	0x58026000

080048a4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b087      	sub	sp, #28
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3314      	adds	r3, #20
 80048da:	461a      	mov	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	0e5b      	lsrs	r3, r3, #25
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	4413      	add	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	0d1b      	lsrs	r3, r3, #20
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	2107      	movs	r1, #7
 80048f8:	fa01 f303 	lsl.w	r3, r1, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	401a      	ands	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	0d1b      	lsrs	r3, r3, #20
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	fa01 f303 	lsl.w	r3, r1, r3
 800490e:	431a      	orrs	r2, r3
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004914:	bf00      	nop
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a1a      	ldr	r2, [pc, #104]	@ (8004998 <LL_ADC_SetChannelSingleDiff+0x78>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d115      	bne.n	8004960 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004940:	43db      	mvns	r3, r3
 8004942:	401a      	ands	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f003 0318 	and.w	r3, r3, #24
 800494a:	4914      	ldr	r1, [pc, #80]	@ (800499c <LL_ADC_SetChannelSingleDiff+0x7c>)
 800494c:	40d9      	lsrs	r1, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	400b      	ands	r3, r1
 8004952:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004956:	431a      	orrs	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800495e:	e014      	b.n	800498a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800496c:	43db      	mvns	r3, r3
 800496e:	401a      	ands	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f003 0318 	and.w	r3, r3, #24
 8004976:	4909      	ldr	r1, [pc, #36]	@ (800499c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004978:	40d9      	lsrs	r1, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	400b      	ands	r3, r1
 800497e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004982:	431a      	orrs	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	58026000 	.word	0x58026000
 800499c:	000fffff 	.word	0x000fffff

080049a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 031f 	and.w	r3, r3, #31
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	4b04      	ldr	r3, [pc, #16]	@ (80049f8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6093      	str	r3, [r2, #8]
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	5fffffc0 	.word	0x5fffffc0

080049fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a10:	d101      	bne.n	8004a16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	4b05      	ldr	r3, [pc, #20]	@ (8004a48 <LL_ADC_EnableInternalRegulator+0x24>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	6fffffc0 	.word	0x6fffffc0

08004a4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a60:	d101      	bne.n	8004a66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <LL_ADC_Enable+0x24>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	f043 0201 	orr.w	r2, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	7fffffc0 	.word	0x7fffffc0

08004a9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <LL_ADC_IsEnabled+0x18>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <LL_ADC_IsEnabled+0x1a>
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <LL_ADC_REG_StartConversion+0x24>)
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	f043 0204 	orr.w	r2, r3, #4
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	7fffffc0 	.word	0x7fffffc0

08004aec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d101      	bne.n	8004b04 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d101      	bne.n	8004b2a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b38:	b590      	push	{r4, r7, lr}
 8004b3a:	b089      	sub	sp, #36	@ 0x24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e1ee      	b.n	8004f30 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d109      	bne.n	8004b74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7fe f8c9 	bl	8002cf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff ff3f 	bl	80049fc <LL_ADC_IsDeepPowerDownEnabled>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d004      	beq.n	8004b8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff ff25 	bl	80049d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff ff5a 	bl	8004a4c <LL_ADC_IsInternalRegulatorEnabled>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d114      	bne.n	8004bc8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff ff3e 	bl	8004a24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ba8:	4b8e      	ldr	r3, [pc, #568]	@ (8004de4 <HAL_ADC_Init+0x2ac>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	099b      	lsrs	r3, r3, #6
 8004bae:	4a8e      	ldr	r2, [pc, #568]	@ (8004de8 <HAL_ADC_Init+0x2b0>)
 8004bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb4:	099b      	lsrs	r3, r3, #6
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004bba:	e002      	b.n	8004bc2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1f9      	bne.n	8004bbc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff ff3d 	bl	8004a4c <LL_ADC_IsInternalRegulatorEnabled>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10d      	bne.n	8004bf4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bdc:	f043 0210 	orr.w	r2, r3, #16
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004be8:	f043 0201 	orr.w	r2, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff ff77 	bl	8004aec <LL_ADC_REG_IsConversionOngoing>
 8004bfe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f040 8188 	bne.w	8004f1e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f040 8184 	bne.w	8004f1e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c1a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004c1e:	f043 0202 	orr.w	r2, r3, #2
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff ff36 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d136      	bne.n	8004ca4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a6c      	ldr	r2, [pc, #432]	@ (8004dec <HAL_ADC_Init+0x2b4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d004      	beq.n	8004c4a <HAL_ADC_Init+0x112>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a6a      	ldr	r2, [pc, #424]	@ (8004df0 <HAL_ADC_Init+0x2b8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d10e      	bne.n	8004c68 <HAL_ADC_Init+0x130>
 8004c4a:	4868      	ldr	r0, [pc, #416]	@ (8004dec <HAL_ADC_Init+0x2b4>)
 8004c4c:	f7ff ff26 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c50:	4604      	mov	r4, r0
 8004c52:	4867      	ldr	r0, [pc, #412]	@ (8004df0 <HAL_ADC_Init+0x2b8>)
 8004c54:	f7ff ff22 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	4323      	orrs	r3, r4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	e008      	b.n	8004c7a <HAL_ADC_Init+0x142>
 8004c68:	4862      	ldr	r0, [pc, #392]	@ (8004df4 <HAL_ADC_Init+0x2bc>)
 8004c6a:	f7ff ff17 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bf0c      	ite	eq
 8004c74:	2301      	moveq	r3, #1
 8004c76:	2300      	movne	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d012      	beq.n	8004ca4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a5a      	ldr	r2, [pc, #360]	@ (8004dec <HAL_ADC_Init+0x2b4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <HAL_ADC_Init+0x15a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a58      	ldr	r2, [pc, #352]	@ (8004df0 <HAL_ADC_Init+0x2b8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d101      	bne.n	8004c96 <HAL_ADC_Init+0x15e>
 8004c92:	4a59      	ldr	r2, [pc, #356]	@ (8004df8 <HAL_ADC_Init+0x2c0>)
 8004c94:	e000      	b.n	8004c98 <HAL_ADC_Init+0x160>
 8004c96:	4a59      	ldr	r2, [pc, #356]	@ (8004dfc <HAL_ADC_Init+0x2c4>)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	f7ff fc24 	bl	80044ec <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a52      	ldr	r2, [pc, #328]	@ (8004df4 <HAL_ADC_Init+0x2bc>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d129      	bne.n	8004d02 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	7e5b      	ldrb	r3, [r3, #25]
 8004cb2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004cb8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004cbe:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d013      	beq.n	8004cf0 <HAL_ADC_Init+0x1b8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2b0c      	cmp	r3, #12
 8004cce:	d00d      	beq.n	8004cec <HAL_ADC_Init+0x1b4>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b1c      	cmp	r3, #28
 8004cd6:	d007      	beq.n	8004ce8 <HAL_ADC_Init+0x1b0>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b18      	cmp	r3, #24
 8004cde:	d101      	bne.n	8004ce4 <HAL_ADC_Init+0x1ac>
 8004ce0:	2318      	movs	r3, #24
 8004ce2:	e006      	b.n	8004cf2 <HAL_ADC_Init+0x1ba>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e004      	b.n	8004cf2 <HAL_ADC_Init+0x1ba>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	e002      	b.n	8004cf2 <HAL_ADC_Init+0x1ba>
 8004cec:	2308      	movs	r3, #8
 8004cee:	e000      	b.n	8004cf2 <HAL_ADC_Init+0x1ba>
 8004cf0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004cf2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cfa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
 8004d00:	e00e      	b.n	8004d20 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	7e5b      	ldrb	r3, [r3, #25]
 8004d06:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004d0c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004d12:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d1a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d106      	bne.n	8004d38 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	045b      	lsls	r3, r3, #17
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d009      	beq.n	8004d54 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d44:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a26      	ldr	r2, [pc, #152]	@ (8004df4 <HAL_ADC_Init+0x2bc>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d115      	bne.n	8004d8a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	4b26      	ldr	r3, [pc, #152]	@ (8004e00 <HAL_ADC_Init+0x2c8>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	69b9      	ldr	r1, [r7, #24]
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	611a      	str	r2, [r3, #16]
 8004d88:	e009      	b.n	8004d9e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	4b1c      	ldr	r3, [pc, #112]	@ (8004e04 <HAL_ADC_Init+0x2cc>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	69b9      	ldr	r1, [r7, #24]
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fea2 	bl	8004aec <LL_ADC_REG_IsConversionOngoing>
 8004da8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff feaf 	bl	8004b12 <LL_ADC_INJ_IsConversionOngoing>
 8004db4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f040 808e 	bne.w	8004eda <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f040 808a 	bne.w	8004eda <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a0a      	ldr	r2, [pc, #40]	@ (8004df4 <HAL_ADC_Init+0x2bc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d11b      	bne.n	8004e08 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	7e1b      	ldrb	r3, [r3, #24]
 8004dd4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ddc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004dde:	4313      	orrs	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	e018      	b.n	8004e16 <HAL_ADC_Init+0x2de>
 8004de4:	24000010 	.word	0x24000010
 8004de8:	053e2d63 	.word	0x053e2d63
 8004dec:	40022000 	.word	0x40022000
 8004df0:	40022100 	.word	0x40022100
 8004df4:	58026000 	.word	0x58026000
 8004df8:	40022300 	.word	0x40022300
 8004dfc:	58026300 	.word	0x58026300
 8004e00:	fff04007 	.word	0xfff04007
 8004e04:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	7e1b      	ldrb	r3, [r3, #24]
 8004e0c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8004e12:	4313      	orrs	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	4b46      	ldr	r3, [pc, #280]	@ (8004f38 <HAL_ADC_Init+0x400>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	69b9      	ldr	r1, [r7, #24]
 8004e26:	430b      	orrs	r3, r1
 8004e28:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d137      	bne.n	8004ea4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e38:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8004f3c <HAL_ADC_Init+0x404>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d116      	bne.n	8004e72 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f40 <HAL_ADC_Init+0x408>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004e56:	4311      	orrs	r1, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e5c:	4311      	orrs	r1, r2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004e62:	430a      	orrs	r2, r1
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	611a      	str	r2, [r3, #16]
 8004e70:	e020      	b.n	8004eb4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	4b32      	ldr	r3, [pc, #200]	@ (8004f44 <HAL_ADC_Init+0x40c>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e80:	3a01      	subs	r2, #1
 8004e82:	0411      	lsls	r1, r2, #16
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004e88:	4311      	orrs	r1, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e8e:	4311      	orrs	r1, r2
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004e94:	430a      	orrs	r2, r1
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	611a      	str	r2, [r3, #16]
 8004ea2:	e007      	b.n	8004eb4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0201 	bic.w	r2, r2, #1
 8004eb2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1b      	ldr	r2, [pc, #108]	@ (8004f3c <HAL_ADC_Init+0x404>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d002      	beq.n	8004eda <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f001 f95d 	bl	8006194 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d10c      	bne.n	8004efc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee8:	f023 010f 	bic.w	r1, r3, #15
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	1e5a      	subs	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004efa:	e007      	b.n	8004f0c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 020f 	bic.w	r2, r2, #15
 8004f0a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f10:	f023 0303 	bic.w	r3, r3, #3
 8004f14:	f043 0201 	orr.w	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f1c:	e007      	b.n	8004f2e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f22:	f043 0210 	orr.w	r2, r3, #16
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004f2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3724      	adds	r7, #36	@ 0x24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd90      	pop	{r4, r7, pc}
 8004f38:	ffffbffc 	.word	0xffffbffc
 8004f3c:	58026000 	.word	0x58026000
 8004f40:	fc00f81f 	.word	0xfc00f81f
 8004f44:	fc00f81e 	.word	0xfc00f81e

08004f48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a60      	ldr	r2, [pc, #384]	@ (80050dc <HAL_ADC_Start_DMA+0x194>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d004      	beq.n	8004f68 <HAL_ADC_Start_DMA+0x20>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a5f      	ldr	r2, [pc, #380]	@ (80050e0 <HAL_ADC_Start_DMA+0x198>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d101      	bne.n	8004f6c <HAL_ADC_Start_DMA+0x24>
 8004f68:	4b5e      	ldr	r3, [pc, #376]	@ (80050e4 <HAL_ADC_Start_DMA+0x19c>)
 8004f6a:	e000      	b.n	8004f6e <HAL_ADC_Start_DMA+0x26>
 8004f6c:	4b5e      	ldr	r3, [pc, #376]	@ (80050e8 <HAL_ADC_Start_DMA+0x1a0>)
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff fd16 	bl	80049a0 <LL_ADC_GetMultimode>
 8004f74:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff fdb6 	bl	8004aec <LL_ADC_REG_IsConversionOngoing>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f040 80a2 	bne.w	80050cc <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_ADC_Start_DMA+0x4e>
 8004f92:	2302      	movs	r3, #2
 8004f94:	e09d      	b.n	80050d2 <HAL_ADC_Start_DMA+0x18a>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d006      	beq.n	8004fb2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b05      	cmp	r3, #5
 8004fa8:	d003      	beq.n	8004fb2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b09      	cmp	r3, #9
 8004fae:	f040 8086 	bne.w	80050be <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 ffd0 	bl	8005f58 <ADC_Enable>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d178      	bne.n	80050b4 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004fc6:	4b49      	ldr	r3, [pc, #292]	@ (80050ec <HAL_ADC_Start_DMA+0x1a4>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a42      	ldr	r2, [pc, #264]	@ (80050e0 <HAL_ADC_Start_DMA+0x198>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d002      	beq.n	8004fe2 <HAL_ADC_Start_DMA+0x9a>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	e000      	b.n	8004fe4 <HAL_ADC_Start_DMA+0x9c>
 8004fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80050dc <HAL_ADC_Start_DMA+0x194>)
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	6812      	ldr	r2, [r2, #0]
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d002      	beq.n	8004ff2 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d105      	bne.n	8004ffe <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005002:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d006      	beq.n	8005018 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800500e:	f023 0206 	bic.w	r2, r3, #6
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	665a      	str	r2, [r3, #100]	@ 0x64
 8005016:	e002      	b.n	800501e <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005022:	4a33      	ldr	r2, [pc, #204]	@ (80050f0 <HAL_ADC_Start_DMA+0x1a8>)
 8005024:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800502a:	4a32      	ldr	r2, [pc, #200]	@ (80050f4 <HAL_ADC_Start_DMA+0x1ac>)
 800502c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005032:	4a31      	ldr	r2, [pc, #196]	@ (80050f8 <HAL_ADC_Start_DMA+0x1b0>)
 8005034:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	221c      	movs	r2, #28
 800503c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0210 	orr.w	r2, r2, #16
 8005054:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a28      	ldr	r2, [pc, #160]	@ (80050fc <HAL_ADC_Start_DMA+0x1b4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10f      	bne.n	8005080 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f7ff fbfe 	bl	8004870 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff fbe9 	bl	8004850 <LL_ADC_EnableDMAReq>
 800507e:	e007      	b.n	8005090 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f7ff fbcd 	bl	800482a <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3340      	adds	r3, #64	@ 0x40
 800509a:	4619      	mov	r1, r3
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f001 ff08 	bl	8006eb4 <HAL_DMA_Start_IT>
 80050a4:	4603      	mov	r3, r0
 80050a6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff fd09 	bl	8004ac4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80050b2:	e00d      	b.n	80050d0 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80050bc:	e008      	b.n	80050d0 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80050ca:	e001      	b.n	80050d0 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80050cc:	2302      	movs	r3, #2
 80050ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80050d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40022000 	.word	0x40022000
 80050e0:	40022100 	.word	0x40022100
 80050e4:	40022300 	.word	0x40022300
 80050e8:	58026300 	.word	0x58026300
 80050ec:	fffff0fe 	.word	0xfffff0fe
 80050f0:	0800606d 	.word	0x0800606d
 80050f4:	08006145 	.word	0x08006145
 80050f8:	08006161 	.word	0x08006161
 80050fc:	58026000 	.word	0x58026000

08005100 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08a      	sub	sp, #40	@ 0x28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005108:	2300      	movs	r3, #0
 800510a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a87      	ldr	r2, [pc, #540]	@ (8005340 <HAL_ADC_IRQHandler+0x240>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d004      	beq.n	8005130 <HAL_ADC_IRQHandler+0x30>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a86      	ldr	r2, [pc, #536]	@ (8005344 <HAL_ADC_IRQHandler+0x244>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d101      	bne.n	8005134 <HAL_ADC_IRQHandler+0x34>
 8005130:	4b85      	ldr	r3, [pc, #532]	@ (8005348 <HAL_ADC_IRQHandler+0x248>)
 8005132:	e000      	b.n	8005136 <HAL_ADC_IRQHandler+0x36>
 8005134:	4b85      	ldr	r3, [pc, #532]	@ (800534c <HAL_ADC_IRQHandler+0x24c>)
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff fc32 	bl	80049a0 <LL_ADC_GetMultimode>
 800513c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d017      	beq.n	8005178 <HAL_ADC_IRQHandler+0x78>
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d012      	beq.n	8005178 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005156:	f003 0310 	and.w	r3, r3, #16
 800515a:	2b00      	cmp	r3, #0
 800515c:	d105      	bne.n	800516a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005162:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f001 f94e 	bl	800640c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2202      	movs	r2, #2
 8005176:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b00      	cmp	r3, #0
 8005180:	d004      	beq.n	800518c <HAL_ADC_IRQHandler+0x8c>
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 8083 	beq.w	800529e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d07d      	beq.n	800529e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d105      	bne.n	80051ba <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff faf4 	bl	80047ac <LL_ADC_REG_IsTriggerSourceSWStart>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d062      	beq.n	8005290 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a5d      	ldr	r2, [pc, #372]	@ (8005344 <HAL_ADC_IRQHandler+0x244>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d002      	beq.n	80051da <HAL_ADC_IRQHandler+0xda>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	e000      	b.n	80051dc <HAL_ADC_IRQHandler+0xdc>
 80051da:	4b59      	ldr	r3, [pc, #356]	@ (8005340 <HAL_ADC_IRQHandler+0x240>)
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d008      	beq.n	80051f6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d005      	beq.n	80051f6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b05      	cmp	r3, #5
 80051ee:	d002      	beq.n	80051f6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	2b09      	cmp	r3, #9
 80051f4:	d104      	bne.n	8005200 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	623b      	str	r3, [r7, #32]
 80051fe:	e00c      	b.n	800521a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a4f      	ldr	r2, [pc, #316]	@ (8005344 <HAL_ADC_IRQHandler+0x244>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d002      	beq.n	8005210 <HAL_ADC_IRQHandler+0x110>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	e000      	b.n	8005212 <HAL_ADC_IRQHandler+0x112>
 8005210:	4b4b      	ldr	r3, [pc, #300]	@ (8005340 <HAL_ADC_IRQHandler+0x240>)
 8005212:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d135      	bne.n	8005290 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b08      	cmp	r3, #8
 8005230:	d12e      	bne.n	8005290 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff fc58 	bl	8004aec <LL_ADC_REG_IsConversionOngoing>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d11a      	bne.n	8005278 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 020c 	bic.w	r2, r2, #12
 8005250:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005256:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005262:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d112      	bne.n	8005290 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800526e:	f043 0201 	orr.w	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	661a      	str	r2, [r3, #96]	@ 0x60
 8005276:	e00b      	b.n	8005290 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800527c:	f043 0210 	orr.w	r2, r3, #16
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005288:	f043 0201 	orr.w	r2, r3, #1
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7fd fcaf 	bl	8002bf4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	220c      	movs	r2, #12
 800529c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d004      	beq.n	80052b2 <HAL_ADC_IRQHandler+0x1b2>
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10b      	bne.n	80052ca <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 80a0 	beq.w	80053fe <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 809a 	beq.w	80053fe <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d105      	bne.n	80052e2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052da:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff fadc 	bl	80048a4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80052ec:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fa5a 	bl	80047ac <LL_ADC_REG_IsTriggerSourceSWStart>
 80052f8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a11      	ldr	r2, [pc, #68]	@ (8005344 <HAL_ADC_IRQHandler+0x244>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d002      	beq.n	800530a <HAL_ADC_IRQHandler+0x20a>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	e000      	b.n	800530c <HAL_ADC_IRQHandler+0x20c>
 800530a:	4b0d      	ldr	r3, [pc, #52]	@ (8005340 <HAL_ADC_IRQHandler+0x240>)
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	4293      	cmp	r3, r2
 8005312:	d008      	beq.n	8005326 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d005      	beq.n	8005326 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b06      	cmp	r3, #6
 800531e:	d002      	beq.n	8005326 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2b07      	cmp	r3, #7
 8005324:	d104      	bne.n	8005330 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	623b      	str	r3, [r7, #32]
 800532e:	e014      	b.n	800535a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a03      	ldr	r2, [pc, #12]	@ (8005344 <HAL_ADC_IRQHandler+0x244>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00a      	beq.n	8005350 <HAL_ADC_IRQHandler+0x250>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	e008      	b.n	8005352 <HAL_ADC_IRQHandler+0x252>
 8005340:	40022000 	.word	0x40022000
 8005344:	40022100 	.word	0x40022100
 8005348:	40022300 	.word	0x40022300
 800534c:	58026300 	.word	0x58026300
 8005350:	4b84      	ldr	r3, [pc, #528]	@ (8005564 <HAL_ADC_IRQHandler+0x464>)
 8005352:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d047      	beq.n	80053f0 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d007      	beq.n	800537a <HAL_ADC_IRQHandler+0x27a>
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d03f      	beq.n	80053f0 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005376:	2b00      	cmp	r3, #0
 8005378:	d13a      	bne.n	80053f0 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005384:	2b40      	cmp	r3, #64	@ 0x40
 8005386:	d133      	bne.n	80053f0 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d12e      	bne.n	80053f0 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff fbbb 	bl	8004b12 <LL_ADC_INJ_IsConversionOngoing>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d11a      	bne.n	80053d8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80053b0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d112      	bne.n	80053f0 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ce:	f043 0201 	orr.w	r2, r3, #1
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	661a      	str	r2, [r3, #96]	@ 0x60
 80053d6:	e00b      	b.n	80053f0 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053dc:	f043 0210 	orr.w	r2, r3, #16
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053e8:	f043 0201 	orr.w	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 ffe3 	bl	80063bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2260      	movs	r2, #96	@ 0x60
 80053fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005404:	2b00      	cmp	r3, #0
 8005406:	d011      	beq.n	800542c <HAL_ADC_IRQHandler+0x32c>
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00c      	beq.n	800542c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005416:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f8b2 	bl	8005588 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2280      	movs	r2, #128	@ 0x80
 800542a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005432:	2b00      	cmp	r3, #0
 8005434:	d012      	beq.n	800545c <HAL_ADC_IRQHandler+0x35c>
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00d      	beq.n	800545c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005444:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 ffc9 	bl	80063e4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800545a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005462:	2b00      	cmp	r3, #0
 8005464:	d012      	beq.n	800548c <HAL_ADC_IRQHandler+0x38c>
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00d      	beq.n	800548c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005474:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 ffbb 	bl	80063f8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800548a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2b00      	cmp	r3, #0
 8005494:	d043      	beq.n	800551e <HAL_ADC_IRQHandler+0x41e>
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	2b00      	cmp	r3, #0
 800549e:	d03e      	beq.n	800551e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80054a8:	2301      	movs	r3, #1
 80054aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ac:	e021      	b.n	80054f2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d015      	beq.n	80054e0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005564 <HAL_ADC_IRQHandler+0x464>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d004      	beq.n	80054c8 <HAL_ADC_IRQHandler+0x3c8>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a29      	ldr	r2, [pc, #164]	@ (8005568 <HAL_ADC_IRQHandler+0x468>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d101      	bne.n	80054cc <HAL_ADC_IRQHandler+0x3cc>
 80054c8:	4b28      	ldr	r3, [pc, #160]	@ (800556c <HAL_ADC_IRQHandler+0x46c>)
 80054ca:	e000      	b.n	80054ce <HAL_ADC_IRQHandler+0x3ce>
 80054cc:	4b28      	ldr	r3, [pc, #160]	@ (8005570 <HAL_ADC_IRQHandler+0x470>)
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff fa74 	bl	80049bc <LL_ADC_GetMultiDMATransfer>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80054da:	2301      	movs	r3, #1
 80054dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80054de:	e008      	b.n	80054f2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80054ee:	2301      	movs	r3, #1
 80054f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d10e      	bne.n	8005516 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054fc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005508:	f043 0202 	orr.w	r2, r3, #2
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f843 	bl	800559c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2210      	movs	r2, #16
 800551c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005524:	2b00      	cmp	r3, #0
 8005526:	d018      	beq.n	800555a <HAL_ADC_IRQHandler+0x45a>
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800552e:	2b00      	cmp	r3, #0
 8005530:	d013      	beq.n	800555a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005536:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005542:	f043 0208 	orr.w	r2, r3, #8
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005552:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 ff3b 	bl	80063d0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800555a:	bf00      	nop
 800555c:	3728      	adds	r7, #40	@ 0x28
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40022000 	.word	0x40022000
 8005568:	40022100 	.word	0x40022100
 800556c:	40022300 	.word	0x40022300
 8005570:	58026300 	.word	0x58026300

08005574 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80055b0:	b590      	push	{r4, r7, lr}
 80055b2:	b0a5      	sub	sp, #148	@ 0x94
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055ca:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4aa4      	ldr	r2, [pc, #656]	@ (8005864 <HAL_ADC_ConfigChannel+0x2b4>)
 80055d2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d102      	bne.n	80055e4 <HAL_ADC_ConfigChannel+0x34>
 80055de:	2302      	movs	r3, #2
 80055e0:	f000 bca2 	b.w	8005f28 <HAL_ADC_ConfigChannel+0x978>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7ff fa7b 	bl	8004aec <LL_ADC_REG_IsConversionOngoing>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f040 8486 	bne.w	8005f0a <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	db31      	blt.n	800566a <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a97      	ldr	r2, [pc, #604]	@ (8005868 <HAL_ADC_ConfigChannel+0x2b8>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d02c      	beq.n	800566a <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005618:	2b00      	cmp	r3, #0
 800561a:	d108      	bne.n	800562e <HAL_ADC_ConfigChannel+0x7e>
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	0e9b      	lsrs	r3, r3, #26
 8005622:	f003 031f 	and.w	r3, r3, #31
 8005626:	2201      	movs	r2, #1
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	e016      	b.n	800565c <HAL_ADC_ConfigChannel+0xac>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005634:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005636:	fa93 f3a3 	rbit	r3, r3
 800563a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800563c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800563e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005640:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8005646:	2320      	movs	r3, #32
 8005648:	e003      	b.n	8005652 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800564a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800564c:	fab3 f383 	clz	r3, r3
 8005650:	b2db      	uxtb	r3, r3
 8005652:	f003 031f 	and.w	r3, r3, #31
 8005656:	2201      	movs	r2, #1
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6812      	ldr	r2, [r2, #0]
 8005660:	69d1      	ldr	r1, [r2, #28]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6812      	ldr	r2, [r2, #0]
 8005666:	430b      	orrs	r3, r1
 8005668:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	6859      	ldr	r1, [r3, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	f7ff f8ab 	bl	80047d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff fa33 	bl	8004aec <LL_ADC_REG_IsConversionOngoing>
 8005686:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff fa3f 	bl	8004b12 <LL_ADC_INJ_IsConversionOngoing>
 8005694:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005698:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800569c:	2b00      	cmp	r3, #0
 800569e:	f040 824a 	bne.w	8005b36 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80056a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f040 8245 	bne.w	8005b36 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6818      	ldr	r0, [r3, #0]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	6819      	ldr	r1, [r3, #0]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	461a      	mov	r2, r3
 80056ba:	f7ff f906 	bl	80048ca <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a69      	ldr	r2, [pc, #420]	@ (8005868 <HAL_ADC_ConfigChannel+0x2b8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d10d      	bne.n	80056e4 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	695a      	ldr	r2, [r3, #20]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	08db      	lsrs	r3, r3, #3
 80056d4:	f003 0303 	and.w	r3, r3, #3
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056e2:	e032      	b.n	800574a <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80056e4:	4b61      	ldr	r3, [pc, #388]	@ (800586c <HAL_ADC_ConfigChannel+0x2bc>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80056ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056f0:	d10b      	bne.n	800570a <HAL_ADC_ConfigChannel+0x15a>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	695a      	ldr	r2, [r3, #20]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	089b      	lsrs	r3, r3, #2
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	e01d      	b.n	8005746 <HAL_ADC_ConfigChannel+0x196>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10b      	bne.n	8005730 <HAL_ADC_ConfigChannel+0x180>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	695a      	ldr	r2, [r3, #20]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	089b      	lsrs	r3, r3, #2
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	e00a      	b.n	8005746 <HAL_ADC_ConfigChannel+0x196>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	695a      	ldr	r2, [r3, #20]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	089b      	lsrs	r3, r3, #2
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	fa02 f303 	lsl.w	r3, r2, r3
 8005746:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	2b04      	cmp	r3, #4
 8005750:	d048      	beq.n	80057e4 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	6919      	ldr	r1, [r3, #16]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005762:	f7fe ff31 	bl	80045c8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a3f      	ldr	r2, [pc, #252]	@ (8005868 <HAL_ADC_ConfigChannel+0x2b8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d119      	bne.n	80057a4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6818      	ldr	r0, [r3, #0]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	6919      	ldr	r1, [r3, #16]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	461a      	mov	r2, r3
 800577e:	f7fe ffc9 	bl	8004714 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	6919      	ldr	r1, [r3, #16]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d102      	bne.n	800579a <HAL_ADC_ConfigChannel+0x1ea>
 8005794:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005798:	e000      	b.n	800579c <HAL_ADC_ConfigChannel+0x1ec>
 800579a:	2300      	movs	r3, #0
 800579c:	461a      	mov	r2, r3
 800579e:	f7fe ff97 	bl	80046d0 <LL_ADC_SetOffsetSaturation>
 80057a2:	e1c8      	b.n	8005b36 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6818      	ldr	r0, [r3, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	6919      	ldr	r1, [r3, #16]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d102      	bne.n	80057bc <HAL_ADC_ConfigChannel+0x20c>
 80057b6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80057ba:	e000      	b.n	80057be <HAL_ADC_ConfigChannel+0x20e>
 80057bc:	2300      	movs	r3, #0
 80057be:	461a      	mov	r2, r3
 80057c0:	f7fe ff64 	bl	800468c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6818      	ldr	r0, [r3, #0]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	6919      	ldr	r1, [r3, #16]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	7e1b      	ldrb	r3, [r3, #24]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d102      	bne.n	80057da <HAL_ADC_ConfigChannel+0x22a>
 80057d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80057d8:	e000      	b.n	80057dc <HAL_ADC_ConfigChannel+0x22c>
 80057da:	2300      	movs	r3, #0
 80057dc:	461a      	mov	r2, r3
 80057de:	f7fe ff3b 	bl	8004658 <LL_ADC_SetDataRightShift>
 80057e2:	e1a8      	b.n	8005b36 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005868 <HAL_ADC_ConfigChannel+0x2b8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	f040 815b 	bne.w	8005aa6 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2100      	movs	r1, #0
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fe ff18 	bl	800462c <LL_ADC_GetOffsetChannel>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <HAL_ADC_ConfigChannel+0x26c>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2100      	movs	r1, #0
 800580c:	4618      	mov	r0, r3
 800580e:	f7fe ff0d 	bl	800462c <LL_ADC_GetOffsetChannel>
 8005812:	4603      	mov	r3, r0
 8005814:	0e9b      	lsrs	r3, r3, #26
 8005816:	f003 021f 	and.w	r2, r3, #31
 800581a:	e017      	b.n	800584c <HAL_ADC_ConfigChannel+0x29c>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2100      	movs	r1, #0
 8005822:	4618      	mov	r0, r3
 8005824:	f7fe ff02 	bl	800462c <LL_ADC_GetOffsetChannel>
 8005828:	4603      	mov	r3, r0
 800582a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800582e:	fa93 f3a3 	rbit	r3, r3
 8005832:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005836:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800583e:	2320      	movs	r3, #32
 8005840:	e003      	b.n	800584a <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8005842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005844:	fab3 f383 	clz	r3, r3
 8005848:	b2db      	uxtb	r3, r3
 800584a:	461a      	mov	r2, r3
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10b      	bne.n	8005870 <HAL_ADC_ConfigChannel+0x2c0>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	0e9b      	lsrs	r3, r3, #26
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	e017      	b.n	8005894 <HAL_ADC_ConfigChannel+0x2e4>
 8005864:	47ff0000 	.word	0x47ff0000
 8005868:	58026000 	.word	0x58026000
 800586c:	5c001000 	.word	0x5c001000
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005878:	fa93 f3a3 	rbit	r3, r3
 800587c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800587e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005880:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005882:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8005888:	2320      	movs	r3, #32
 800588a:	e003      	b.n	8005894 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800588c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800588e:	fab3 f383 	clz	r3, r3
 8005892:	b2db      	uxtb	r3, r3
 8005894:	429a      	cmp	r2, r3
 8005896:	d106      	bne.n	80058a6 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2200      	movs	r2, #0
 800589e:	2100      	movs	r1, #0
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe ff59 	bl	8004758 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2101      	movs	r1, #1
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fe febd 	bl	800462c <LL_ADC_GetOffsetChannel>
 80058b2:	4603      	mov	r3, r0
 80058b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <HAL_ADC_ConfigChannel+0x322>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2101      	movs	r1, #1
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fe feb2 	bl	800462c <LL_ADC_GetOffsetChannel>
 80058c8:	4603      	mov	r3, r0
 80058ca:	0e9b      	lsrs	r3, r3, #26
 80058cc:	f003 021f 	and.w	r2, r3, #31
 80058d0:	e017      	b.n	8005902 <HAL_ADC_ConfigChannel+0x352>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2101      	movs	r1, #1
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fe fea7 	bl	800462c <LL_ADC_GetOffsetChannel>
 80058de:	4603      	mov	r3, r0
 80058e0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058e4:	fa93 f3a3 	rbit	r3, r3
 80058e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80058ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80058ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 80058f4:	2320      	movs	r3, #32
 80058f6:	e003      	b.n	8005900 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 80058f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058fa:	fab3 f383 	clz	r3, r3
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	461a      	mov	r2, r3
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800590a:	2b00      	cmp	r3, #0
 800590c:	d105      	bne.n	800591a <HAL_ADC_ConfigChannel+0x36a>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	0e9b      	lsrs	r3, r3, #26
 8005914:	f003 031f 	and.w	r3, r3, #31
 8005918:	e011      	b.n	800593e <HAL_ADC_ConfigChannel+0x38e>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005922:	fa93 f3a3 	rbit	r3, r3
 8005926:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800592a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800592c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8005932:	2320      	movs	r3, #32
 8005934:	e003      	b.n	800593e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8005936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005938:	fab3 f383 	clz	r3, r3
 800593c:	b2db      	uxtb	r3, r3
 800593e:	429a      	cmp	r2, r3
 8005940:	d106      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2200      	movs	r2, #0
 8005948:	2101      	movs	r1, #1
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe ff04 	bl	8004758 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2102      	movs	r1, #2
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe fe68 	bl	800462c <LL_ADC_GetOffsetChannel>
 800595c:	4603      	mov	r3, r0
 800595e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10a      	bne.n	800597c <HAL_ADC_ConfigChannel+0x3cc>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2102      	movs	r1, #2
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe fe5d 	bl	800462c <LL_ADC_GetOffsetChannel>
 8005972:	4603      	mov	r3, r0
 8005974:	0e9b      	lsrs	r3, r3, #26
 8005976:	f003 021f 	and.w	r2, r3, #31
 800597a:	e017      	b.n	80059ac <HAL_ADC_ConfigChannel+0x3fc>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2102      	movs	r1, #2
 8005982:	4618      	mov	r0, r3
 8005984:	f7fe fe52 	bl	800462c <LL_ADC_GetOffsetChannel>
 8005988:	4603      	mov	r3, r0
 800598a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598e:	fa93 f3a3 	rbit	r3, r3
 8005992:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800599e:	2320      	movs	r3, #32
 80059a0:	e003      	b.n	80059aa <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80059a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059a4:	fab3 f383 	clz	r3, r3
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d105      	bne.n	80059c4 <HAL_ADC_ConfigChannel+0x414>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	0e9b      	lsrs	r3, r3, #26
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	e011      	b.n	80059e8 <HAL_ADC_ConfigChannel+0x438>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059cc:	fa93 f3a3 	rbit	r3, r3
 80059d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80059d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80059d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80059dc:	2320      	movs	r3, #32
 80059de:	e003      	b.n	80059e8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	fab3 f383 	clz	r3, r3
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d106      	bne.n	80059fa <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2200      	movs	r2, #0
 80059f2:	2102      	movs	r1, #2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe feaf 	bl	8004758 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2103      	movs	r1, #3
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7fe fe13 	bl	800462c <LL_ADC_GetOffsetChannel>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10a      	bne.n	8005a26 <HAL_ADC_ConfigChannel+0x476>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2103      	movs	r1, #3
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fe fe08 	bl	800462c <LL_ADC_GetOffsetChannel>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	0e9b      	lsrs	r3, r3, #26
 8005a20:	f003 021f 	and.w	r2, r3, #31
 8005a24:	e017      	b.n	8005a56 <HAL_ADC_ConfigChannel+0x4a6>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2103      	movs	r1, #3
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fe fdfd 	bl	800462c <LL_ADC_GetOffsetChannel>
 8005a32:	4603      	mov	r3, r0
 8005a34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	fa93 f3a3 	rbit	r3, r3
 8005a3c:	61fb      	str	r3, [r7, #28]
  return result;
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005a48:	2320      	movs	r3, #32
 8005a4a:	e003      	b.n	8005a54 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4e:	fab3 f383 	clz	r3, r3
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d105      	bne.n	8005a6e <HAL_ADC_ConfigChannel+0x4be>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	0e9b      	lsrs	r3, r3, #26
 8005a68:	f003 031f 	and.w	r3, r3, #31
 8005a6c:	e011      	b.n	8005a92 <HAL_ADC_ConfigChannel+0x4e2>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	fa93 f3a3 	rbit	r3, r3
 8005a7a:	613b      	str	r3, [r7, #16]
  return result;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8005a86:	2320      	movs	r3, #32
 8005a88:	e003      	b.n	8005a92 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	fab3 f383 	clz	r3, r3
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d14f      	bne.n	8005b36 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2103      	movs	r1, #3
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe fe5a 	bl	8004758 <LL_ADC_SetOffsetState>
 8005aa4:	e047      	b.n	8005b36 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	069b      	lsls	r3, r3, #26
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d107      	bne.n	8005aca <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005ac8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ad0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	069b      	lsls	r3, r3, #26
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d107      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005aec:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005af4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	069b      	lsls	r3, r3, #26
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d107      	bne.n	8005b12 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005b10:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	069b      	lsls	r3, r3, #26
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d107      	bne.n	8005b36 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005b34:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fe ffae 	bl	8004a9c <LL_ADC_IsEnabled>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f040 81ea 	bne.w	8005f1c <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6818      	ldr	r0, [r3, #0]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	6819      	ldr	r1, [r3, #0]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	461a      	mov	r2, r3
 8005b56:	f7fe fee3 	bl	8004920 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	4a7a      	ldr	r2, [pc, #488]	@ (8005d48 <HAL_ADC_ConfigChannel+0x798>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	f040 80e0 	bne.w	8005d26 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4977      	ldr	r1, [pc, #476]	@ (8005d4c <HAL_ADC_ConfigChannel+0x79c>)
 8005b70:	428b      	cmp	r3, r1
 8005b72:	d147      	bne.n	8005c04 <HAL_ADC_ConfigChannel+0x654>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4975      	ldr	r1, [pc, #468]	@ (8005d50 <HAL_ADC_ConfigChannel+0x7a0>)
 8005b7a:	428b      	cmp	r3, r1
 8005b7c:	d040      	beq.n	8005c00 <HAL_ADC_ConfigChannel+0x650>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4974      	ldr	r1, [pc, #464]	@ (8005d54 <HAL_ADC_ConfigChannel+0x7a4>)
 8005b84:	428b      	cmp	r3, r1
 8005b86:	d039      	beq.n	8005bfc <HAL_ADC_ConfigChannel+0x64c>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4972      	ldr	r1, [pc, #456]	@ (8005d58 <HAL_ADC_ConfigChannel+0x7a8>)
 8005b8e:	428b      	cmp	r3, r1
 8005b90:	d032      	beq.n	8005bf8 <HAL_ADC_ConfigChannel+0x648>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4971      	ldr	r1, [pc, #452]	@ (8005d5c <HAL_ADC_ConfigChannel+0x7ac>)
 8005b98:	428b      	cmp	r3, r1
 8005b9a:	d02b      	beq.n	8005bf4 <HAL_ADC_ConfigChannel+0x644>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	496f      	ldr	r1, [pc, #444]	@ (8005d60 <HAL_ADC_ConfigChannel+0x7b0>)
 8005ba2:	428b      	cmp	r3, r1
 8005ba4:	d024      	beq.n	8005bf0 <HAL_ADC_ConfigChannel+0x640>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	496e      	ldr	r1, [pc, #440]	@ (8005d64 <HAL_ADC_ConfigChannel+0x7b4>)
 8005bac:	428b      	cmp	r3, r1
 8005bae:	d01d      	beq.n	8005bec <HAL_ADC_ConfigChannel+0x63c>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	496c      	ldr	r1, [pc, #432]	@ (8005d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8005bb6:	428b      	cmp	r3, r1
 8005bb8:	d016      	beq.n	8005be8 <HAL_ADC_ConfigChannel+0x638>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	496b      	ldr	r1, [pc, #428]	@ (8005d6c <HAL_ADC_ConfigChannel+0x7bc>)
 8005bc0:	428b      	cmp	r3, r1
 8005bc2:	d00f      	beq.n	8005be4 <HAL_ADC_ConfigChannel+0x634>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4969      	ldr	r1, [pc, #420]	@ (8005d70 <HAL_ADC_ConfigChannel+0x7c0>)
 8005bca:	428b      	cmp	r3, r1
 8005bcc:	d008      	beq.n	8005be0 <HAL_ADC_ConfigChannel+0x630>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4968      	ldr	r1, [pc, #416]	@ (8005d74 <HAL_ADC_ConfigChannel+0x7c4>)
 8005bd4:	428b      	cmp	r3, r1
 8005bd6:	d101      	bne.n	8005bdc <HAL_ADC_ConfigChannel+0x62c>
 8005bd8:	4b67      	ldr	r3, [pc, #412]	@ (8005d78 <HAL_ADC_ConfigChannel+0x7c8>)
 8005bda:	e0a0      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e09e      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005be0:	4b66      	ldr	r3, [pc, #408]	@ (8005d7c <HAL_ADC_ConfigChannel+0x7cc>)
 8005be2:	e09c      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005be4:	4b66      	ldr	r3, [pc, #408]	@ (8005d80 <HAL_ADC_ConfigChannel+0x7d0>)
 8005be6:	e09a      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005be8:	4b60      	ldr	r3, [pc, #384]	@ (8005d6c <HAL_ADC_ConfigChannel+0x7bc>)
 8005bea:	e098      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005bec:	4b5e      	ldr	r3, [pc, #376]	@ (8005d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8005bee:	e096      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005bf0:	4b64      	ldr	r3, [pc, #400]	@ (8005d84 <HAL_ADC_ConfigChannel+0x7d4>)
 8005bf2:	e094      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005bf4:	4b64      	ldr	r3, [pc, #400]	@ (8005d88 <HAL_ADC_ConfigChannel+0x7d8>)
 8005bf6:	e092      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005bf8:	4b64      	ldr	r3, [pc, #400]	@ (8005d8c <HAL_ADC_ConfigChannel+0x7dc>)
 8005bfa:	e090      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005bfc:	4b64      	ldr	r3, [pc, #400]	@ (8005d90 <HAL_ADC_ConfigChannel+0x7e0>)
 8005bfe:	e08e      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005c00:	2301      	movs	r3, #1
 8005c02:	e08c      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4962      	ldr	r1, [pc, #392]	@ (8005d94 <HAL_ADC_ConfigChannel+0x7e4>)
 8005c0a:	428b      	cmp	r3, r1
 8005c0c:	d140      	bne.n	8005c90 <HAL_ADC_ConfigChannel+0x6e0>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	494f      	ldr	r1, [pc, #316]	@ (8005d50 <HAL_ADC_ConfigChannel+0x7a0>)
 8005c14:	428b      	cmp	r3, r1
 8005c16:	d039      	beq.n	8005c8c <HAL_ADC_ConfigChannel+0x6dc>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	494d      	ldr	r1, [pc, #308]	@ (8005d54 <HAL_ADC_ConfigChannel+0x7a4>)
 8005c1e:	428b      	cmp	r3, r1
 8005c20:	d032      	beq.n	8005c88 <HAL_ADC_ConfigChannel+0x6d8>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	494c      	ldr	r1, [pc, #304]	@ (8005d58 <HAL_ADC_ConfigChannel+0x7a8>)
 8005c28:	428b      	cmp	r3, r1
 8005c2a:	d02b      	beq.n	8005c84 <HAL_ADC_ConfigChannel+0x6d4>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	494a      	ldr	r1, [pc, #296]	@ (8005d5c <HAL_ADC_ConfigChannel+0x7ac>)
 8005c32:	428b      	cmp	r3, r1
 8005c34:	d024      	beq.n	8005c80 <HAL_ADC_ConfigChannel+0x6d0>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4949      	ldr	r1, [pc, #292]	@ (8005d60 <HAL_ADC_ConfigChannel+0x7b0>)
 8005c3c:	428b      	cmp	r3, r1
 8005c3e:	d01d      	beq.n	8005c7c <HAL_ADC_ConfigChannel+0x6cc>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4947      	ldr	r1, [pc, #284]	@ (8005d64 <HAL_ADC_ConfigChannel+0x7b4>)
 8005c46:	428b      	cmp	r3, r1
 8005c48:	d016      	beq.n	8005c78 <HAL_ADC_ConfigChannel+0x6c8>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4946      	ldr	r1, [pc, #280]	@ (8005d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8005c50:	428b      	cmp	r3, r1
 8005c52:	d00f      	beq.n	8005c74 <HAL_ADC_ConfigChannel+0x6c4>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4944      	ldr	r1, [pc, #272]	@ (8005d6c <HAL_ADC_ConfigChannel+0x7bc>)
 8005c5a:	428b      	cmp	r3, r1
 8005c5c:	d008      	beq.n	8005c70 <HAL_ADC_ConfigChannel+0x6c0>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4944      	ldr	r1, [pc, #272]	@ (8005d74 <HAL_ADC_ConfigChannel+0x7c4>)
 8005c64:	428b      	cmp	r3, r1
 8005c66:	d101      	bne.n	8005c6c <HAL_ADC_ConfigChannel+0x6bc>
 8005c68:	4b43      	ldr	r3, [pc, #268]	@ (8005d78 <HAL_ADC_ConfigChannel+0x7c8>)
 8005c6a:	e058      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e056      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005c70:	4b43      	ldr	r3, [pc, #268]	@ (8005d80 <HAL_ADC_ConfigChannel+0x7d0>)
 8005c72:	e054      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005c74:	4b3d      	ldr	r3, [pc, #244]	@ (8005d6c <HAL_ADC_ConfigChannel+0x7bc>)
 8005c76:	e052      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005c78:	4b3b      	ldr	r3, [pc, #236]	@ (8005d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8005c7a:	e050      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005c7c:	4b41      	ldr	r3, [pc, #260]	@ (8005d84 <HAL_ADC_ConfigChannel+0x7d4>)
 8005c7e:	e04e      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005c80:	4b41      	ldr	r3, [pc, #260]	@ (8005d88 <HAL_ADC_ConfigChannel+0x7d8>)
 8005c82:	e04c      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005c84:	4b41      	ldr	r3, [pc, #260]	@ (8005d8c <HAL_ADC_ConfigChannel+0x7dc>)
 8005c86:	e04a      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005c88:	4b41      	ldr	r3, [pc, #260]	@ (8005d90 <HAL_ADC_ConfigChannel+0x7e0>)
 8005c8a:	e048      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e046      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4940      	ldr	r1, [pc, #256]	@ (8005d98 <HAL_ADC_ConfigChannel+0x7e8>)
 8005c96:	428b      	cmp	r3, r1
 8005c98:	d140      	bne.n	8005d1c <HAL_ADC_ConfigChannel+0x76c>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	492c      	ldr	r1, [pc, #176]	@ (8005d50 <HAL_ADC_ConfigChannel+0x7a0>)
 8005ca0:	428b      	cmp	r3, r1
 8005ca2:	d039      	beq.n	8005d18 <HAL_ADC_ConfigChannel+0x768>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	492a      	ldr	r1, [pc, #168]	@ (8005d54 <HAL_ADC_ConfigChannel+0x7a4>)
 8005caa:	428b      	cmp	r3, r1
 8005cac:	d032      	beq.n	8005d14 <HAL_ADC_ConfigChannel+0x764>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4929      	ldr	r1, [pc, #164]	@ (8005d58 <HAL_ADC_ConfigChannel+0x7a8>)
 8005cb4:	428b      	cmp	r3, r1
 8005cb6:	d02b      	beq.n	8005d10 <HAL_ADC_ConfigChannel+0x760>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4927      	ldr	r1, [pc, #156]	@ (8005d5c <HAL_ADC_ConfigChannel+0x7ac>)
 8005cbe:	428b      	cmp	r3, r1
 8005cc0:	d024      	beq.n	8005d0c <HAL_ADC_ConfigChannel+0x75c>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4926      	ldr	r1, [pc, #152]	@ (8005d60 <HAL_ADC_ConfigChannel+0x7b0>)
 8005cc8:	428b      	cmp	r3, r1
 8005cca:	d01d      	beq.n	8005d08 <HAL_ADC_ConfigChannel+0x758>
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4924      	ldr	r1, [pc, #144]	@ (8005d64 <HAL_ADC_ConfigChannel+0x7b4>)
 8005cd2:	428b      	cmp	r3, r1
 8005cd4:	d016      	beq.n	8005d04 <HAL_ADC_ConfigChannel+0x754>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4923      	ldr	r1, [pc, #140]	@ (8005d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8005cdc:	428b      	cmp	r3, r1
 8005cde:	d00f      	beq.n	8005d00 <HAL_ADC_ConfigChannel+0x750>
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4926      	ldr	r1, [pc, #152]	@ (8005d80 <HAL_ADC_ConfigChannel+0x7d0>)
 8005ce6:	428b      	cmp	r3, r1
 8005ce8:	d008      	beq.n	8005cfc <HAL_ADC_ConfigChannel+0x74c>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	492b      	ldr	r1, [pc, #172]	@ (8005d9c <HAL_ADC_ConfigChannel+0x7ec>)
 8005cf0:	428b      	cmp	r3, r1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_ADC_ConfigChannel+0x748>
 8005cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8005da0 <HAL_ADC_ConfigChannel+0x7f0>)
 8005cf6:	e012      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e010      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005cfc:	4b27      	ldr	r3, [pc, #156]	@ (8005d9c <HAL_ADC_ConfigChannel+0x7ec>)
 8005cfe:	e00e      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005d00:	4b1a      	ldr	r3, [pc, #104]	@ (8005d6c <HAL_ADC_ConfigChannel+0x7bc>)
 8005d02:	e00c      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005d04:	4b18      	ldr	r3, [pc, #96]	@ (8005d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8005d06:	e00a      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005d08:	4b1e      	ldr	r3, [pc, #120]	@ (8005d84 <HAL_ADC_ConfigChannel+0x7d4>)
 8005d0a:	e008      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8005d88 <HAL_ADC_ConfigChannel+0x7d8>)
 8005d0e:	e006      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005d10:	4b1e      	ldr	r3, [pc, #120]	@ (8005d8c <HAL_ADC_ConfigChannel+0x7dc>)
 8005d12:	e004      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005d14:	4b1e      	ldr	r3, [pc, #120]	@ (8005d90 <HAL_ADC_ConfigChannel+0x7e0>)
 8005d16:	e002      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e000      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x76e>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4610      	mov	r0, r2
 8005d22:	f7fe fc17 	bl	8004554 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f280 80f6 	bge.w	8005f1c <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a05      	ldr	r2, [pc, #20]	@ (8005d4c <HAL_ADC_ConfigChannel+0x79c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d004      	beq.n	8005d44 <HAL_ADC_ConfigChannel+0x794>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a15      	ldr	r2, [pc, #84]	@ (8005d94 <HAL_ADC_ConfigChannel+0x7e4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d131      	bne.n	8005da8 <HAL_ADC_ConfigChannel+0x7f8>
 8005d44:	4b17      	ldr	r3, [pc, #92]	@ (8005da4 <HAL_ADC_ConfigChannel+0x7f4>)
 8005d46:	e030      	b.n	8005daa <HAL_ADC_ConfigChannel+0x7fa>
 8005d48:	47ff0000 	.word	0x47ff0000
 8005d4c:	40022000 	.word	0x40022000
 8005d50:	04300002 	.word	0x04300002
 8005d54:	08600004 	.word	0x08600004
 8005d58:	0c900008 	.word	0x0c900008
 8005d5c:	10c00010 	.word	0x10c00010
 8005d60:	14f00020 	.word	0x14f00020
 8005d64:	2a000400 	.word	0x2a000400
 8005d68:	2e300800 	.word	0x2e300800
 8005d6c:	32601000 	.word	0x32601000
 8005d70:	43210000 	.word	0x43210000
 8005d74:	4b840000 	.word	0x4b840000
 8005d78:	4fb80000 	.word	0x4fb80000
 8005d7c:	47520000 	.word	0x47520000
 8005d80:	36902000 	.word	0x36902000
 8005d84:	25b00200 	.word	0x25b00200
 8005d88:	21800100 	.word	0x21800100
 8005d8c:	1d500080 	.word	0x1d500080
 8005d90:	19200040 	.word	0x19200040
 8005d94:	40022100 	.word	0x40022100
 8005d98:	58026000 	.word	0x58026000
 8005d9c:	3ac04000 	.word	0x3ac04000
 8005da0:	3ef08000 	.word	0x3ef08000
 8005da4:	40022300 	.word	0x40022300
 8005da8:	4b61      	ldr	r3, [pc, #388]	@ (8005f30 <HAL_ADC_ConfigChannel+0x980>)
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fe fbc4 	bl	8004538 <LL_ADC_GetCommonPathInternalCh>
 8005db0:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a5f      	ldr	r2, [pc, #380]	@ (8005f34 <HAL_ADC_ConfigChannel+0x984>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d004      	beq.n	8005dc6 <HAL_ADC_ConfigChannel+0x816>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a5d      	ldr	r2, [pc, #372]	@ (8005f38 <HAL_ADC_ConfigChannel+0x988>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d10e      	bne.n	8005de4 <HAL_ADC_ConfigChannel+0x834>
 8005dc6:	485b      	ldr	r0, [pc, #364]	@ (8005f34 <HAL_ADC_ConfigChannel+0x984>)
 8005dc8:	f7fe fe68 	bl	8004a9c <LL_ADC_IsEnabled>
 8005dcc:	4604      	mov	r4, r0
 8005dce:	485a      	ldr	r0, [pc, #360]	@ (8005f38 <HAL_ADC_ConfigChannel+0x988>)
 8005dd0:	f7fe fe64 	bl	8004a9c <LL_ADC_IsEnabled>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	4323      	orrs	r3, r4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	bf0c      	ite	eq
 8005ddc:	2301      	moveq	r3, #1
 8005dde:	2300      	movne	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	e008      	b.n	8005df6 <HAL_ADC_ConfigChannel+0x846>
 8005de4:	4855      	ldr	r0, [pc, #340]	@ (8005f3c <HAL_ADC_ConfigChannel+0x98c>)
 8005de6:	f7fe fe59 	bl	8004a9c <LL_ADC_IsEnabled>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	bf0c      	ite	eq
 8005df0:	2301      	moveq	r3, #1
 8005df2:	2300      	movne	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d07d      	beq.n	8005ef6 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a50      	ldr	r2, [pc, #320]	@ (8005f40 <HAL_ADC_ConfigChannel+0x990>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d130      	bne.n	8005e66 <HAL_ADC_ConfigChannel+0x8b6>
 8005e04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d12b      	bne.n	8005e66 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a4a      	ldr	r2, [pc, #296]	@ (8005f3c <HAL_ADC_ConfigChannel+0x98c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	f040 8081 	bne.w	8005f1c <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a45      	ldr	r2, [pc, #276]	@ (8005f34 <HAL_ADC_ConfigChannel+0x984>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d004      	beq.n	8005e2e <HAL_ADC_ConfigChannel+0x87e>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a43      	ldr	r2, [pc, #268]	@ (8005f38 <HAL_ADC_ConfigChannel+0x988>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d101      	bne.n	8005e32 <HAL_ADC_ConfigChannel+0x882>
 8005e2e:	4a45      	ldr	r2, [pc, #276]	@ (8005f44 <HAL_ADC_ConfigChannel+0x994>)
 8005e30:	e000      	b.n	8005e34 <HAL_ADC_ConfigChannel+0x884>
 8005e32:	4a3f      	ldr	r2, [pc, #252]	@ (8005f30 <HAL_ADC_ConfigChannel+0x980>)
 8005e34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	f7fe fb68 	bl	8004512 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e42:	4b41      	ldr	r3, [pc, #260]	@ (8005f48 <HAL_ADC_ConfigChannel+0x998>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	099b      	lsrs	r3, r3, #6
 8005e48:	4a40      	ldr	r2, [pc, #256]	@ (8005f4c <HAL_ADC_ConfigChannel+0x99c>)
 8005e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4e:	099b      	lsrs	r3, r3, #6
 8005e50:	3301      	adds	r3, #1
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8005e56:	e002      	b.n	8005e5e <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1f9      	bne.n	8005e58 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e64:	e05a      	b.n	8005f1c <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a39      	ldr	r2, [pc, #228]	@ (8005f50 <HAL_ADC_ConfigChannel+0x9a0>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d11e      	bne.n	8005eae <HAL_ADC_ConfigChannel+0x8fe>
 8005e70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d119      	bne.n	8005eae <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8005f3c <HAL_ADC_ConfigChannel+0x98c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d14b      	bne.n	8005f1c <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a2a      	ldr	r2, [pc, #168]	@ (8005f34 <HAL_ADC_ConfigChannel+0x984>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d004      	beq.n	8005e98 <HAL_ADC_ConfigChannel+0x8e8>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a29      	ldr	r2, [pc, #164]	@ (8005f38 <HAL_ADC_ConfigChannel+0x988>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d101      	bne.n	8005e9c <HAL_ADC_ConfigChannel+0x8ec>
 8005e98:	4a2a      	ldr	r2, [pc, #168]	@ (8005f44 <HAL_ADC_ConfigChannel+0x994>)
 8005e9a:	e000      	b.n	8005e9e <HAL_ADC_ConfigChannel+0x8ee>
 8005e9c:	4a24      	ldr	r2, [pc, #144]	@ (8005f30 <HAL_ADC_ConfigChannel+0x980>)
 8005e9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ea0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	f7fe fb33 	bl	8004512 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005eac:	e036      	b.n	8005f1c <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a28      	ldr	r2, [pc, #160]	@ (8005f54 <HAL_ADC_ConfigChannel+0x9a4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d131      	bne.n	8005f1c <HAL_ADC_ConfigChannel+0x96c>
 8005eb8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d12c      	bne.n	8005f1c <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8005f3c <HAL_ADC_ConfigChannel+0x98c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d127      	bne.n	8005f1c <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a18      	ldr	r2, [pc, #96]	@ (8005f34 <HAL_ADC_ConfigChannel+0x984>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d004      	beq.n	8005ee0 <HAL_ADC_ConfigChannel+0x930>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a17      	ldr	r2, [pc, #92]	@ (8005f38 <HAL_ADC_ConfigChannel+0x988>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d101      	bne.n	8005ee4 <HAL_ADC_ConfigChannel+0x934>
 8005ee0:	4a18      	ldr	r2, [pc, #96]	@ (8005f44 <HAL_ADC_ConfigChannel+0x994>)
 8005ee2:	e000      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0x936>
 8005ee4:	4a12      	ldr	r2, [pc, #72]	@ (8005f30 <HAL_ADC_ConfigChannel+0x980>)
 8005ee6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ee8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005eec:	4619      	mov	r1, r3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	f7fe fb0f 	bl	8004512 <LL_ADC_SetCommonPathInternalCh>
 8005ef4:	e012      	b.n	8005f1c <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005efa:	f043 0220 	orr.w	r2, r3, #32
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8005f08:	e008      	b.n	8005f1c <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f0e:	f043 0220 	orr.w	r2, r3, #32
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005f24:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3794      	adds	r7, #148	@ 0x94
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd90      	pop	{r4, r7, pc}
 8005f30:	58026300 	.word	0x58026300
 8005f34:	40022000 	.word	0x40022000
 8005f38:	40022100 	.word	0x40022100
 8005f3c:	58026000 	.word	0x58026000
 8005f40:	c7520000 	.word	0xc7520000
 8005f44:	40022300 	.word	0x40022300
 8005f48:	24000010 	.word	0x24000010
 8005f4c:	053e2d63 	.word	0x053e2d63
 8005f50:	c3210000 	.word	0xc3210000
 8005f54:	cb840000 	.word	0xcb840000

08005f58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fe fd99 	bl	8004a9c <LL_ADC_IsEnabled>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d16e      	bne.n	800604e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	4b38      	ldr	r3, [pc, #224]	@ (8006058 <ADC_Enable+0x100>)
 8005f78:	4013      	ands	r3, r2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00d      	beq.n	8005f9a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f82:	f043 0210 	orr.w	r2, r3, #16
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f8e:	f043 0201 	orr.w	r2, r3, #1
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e05a      	b.n	8006050 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fe fd68 	bl	8004a74 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005fa4:	f7fe fa80 	bl	80044a8 <HAL_GetTick>
 8005fa8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a2b      	ldr	r2, [pc, #172]	@ (800605c <ADC_Enable+0x104>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d004      	beq.n	8005fbe <ADC_Enable+0x66>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a29      	ldr	r2, [pc, #164]	@ (8006060 <ADC_Enable+0x108>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d101      	bne.n	8005fc2 <ADC_Enable+0x6a>
 8005fbe:	4b29      	ldr	r3, [pc, #164]	@ (8006064 <ADC_Enable+0x10c>)
 8005fc0:	e000      	b.n	8005fc4 <ADC_Enable+0x6c>
 8005fc2:	4b29      	ldr	r3, [pc, #164]	@ (8006068 <ADC_Enable+0x110>)
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fe fceb 	bl	80049a0 <LL_ADC_GetMultimode>
 8005fca:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a23      	ldr	r2, [pc, #140]	@ (8006060 <ADC_Enable+0x108>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d002      	beq.n	8005fdc <ADC_Enable+0x84>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	e000      	b.n	8005fde <ADC_Enable+0x86>
 8005fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800605c <ADC_Enable+0x104>)
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6812      	ldr	r2, [r2, #0]
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d02c      	beq.n	8006040 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d130      	bne.n	800604e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005fec:	e028      	b.n	8006040 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fe fd52 	bl	8004a9c <LL_ADC_IsEnabled>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d104      	bne.n	8006008 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f7fe fd36 	bl	8004a74 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006008:	f7fe fa4e 	bl	80044a8 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d914      	bls.n	8006040 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b01      	cmp	r3, #1
 8006022:	d00d      	beq.n	8006040 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006028:	f043 0210 	orr.w	r2, r3, #16
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006034:	f043 0201 	orr.w	r2, r3, #1
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e007      	b.n	8006050 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b01      	cmp	r3, #1
 800604c:	d1cf      	bne.n	8005fee <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	8000003f 	.word	0x8000003f
 800605c:	40022000 	.word	0x40022000
 8006060:	40022100 	.word	0x40022100
 8006064:	40022300 	.word	0x40022300
 8006068:	58026300 	.word	0x58026300

0800606c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006078:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800607e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006082:	2b00      	cmp	r3, #0
 8006084:	d14b      	bne.n	800611e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800608a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b00      	cmp	r3, #0
 800609e:	d021      	beq.n	80060e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fe fb81 	bl	80047ac <LL_ADC_REG_IsTriggerSourceSWStart>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d032      	beq.n	8006116 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d12b      	bne.n	8006116 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d11f      	bne.n	8006116 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060da:	f043 0201 	orr.w	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	661a      	str	r2, [r3, #96]	@ 0x60
 80060e2:	e018      	b.n	8006116 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d111      	bne.n	8006116 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006102:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d105      	bne.n	8006116 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800610e:	f043 0201 	orr.w	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7fc fd6c 	bl	8002bf4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800611c:	e00e      	b.n	800613c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006122:	f003 0310 	and.w	r3, r3, #16
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f7ff fa36 	bl	800559c <HAL_ADC_ErrorCallback>
}
 8006130:	e004      	b.n	800613c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	4798      	blx	r3
}
 800613c:	bf00      	nop
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006150:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f7ff fa0e 	bl	8005574 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006172:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800617e:	f043 0204 	orr.w	r2, r3, #4
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f7ff fa08 	bl	800559c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800618c:	bf00      	nop
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a6c      	ldr	r2, [pc, #432]	@ (8006354 <ADC_ConfigureBoostMode+0x1c0>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d004      	beq.n	80061b0 <ADC_ConfigureBoostMode+0x1c>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a6b      	ldr	r2, [pc, #428]	@ (8006358 <ADC_ConfigureBoostMode+0x1c4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d109      	bne.n	80061c4 <ADC_ConfigureBoostMode+0x30>
 80061b0:	4b6a      	ldr	r3, [pc, #424]	@ (800635c <ADC_ConfigureBoostMode+0x1c8>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	bf14      	ite	ne
 80061bc:	2301      	movne	r3, #1
 80061be:	2300      	moveq	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	e008      	b.n	80061d6 <ADC_ConfigureBoostMode+0x42>
 80061c4:	4b66      	ldr	r3, [pc, #408]	@ (8006360 <ADC_ConfigureBoostMode+0x1cc>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bf14      	ite	ne
 80061d0:	2301      	movne	r3, #1
 80061d2:	2300      	moveq	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d01c      	beq.n	8006214 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80061da:	f005 ff5d 	bl	800c098 <HAL_RCC_GetHCLKFreq>
 80061de:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061e8:	d010      	beq.n	800620c <ADC_ConfigureBoostMode+0x78>
 80061ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061ee:	d873      	bhi.n	80062d8 <ADC_ConfigureBoostMode+0x144>
 80061f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061f4:	d002      	beq.n	80061fc <ADC_ConfigureBoostMode+0x68>
 80061f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061fa:	d16d      	bne.n	80062d8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	0c1b      	lsrs	r3, r3, #16
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	fbb2 f3f3 	udiv	r3, r2, r3
 8006208:	60fb      	str	r3, [r7, #12]
        break;
 800620a:	e068      	b.n	80062de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	089b      	lsrs	r3, r3, #2
 8006210:	60fb      	str	r3, [r7, #12]
        break;
 8006212:	e064      	b.n	80062de <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006214:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006218:	f04f 0100 	mov.w	r1, #0
 800621c:	f007 f938 	bl	800d490 <HAL_RCCEx_GetPeriphCLKFreq>
 8006220:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800622a:	d051      	beq.n	80062d0 <ADC_ConfigureBoostMode+0x13c>
 800622c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006230:	d854      	bhi.n	80062dc <ADC_ConfigureBoostMode+0x148>
 8006232:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006236:	d047      	beq.n	80062c8 <ADC_ConfigureBoostMode+0x134>
 8006238:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800623c:	d84e      	bhi.n	80062dc <ADC_ConfigureBoostMode+0x148>
 800623e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006242:	d03d      	beq.n	80062c0 <ADC_ConfigureBoostMode+0x12c>
 8006244:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006248:	d848      	bhi.n	80062dc <ADC_ConfigureBoostMode+0x148>
 800624a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800624e:	d033      	beq.n	80062b8 <ADC_ConfigureBoostMode+0x124>
 8006250:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006254:	d842      	bhi.n	80062dc <ADC_ConfigureBoostMode+0x148>
 8006256:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800625a:	d029      	beq.n	80062b0 <ADC_ConfigureBoostMode+0x11c>
 800625c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006260:	d83c      	bhi.n	80062dc <ADC_ConfigureBoostMode+0x148>
 8006262:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006266:	d01a      	beq.n	800629e <ADC_ConfigureBoostMode+0x10a>
 8006268:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800626c:	d836      	bhi.n	80062dc <ADC_ConfigureBoostMode+0x148>
 800626e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006272:	d014      	beq.n	800629e <ADC_ConfigureBoostMode+0x10a>
 8006274:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006278:	d830      	bhi.n	80062dc <ADC_ConfigureBoostMode+0x148>
 800627a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800627e:	d00e      	beq.n	800629e <ADC_ConfigureBoostMode+0x10a>
 8006280:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006284:	d82a      	bhi.n	80062dc <ADC_ConfigureBoostMode+0x148>
 8006286:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800628a:	d008      	beq.n	800629e <ADC_ConfigureBoostMode+0x10a>
 800628c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006290:	d824      	bhi.n	80062dc <ADC_ConfigureBoostMode+0x148>
 8006292:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006296:	d002      	beq.n	800629e <ADC_ConfigureBoostMode+0x10a>
 8006298:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800629c:	d11e      	bne.n	80062dc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	0c9b      	lsrs	r3, r3, #18
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ac:	60fb      	str	r3, [r7, #12]
        break;
 80062ae:	e016      	b.n	80062de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	091b      	lsrs	r3, r3, #4
 80062b4:	60fb      	str	r3, [r7, #12]
        break;
 80062b6:	e012      	b.n	80062de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	095b      	lsrs	r3, r3, #5
 80062bc:	60fb      	str	r3, [r7, #12]
        break;
 80062be:	e00e      	b.n	80062de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	099b      	lsrs	r3, r3, #6
 80062c4:	60fb      	str	r3, [r7, #12]
        break;
 80062c6:	e00a      	b.n	80062de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	09db      	lsrs	r3, r3, #7
 80062cc:	60fb      	str	r3, [r7, #12]
        break;
 80062ce:	e006      	b.n	80062de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	0a1b      	lsrs	r3, r3, #8
 80062d4:	60fb      	str	r3, [r7, #12]
        break;
 80062d6:	e002      	b.n	80062de <ADC_ConfigureBoostMode+0x14a>
        break;
 80062d8:	bf00      	nop
 80062da:	e000      	b.n	80062de <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80062dc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	085b      	lsrs	r3, r3, #1
 80062e2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4a1f      	ldr	r2, [pc, #124]	@ (8006364 <ADC_ConfigureBoostMode+0x1d0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d808      	bhi.n	80062fe <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689a      	ldr	r2, [r3, #8]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80062fa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80062fc:	e025      	b.n	800634a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4a19      	ldr	r2, [pc, #100]	@ (8006368 <ADC_ConfigureBoostMode+0x1d4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d80a      	bhi.n	800631c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006318:	609a      	str	r2, [r3, #8]
}
 800631a:	e016      	b.n	800634a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4a13      	ldr	r2, [pc, #76]	@ (800636c <ADC_ConfigureBoostMode+0x1d8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d80a      	bhi.n	800633a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006336:	609a      	str	r2, [r3, #8]
}
 8006338:	e007      	b.n	800634a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006348:	609a      	str	r2, [r3, #8]
}
 800634a:	bf00      	nop
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	40022000 	.word	0x40022000
 8006358:	40022100 	.word	0x40022100
 800635c:	40022300 	.word	0x40022300
 8006360:	58026300 	.word	0x58026300
 8006364:	005f5e10 	.word	0x005f5e10
 8006368:	00bebc20 	.word	0x00bebc20
 800636c:	017d7840 	.word	0x017d7840

08006370 <LL_ADC_IsEnabled>:
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <LL_ADC_IsEnabled+0x18>
 8006384:	2301      	movs	r3, #1
 8006386:	e000      	b.n	800638a <LL_ADC_IsEnabled+0x1a>
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <LL_ADC_REG_IsConversionOngoing>:
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 0304 	and.w	r3, r3, #4
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d101      	bne.n	80063ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e000      	b.n	80063b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006420:	b590      	push	{r4, r7, lr}
 8006422:	b0a3      	sub	sp, #140	@ 0x8c
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006436:	2b01      	cmp	r3, #1
 8006438:	d101      	bne.n	800643e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800643a:	2302      	movs	r3, #2
 800643c:	e0c1      	b.n	80065c2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006446:	2300      	movs	r3, #0
 8006448:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800644a:	2300      	movs	r3, #0
 800644c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a5e      	ldr	r2, [pc, #376]	@ (80065cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d102      	bne.n	800645e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006458:	4b5d      	ldr	r3, [pc, #372]	@ (80065d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	e001      	b.n	8006462 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10b      	bne.n	8006480 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800646c:	f043 0220 	orr.w	r2, r3, #32
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e0a0      	b.n	80065c2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff ff87 	bl	8006396 <LL_ADC_REG_IsConversionOngoing>
 8006488:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff ff80 	bl	8006396 <LL_ADC_REG_IsConversionOngoing>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	f040 8081 	bne.w	80065a0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800649e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d17c      	bne.n	80065a0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a48      	ldr	r2, [pc, #288]	@ (80065cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d004      	beq.n	80064ba <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a46      	ldr	r2, [pc, #280]	@ (80065d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d101      	bne.n	80064be <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80064ba:	4b46      	ldr	r3, [pc, #280]	@ (80065d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80064bc:	e000      	b.n	80064c0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80064be:	4b46      	ldr	r3, [pc, #280]	@ (80065d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80064c0:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d039      	beq.n	800653e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80064ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80064da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a3a      	ldr	r2, [pc, #232]	@ (80065cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d004      	beq.n	80064f0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a39      	ldr	r2, [pc, #228]	@ (80065d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d10e      	bne.n	800650e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80064f0:	4836      	ldr	r0, [pc, #216]	@ (80065cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80064f2:	f7ff ff3d 	bl	8006370 <LL_ADC_IsEnabled>
 80064f6:	4604      	mov	r4, r0
 80064f8:	4835      	ldr	r0, [pc, #212]	@ (80065d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80064fa:	f7ff ff39 	bl	8006370 <LL_ADC_IsEnabled>
 80064fe:	4603      	mov	r3, r0
 8006500:	4323      	orrs	r3, r4
 8006502:	2b00      	cmp	r3, #0
 8006504:	bf0c      	ite	eq
 8006506:	2301      	moveq	r3, #1
 8006508:	2300      	movne	r3, #0
 800650a:	b2db      	uxtb	r3, r3
 800650c:	e008      	b.n	8006520 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800650e:	4833      	ldr	r0, [pc, #204]	@ (80065dc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006510:	f7ff ff2e 	bl	8006370 <LL_ADC_IsEnabled>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	bf0c      	ite	eq
 800651a:	2301      	moveq	r3, #1
 800651c:	2300      	movne	r3, #0
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d047      	beq.n	80065b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006524:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	4b2d      	ldr	r3, [pc, #180]	@ (80065e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800652a:	4013      	ands	r3, r2
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	6811      	ldr	r1, [r2, #0]
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	6892      	ldr	r2, [r2, #8]
 8006534:	430a      	orrs	r2, r1
 8006536:	431a      	orrs	r2, r3
 8006538:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800653a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800653c:	e03a      	b.n	80065b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800653e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006546:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006548:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a1f      	ldr	r2, [pc, #124]	@ (80065cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d004      	beq.n	800655e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a1d      	ldr	r2, [pc, #116]	@ (80065d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d10e      	bne.n	800657c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800655e:	481b      	ldr	r0, [pc, #108]	@ (80065cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006560:	f7ff ff06 	bl	8006370 <LL_ADC_IsEnabled>
 8006564:	4604      	mov	r4, r0
 8006566:	481a      	ldr	r0, [pc, #104]	@ (80065d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006568:	f7ff ff02 	bl	8006370 <LL_ADC_IsEnabled>
 800656c:	4603      	mov	r3, r0
 800656e:	4323      	orrs	r3, r4
 8006570:	2b00      	cmp	r3, #0
 8006572:	bf0c      	ite	eq
 8006574:	2301      	moveq	r3, #1
 8006576:	2300      	movne	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	e008      	b.n	800658e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800657c:	4817      	ldr	r0, [pc, #92]	@ (80065dc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800657e:	f7ff fef7 	bl	8006370 <LL_ADC_IsEnabled>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	bf0c      	ite	eq
 8006588:	2301      	moveq	r3, #1
 800658a:	2300      	movne	r3, #0
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d010      	beq.n	80065b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006592:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	4b12      	ldr	r3, [pc, #72]	@ (80065e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006598:	4013      	ands	r3, r2
 800659a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800659c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800659e:	e009      	b.n	80065b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065a4:	f043 0220 	orr.w	r2, r3, #32
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80065b2:	e000      	b.n	80065b6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80065b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80065be:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	378c      	adds	r7, #140	@ 0x8c
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd90      	pop	{r4, r7, pc}
 80065ca:	bf00      	nop
 80065cc:	40022000 	.word	0x40022000
 80065d0:	40022100 	.word	0x40022100
 80065d4:	40022300 	.word	0x40022300
 80065d8:	58026300 	.word	0x58026300
 80065dc:	58026000 	.word	0x58026000
 80065e0:	fffff0e0 	.word	0xfffff0e0

080065e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f003 0307 	and.w	r3, r3, #7
 80065f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006624 <__NVIC_SetPriorityGrouping+0x40>)
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006600:	4013      	ands	r3, r2
 8006602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800660c:	4b06      	ldr	r3, [pc, #24]	@ (8006628 <__NVIC_SetPriorityGrouping+0x44>)
 800660e:	4313      	orrs	r3, r2
 8006610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006612:	4a04      	ldr	r2, [pc, #16]	@ (8006624 <__NVIC_SetPriorityGrouping+0x40>)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	60d3      	str	r3, [r2, #12]
}
 8006618:	bf00      	nop
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	e000ed00 	.word	0xe000ed00
 8006628:	05fa0000 	.word	0x05fa0000

0800662c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006630:	4b04      	ldr	r3, [pc, #16]	@ (8006644 <__NVIC_GetPriorityGrouping+0x18>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	0a1b      	lsrs	r3, r3, #8
 8006636:	f003 0307 	and.w	r3, r3, #7
}
 800663a:	4618      	mov	r0, r3
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	e000ed00 	.word	0xe000ed00

08006648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	4603      	mov	r3, r0
 8006650:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006656:	2b00      	cmp	r3, #0
 8006658:	db0b      	blt.n	8006672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800665a:	88fb      	ldrh	r3, [r7, #6]
 800665c:	f003 021f 	and.w	r2, r3, #31
 8006660:	4907      	ldr	r1, [pc, #28]	@ (8006680 <__NVIC_EnableIRQ+0x38>)
 8006662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	2001      	movs	r0, #1
 800666a:	fa00 f202 	lsl.w	r2, r0, r2
 800666e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	e000e100 	.word	0xe000e100

08006684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	6039      	str	r1, [r7, #0]
 800668e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006694:	2b00      	cmp	r3, #0
 8006696:	db0a      	blt.n	80066ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	b2da      	uxtb	r2, r3
 800669c:	490c      	ldr	r1, [pc, #48]	@ (80066d0 <__NVIC_SetPriority+0x4c>)
 800669e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066a2:	0112      	lsls	r2, r2, #4
 80066a4:	b2d2      	uxtb	r2, r2
 80066a6:	440b      	add	r3, r1
 80066a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066ac:	e00a      	b.n	80066c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	4908      	ldr	r1, [pc, #32]	@ (80066d4 <__NVIC_SetPriority+0x50>)
 80066b4:	88fb      	ldrh	r3, [r7, #6]
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	3b04      	subs	r3, #4
 80066bc:	0112      	lsls	r2, r2, #4
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	440b      	add	r3, r1
 80066c2:	761a      	strb	r2, [r3, #24]
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	e000e100 	.word	0xe000e100
 80066d4:	e000ed00 	.word	0xe000ed00

080066d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066d8:	b480      	push	{r7}
 80066da:	b089      	sub	sp, #36	@ 0x24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	f1c3 0307 	rsb	r3, r3, #7
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	bf28      	it	cs
 80066f6:	2304      	movcs	r3, #4
 80066f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	3304      	adds	r3, #4
 80066fe:	2b06      	cmp	r3, #6
 8006700:	d902      	bls.n	8006708 <NVIC_EncodePriority+0x30>
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	3b03      	subs	r3, #3
 8006706:	e000      	b.n	800670a <NVIC_EncodePriority+0x32>
 8006708:	2300      	movs	r3, #0
 800670a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800670c:	f04f 32ff 	mov.w	r2, #4294967295
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	fa02 f303 	lsl.w	r3, r2, r3
 8006716:	43da      	mvns	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	401a      	ands	r2, r3
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006720:	f04f 31ff 	mov.w	r1, #4294967295
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	fa01 f303 	lsl.w	r3, r1, r3
 800672a:	43d9      	mvns	r1, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006730:	4313      	orrs	r3, r2
         );
}
 8006732:	4618      	mov	r0, r3
 8006734:	3724      	adds	r7, #36	@ 0x24
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
	...

08006740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3b01      	subs	r3, #1
 800674c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006750:	d301      	bcc.n	8006756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006752:	2301      	movs	r3, #1
 8006754:	e00f      	b.n	8006776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006756:	4a0a      	ldr	r2, [pc, #40]	@ (8006780 <SysTick_Config+0x40>)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3b01      	subs	r3, #1
 800675c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800675e:	210f      	movs	r1, #15
 8006760:	f04f 30ff 	mov.w	r0, #4294967295
 8006764:	f7ff ff8e 	bl	8006684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006768:	4b05      	ldr	r3, [pc, #20]	@ (8006780 <SysTick_Config+0x40>)
 800676a:	2200      	movs	r2, #0
 800676c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800676e:	4b04      	ldr	r3, [pc, #16]	@ (8006780 <SysTick_Config+0x40>)
 8006770:	2207      	movs	r2, #7
 8006772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	e000e010 	.word	0xe000e010

08006784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff ff29 	bl	80065e4 <__NVIC_SetPriorityGrouping>
}
 8006792:	bf00      	nop
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b086      	sub	sp, #24
 800679e:	af00      	add	r7, sp, #0
 80067a0:	4603      	mov	r3, r0
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	607a      	str	r2, [r7, #4]
 80067a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80067a8:	f7ff ff40 	bl	800662c <__NVIC_GetPriorityGrouping>
 80067ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	6978      	ldr	r0, [r7, #20]
 80067b4:	f7ff ff90 	bl	80066d8 <NVIC_EncodePriority>
 80067b8:	4602      	mov	r2, r0
 80067ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80067be:	4611      	mov	r1, r2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff ff5f 	bl	8006684 <__NVIC_SetPriority>
}
 80067c6:	bf00      	nop
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b082      	sub	sp, #8
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	4603      	mov	r3, r0
 80067d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff ff33 	bl	8006648 <__NVIC_EnableIRQ>
}
 80067e2:	bf00      	nop
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff ffa4 	bl	8006740 <SysTick_Config>
 80067f8:	4603      	mov	r3, r0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800680c:	f7fd fe4c 	bl	80044a8 <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e312      	b.n	8006e42 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a66      	ldr	r2, [pc, #408]	@ (80069bc <HAL_DMA_Init+0x1b8>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d04a      	beq.n	80068bc <HAL_DMA_Init+0xb8>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a65      	ldr	r2, [pc, #404]	@ (80069c0 <HAL_DMA_Init+0x1bc>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d045      	beq.n	80068bc <HAL_DMA_Init+0xb8>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a63      	ldr	r2, [pc, #396]	@ (80069c4 <HAL_DMA_Init+0x1c0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d040      	beq.n	80068bc <HAL_DMA_Init+0xb8>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a62      	ldr	r2, [pc, #392]	@ (80069c8 <HAL_DMA_Init+0x1c4>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d03b      	beq.n	80068bc <HAL_DMA_Init+0xb8>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a60      	ldr	r2, [pc, #384]	@ (80069cc <HAL_DMA_Init+0x1c8>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d036      	beq.n	80068bc <HAL_DMA_Init+0xb8>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a5f      	ldr	r2, [pc, #380]	@ (80069d0 <HAL_DMA_Init+0x1cc>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d031      	beq.n	80068bc <HAL_DMA_Init+0xb8>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a5d      	ldr	r2, [pc, #372]	@ (80069d4 <HAL_DMA_Init+0x1d0>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d02c      	beq.n	80068bc <HAL_DMA_Init+0xb8>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a5c      	ldr	r2, [pc, #368]	@ (80069d8 <HAL_DMA_Init+0x1d4>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d027      	beq.n	80068bc <HAL_DMA_Init+0xb8>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a5a      	ldr	r2, [pc, #360]	@ (80069dc <HAL_DMA_Init+0x1d8>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d022      	beq.n	80068bc <HAL_DMA_Init+0xb8>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a59      	ldr	r2, [pc, #356]	@ (80069e0 <HAL_DMA_Init+0x1dc>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d01d      	beq.n	80068bc <HAL_DMA_Init+0xb8>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a57      	ldr	r2, [pc, #348]	@ (80069e4 <HAL_DMA_Init+0x1e0>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d018      	beq.n	80068bc <HAL_DMA_Init+0xb8>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a56      	ldr	r2, [pc, #344]	@ (80069e8 <HAL_DMA_Init+0x1e4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d013      	beq.n	80068bc <HAL_DMA_Init+0xb8>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a54      	ldr	r2, [pc, #336]	@ (80069ec <HAL_DMA_Init+0x1e8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d00e      	beq.n	80068bc <HAL_DMA_Init+0xb8>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a53      	ldr	r2, [pc, #332]	@ (80069f0 <HAL_DMA_Init+0x1ec>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d009      	beq.n	80068bc <HAL_DMA_Init+0xb8>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a51      	ldr	r2, [pc, #324]	@ (80069f4 <HAL_DMA_Init+0x1f0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d004      	beq.n	80068bc <HAL_DMA_Init+0xb8>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a50      	ldr	r2, [pc, #320]	@ (80069f8 <HAL_DMA_Init+0x1f4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d101      	bne.n	80068c0 <HAL_DMA_Init+0xbc>
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <HAL_DMA_Init+0xbe>
 80068c0:	2300      	movs	r3, #0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 813c 	beq.w	8006b40 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a37      	ldr	r2, [pc, #220]	@ (80069bc <HAL_DMA_Init+0x1b8>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d04a      	beq.n	8006978 <HAL_DMA_Init+0x174>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a36      	ldr	r2, [pc, #216]	@ (80069c0 <HAL_DMA_Init+0x1bc>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d045      	beq.n	8006978 <HAL_DMA_Init+0x174>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a34      	ldr	r2, [pc, #208]	@ (80069c4 <HAL_DMA_Init+0x1c0>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d040      	beq.n	8006978 <HAL_DMA_Init+0x174>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a33      	ldr	r2, [pc, #204]	@ (80069c8 <HAL_DMA_Init+0x1c4>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d03b      	beq.n	8006978 <HAL_DMA_Init+0x174>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a31      	ldr	r2, [pc, #196]	@ (80069cc <HAL_DMA_Init+0x1c8>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d036      	beq.n	8006978 <HAL_DMA_Init+0x174>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a30      	ldr	r2, [pc, #192]	@ (80069d0 <HAL_DMA_Init+0x1cc>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d031      	beq.n	8006978 <HAL_DMA_Init+0x174>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a2e      	ldr	r2, [pc, #184]	@ (80069d4 <HAL_DMA_Init+0x1d0>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d02c      	beq.n	8006978 <HAL_DMA_Init+0x174>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a2d      	ldr	r2, [pc, #180]	@ (80069d8 <HAL_DMA_Init+0x1d4>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d027      	beq.n	8006978 <HAL_DMA_Init+0x174>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a2b      	ldr	r2, [pc, #172]	@ (80069dc <HAL_DMA_Init+0x1d8>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d022      	beq.n	8006978 <HAL_DMA_Init+0x174>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a2a      	ldr	r2, [pc, #168]	@ (80069e0 <HAL_DMA_Init+0x1dc>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d01d      	beq.n	8006978 <HAL_DMA_Init+0x174>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a28      	ldr	r2, [pc, #160]	@ (80069e4 <HAL_DMA_Init+0x1e0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d018      	beq.n	8006978 <HAL_DMA_Init+0x174>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a27      	ldr	r2, [pc, #156]	@ (80069e8 <HAL_DMA_Init+0x1e4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d013      	beq.n	8006978 <HAL_DMA_Init+0x174>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a25      	ldr	r2, [pc, #148]	@ (80069ec <HAL_DMA_Init+0x1e8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00e      	beq.n	8006978 <HAL_DMA_Init+0x174>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a24      	ldr	r2, [pc, #144]	@ (80069f0 <HAL_DMA_Init+0x1ec>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d009      	beq.n	8006978 <HAL_DMA_Init+0x174>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a22      	ldr	r2, [pc, #136]	@ (80069f4 <HAL_DMA_Init+0x1f0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d004      	beq.n	8006978 <HAL_DMA_Init+0x174>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a21      	ldr	r2, [pc, #132]	@ (80069f8 <HAL_DMA_Init+0x1f4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d108      	bne.n	800698a <HAL_DMA_Init+0x186>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0201 	bic.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	e007      	b.n	800699a <HAL_DMA_Init+0x196>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0201 	bic.w	r2, r2, #1
 8006998:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800699a:	e02f      	b.n	80069fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800699c:	f7fd fd84 	bl	80044a8 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b05      	cmp	r3, #5
 80069a8:	d928      	bls.n	80069fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2220      	movs	r2, #32
 80069ae:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2203      	movs	r2, #3
 80069b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e242      	b.n	8006e42 <HAL_DMA_Init+0x63e>
 80069bc:	40020010 	.word	0x40020010
 80069c0:	40020028 	.word	0x40020028
 80069c4:	40020040 	.word	0x40020040
 80069c8:	40020058 	.word	0x40020058
 80069cc:	40020070 	.word	0x40020070
 80069d0:	40020088 	.word	0x40020088
 80069d4:	400200a0 	.word	0x400200a0
 80069d8:	400200b8 	.word	0x400200b8
 80069dc:	40020410 	.word	0x40020410
 80069e0:	40020428 	.word	0x40020428
 80069e4:	40020440 	.word	0x40020440
 80069e8:	40020458 	.word	0x40020458
 80069ec:	40020470 	.word	0x40020470
 80069f0:	40020488 	.word	0x40020488
 80069f4:	400204a0 	.word	0x400204a0
 80069f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1c8      	bne.n	800699c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	4b83      	ldr	r3, [pc, #524]	@ (8006c24 <HAL_DMA_Init+0x420>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006a22:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a3a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d107      	bne.n	8006a60 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2b28      	cmp	r3, #40	@ 0x28
 8006a66:	d903      	bls.n	8006a70 <HAL_DMA_Init+0x26c>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a6e:	d91f      	bls.n	8006ab0 <HAL_DMA_Init+0x2ac>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a76:	d903      	bls.n	8006a80 <HAL_DMA_Init+0x27c>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2b42      	cmp	r3, #66	@ 0x42
 8006a7e:	d917      	bls.n	8006ab0 <HAL_DMA_Init+0x2ac>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	2b46      	cmp	r3, #70	@ 0x46
 8006a86:	d903      	bls.n	8006a90 <HAL_DMA_Init+0x28c>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	2b48      	cmp	r3, #72	@ 0x48
 8006a8e:	d90f      	bls.n	8006ab0 <HAL_DMA_Init+0x2ac>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	2b4e      	cmp	r3, #78	@ 0x4e
 8006a96:	d903      	bls.n	8006aa0 <HAL_DMA_Init+0x29c>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2b52      	cmp	r3, #82	@ 0x52
 8006a9e:	d907      	bls.n	8006ab0 <HAL_DMA_Init+0x2ac>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	2b73      	cmp	r3, #115	@ 0x73
 8006aa6:	d905      	bls.n	8006ab4 <HAL_DMA_Init+0x2b0>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2b77      	cmp	r3, #119	@ 0x77
 8006aae:	d801      	bhi.n	8006ab4 <HAL_DMA_Init+0x2b0>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <HAL_DMA_Init+0x2b2>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ac0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f023 0307 	bic.w	r3, r3, #7
 8006ad8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d117      	bne.n	8006b1c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00e      	beq.n	8006b1c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f002 fb3c 	bl	800917c <DMA_CheckFifoParam>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d008      	beq.n	8006b1c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2240      	movs	r2, #64	@ 0x40
 8006b0e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e192      	b.n	8006e42 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f002 fa77 	bl	8009018 <DMA_CalcBaseAndBitshift>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b32:	f003 031f 	and.w	r3, r3, #31
 8006b36:	223f      	movs	r2, #63	@ 0x3f
 8006b38:	409a      	lsls	r2, r3
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	609a      	str	r2, [r3, #8]
 8006b3e:	e0c8      	b.n	8006cd2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a38      	ldr	r2, [pc, #224]	@ (8006c28 <HAL_DMA_Init+0x424>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d022      	beq.n	8006b90 <HAL_DMA_Init+0x38c>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a37      	ldr	r2, [pc, #220]	@ (8006c2c <HAL_DMA_Init+0x428>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d01d      	beq.n	8006b90 <HAL_DMA_Init+0x38c>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a35      	ldr	r2, [pc, #212]	@ (8006c30 <HAL_DMA_Init+0x42c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d018      	beq.n	8006b90 <HAL_DMA_Init+0x38c>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a34      	ldr	r2, [pc, #208]	@ (8006c34 <HAL_DMA_Init+0x430>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d013      	beq.n	8006b90 <HAL_DMA_Init+0x38c>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a32      	ldr	r2, [pc, #200]	@ (8006c38 <HAL_DMA_Init+0x434>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00e      	beq.n	8006b90 <HAL_DMA_Init+0x38c>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a31      	ldr	r2, [pc, #196]	@ (8006c3c <HAL_DMA_Init+0x438>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d009      	beq.n	8006b90 <HAL_DMA_Init+0x38c>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a2f      	ldr	r2, [pc, #188]	@ (8006c40 <HAL_DMA_Init+0x43c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d004      	beq.n	8006b90 <HAL_DMA_Init+0x38c>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a2e      	ldr	r2, [pc, #184]	@ (8006c44 <HAL_DMA_Init+0x440>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d101      	bne.n	8006b94 <HAL_DMA_Init+0x390>
 8006b90:	2301      	movs	r3, #1
 8006b92:	e000      	b.n	8006b96 <HAL_DMA_Init+0x392>
 8006b94:	2300      	movs	r3, #0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 8092 	beq.w	8006cc0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a21      	ldr	r2, [pc, #132]	@ (8006c28 <HAL_DMA_Init+0x424>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d021      	beq.n	8006bea <HAL_DMA_Init+0x3e6>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a20      	ldr	r2, [pc, #128]	@ (8006c2c <HAL_DMA_Init+0x428>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d01c      	beq.n	8006bea <HAL_DMA_Init+0x3e6>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8006c30 <HAL_DMA_Init+0x42c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d017      	beq.n	8006bea <HAL_DMA_Init+0x3e6>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8006c34 <HAL_DMA_Init+0x430>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d012      	beq.n	8006bea <HAL_DMA_Init+0x3e6>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8006c38 <HAL_DMA_Init+0x434>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00d      	beq.n	8006bea <HAL_DMA_Init+0x3e6>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8006c3c <HAL_DMA_Init+0x438>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d008      	beq.n	8006bea <HAL_DMA_Init+0x3e6>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a18      	ldr	r2, [pc, #96]	@ (8006c40 <HAL_DMA_Init+0x43c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d003      	beq.n	8006bea <HAL_DMA_Init+0x3e6>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a17      	ldr	r2, [pc, #92]	@ (8006c44 <HAL_DMA_Init+0x440>)
 8006be8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2202      	movs	r2, #2
 8006bee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	4b10      	ldr	r3, [pc, #64]	@ (8006c48 <HAL_DMA_Init+0x444>)
 8006c06:	4013      	ands	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	2b40      	cmp	r3, #64	@ 0x40
 8006c10:	d01c      	beq.n	8006c4c <HAL_DMA_Init+0x448>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	2b80      	cmp	r3, #128	@ 0x80
 8006c18:	d102      	bne.n	8006c20 <HAL_DMA_Init+0x41c>
 8006c1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006c1e:	e016      	b.n	8006c4e <HAL_DMA_Init+0x44a>
 8006c20:	2300      	movs	r3, #0
 8006c22:	e014      	b.n	8006c4e <HAL_DMA_Init+0x44a>
 8006c24:	fe10803f 	.word	0xfe10803f
 8006c28:	58025408 	.word	0x58025408
 8006c2c:	5802541c 	.word	0x5802541c
 8006c30:	58025430 	.word	0x58025430
 8006c34:	58025444 	.word	0x58025444
 8006c38:	58025458 	.word	0x58025458
 8006c3c:	5802546c 	.word	0x5802546c
 8006c40:	58025480 	.word	0x58025480
 8006c44:	58025494 	.word	0x58025494
 8006c48:	fffe000f 	.word	0xfffe000f
 8006c4c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	68d2      	ldr	r2, [r2, #12]
 8006c52:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006c54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006c5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006c64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006c6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006c74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006c7c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	4b6e      	ldr	r3, [pc, #440]	@ (8006e4c <HAL_DMA_Init+0x648>)
 8006c94:	4413      	add	r3, r2
 8006c96:	4a6e      	ldr	r2, [pc, #440]	@ (8006e50 <HAL_DMA_Init+0x64c>)
 8006c98:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9c:	091b      	lsrs	r3, r3, #4
 8006c9e:	009a      	lsls	r2, r3, #2
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f002 f9b7 	bl	8009018 <DMA_CalcBaseAndBitshift>
 8006caa:	4603      	mov	r3, r0
 8006cac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cb2:	f003 031f 	and.w	r3, r3, #31
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	409a      	lsls	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	605a      	str	r2, [r3, #4]
 8006cbe:	e008      	b.n	8006cd2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2240      	movs	r2, #64	@ 0x40
 8006cc4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2203      	movs	r2, #3
 8006cca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e0b7      	b.n	8006e42 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a5f      	ldr	r2, [pc, #380]	@ (8006e54 <HAL_DMA_Init+0x650>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d072      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a5d      	ldr	r2, [pc, #372]	@ (8006e58 <HAL_DMA_Init+0x654>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d06d      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a5c      	ldr	r2, [pc, #368]	@ (8006e5c <HAL_DMA_Init+0x658>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d068      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a5a      	ldr	r2, [pc, #360]	@ (8006e60 <HAL_DMA_Init+0x65c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d063      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a59      	ldr	r2, [pc, #356]	@ (8006e64 <HAL_DMA_Init+0x660>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d05e      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a57      	ldr	r2, [pc, #348]	@ (8006e68 <HAL_DMA_Init+0x664>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d059      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a56      	ldr	r2, [pc, #344]	@ (8006e6c <HAL_DMA_Init+0x668>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d054      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a54      	ldr	r2, [pc, #336]	@ (8006e70 <HAL_DMA_Init+0x66c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d04f      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a53      	ldr	r2, [pc, #332]	@ (8006e74 <HAL_DMA_Init+0x670>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d04a      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a51      	ldr	r2, [pc, #324]	@ (8006e78 <HAL_DMA_Init+0x674>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d045      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a50      	ldr	r2, [pc, #320]	@ (8006e7c <HAL_DMA_Init+0x678>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d040      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a4e      	ldr	r2, [pc, #312]	@ (8006e80 <HAL_DMA_Init+0x67c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d03b      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a4d      	ldr	r2, [pc, #308]	@ (8006e84 <HAL_DMA_Init+0x680>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d036      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a4b      	ldr	r2, [pc, #300]	@ (8006e88 <HAL_DMA_Init+0x684>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d031      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a4a      	ldr	r2, [pc, #296]	@ (8006e8c <HAL_DMA_Init+0x688>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d02c      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a48      	ldr	r2, [pc, #288]	@ (8006e90 <HAL_DMA_Init+0x68c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d027      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a47      	ldr	r2, [pc, #284]	@ (8006e94 <HAL_DMA_Init+0x690>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d022      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a45      	ldr	r2, [pc, #276]	@ (8006e98 <HAL_DMA_Init+0x694>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d01d      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a44      	ldr	r2, [pc, #272]	@ (8006e9c <HAL_DMA_Init+0x698>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d018      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a42      	ldr	r2, [pc, #264]	@ (8006ea0 <HAL_DMA_Init+0x69c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d013      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a41      	ldr	r2, [pc, #260]	@ (8006ea4 <HAL_DMA_Init+0x6a0>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d00e      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a3f      	ldr	r2, [pc, #252]	@ (8006ea8 <HAL_DMA_Init+0x6a4>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d009      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a3e      	ldr	r2, [pc, #248]	@ (8006eac <HAL_DMA_Init+0x6a8>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d004      	beq.n	8006dc2 <HAL_DMA_Init+0x5be>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a3c      	ldr	r2, [pc, #240]	@ (8006eb0 <HAL_DMA_Init+0x6ac>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d101      	bne.n	8006dc6 <HAL_DMA_Init+0x5c2>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e000      	b.n	8006dc8 <HAL_DMA_Init+0x5c4>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d032      	beq.n	8006e32 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f002 fa51 	bl	8009274 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	2b80      	cmp	r3, #128	@ 0x80
 8006dd8:	d102      	bne.n	8006de0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006df4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d010      	beq.n	8006e20 <HAL_DMA_Init+0x61c>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d80c      	bhi.n	8006e20 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f002 face 	bl	80093a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006e1c:	605a      	str	r2, [r3, #4]
 8006e1e:	e008      	b.n	8006e32 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3718      	adds	r7, #24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	a7fdabf8 	.word	0xa7fdabf8
 8006e50:	cccccccd 	.word	0xcccccccd
 8006e54:	40020010 	.word	0x40020010
 8006e58:	40020028 	.word	0x40020028
 8006e5c:	40020040 	.word	0x40020040
 8006e60:	40020058 	.word	0x40020058
 8006e64:	40020070 	.word	0x40020070
 8006e68:	40020088 	.word	0x40020088
 8006e6c:	400200a0 	.word	0x400200a0
 8006e70:	400200b8 	.word	0x400200b8
 8006e74:	40020410 	.word	0x40020410
 8006e78:	40020428 	.word	0x40020428
 8006e7c:	40020440 	.word	0x40020440
 8006e80:	40020458 	.word	0x40020458
 8006e84:	40020470 	.word	0x40020470
 8006e88:	40020488 	.word	0x40020488
 8006e8c:	400204a0 	.word	0x400204a0
 8006e90:	400204b8 	.word	0x400204b8
 8006e94:	58025408 	.word	0x58025408
 8006e98:	5802541c 	.word	0x5802541c
 8006e9c:	58025430 	.word	0x58025430
 8006ea0:	58025444 	.word	0x58025444
 8006ea4:	58025458 	.word	0x58025458
 8006ea8:	5802546c 	.word	0x5802546c
 8006eac:	58025480 	.word	0x58025480
 8006eb0:	58025494 	.word	0x58025494

08006eb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e226      	b.n	800731e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d101      	bne.n	8006ede <HAL_DMA_Start_IT+0x2a>
 8006eda:	2302      	movs	r3, #2
 8006edc:	e21f      	b.n	800731e <HAL_DMA_Start_IT+0x46a>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	f040 820a 	bne.w	8007308 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a68      	ldr	r2, [pc, #416]	@ (80070a8 <HAL_DMA_Start_IT+0x1f4>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d04a      	beq.n	8006fa2 <HAL_DMA_Start_IT+0xee>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a66      	ldr	r2, [pc, #408]	@ (80070ac <HAL_DMA_Start_IT+0x1f8>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d045      	beq.n	8006fa2 <HAL_DMA_Start_IT+0xee>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a65      	ldr	r2, [pc, #404]	@ (80070b0 <HAL_DMA_Start_IT+0x1fc>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d040      	beq.n	8006fa2 <HAL_DMA_Start_IT+0xee>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a63      	ldr	r2, [pc, #396]	@ (80070b4 <HAL_DMA_Start_IT+0x200>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d03b      	beq.n	8006fa2 <HAL_DMA_Start_IT+0xee>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a62      	ldr	r2, [pc, #392]	@ (80070b8 <HAL_DMA_Start_IT+0x204>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d036      	beq.n	8006fa2 <HAL_DMA_Start_IT+0xee>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a60      	ldr	r2, [pc, #384]	@ (80070bc <HAL_DMA_Start_IT+0x208>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d031      	beq.n	8006fa2 <HAL_DMA_Start_IT+0xee>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a5f      	ldr	r2, [pc, #380]	@ (80070c0 <HAL_DMA_Start_IT+0x20c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d02c      	beq.n	8006fa2 <HAL_DMA_Start_IT+0xee>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a5d      	ldr	r2, [pc, #372]	@ (80070c4 <HAL_DMA_Start_IT+0x210>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d027      	beq.n	8006fa2 <HAL_DMA_Start_IT+0xee>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a5c      	ldr	r2, [pc, #368]	@ (80070c8 <HAL_DMA_Start_IT+0x214>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d022      	beq.n	8006fa2 <HAL_DMA_Start_IT+0xee>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a5a      	ldr	r2, [pc, #360]	@ (80070cc <HAL_DMA_Start_IT+0x218>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01d      	beq.n	8006fa2 <HAL_DMA_Start_IT+0xee>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a59      	ldr	r2, [pc, #356]	@ (80070d0 <HAL_DMA_Start_IT+0x21c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d018      	beq.n	8006fa2 <HAL_DMA_Start_IT+0xee>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a57      	ldr	r2, [pc, #348]	@ (80070d4 <HAL_DMA_Start_IT+0x220>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d013      	beq.n	8006fa2 <HAL_DMA_Start_IT+0xee>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a56      	ldr	r2, [pc, #344]	@ (80070d8 <HAL_DMA_Start_IT+0x224>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00e      	beq.n	8006fa2 <HAL_DMA_Start_IT+0xee>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a54      	ldr	r2, [pc, #336]	@ (80070dc <HAL_DMA_Start_IT+0x228>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d009      	beq.n	8006fa2 <HAL_DMA_Start_IT+0xee>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a53      	ldr	r2, [pc, #332]	@ (80070e0 <HAL_DMA_Start_IT+0x22c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d004      	beq.n	8006fa2 <HAL_DMA_Start_IT+0xee>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a51      	ldr	r2, [pc, #324]	@ (80070e4 <HAL_DMA_Start_IT+0x230>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d108      	bne.n	8006fb4 <HAL_DMA_Start_IT+0x100>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0201 	bic.w	r2, r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	e007      	b.n	8006fc4 <HAL_DMA_Start_IT+0x110>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 0201 	bic.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	68b9      	ldr	r1, [r7, #8]
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f001 fe78 	bl	8008cc0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a34      	ldr	r2, [pc, #208]	@ (80070a8 <HAL_DMA_Start_IT+0x1f4>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d04a      	beq.n	8007070 <HAL_DMA_Start_IT+0x1bc>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a33      	ldr	r2, [pc, #204]	@ (80070ac <HAL_DMA_Start_IT+0x1f8>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d045      	beq.n	8007070 <HAL_DMA_Start_IT+0x1bc>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a31      	ldr	r2, [pc, #196]	@ (80070b0 <HAL_DMA_Start_IT+0x1fc>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d040      	beq.n	8007070 <HAL_DMA_Start_IT+0x1bc>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a30      	ldr	r2, [pc, #192]	@ (80070b4 <HAL_DMA_Start_IT+0x200>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d03b      	beq.n	8007070 <HAL_DMA_Start_IT+0x1bc>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a2e      	ldr	r2, [pc, #184]	@ (80070b8 <HAL_DMA_Start_IT+0x204>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d036      	beq.n	8007070 <HAL_DMA_Start_IT+0x1bc>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a2d      	ldr	r2, [pc, #180]	@ (80070bc <HAL_DMA_Start_IT+0x208>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d031      	beq.n	8007070 <HAL_DMA_Start_IT+0x1bc>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a2b      	ldr	r2, [pc, #172]	@ (80070c0 <HAL_DMA_Start_IT+0x20c>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d02c      	beq.n	8007070 <HAL_DMA_Start_IT+0x1bc>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a2a      	ldr	r2, [pc, #168]	@ (80070c4 <HAL_DMA_Start_IT+0x210>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d027      	beq.n	8007070 <HAL_DMA_Start_IT+0x1bc>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a28      	ldr	r2, [pc, #160]	@ (80070c8 <HAL_DMA_Start_IT+0x214>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d022      	beq.n	8007070 <HAL_DMA_Start_IT+0x1bc>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a27      	ldr	r2, [pc, #156]	@ (80070cc <HAL_DMA_Start_IT+0x218>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d01d      	beq.n	8007070 <HAL_DMA_Start_IT+0x1bc>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a25      	ldr	r2, [pc, #148]	@ (80070d0 <HAL_DMA_Start_IT+0x21c>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d018      	beq.n	8007070 <HAL_DMA_Start_IT+0x1bc>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a24      	ldr	r2, [pc, #144]	@ (80070d4 <HAL_DMA_Start_IT+0x220>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d013      	beq.n	8007070 <HAL_DMA_Start_IT+0x1bc>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a22      	ldr	r2, [pc, #136]	@ (80070d8 <HAL_DMA_Start_IT+0x224>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00e      	beq.n	8007070 <HAL_DMA_Start_IT+0x1bc>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a21      	ldr	r2, [pc, #132]	@ (80070dc <HAL_DMA_Start_IT+0x228>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d009      	beq.n	8007070 <HAL_DMA_Start_IT+0x1bc>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a1f      	ldr	r2, [pc, #124]	@ (80070e0 <HAL_DMA_Start_IT+0x22c>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d004      	beq.n	8007070 <HAL_DMA_Start_IT+0x1bc>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a1e      	ldr	r2, [pc, #120]	@ (80070e4 <HAL_DMA_Start_IT+0x230>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d101      	bne.n	8007074 <HAL_DMA_Start_IT+0x1c0>
 8007070:	2301      	movs	r3, #1
 8007072:	e000      	b.n	8007076 <HAL_DMA_Start_IT+0x1c2>
 8007074:	2300      	movs	r3, #0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d036      	beq.n	80070e8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f023 021e 	bic.w	r2, r3, #30
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f042 0216 	orr.w	r2, r2, #22
 800708c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007092:	2b00      	cmp	r3, #0
 8007094:	d03e      	beq.n	8007114 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f042 0208 	orr.w	r2, r2, #8
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	e035      	b.n	8007114 <HAL_DMA_Start_IT+0x260>
 80070a8:	40020010 	.word	0x40020010
 80070ac:	40020028 	.word	0x40020028
 80070b0:	40020040 	.word	0x40020040
 80070b4:	40020058 	.word	0x40020058
 80070b8:	40020070 	.word	0x40020070
 80070bc:	40020088 	.word	0x40020088
 80070c0:	400200a0 	.word	0x400200a0
 80070c4:	400200b8 	.word	0x400200b8
 80070c8:	40020410 	.word	0x40020410
 80070cc:	40020428 	.word	0x40020428
 80070d0:	40020440 	.word	0x40020440
 80070d4:	40020458 	.word	0x40020458
 80070d8:	40020470 	.word	0x40020470
 80070dc:	40020488 	.word	0x40020488
 80070e0:	400204a0 	.word	0x400204a0
 80070e4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f023 020e 	bic.w	r2, r3, #14
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 020a 	orr.w	r2, r2, #10
 80070fa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007100:	2b00      	cmp	r3, #0
 8007102:	d007      	beq.n	8007114 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f042 0204 	orr.w	r2, r2, #4
 8007112:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a83      	ldr	r2, [pc, #524]	@ (8007328 <HAL_DMA_Start_IT+0x474>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d072      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a82      	ldr	r2, [pc, #520]	@ (800732c <HAL_DMA_Start_IT+0x478>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d06d      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a80      	ldr	r2, [pc, #512]	@ (8007330 <HAL_DMA_Start_IT+0x47c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d068      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a7f      	ldr	r2, [pc, #508]	@ (8007334 <HAL_DMA_Start_IT+0x480>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d063      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a7d      	ldr	r2, [pc, #500]	@ (8007338 <HAL_DMA_Start_IT+0x484>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d05e      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a7c      	ldr	r2, [pc, #496]	@ (800733c <HAL_DMA_Start_IT+0x488>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d059      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a7a      	ldr	r2, [pc, #488]	@ (8007340 <HAL_DMA_Start_IT+0x48c>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d054      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a79      	ldr	r2, [pc, #484]	@ (8007344 <HAL_DMA_Start_IT+0x490>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d04f      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a77      	ldr	r2, [pc, #476]	@ (8007348 <HAL_DMA_Start_IT+0x494>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d04a      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a76      	ldr	r2, [pc, #472]	@ (800734c <HAL_DMA_Start_IT+0x498>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d045      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a74      	ldr	r2, [pc, #464]	@ (8007350 <HAL_DMA_Start_IT+0x49c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d040      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a73      	ldr	r2, [pc, #460]	@ (8007354 <HAL_DMA_Start_IT+0x4a0>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d03b      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a71      	ldr	r2, [pc, #452]	@ (8007358 <HAL_DMA_Start_IT+0x4a4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d036      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a70      	ldr	r2, [pc, #448]	@ (800735c <HAL_DMA_Start_IT+0x4a8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d031      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a6e      	ldr	r2, [pc, #440]	@ (8007360 <HAL_DMA_Start_IT+0x4ac>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d02c      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a6d      	ldr	r2, [pc, #436]	@ (8007364 <HAL_DMA_Start_IT+0x4b0>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d027      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a6b      	ldr	r2, [pc, #428]	@ (8007368 <HAL_DMA_Start_IT+0x4b4>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d022      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a6a      	ldr	r2, [pc, #424]	@ (800736c <HAL_DMA_Start_IT+0x4b8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d01d      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a68      	ldr	r2, [pc, #416]	@ (8007370 <HAL_DMA_Start_IT+0x4bc>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d018      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a67      	ldr	r2, [pc, #412]	@ (8007374 <HAL_DMA_Start_IT+0x4c0>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d013      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a65      	ldr	r2, [pc, #404]	@ (8007378 <HAL_DMA_Start_IT+0x4c4>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d00e      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a64      	ldr	r2, [pc, #400]	@ (800737c <HAL_DMA_Start_IT+0x4c8>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d009      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a62      	ldr	r2, [pc, #392]	@ (8007380 <HAL_DMA_Start_IT+0x4cc>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d004      	beq.n	8007204 <HAL_DMA_Start_IT+0x350>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a61      	ldr	r2, [pc, #388]	@ (8007384 <HAL_DMA_Start_IT+0x4d0>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d101      	bne.n	8007208 <HAL_DMA_Start_IT+0x354>
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <HAL_DMA_Start_IT+0x356>
 8007208:	2300      	movs	r3, #0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d01a      	beq.n	8007244 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d007      	beq.n	800722c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007226:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800722a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007230:	2b00      	cmp	r3, #0
 8007232:	d007      	beq.n	8007244 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800723e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007242:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a37      	ldr	r2, [pc, #220]	@ (8007328 <HAL_DMA_Start_IT+0x474>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d04a      	beq.n	80072e4 <HAL_DMA_Start_IT+0x430>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a36      	ldr	r2, [pc, #216]	@ (800732c <HAL_DMA_Start_IT+0x478>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d045      	beq.n	80072e4 <HAL_DMA_Start_IT+0x430>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a34      	ldr	r2, [pc, #208]	@ (8007330 <HAL_DMA_Start_IT+0x47c>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d040      	beq.n	80072e4 <HAL_DMA_Start_IT+0x430>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a33      	ldr	r2, [pc, #204]	@ (8007334 <HAL_DMA_Start_IT+0x480>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d03b      	beq.n	80072e4 <HAL_DMA_Start_IT+0x430>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a31      	ldr	r2, [pc, #196]	@ (8007338 <HAL_DMA_Start_IT+0x484>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d036      	beq.n	80072e4 <HAL_DMA_Start_IT+0x430>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a30      	ldr	r2, [pc, #192]	@ (800733c <HAL_DMA_Start_IT+0x488>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d031      	beq.n	80072e4 <HAL_DMA_Start_IT+0x430>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a2e      	ldr	r2, [pc, #184]	@ (8007340 <HAL_DMA_Start_IT+0x48c>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d02c      	beq.n	80072e4 <HAL_DMA_Start_IT+0x430>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a2d      	ldr	r2, [pc, #180]	@ (8007344 <HAL_DMA_Start_IT+0x490>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d027      	beq.n	80072e4 <HAL_DMA_Start_IT+0x430>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a2b      	ldr	r2, [pc, #172]	@ (8007348 <HAL_DMA_Start_IT+0x494>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d022      	beq.n	80072e4 <HAL_DMA_Start_IT+0x430>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a2a      	ldr	r2, [pc, #168]	@ (800734c <HAL_DMA_Start_IT+0x498>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d01d      	beq.n	80072e4 <HAL_DMA_Start_IT+0x430>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a28      	ldr	r2, [pc, #160]	@ (8007350 <HAL_DMA_Start_IT+0x49c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d018      	beq.n	80072e4 <HAL_DMA_Start_IT+0x430>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a27      	ldr	r2, [pc, #156]	@ (8007354 <HAL_DMA_Start_IT+0x4a0>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d013      	beq.n	80072e4 <HAL_DMA_Start_IT+0x430>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a25      	ldr	r2, [pc, #148]	@ (8007358 <HAL_DMA_Start_IT+0x4a4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00e      	beq.n	80072e4 <HAL_DMA_Start_IT+0x430>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a24      	ldr	r2, [pc, #144]	@ (800735c <HAL_DMA_Start_IT+0x4a8>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d009      	beq.n	80072e4 <HAL_DMA_Start_IT+0x430>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a22      	ldr	r2, [pc, #136]	@ (8007360 <HAL_DMA_Start_IT+0x4ac>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d004      	beq.n	80072e4 <HAL_DMA_Start_IT+0x430>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a21      	ldr	r2, [pc, #132]	@ (8007364 <HAL_DMA_Start_IT+0x4b0>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d108      	bne.n	80072f6 <HAL_DMA_Start_IT+0x442>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0201 	orr.w	r2, r2, #1
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	e012      	b.n	800731c <HAL_DMA_Start_IT+0x468>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f042 0201 	orr.w	r2, r2, #1
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	e009      	b.n	800731c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800730e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800731c:	7dfb      	ldrb	r3, [r7, #23]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	40020010 	.word	0x40020010
 800732c:	40020028 	.word	0x40020028
 8007330:	40020040 	.word	0x40020040
 8007334:	40020058 	.word	0x40020058
 8007338:	40020070 	.word	0x40020070
 800733c:	40020088 	.word	0x40020088
 8007340:	400200a0 	.word	0x400200a0
 8007344:	400200b8 	.word	0x400200b8
 8007348:	40020410 	.word	0x40020410
 800734c:	40020428 	.word	0x40020428
 8007350:	40020440 	.word	0x40020440
 8007354:	40020458 	.word	0x40020458
 8007358:	40020470 	.word	0x40020470
 800735c:	40020488 	.word	0x40020488
 8007360:	400204a0 	.word	0x400204a0
 8007364:	400204b8 	.word	0x400204b8
 8007368:	58025408 	.word	0x58025408
 800736c:	5802541c 	.word	0x5802541c
 8007370:	58025430 	.word	0x58025430
 8007374:	58025444 	.word	0x58025444
 8007378:	58025458 	.word	0x58025458
 800737c:	5802546c 	.word	0x5802546c
 8007380:	58025480 	.word	0x58025480
 8007384:	58025494 	.word	0x58025494

08007388 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007390:	f7fd f88a 	bl	80044a8 <HAL_GetTick>
 8007394:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e2dc      	b.n	800795a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d008      	beq.n	80073be <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2280      	movs	r2, #128	@ 0x80
 80073b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e2cd      	b.n	800795a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a76      	ldr	r2, [pc, #472]	@ (800759c <HAL_DMA_Abort+0x214>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d04a      	beq.n	800745e <HAL_DMA_Abort+0xd6>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a74      	ldr	r2, [pc, #464]	@ (80075a0 <HAL_DMA_Abort+0x218>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d045      	beq.n	800745e <HAL_DMA_Abort+0xd6>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a73      	ldr	r2, [pc, #460]	@ (80075a4 <HAL_DMA_Abort+0x21c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d040      	beq.n	800745e <HAL_DMA_Abort+0xd6>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a71      	ldr	r2, [pc, #452]	@ (80075a8 <HAL_DMA_Abort+0x220>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d03b      	beq.n	800745e <HAL_DMA_Abort+0xd6>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a70      	ldr	r2, [pc, #448]	@ (80075ac <HAL_DMA_Abort+0x224>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d036      	beq.n	800745e <HAL_DMA_Abort+0xd6>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a6e      	ldr	r2, [pc, #440]	@ (80075b0 <HAL_DMA_Abort+0x228>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d031      	beq.n	800745e <HAL_DMA_Abort+0xd6>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a6d      	ldr	r2, [pc, #436]	@ (80075b4 <HAL_DMA_Abort+0x22c>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d02c      	beq.n	800745e <HAL_DMA_Abort+0xd6>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a6b      	ldr	r2, [pc, #428]	@ (80075b8 <HAL_DMA_Abort+0x230>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d027      	beq.n	800745e <HAL_DMA_Abort+0xd6>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a6a      	ldr	r2, [pc, #424]	@ (80075bc <HAL_DMA_Abort+0x234>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d022      	beq.n	800745e <HAL_DMA_Abort+0xd6>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a68      	ldr	r2, [pc, #416]	@ (80075c0 <HAL_DMA_Abort+0x238>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d01d      	beq.n	800745e <HAL_DMA_Abort+0xd6>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a67      	ldr	r2, [pc, #412]	@ (80075c4 <HAL_DMA_Abort+0x23c>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d018      	beq.n	800745e <HAL_DMA_Abort+0xd6>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a65      	ldr	r2, [pc, #404]	@ (80075c8 <HAL_DMA_Abort+0x240>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d013      	beq.n	800745e <HAL_DMA_Abort+0xd6>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a64      	ldr	r2, [pc, #400]	@ (80075cc <HAL_DMA_Abort+0x244>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d00e      	beq.n	800745e <HAL_DMA_Abort+0xd6>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a62      	ldr	r2, [pc, #392]	@ (80075d0 <HAL_DMA_Abort+0x248>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d009      	beq.n	800745e <HAL_DMA_Abort+0xd6>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a61      	ldr	r2, [pc, #388]	@ (80075d4 <HAL_DMA_Abort+0x24c>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d004      	beq.n	800745e <HAL_DMA_Abort+0xd6>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a5f      	ldr	r2, [pc, #380]	@ (80075d8 <HAL_DMA_Abort+0x250>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d101      	bne.n	8007462 <HAL_DMA_Abort+0xda>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <HAL_DMA_Abort+0xdc>
 8007462:	2300      	movs	r3, #0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d013      	beq.n	8007490 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f022 021e 	bic.w	r2, r2, #30
 8007476:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	695a      	ldr	r2, [r3, #20]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007486:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	617b      	str	r3, [r7, #20]
 800748e:	e00a      	b.n	80074a6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f022 020e 	bic.w	r2, r2, #14
 800749e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a3c      	ldr	r2, [pc, #240]	@ (800759c <HAL_DMA_Abort+0x214>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d072      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a3a      	ldr	r2, [pc, #232]	@ (80075a0 <HAL_DMA_Abort+0x218>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d06d      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a39      	ldr	r2, [pc, #228]	@ (80075a4 <HAL_DMA_Abort+0x21c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d068      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a37      	ldr	r2, [pc, #220]	@ (80075a8 <HAL_DMA_Abort+0x220>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d063      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a36      	ldr	r2, [pc, #216]	@ (80075ac <HAL_DMA_Abort+0x224>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d05e      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a34      	ldr	r2, [pc, #208]	@ (80075b0 <HAL_DMA_Abort+0x228>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d059      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a33      	ldr	r2, [pc, #204]	@ (80075b4 <HAL_DMA_Abort+0x22c>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d054      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a31      	ldr	r2, [pc, #196]	@ (80075b8 <HAL_DMA_Abort+0x230>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d04f      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a30      	ldr	r2, [pc, #192]	@ (80075bc <HAL_DMA_Abort+0x234>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d04a      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a2e      	ldr	r2, [pc, #184]	@ (80075c0 <HAL_DMA_Abort+0x238>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d045      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a2d      	ldr	r2, [pc, #180]	@ (80075c4 <HAL_DMA_Abort+0x23c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d040      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a2b      	ldr	r2, [pc, #172]	@ (80075c8 <HAL_DMA_Abort+0x240>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d03b      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a2a      	ldr	r2, [pc, #168]	@ (80075cc <HAL_DMA_Abort+0x244>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d036      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a28      	ldr	r2, [pc, #160]	@ (80075d0 <HAL_DMA_Abort+0x248>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d031      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a27      	ldr	r2, [pc, #156]	@ (80075d4 <HAL_DMA_Abort+0x24c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d02c      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a25      	ldr	r2, [pc, #148]	@ (80075d8 <HAL_DMA_Abort+0x250>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d027      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a24      	ldr	r2, [pc, #144]	@ (80075dc <HAL_DMA_Abort+0x254>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d022      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a22      	ldr	r2, [pc, #136]	@ (80075e0 <HAL_DMA_Abort+0x258>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d01d      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a21      	ldr	r2, [pc, #132]	@ (80075e4 <HAL_DMA_Abort+0x25c>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d018      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a1f      	ldr	r2, [pc, #124]	@ (80075e8 <HAL_DMA_Abort+0x260>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d013      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a1e      	ldr	r2, [pc, #120]	@ (80075ec <HAL_DMA_Abort+0x264>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00e      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a1c      	ldr	r2, [pc, #112]	@ (80075f0 <HAL_DMA_Abort+0x268>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d009      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a1b      	ldr	r2, [pc, #108]	@ (80075f4 <HAL_DMA_Abort+0x26c>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d004      	beq.n	8007596 <HAL_DMA_Abort+0x20e>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a19      	ldr	r2, [pc, #100]	@ (80075f8 <HAL_DMA_Abort+0x270>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d132      	bne.n	80075fc <HAL_DMA_Abort+0x274>
 8007596:	2301      	movs	r3, #1
 8007598:	e031      	b.n	80075fe <HAL_DMA_Abort+0x276>
 800759a:	bf00      	nop
 800759c:	40020010 	.word	0x40020010
 80075a0:	40020028 	.word	0x40020028
 80075a4:	40020040 	.word	0x40020040
 80075a8:	40020058 	.word	0x40020058
 80075ac:	40020070 	.word	0x40020070
 80075b0:	40020088 	.word	0x40020088
 80075b4:	400200a0 	.word	0x400200a0
 80075b8:	400200b8 	.word	0x400200b8
 80075bc:	40020410 	.word	0x40020410
 80075c0:	40020428 	.word	0x40020428
 80075c4:	40020440 	.word	0x40020440
 80075c8:	40020458 	.word	0x40020458
 80075cc:	40020470 	.word	0x40020470
 80075d0:	40020488 	.word	0x40020488
 80075d4:	400204a0 	.word	0x400204a0
 80075d8:	400204b8 	.word	0x400204b8
 80075dc:	58025408 	.word	0x58025408
 80075e0:	5802541c 	.word	0x5802541c
 80075e4:	58025430 	.word	0x58025430
 80075e8:	58025444 	.word	0x58025444
 80075ec:	58025458 	.word	0x58025458
 80075f0:	5802546c 	.word	0x5802546c
 80075f4:	58025480 	.word	0x58025480
 80075f8:	58025494 	.word	0x58025494
 80075fc:	2300      	movs	r3, #0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d007      	beq.n	8007612 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800760c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007610:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a6d      	ldr	r2, [pc, #436]	@ (80077cc <HAL_DMA_Abort+0x444>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d04a      	beq.n	80076b2 <HAL_DMA_Abort+0x32a>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a6b      	ldr	r2, [pc, #428]	@ (80077d0 <HAL_DMA_Abort+0x448>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d045      	beq.n	80076b2 <HAL_DMA_Abort+0x32a>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a6a      	ldr	r2, [pc, #424]	@ (80077d4 <HAL_DMA_Abort+0x44c>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d040      	beq.n	80076b2 <HAL_DMA_Abort+0x32a>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a68      	ldr	r2, [pc, #416]	@ (80077d8 <HAL_DMA_Abort+0x450>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d03b      	beq.n	80076b2 <HAL_DMA_Abort+0x32a>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a67      	ldr	r2, [pc, #412]	@ (80077dc <HAL_DMA_Abort+0x454>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d036      	beq.n	80076b2 <HAL_DMA_Abort+0x32a>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a65      	ldr	r2, [pc, #404]	@ (80077e0 <HAL_DMA_Abort+0x458>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d031      	beq.n	80076b2 <HAL_DMA_Abort+0x32a>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a64      	ldr	r2, [pc, #400]	@ (80077e4 <HAL_DMA_Abort+0x45c>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d02c      	beq.n	80076b2 <HAL_DMA_Abort+0x32a>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a62      	ldr	r2, [pc, #392]	@ (80077e8 <HAL_DMA_Abort+0x460>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d027      	beq.n	80076b2 <HAL_DMA_Abort+0x32a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a61      	ldr	r2, [pc, #388]	@ (80077ec <HAL_DMA_Abort+0x464>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d022      	beq.n	80076b2 <HAL_DMA_Abort+0x32a>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a5f      	ldr	r2, [pc, #380]	@ (80077f0 <HAL_DMA_Abort+0x468>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d01d      	beq.n	80076b2 <HAL_DMA_Abort+0x32a>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a5e      	ldr	r2, [pc, #376]	@ (80077f4 <HAL_DMA_Abort+0x46c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d018      	beq.n	80076b2 <HAL_DMA_Abort+0x32a>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a5c      	ldr	r2, [pc, #368]	@ (80077f8 <HAL_DMA_Abort+0x470>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d013      	beq.n	80076b2 <HAL_DMA_Abort+0x32a>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a5b      	ldr	r2, [pc, #364]	@ (80077fc <HAL_DMA_Abort+0x474>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d00e      	beq.n	80076b2 <HAL_DMA_Abort+0x32a>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a59      	ldr	r2, [pc, #356]	@ (8007800 <HAL_DMA_Abort+0x478>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d009      	beq.n	80076b2 <HAL_DMA_Abort+0x32a>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a58      	ldr	r2, [pc, #352]	@ (8007804 <HAL_DMA_Abort+0x47c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d004      	beq.n	80076b2 <HAL_DMA_Abort+0x32a>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a56      	ldr	r2, [pc, #344]	@ (8007808 <HAL_DMA_Abort+0x480>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d108      	bne.n	80076c4 <HAL_DMA_Abort+0x33c>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 0201 	bic.w	r2, r2, #1
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	e007      	b.n	80076d4 <HAL_DMA_Abort+0x34c>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f022 0201 	bic.w	r2, r2, #1
 80076d2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80076d4:	e013      	b.n	80076fe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80076d6:	f7fc fee7 	bl	80044a8 <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	2b05      	cmp	r3, #5
 80076e2:	d90c      	bls.n	80076fe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2220      	movs	r2, #32
 80076e8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2203      	movs	r2, #3
 80076ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e12d      	b.n	800795a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e5      	bne.n	80076d6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a2f      	ldr	r2, [pc, #188]	@ (80077cc <HAL_DMA_Abort+0x444>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d04a      	beq.n	80077aa <HAL_DMA_Abort+0x422>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a2d      	ldr	r2, [pc, #180]	@ (80077d0 <HAL_DMA_Abort+0x448>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d045      	beq.n	80077aa <HAL_DMA_Abort+0x422>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a2c      	ldr	r2, [pc, #176]	@ (80077d4 <HAL_DMA_Abort+0x44c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d040      	beq.n	80077aa <HAL_DMA_Abort+0x422>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a2a      	ldr	r2, [pc, #168]	@ (80077d8 <HAL_DMA_Abort+0x450>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d03b      	beq.n	80077aa <HAL_DMA_Abort+0x422>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a29      	ldr	r2, [pc, #164]	@ (80077dc <HAL_DMA_Abort+0x454>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d036      	beq.n	80077aa <HAL_DMA_Abort+0x422>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a27      	ldr	r2, [pc, #156]	@ (80077e0 <HAL_DMA_Abort+0x458>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d031      	beq.n	80077aa <HAL_DMA_Abort+0x422>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a26      	ldr	r2, [pc, #152]	@ (80077e4 <HAL_DMA_Abort+0x45c>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d02c      	beq.n	80077aa <HAL_DMA_Abort+0x422>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a24      	ldr	r2, [pc, #144]	@ (80077e8 <HAL_DMA_Abort+0x460>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d027      	beq.n	80077aa <HAL_DMA_Abort+0x422>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a23      	ldr	r2, [pc, #140]	@ (80077ec <HAL_DMA_Abort+0x464>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d022      	beq.n	80077aa <HAL_DMA_Abort+0x422>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a21      	ldr	r2, [pc, #132]	@ (80077f0 <HAL_DMA_Abort+0x468>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d01d      	beq.n	80077aa <HAL_DMA_Abort+0x422>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a20      	ldr	r2, [pc, #128]	@ (80077f4 <HAL_DMA_Abort+0x46c>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d018      	beq.n	80077aa <HAL_DMA_Abort+0x422>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a1e      	ldr	r2, [pc, #120]	@ (80077f8 <HAL_DMA_Abort+0x470>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d013      	beq.n	80077aa <HAL_DMA_Abort+0x422>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a1d      	ldr	r2, [pc, #116]	@ (80077fc <HAL_DMA_Abort+0x474>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d00e      	beq.n	80077aa <HAL_DMA_Abort+0x422>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a1b      	ldr	r2, [pc, #108]	@ (8007800 <HAL_DMA_Abort+0x478>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d009      	beq.n	80077aa <HAL_DMA_Abort+0x422>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a1a      	ldr	r2, [pc, #104]	@ (8007804 <HAL_DMA_Abort+0x47c>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d004      	beq.n	80077aa <HAL_DMA_Abort+0x422>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a18      	ldr	r2, [pc, #96]	@ (8007808 <HAL_DMA_Abort+0x480>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d101      	bne.n	80077ae <HAL_DMA_Abort+0x426>
 80077aa:	2301      	movs	r3, #1
 80077ac:	e000      	b.n	80077b0 <HAL_DMA_Abort+0x428>
 80077ae:	2300      	movs	r3, #0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d02b      	beq.n	800780c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077b8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077be:	f003 031f 	and.w	r3, r3, #31
 80077c2:	223f      	movs	r2, #63	@ 0x3f
 80077c4:	409a      	lsls	r2, r3
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	609a      	str	r2, [r3, #8]
 80077ca:	e02a      	b.n	8007822 <HAL_DMA_Abort+0x49a>
 80077cc:	40020010 	.word	0x40020010
 80077d0:	40020028 	.word	0x40020028
 80077d4:	40020040 	.word	0x40020040
 80077d8:	40020058 	.word	0x40020058
 80077dc:	40020070 	.word	0x40020070
 80077e0:	40020088 	.word	0x40020088
 80077e4:	400200a0 	.word	0x400200a0
 80077e8:	400200b8 	.word	0x400200b8
 80077ec:	40020410 	.word	0x40020410
 80077f0:	40020428 	.word	0x40020428
 80077f4:	40020440 	.word	0x40020440
 80077f8:	40020458 	.word	0x40020458
 80077fc:	40020470 	.word	0x40020470
 8007800:	40020488 	.word	0x40020488
 8007804:	400204a0 	.word	0x400204a0
 8007808:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007810:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007816:	f003 031f 	and.w	r3, r3, #31
 800781a:	2201      	movs	r2, #1
 800781c:	409a      	lsls	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a4f      	ldr	r2, [pc, #316]	@ (8007964 <HAL_DMA_Abort+0x5dc>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d072      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a4d      	ldr	r2, [pc, #308]	@ (8007968 <HAL_DMA_Abort+0x5e0>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d06d      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a4c      	ldr	r2, [pc, #304]	@ (800796c <HAL_DMA_Abort+0x5e4>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d068      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a4a      	ldr	r2, [pc, #296]	@ (8007970 <HAL_DMA_Abort+0x5e8>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d063      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a49      	ldr	r2, [pc, #292]	@ (8007974 <HAL_DMA_Abort+0x5ec>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d05e      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a47      	ldr	r2, [pc, #284]	@ (8007978 <HAL_DMA_Abort+0x5f0>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d059      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a46      	ldr	r2, [pc, #280]	@ (800797c <HAL_DMA_Abort+0x5f4>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d054      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a44      	ldr	r2, [pc, #272]	@ (8007980 <HAL_DMA_Abort+0x5f8>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d04f      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a43      	ldr	r2, [pc, #268]	@ (8007984 <HAL_DMA_Abort+0x5fc>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d04a      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a41      	ldr	r2, [pc, #260]	@ (8007988 <HAL_DMA_Abort+0x600>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d045      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a40      	ldr	r2, [pc, #256]	@ (800798c <HAL_DMA_Abort+0x604>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d040      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a3e      	ldr	r2, [pc, #248]	@ (8007990 <HAL_DMA_Abort+0x608>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d03b      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a3d      	ldr	r2, [pc, #244]	@ (8007994 <HAL_DMA_Abort+0x60c>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d036      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a3b      	ldr	r2, [pc, #236]	@ (8007998 <HAL_DMA_Abort+0x610>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d031      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a3a      	ldr	r2, [pc, #232]	@ (800799c <HAL_DMA_Abort+0x614>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d02c      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a38      	ldr	r2, [pc, #224]	@ (80079a0 <HAL_DMA_Abort+0x618>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d027      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a37      	ldr	r2, [pc, #220]	@ (80079a4 <HAL_DMA_Abort+0x61c>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d022      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a35      	ldr	r2, [pc, #212]	@ (80079a8 <HAL_DMA_Abort+0x620>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d01d      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a34      	ldr	r2, [pc, #208]	@ (80079ac <HAL_DMA_Abort+0x624>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d018      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a32      	ldr	r2, [pc, #200]	@ (80079b0 <HAL_DMA_Abort+0x628>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d013      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a31      	ldr	r2, [pc, #196]	@ (80079b4 <HAL_DMA_Abort+0x62c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d00e      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a2f      	ldr	r2, [pc, #188]	@ (80079b8 <HAL_DMA_Abort+0x630>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d009      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a2e      	ldr	r2, [pc, #184]	@ (80079bc <HAL_DMA_Abort+0x634>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d004      	beq.n	8007912 <HAL_DMA_Abort+0x58a>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a2c      	ldr	r2, [pc, #176]	@ (80079c0 <HAL_DMA_Abort+0x638>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d101      	bne.n	8007916 <HAL_DMA_Abort+0x58e>
 8007912:	2301      	movs	r3, #1
 8007914:	e000      	b.n	8007918 <HAL_DMA_Abort+0x590>
 8007916:	2300      	movs	r3, #0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d015      	beq.n	8007948 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007924:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00c      	beq.n	8007948 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007938:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800793c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007946:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	40020010 	.word	0x40020010
 8007968:	40020028 	.word	0x40020028
 800796c:	40020040 	.word	0x40020040
 8007970:	40020058 	.word	0x40020058
 8007974:	40020070 	.word	0x40020070
 8007978:	40020088 	.word	0x40020088
 800797c:	400200a0 	.word	0x400200a0
 8007980:	400200b8 	.word	0x400200b8
 8007984:	40020410 	.word	0x40020410
 8007988:	40020428 	.word	0x40020428
 800798c:	40020440 	.word	0x40020440
 8007990:	40020458 	.word	0x40020458
 8007994:	40020470 	.word	0x40020470
 8007998:	40020488 	.word	0x40020488
 800799c:	400204a0 	.word	0x400204a0
 80079a0:	400204b8 	.word	0x400204b8
 80079a4:	58025408 	.word	0x58025408
 80079a8:	5802541c 	.word	0x5802541c
 80079ac:	58025430 	.word	0x58025430
 80079b0:	58025444 	.word	0x58025444
 80079b4:	58025458 	.word	0x58025458
 80079b8:	5802546c 	.word	0x5802546c
 80079bc:	58025480 	.word	0x58025480
 80079c0:	58025494 	.word	0x58025494

080079c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e237      	b.n	8007e46 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d004      	beq.n	80079ec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2280      	movs	r2, #128	@ 0x80
 80079e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e22c      	b.n	8007e46 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a5c      	ldr	r2, [pc, #368]	@ (8007b64 <HAL_DMA_Abort_IT+0x1a0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d04a      	beq.n	8007a8c <HAL_DMA_Abort_IT+0xc8>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a5b      	ldr	r2, [pc, #364]	@ (8007b68 <HAL_DMA_Abort_IT+0x1a4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d045      	beq.n	8007a8c <HAL_DMA_Abort_IT+0xc8>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a59      	ldr	r2, [pc, #356]	@ (8007b6c <HAL_DMA_Abort_IT+0x1a8>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d040      	beq.n	8007a8c <HAL_DMA_Abort_IT+0xc8>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a58      	ldr	r2, [pc, #352]	@ (8007b70 <HAL_DMA_Abort_IT+0x1ac>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d03b      	beq.n	8007a8c <HAL_DMA_Abort_IT+0xc8>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a56      	ldr	r2, [pc, #344]	@ (8007b74 <HAL_DMA_Abort_IT+0x1b0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d036      	beq.n	8007a8c <HAL_DMA_Abort_IT+0xc8>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a55      	ldr	r2, [pc, #340]	@ (8007b78 <HAL_DMA_Abort_IT+0x1b4>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d031      	beq.n	8007a8c <HAL_DMA_Abort_IT+0xc8>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a53      	ldr	r2, [pc, #332]	@ (8007b7c <HAL_DMA_Abort_IT+0x1b8>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d02c      	beq.n	8007a8c <HAL_DMA_Abort_IT+0xc8>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a52      	ldr	r2, [pc, #328]	@ (8007b80 <HAL_DMA_Abort_IT+0x1bc>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d027      	beq.n	8007a8c <HAL_DMA_Abort_IT+0xc8>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a50      	ldr	r2, [pc, #320]	@ (8007b84 <HAL_DMA_Abort_IT+0x1c0>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d022      	beq.n	8007a8c <HAL_DMA_Abort_IT+0xc8>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a4f      	ldr	r2, [pc, #316]	@ (8007b88 <HAL_DMA_Abort_IT+0x1c4>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d01d      	beq.n	8007a8c <HAL_DMA_Abort_IT+0xc8>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a4d      	ldr	r2, [pc, #308]	@ (8007b8c <HAL_DMA_Abort_IT+0x1c8>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d018      	beq.n	8007a8c <HAL_DMA_Abort_IT+0xc8>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a4c      	ldr	r2, [pc, #304]	@ (8007b90 <HAL_DMA_Abort_IT+0x1cc>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d013      	beq.n	8007a8c <HAL_DMA_Abort_IT+0xc8>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a4a      	ldr	r2, [pc, #296]	@ (8007b94 <HAL_DMA_Abort_IT+0x1d0>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d00e      	beq.n	8007a8c <HAL_DMA_Abort_IT+0xc8>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a49      	ldr	r2, [pc, #292]	@ (8007b98 <HAL_DMA_Abort_IT+0x1d4>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d009      	beq.n	8007a8c <HAL_DMA_Abort_IT+0xc8>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a47      	ldr	r2, [pc, #284]	@ (8007b9c <HAL_DMA_Abort_IT+0x1d8>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d004      	beq.n	8007a8c <HAL_DMA_Abort_IT+0xc8>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a46      	ldr	r2, [pc, #280]	@ (8007ba0 <HAL_DMA_Abort_IT+0x1dc>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d101      	bne.n	8007a90 <HAL_DMA_Abort_IT+0xcc>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e000      	b.n	8007a92 <HAL_DMA_Abort_IT+0xce>
 8007a90:	2300      	movs	r3, #0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 8086 	beq.w	8007ba4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2204      	movs	r2, #4
 8007a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a2f      	ldr	r2, [pc, #188]	@ (8007b64 <HAL_DMA_Abort_IT+0x1a0>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d04a      	beq.n	8007b40 <HAL_DMA_Abort_IT+0x17c>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a2e      	ldr	r2, [pc, #184]	@ (8007b68 <HAL_DMA_Abort_IT+0x1a4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d045      	beq.n	8007b40 <HAL_DMA_Abort_IT+0x17c>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8007b6c <HAL_DMA_Abort_IT+0x1a8>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d040      	beq.n	8007b40 <HAL_DMA_Abort_IT+0x17c>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a2b      	ldr	r2, [pc, #172]	@ (8007b70 <HAL_DMA_Abort_IT+0x1ac>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d03b      	beq.n	8007b40 <HAL_DMA_Abort_IT+0x17c>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a29      	ldr	r2, [pc, #164]	@ (8007b74 <HAL_DMA_Abort_IT+0x1b0>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d036      	beq.n	8007b40 <HAL_DMA_Abort_IT+0x17c>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a28      	ldr	r2, [pc, #160]	@ (8007b78 <HAL_DMA_Abort_IT+0x1b4>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d031      	beq.n	8007b40 <HAL_DMA_Abort_IT+0x17c>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a26      	ldr	r2, [pc, #152]	@ (8007b7c <HAL_DMA_Abort_IT+0x1b8>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d02c      	beq.n	8007b40 <HAL_DMA_Abort_IT+0x17c>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a25      	ldr	r2, [pc, #148]	@ (8007b80 <HAL_DMA_Abort_IT+0x1bc>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d027      	beq.n	8007b40 <HAL_DMA_Abort_IT+0x17c>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a23      	ldr	r2, [pc, #140]	@ (8007b84 <HAL_DMA_Abort_IT+0x1c0>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d022      	beq.n	8007b40 <HAL_DMA_Abort_IT+0x17c>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a22      	ldr	r2, [pc, #136]	@ (8007b88 <HAL_DMA_Abort_IT+0x1c4>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d01d      	beq.n	8007b40 <HAL_DMA_Abort_IT+0x17c>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a20      	ldr	r2, [pc, #128]	@ (8007b8c <HAL_DMA_Abort_IT+0x1c8>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d018      	beq.n	8007b40 <HAL_DMA_Abort_IT+0x17c>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a1f      	ldr	r2, [pc, #124]	@ (8007b90 <HAL_DMA_Abort_IT+0x1cc>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d013      	beq.n	8007b40 <HAL_DMA_Abort_IT+0x17c>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007b94 <HAL_DMA_Abort_IT+0x1d0>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d00e      	beq.n	8007b40 <HAL_DMA_Abort_IT+0x17c>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a1c      	ldr	r2, [pc, #112]	@ (8007b98 <HAL_DMA_Abort_IT+0x1d4>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d009      	beq.n	8007b40 <HAL_DMA_Abort_IT+0x17c>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a1a      	ldr	r2, [pc, #104]	@ (8007b9c <HAL_DMA_Abort_IT+0x1d8>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d004      	beq.n	8007b40 <HAL_DMA_Abort_IT+0x17c>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a19      	ldr	r2, [pc, #100]	@ (8007ba0 <HAL_DMA_Abort_IT+0x1dc>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d108      	bne.n	8007b52 <HAL_DMA_Abort_IT+0x18e>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0201 	bic.w	r2, r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	e178      	b.n	8007e44 <HAL_DMA_Abort_IT+0x480>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 0201 	bic.w	r2, r2, #1
 8007b60:	601a      	str	r2, [r3, #0]
 8007b62:	e16f      	b.n	8007e44 <HAL_DMA_Abort_IT+0x480>
 8007b64:	40020010 	.word	0x40020010
 8007b68:	40020028 	.word	0x40020028
 8007b6c:	40020040 	.word	0x40020040
 8007b70:	40020058 	.word	0x40020058
 8007b74:	40020070 	.word	0x40020070
 8007b78:	40020088 	.word	0x40020088
 8007b7c:	400200a0 	.word	0x400200a0
 8007b80:	400200b8 	.word	0x400200b8
 8007b84:	40020410 	.word	0x40020410
 8007b88:	40020428 	.word	0x40020428
 8007b8c:	40020440 	.word	0x40020440
 8007b90:	40020458 	.word	0x40020458
 8007b94:	40020470 	.word	0x40020470
 8007b98:	40020488 	.word	0x40020488
 8007b9c:	400204a0 	.word	0x400204a0
 8007ba0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 020e 	bic.w	r2, r2, #14
 8007bb2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a6c      	ldr	r2, [pc, #432]	@ (8007d6c <HAL_DMA_Abort_IT+0x3a8>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d04a      	beq.n	8007c54 <HAL_DMA_Abort_IT+0x290>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a6b      	ldr	r2, [pc, #428]	@ (8007d70 <HAL_DMA_Abort_IT+0x3ac>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d045      	beq.n	8007c54 <HAL_DMA_Abort_IT+0x290>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a69      	ldr	r2, [pc, #420]	@ (8007d74 <HAL_DMA_Abort_IT+0x3b0>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d040      	beq.n	8007c54 <HAL_DMA_Abort_IT+0x290>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a68      	ldr	r2, [pc, #416]	@ (8007d78 <HAL_DMA_Abort_IT+0x3b4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d03b      	beq.n	8007c54 <HAL_DMA_Abort_IT+0x290>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a66      	ldr	r2, [pc, #408]	@ (8007d7c <HAL_DMA_Abort_IT+0x3b8>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d036      	beq.n	8007c54 <HAL_DMA_Abort_IT+0x290>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a65      	ldr	r2, [pc, #404]	@ (8007d80 <HAL_DMA_Abort_IT+0x3bc>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d031      	beq.n	8007c54 <HAL_DMA_Abort_IT+0x290>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a63      	ldr	r2, [pc, #396]	@ (8007d84 <HAL_DMA_Abort_IT+0x3c0>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d02c      	beq.n	8007c54 <HAL_DMA_Abort_IT+0x290>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a62      	ldr	r2, [pc, #392]	@ (8007d88 <HAL_DMA_Abort_IT+0x3c4>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d027      	beq.n	8007c54 <HAL_DMA_Abort_IT+0x290>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a60      	ldr	r2, [pc, #384]	@ (8007d8c <HAL_DMA_Abort_IT+0x3c8>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d022      	beq.n	8007c54 <HAL_DMA_Abort_IT+0x290>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a5f      	ldr	r2, [pc, #380]	@ (8007d90 <HAL_DMA_Abort_IT+0x3cc>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d01d      	beq.n	8007c54 <HAL_DMA_Abort_IT+0x290>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a5d      	ldr	r2, [pc, #372]	@ (8007d94 <HAL_DMA_Abort_IT+0x3d0>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d018      	beq.n	8007c54 <HAL_DMA_Abort_IT+0x290>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a5c      	ldr	r2, [pc, #368]	@ (8007d98 <HAL_DMA_Abort_IT+0x3d4>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d013      	beq.n	8007c54 <HAL_DMA_Abort_IT+0x290>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a5a      	ldr	r2, [pc, #360]	@ (8007d9c <HAL_DMA_Abort_IT+0x3d8>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d00e      	beq.n	8007c54 <HAL_DMA_Abort_IT+0x290>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a59      	ldr	r2, [pc, #356]	@ (8007da0 <HAL_DMA_Abort_IT+0x3dc>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d009      	beq.n	8007c54 <HAL_DMA_Abort_IT+0x290>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a57      	ldr	r2, [pc, #348]	@ (8007da4 <HAL_DMA_Abort_IT+0x3e0>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d004      	beq.n	8007c54 <HAL_DMA_Abort_IT+0x290>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a56      	ldr	r2, [pc, #344]	@ (8007da8 <HAL_DMA_Abort_IT+0x3e4>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d108      	bne.n	8007c66 <HAL_DMA_Abort_IT+0x2a2>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f022 0201 	bic.w	r2, r2, #1
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	e007      	b.n	8007c76 <HAL_DMA_Abort_IT+0x2b2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0201 	bic.w	r2, r2, #1
 8007c74:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a3c      	ldr	r2, [pc, #240]	@ (8007d6c <HAL_DMA_Abort_IT+0x3a8>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d072      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a3a      	ldr	r2, [pc, #232]	@ (8007d70 <HAL_DMA_Abort_IT+0x3ac>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d06d      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a39      	ldr	r2, [pc, #228]	@ (8007d74 <HAL_DMA_Abort_IT+0x3b0>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d068      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a37      	ldr	r2, [pc, #220]	@ (8007d78 <HAL_DMA_Abort_IT+0x3b4>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d063      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a36      	ldr	r2, [pc, #216]	@ (8007d7c <HAL_DMA_Abort_IT+0x3b8>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d05e      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a34      	ldr	r2, [pc, #208]	@ (8007d80 <HAL_DMA_Abort_IT+0x3bc>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d059      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a33      	ldr	r2, [pc, #204]	@ (8007d84 <HAL_DMA_Abort_IT+0x3c0>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d054      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a31      	ldr	r2, [pc, #196]	@ (8007d88 <HAL_DMA_Abort_IT+0x3c4>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d04f      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a30      	ldr	r2, [pc, #192]	@ (8007d8c <HAL_DMA_Abort_IT+0x3c8>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d04a      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8007d90 <HAL_DMA_Abort_IT+0x3cc>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d045      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a2d      	ldr	r2, [pc, #180]	@ (8007d94 <HAL_DMA_Abort_IT+0x3d0>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d040      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8007d98 <HAL_DMA_Abort_IT+0x3d4>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d03b      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8007d9c <HAL_DMA_Abort_IT+0x3d8>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d036      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a28      	ldr	r2, [pc, #160]	@ (8007da0 <HAL_DMA_Abort_IT+0x3dc>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d031      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a27      	ldr	r2, [pc, #156]	@ (8007da4 <HAL_DMA_Abort_IT+0x3e0>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d02c      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a25      	ldr	r2, [pc, #148]	@ (8007da8 <HAL_DMA_Abort_IT+0x3e4>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d027      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a24      	ldr	r2, [pc, #144]	@ (8007dac <HAL_DMA_Abort_IT+0x3e8>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d022      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a22      	ldr	r2, [pc, #136]	@ (8007db0 <HAL_DMA_Abort_IT+0x3ec>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d01d      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a21      	ldr	r2, [pc, #132]	@ (8007db4 <HAL_DMA_Abort_IT+0x3f0>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d018      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a1f      	ldr	r2, [pc, #124]	@ (8007db8 <HAL_DMA_Abort_IT+0x3f4>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d013      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a1e      	ldr	r2, [pc, #120]	@ (8007dbc <HAL_DMA_Abort_IT+0x3f8>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d00e      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8007dc0 <HAL_DMA_Abort_IT+0x3fc>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d009      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a1b      	ldr	r2, [pc, #108]	@ (8007dc4 <HAL_DMA_Abort_IT+0x400>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d004      	beq.n	8007d66 <HAL_DMA_Abort_IT+0x3a2>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a19      	ldr	r2, [pc, #100]	@ (8007dc8 <HAL_DMA_Abort_IT+0x404>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d132      	bne.n	8007dcc <HAL_DMA_Abort_IT+0x408>
 8007d66:	2301      	movs	r3, #1
 8007d68:	e031      	b.n	8007dce <HAL_DMA_Abort_IT+0x40a>
 8007d6a:	bf00      	nop
 8007d6c:	40020010 	.word	0x40020010
 8007d70:	40020028 	.word	0x40020028
 8007d74:	40020040 	.word	0x40020040
 8007d78:	40020058 	.word	0x40020058
 8007d7c:	40020070 	.word	0x40020070
 8007d80:	40020088 	.word	0x40020088
 8007d84:	400200a0 	.word	0x400200a0
 8007d88:	400200b8 	.word	0x400200b8
 8007d8c:	40020410 	.word	0x40020410
 8007d90:	40020428 	.word	0x40020428
 8007d94:	40020440 	.word	0x40020440
 8007d98:	40020458 	.word	0x40020458
 8007d9c:	40020470 	.word	0x40020470
 8007da0:	40020488 	.word	0x40020488
 8007da4:	400204a0 	.word	0x400204a0
 8007da8:	400204b8 	.word	0x400204b8
 8007dac:	58025408 	.word	0x58025408
 8007db0:	5802541c 	.word	0x5802541c
 8007db4:	58025430 	.word	0x58025430
 8007db8:	58025444 	.word	0x58025444
 8007dbc:	58025458 	.word	0x58025458
 8007dc0:	5802546c 	.word	0x5802546c
 8007dc4:	58025480 	.word	0x58025480
 8007dc8:	58025494 	.word	0x58025494
 8007dcc:	2300      	movs	r3, #0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d028      	beq.n	8007e24 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ddc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007de0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007de6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dec:	f003 031f 	and.w	r3, r3, #31
 8007df0:	2201      	movs	r2, #1
 8007df2:	409a      	lsls	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007e00:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00c      	beq.n	8007e24 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e18:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007e22:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop

08007e50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08a      	sub	sp, #40	@ 0x28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e5c:	4b67      	ldr	r3, [pc, #412]	@ (8007ffc <HAL_DMA_IRQHandler+0x1ac>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a67      	ldr	r2, [pc, #412]	@ (8008000 <HAL_DMA_IRQHandler+0x1b0>)
 8007e62:	fba2 2303 	umull	r2, r3, r2, r3
 8007e66:	0a9b      	lsrs	r3, r3, #10
 8007e68:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e6e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e74:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a5f      	ldr	r2, [pc, #380]	@ (8008004 <HAL_DMA_IRQHandler+0x1b4>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d04a      	beq.n	8007f22 <HAL_DMA_IRQHandler+0xd2>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a5d      	ldr	r2, [pc, #372]	@ (8008008 <HAL_DMA_IRQHandler+0x1b8>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d045      	beq.n	8007f22 <HAL_DMA_IRQHandler+0xd2>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a5c      	ldr	r2, [pc, #368]	@ (800800c <HAL_DMA_IRQHandler+0x1bc>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d040      	beq.n	8007f22 <HAL_DMA_IRQHandler+0xd2>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a5a      	ldr	r2, [pc, #360]	@ (8008010 <HAL_DMA_IRQHandler+0x1c0>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d03b      	beq.n	8007f22 <HAL_DMA_IRQHandler+0xd2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a59      	ldr	r2, [pc, #356]	@ (8008014 <HAL_DMA_IRQHandler+0x1c4>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d036      	beq.n	8007f22 <HAL_DMA_IRQHandler+0xd2>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a57      	ldr	r2, [pc, #348]	@ (8008018 <HAL_DMA_IRQHandler+0x1c8>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d031      	beq.n	8007f22 <HAL_DMA_IRQHandler+0xd2>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a56      	ldr	r2, [pc, #344]	@ (800801c <HAL_DMA_IRQHandler+0x1cc>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d02c      	beq.n	8007f22 <HAL_DMA_IRQHandler+0xd2>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a54      	ldr	r2, [pc, #336]	@ (8008020 <HAL_DMA_IRQHandler+0x1d0>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d027      	beq.n	8007f22 <HAL_DMA_IRQHandler+0xd2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a53      	ldr	r2, [pc, #332]	@ (8008024 <HAL_DMA_IRQHandler+0x1d4>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d022      	beq.n	8007f22 <HAL_DMA_IRQHandler+0xd2>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a51      	ldr	r2, [pc, #324]	@ (8008028 <HAL_DMA_IRQHandler+0x1d8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d01d      	beq.n	8007f22 <HAL_DMA_IRQHandler+0xd2>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a50      	ldr	r2, [pc, #320]	@ (800802c <HAL_DMA_IRQHandler+0x1dc>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d018      	beq.n	8007f22 <HAL_DMA_IRQHandler+0xd2>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a4e      	ldr	r2, [pc, #312]	@ (8008030 <HAL_DMA_IRQHandler+0x1e0>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d013      	beq.n	8007f22 <HAL_DMA_IRQHandler+0xd2>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a4d      	ldr	r2, [pc, #308]	@ (8008034 <HAL_DMA_IRQHandler+0x1e4>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d00e      	beq.n	8007f22 <HAL_DMA_IRQHandler+0xd2>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a4b      	ldr	r2, [pc, #300]	@ (8008038 <HAL_DMA_IRQHandler+0x1e8>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d009      	beq.n	8007f22 <HAL_DMA_IRQHandler+0xd2>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a4a      	ldr	r2, [pc, #296]	@ (800803c <HAL_DMA_IRQHandler+0x1ec>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d004      	beq.n	8007f22 <HAL_DMA_IRQHandler+0xd2>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a48      	ldr	r2, [pc, #288]	@ (8008040 <HAL_DMA_IRQHandler+0x1f0>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d101      	bne.n	8007f26 <HAL_DMA_IRQHandler+0xd6>
 8007f22:	2301      	movs	r3, #1
 8007f24:	e000      	b.n	8007f28 <HAL_DMA_IRQHandler+0xd8>
 8007f26:	2300      	movs	r3, #0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 842b 	beq.w	8008784 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f32:	f003 031f 	and.w	r3, r3, #31
 8007f36:	2208      	movs	r2, #8
 8007f38:	409a      	lsls	r2, r3
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 80a2 	beq.w	8008088 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a2e      	ldr	r2, [pc, #184]	@ (8008004 <HAL_DMA_IRQHandler+0x1b4>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d04a      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x194>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a2d      	ldr	r2, [pc, #180]	@ (8008008 <HAL_DMA_IRQHandler+0x1b8>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d045      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x194>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800800c <HAL_DMA_IRQHandler+0x1bc>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d040      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x194>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a2a      	ldr	r2, [pc, #168]	@ (8008010 <HAL_DMA_IRQHandler+0x1c0>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d03b      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x194>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a28      	ldr	r2, [pc, #160]	@ (8008014 <HAL_DMA_IRQHandler+0x1c4>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d036      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x194>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a27      	ldr	r2, [pc, #156]	@ (8008018 <HAL_DMA_IRQHandler+0x1c8>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d031      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x194>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a25      	ldr	r2, [pc, #148]	@ (800801c <HAL_DMA_IRQHandler+0x1cc>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d02c      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x194>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a24      	ldr	r2, [pc, #144]	@ (8008020 <HAL_DMA_IRQHandler+0x1d0>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d027      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x194>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a22      	ldr	r2, [pc, #136]	@ (8008024 <HAL_DMA_IRQHandler+0x1d4>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d022      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x194>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a21      	ldr	r2, [pc, #132]	@ (8008028 <HAL_DMA_IRQHandler+0x1d8>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d01d      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x194>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a1f      	ldr	r2, [pc, #124]	@ (800802c <HAL_DMA_IRQHandler+0x1dc>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d018      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x194>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8008030 <HAL_DMA_IRQHandler+0x1e0>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d013      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x194>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8008034 <HAL_DMA_IRQHandler+0x1e4>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d00e      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x194>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a1b      	ldr	r2, [pc, #108]	@ (8008038 <HAL_DMA_IRQHandler+0x1e8>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d009      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x194>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a19      	ldr	r2, [pc, #100]	@ (800803c <HAL_DMA_IRQHandler+0x1ec>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d004      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x194>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a18      	ldr	r2, [pc, #96]	@ (8008040 <HAL_DMA_IRQHandler+0x1f0>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d12f      	bne.n	8008044 <HAL_DMA_IRQHandler+0x1f4>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0304 	and.w	r3, r3, #4
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	bf14      	ite	ne
 8007ff2:	2301      	movne	r3, #1
 8007ff4:	2300      	moveq	r3, #0
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	e02e      	b.n	8008058 <HAL_DMA_IRQHandler+0x208>
 8007ffa:	bf00      	nop
 8007ffc:	24000010 	.word	0x24000010
 8008000:	1b4e81b5 	.word	0x1b4e81b5
 8008004:	40020010 	.word	0x40020010
 8008008:	40020028 	.word	0x40020028
 800800c:	40020040 	.word	0x40020040
 8008010:	40020058 	.word	0x40020058
 8008014:	40020070 	.word	0x40020070
 8008018:	40020088 	.word	0x40020088
 800801c:	400200a0 	.word	0x400200a0
 8008020:	400200b8 	.word	0x400200b8
 8008024:	40020410 	.word	0x40020410
 8008028:	40020428 	.word	0x40020428
 800802c:	40020440 	.word	0x40020440
 8008030:	40020458 	.word	0x40020458
 8008034:	40020470 	.word	0x40020470
 8008038:	40020488 	.word	0x40020488
 800803c:	400204a0 	.word	0x400204a0
 8008040:	400204b8 	.word	0x400204b8
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0308 	and.w	r3, r3, #8
 800804e:	2b00      	cmp	r3, #0
 8008050:	bf14      	ite	ne
 8008052:	2301      	movne	r3, #1
 8008054:	2300      	moveq	r3, #0
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b00      	cmp	r3, #0
 800805a:	d015      	beq.n	8008088 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 0204 	bic.w	r2, r2, #4
 800806a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008070:	f003 031f 	and.w	r3, r3, #31
 8008074:	2208      	movs	r2, #8
 8008076:	409a      	lsls	r2, r3
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008080:	f043 0201 	orr.w	r2, r3, #1
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800808c:	f003 031f 	and.w	r3, r3, #31
 8008090:	69ba      	ldr	r2, [r7, #24]
 8008092:	fa22 f303 	lsr.w	r3, r2, r3
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b00      	cmp	r3, #0
 800809c:	d06e      	beq.n	800817c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a69      	ldr	r2, [pc, #420]	@ (8008248 <HAL_DMA_IRQHandler+0x3f8>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d04a      	beq.n	800813e <HAL_DMA_IRQHandler+0x2ee>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a67      	ldr	r2, [pc, #412]	@ (800824c <HAL_DMA_IRQHandler+0x3fc>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d045      	beq.n	800813e <HAL_DMA_IRQHandler+0x2ee>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a66      	ldr	r2, [pc, #408]	@ (8008250 <HAL_DMA_IRQHandler+0x400>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d040      	beq.n	800813e <HAL_DMA_IRQHandler+0x2ee>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a64      	ldr	r2, [pc, #400]	@ (8008254 <HAL_DMA_IRQHandler+0x404>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d03b      	beq.n	800813e <HAL_DMA_IRQHandler+0x2ee>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a63      	ldr	r2, [pc, #396]	@ (8008258 <HAL_DMA_IRQHandler+0x408>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d036      	beq.n	800813e <HAL_DMA_IRQHandler+0x2ee>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a61      	ldr	r2, [pc, #388]	@ (800825c <HAL_DMA_IRQHandler+0x40c>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d031      	beq.n	800813e <HAL_DMA_IRQHandler+0x2ee>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a60      	ldr	r2, [pc, #384]	@ (8008260 <HAL_DMA_IRQHandler+0x410>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d02c      	beq.n	800813e <HAL_DMA_IRQHandler+0x2ee>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a5e      	ldr	r2, [pc, #376]	@ (8008264 <HAL_DMA_IRQHandler+0x414>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d027      	beq.n	800813e <HAL_DMA_IRQHandler+0x2ee>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a5d      	ldr	r2, [pc, #372]	@ (8008268 <HAL_DMA_IRQHandler+0x418>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d022      	beq.n	800813e <HAL_DMA_IRQHandler+0x2ee>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a5b      	ldr	r2, [pc, #364]	@ (800826c <HAL_DMA_IRQHandler+0x41c>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d01d      	beq.n	800813e <HAL_DMA_IRQHandler+0x2ee>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a5a      	ldr	r2, [pc, #360]	@ (8008270 <HAL_DMA_IRQHandler+0x420>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d018      	beq.n	800813e <HAL_DMA_IRQHandler+0x2ee>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a58      	ldr	r2, [pc, #352]	@ (8008274 <HAL_DMA_IRQHandler+0x424>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d013      	beq.n	800813e <HAL_DMA_IRQHandler+0x2ee>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a57      	ldr	r2, [pc, #348]	@ (8008278 <HAL_DMA_IRQHandler+0x428>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d00e      	beq.n	800813e <HAL_DMA_IRQHandler+0x2ee>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a55      	ldr	r2, [pc, #340]	@ (800827c <HAL_DMA_IRQHandler+0x42c>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d009      	beq.n	800813e <HAL_DMA_IRQHandler+0x2ee>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a54      	ldr	r2, [pc, #336]	@ (8008280 <HAL_DMA_IRQHandler+0x430>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d004      	beq.n	800813e <HAL_DMA_IRQHandler+0x2ee>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a52      	ldr	r2, [pc, #328]	@ (8008284 <HAL_DMA_IRQHandler+0x434>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d10a      	bne.n	8008154 <HAL_DMA_IRQHandler+0x304>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008148:	2b00      	cmp	r3, #0
 800814a:	bf14      	ite	ne
 800814c:	2301      	movne	r3, #1
 800814e:	2300      	moveq	r3, #0
 8008150:	b2db      	uxtb	r3, r3
 8008152:	e003      	b.n	800815c <HAL_DMA_IRQHandler+0x30c>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2300      	movs	r3, #0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00d      	beq.n	800817c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008164:	f003 031f 	and.w	r3, r3, #31
 8008168:	2201      	movs	r2, #1
 800816a:	409a      	lsls	r2, r3
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008174:	f043 0202 	orr.w	r2, r3, #2
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008180:	f003 031f 	and.w	r3, r3, #31
 8008184:	2204      	movs	r2, #4
 8008186:	409a      	lsls	r2, r3
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	4013      	ands	r3, r2
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 808f 	beq.w	80082b0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a2c      	ldr	r2, [pc, #176]	@ (8008248 <HAL_DMA_IRQHandler+0x3f8>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d04a      	beq.n	8008232 <HAL_DMA_IRQHandler+0x3e2>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a2a      	ldr	r2, [pc, #168]	@ (800824c <HAL_DMA_IRQHandler+0x3fc>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d045      	beq.n	8008232 <HAL_DMA_IRQHandler+0x3e2>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a29      	ldr	r2, [pc, #164]	@ (8008250 <HAL_DMA_IRQHandler+0x400>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d040      	beq.n	8008232 <HAL_DMA_IRQHandler+0x3e2>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a27      	ldr	r2, [pc, #156]	@ (8008254 <HAL_DMA_IRQHandler+0x404>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d03b      	beq.n	8008232 <HAL_DMA_IRQHandler+0x3e2>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a26      	ldr	r2, [pc, #152]	@ (8008258 <HAL_DMA_IRQHandler+0x408>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d036      	beq.n	8008232 <HAL_DMA_IRQHandler+0x3e2>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a24      	ldr	r2, [pc, #144]	@ (800825c <HAL_DMA_IRQHandler+0x40c>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d031      	beq.n	8008232 <HAL_DMA_IRQHandler+0x3e2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a23      	ldr	r2, [pc, #140]	@ (8008260 <HAL_DMA_IRQHandler+0x410>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d02c      	beq.n	8008232 <HAL_DMA_IRQHandler+0x3e2>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a21      	ldr	r2, [pc, #132]	@ (8008264 <HAL_DMA_IRQHandler+0x414>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d027      	beq.n	8008232 <HAL_DMA_IRQHandler+0x3e2>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a20      	ldr	r2, [pc, #128]	@ (8008268 <HAL_DMA_IRQHandler+0x418>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d022      	beq.n	8008232 <HAL_DMA_IRQHandler+0x3e2>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a1e      	ldr	r2, [pc, #120]	@ (800826c <HAL_DMA_IRQHandler+0x41c>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d01d      	beq.n	8008232 <HAL_DMA_IRQHandler+0x3e2>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a1d      	ldr	r2, [pc, #116]	@ (8008270 <HAL_DMA_IRQHandler+0x420>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d018      	beq.n	8008232 <HAL_DMA_IRQHandler+0x3e2>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1b      	ldr	r2, [pc, #108]	@ (8008274 <HAL_DMA_IRQHandler+0x424>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d013      	beq.n	8008232 <HAL_DMA_IRQHandler+0x3e2>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a1a      	ldr	r2, [pc, #104]	@ (8008278 <HAL_DMA_IRQHandler+0x428>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d00e      	beq.n	8008232 <HAL_DMA_IRQHandler+0x3e2>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a18      	ldr	r2, [pc, #96]	@ (800827c <HAL_DMA_IRQHandler+0x42c>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d009      	beq.n	8008232 <HAL_DMA_IRQHandler+0x3e2>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a17      	ldr	r2, [pc, #92]	@ (8008280 <HAL_DMA_IRQHandler+0x430>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d004      	beq.n	8008232 <HAL_DMA_IRQHandler+0x3e2>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a15      	ldr	r2, [pc, #84]	@ (8008284 <HAL_DMA_IRQHandler+0x434>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d12a      	bne.n	8008288 <HAL_DMA_IRQHandler+0x438>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0302 	and.w	r3, r3, #2
 800823c:	2b00      	cmp	r3, #0
 800823e:	bf14      	ite	ne
 8008240:	2301      	movne	r3, #1
 8008242:	2300      	moveq	r3, #0
 8008244:	b2db      	uxtb	r3, r3
 8008246:	e023      	b.n	8008290 <HAL_DMA_IRQHandler+0x440>
 8008248:	40020010 	.word	0x40020010
 800824c:	40020028 	.word	0x40020028
 8008250:	40020040 	.word	0x40020040
 8008254:	40020058 	.word	0x40020058
 8008258:	40020070 	.word	0x40020070
 800825c:	40020088 	.word	0x40020088
 8008260:	400200a0 	.word	0x400200a0
 8008264:	400200b8 	.word	0x400200b8
 8008268:	40020410 	.word	0x40020410
 800826c:	40020428 	.word	0x40020428
 8008270:	40020440 	.word	0x40020440
 8008274:	40020458 	.word	0x40020458
 8008278:	40020470 	.word	0x40020470
 800827c:	40020488 	.word	0x40020488
 8008280:	400204a0 	.word	0x400204a0
 8008284:	400204b8 	.word	0x400204b8
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2300      	movs	r3, #0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00d      	beq.n	80082b0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008298:	f003 031f 	and.w	r3, r3, #31
 800829c:	2204      	movs	r2, #4
 800829e:	409a      	lsls	r2, r3
 80082a0:	6a3b      	ldr	r3, [r7, #32]
 80082a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082a8:	f043 0204 	orr.w	r2, r3, #4
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082b4:	f003 031f 	and.w	r3, r3, #31
 80082b8:	2210      	movs	r2, #16
 80082ba:	409a      	lsls	r2, r3
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	4013      	ands	r3, r2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 80a6 	beq.w	8008412 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a85      	ldr	r2, [pc, #532]	@ (80084e0 <HAL_DMA_IRQHandler+0x690>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d04a      	beq.n	8008366 <HAL_DMA_IRQHandler+0x516>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a83      	ldr	r2, [pc, #524]	@ (80084e4 <HAL_DMA_IRQHandler+0x694>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d045      	beq.n	8008366 <HAL_DMA_IRQHandler+0x516>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a82      	ldr	r2, [pc, #520]	@ (80084e8 <HAL_DMA_IRQHandler+0x698>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d040      	beq.n	8008366 <HAL_DMA_IRQHandler+0x516>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a80      	ldr	r2, [pc, #512]	@ (80084ec <HAL_DMA_IRQHandler+0x69c>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d03b      	beq.n	8008366 <HAL_DMA_IRQHandler+0x516>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a7f      	ldr	r2, [pc, #508]	@ (80084f0 <HAL_DMA_IRQHandler+0x6a0>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d036      	beq.n	8008366 <HAL_DMA_IRQHandler+0x516>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a7d      	ldr	r2, [pc, #500]	@ (80084f4 <HAL_DMA_IRQHandler+0x6a4>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d031      	beq.n	8008366 <HAL_DMA_IRQHandler+0x516>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a7c      	ldr	r2, [pc, #496]	@ (80084f8 <HAL_DMA_IRQHandler+0x6a8>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d02c      	beq.n	8008366 <HAL_DMA_IRQHandler+0x516>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a7a      	ldr	r2, [pc, #488]	@ (80084fc <HAL_DMA_IRQHandler+0x6ac>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d027      	beq.n	8008366 <HAL_DMA_IRQHandler+0x516>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a79      	ldr	r2, [pc, #484]	@ (8008500 <HAL_DMA_IRQHandler+0x6b0>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d022      	beq.n	8008366 <HAL_DMA_IRQHandler+0x516>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a77      	ldr	r2, [pc, #476]	@ (8008504 <HAL_DMA_IRQHandler+0x6b4>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d01d      	beq.n	8008366 <HAL_DMA_IRQHandler+0x516>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a76      	ldr	r2, [pc, #472]	@ (8008508 <HAL_DMA_IRQHandler+0x6b8>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d018      	beq.n	8008366 <HAL_DMA_IRQHandler+0x516>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a74      	ldr	r2, [pc, #464]	@ (800850c <HAL_DMA_IRQHandler+0x6bc>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d013      	beq.n	8008366 <HAL_DMA_IRQHandler+0x516>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a73      	ldr	r2, [pc, #460]	@ (8008510 <HAL_DMA_IRQHandler+0x6c0>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d00e      	beq.n	8008366 <HAL_DMA_IRQHandler+0x516>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a71      	ldr	r2, [pc, #452]	@ (8008514 <HAL_DMA_IRQHandler+0x6c4>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d009      	beq.n	8008366 <HAL_DMA_IRQHandler+0x516>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a70      	ldr	r2, [pc, #448]	@ (8008518 <HAL_DMA_IRQHandler+0x6c8>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d004      	beq.n	8008366 <HAL_DMA_IRQHandler+0x516>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a6e      	ldr	r2, [pc, #440]	@ (800851c <HAL_DMA_IRQHandler+0x6cc>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d10a      	bne.n	800837c <HAL_DMA_IRQHandler+0x52c>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0308 	and.w	r3, r3, #8
 8008370:	2b00      	cmp	r3, #0
 8008372:	bf14      	ite	ne
 8008374:	2301      	movne	r3, #1
 8008376:	2300      	moveq	r3, #0
 8008378:	b2db      	uxtb	r3, r3
 800837a:	e009      	b.n	8008390 <HAL_DMA_IRQHandler+0x540>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0304 	and.w	r3, r3, #4
 8008386:	2b00      	cmp	r3, #0
 8008388:	bf14      	ite	ne
 800838a:	2301      	movne	r3, #1
 800838c:	2300      	moveq	r3, #0
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d03e      	beq.n	8008412 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008398:	f003 031f 	and.w	r3, r3, #31
 800839c:	2210      	movs	r2, #16
 800839e:	409a      	lsls	r2, r3
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d018      	beq.n	80083e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d108      	bne.n	80083d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d024      	beq.n	8008412 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	4798      	blx	r3
 80083d0:	e01f      	b.n	8008412 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d01b      	beq.n	8008412 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	4798      	blx	r3
 80083e2:	e016      	b.n	8008412 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d107      	bne.n	8008402 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f022 0208 	bic.w	r2, r2, #8
 8008400:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008416:	f003 031f 	and.w	r3, r3, #31
 800841a:	2220      	movs	r2, #32
 800841c:	409a      	lsls	r2, r3
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	4013      	ands	r3, r2
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 8110 	beq.w	8008648 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a2c      	ldr	r2, [pc, #176]	@ (80084e0 <HAL_DMA_IRQHandler+0x690>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d04a      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x678>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a2b      	ldr	r2, [pc, #172]	@ (80084e4 <HAL_DMA_IRQHandler+0x694>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d045      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x678>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a29      	ldr	r2, [pc, #164]	@ (80084e8 <HAL_DMA_IRQHandler+0x698>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d040      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x678>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a28      	ldr	r2, [pc, #160]	@ (80084ec <HAL_DMA_IRQHandler+0x69c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d03b      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x678>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a26      	ldr	r2, [pc, #152]	@ (80084f0 <HAL_DMA_IRQHandler+0x6a0>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d036      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x678>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a25      	ldr	r2, [pc, #148]	@ (80084f4 <HAL_DMA_IRQHandler+0x6a4>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d031      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x678>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a23      	ldr	r2, [pc, #140]	@ (80084f8 <HAL_DMA_IRQHandler+0x6a8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d02c      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x678>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a22      	ldr	r2, [pc, #136]	@ (80084fc <HAL_DMA_IRQHandler+0x6ac>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d027      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x678>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a20      	ldr	r2, [pc, #128]	@ (8008500 <HAL_DMA_IRQHandler+0x6b0>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d022      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x678>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a1f      	ldr	r2, [pc, #124]	@ (8008504 <HAL_DMA_IRQHandler+0x6b4>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d01d      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x678>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a1d      	ldr	r2, [pc, #116]	@ (8008508 <HAL_DMA_IRQHandler+0x6b8>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d018      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x678>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a1c      	ldr	r2, [pc, #112]	@ (800850c <HAL_DMA_IRQHandler+0x6bc>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d013      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x678>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a1a      	ldr	r2, [pc, #104]	@ (8008510 <HAL_DMA_IRQHandler+0x6c0>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d00e      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x678>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a19      	ldr	r2, [pc, #100]	@ (8008514 <HAL_DMA_IRQHandler+0x6c4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d009      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x678>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a17      	ldr	r2, [pc, #92]	@ (8008518 <HAL_DMA_IRQHandler+0x6c8>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d004      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x678>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a16      	ldr	r2, [pc, #88]	@ (800851c <HAL_DMA_IRQHandler+0x6cc>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d12b      	bne.n	8008520 <HAL_DMA_IRQHandler+0x6d0>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0310 	and.w	r3, r3, #16
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	bf14      	ite	ne
 80084d6:	2301      	movne	r3, #1
 80084d8:	2300      	moveq	r3, #0
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	e02a      	b.n	8008534 <HAL_DMA_IRQHandler+0x6e4>
 80084de:	bf00      	nop
 80084e0:	40020010 	.word	0x40020010
 80084e4:	40020028 	.word	0x40020028
 80084e8:	40020040 	.word	0x40020040
 80084ec:	40020058 	.word	0x40020058
 80084f0:	40020070 	.word	0x40020070
 80084f4:	40020088 	.word	0x40020088
 80084f8:	400200a0 	.word	0x400200a0
 80084fc:	400200b8 	.word	0x400200b8
 8008500:	40020410 	.word	0x40020410
 8008504:	40020428 	.word	0x40020428
 8008508:	40020440 	.word	0x40020440
 800850c:	40020458 	.word	0x40020458
 8008510:	40020470 	.word	0x40020470
 8008514:	40020488 	.word	0x40020488
 8008518:	400204a0 	.word	0x400204a0
 800851c:	400204b8 	.word	0x400204b8
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b00      	cmp	r3, #0
 800852c:	bf14      	ite	ne
 800852e:	2301      	movne	r3, #1
 8008530:	2300      	moveq	r3, #0
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 8087 	beq.w	8008648 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800853e:	f003 031f 	and.w	r3, r3, #31
 8008542:	2220      	movs	r2, #32
 8008544:	409a      	lsls	r2, r3
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b04      	cmp	r3, #4
 8008554:	d139      	bne.n	80085ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f022 0216 	bic.w	r2, r2, #22
 8008564:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	695a      	ldr	r2, [r3, #20]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008574:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800857a:	2b00      	cmp	r3, #0
 800857c:	d103      	bne.n	8008586 <HAL_DMA_IRQHandler+0x736>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008582:	2b00      	cmp	r3, #0
 8008584:	d007      	beq.n	8008596 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f022 0208 	bic.w	r2, r2, #8
 8008594:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800859a:	f003 031f 	and.w	r3, r3, #31
 800859e:	223f      	movs	r2, #63	@ 0x3f
 80085a0:	409a      	lsls	r2, r3
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f000 834a 	beq.w	8008c54 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	4798      	blx	r3
          }
          return;
 80085c8:	e344      	b.n	8008c54 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d018      	beq.n	800860a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d108      	bne.n	80085f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d02c      	beq.n	8008648 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	4798      	blx	r3
 80085f6:	e027      	b.n	8008648 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d023      	beq.n	8008648 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	4798      	blx	r3
 8008608:	e01e      	b.n	8008648 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10f      	bne.n	8008638 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f022 0210 	bic.w	r2, r2, #16
 8008626:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800863c:	2b00      	cmp	r3, #0
 800863e:	d003      	beq.n	8008648 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 8306 	beq.w	8008c5e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b00      	cmp	r3, #0
 800865c:	f000 8088 	beq.w	8008770 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2204      	movs	r2, #4
 8008664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a7a      	ldr	r2, [pc, #488]	@ (8008858 <HAL_DMA_IRQHandler+0xa08>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d04a      	beq.n	8008708 <HAL_DMA_IRQHandler+0x8b8>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a79      	ldr	r2, [pc, #484]	@ (800885c <HAL_DMA_IRQHandler+0xa0c>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d045      	beq.n	8008708 <HAL_DMA_IRQHandler+0x8b8>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a77      	ldr	r2, [pc, #476]	@ (8008860 <HAL_DMA_IRQHandler+0xa10>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d040      	beq.n	8008708 <HAL_DMA_IRQHandler+0x8b8>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a76      	ldr	r2, [pc, #472]	@ (8008864 <HAL_DMA_IRQHandler+0xa14>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d03b      	beq.n	8008708 <HAL_DMA_IRQHandler+0x8b8>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a74      	ldr	r2, [pc, #464]	@ (8008868 <HAL_DMA_IRQHandler+0xa18>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d036      	beq.n	8008708 <HAL_DMA_IRQHandler+0x8b8>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a73      	ldr	r2, [pc, #460]	@ (800886c <HAL_DMA_IRQHandler+0xa1c>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d031      	beq.n	8008708 <HAL_DMA_IRQHandler+0x8b8>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a71      	ldr	r2, [pc, #452]	@ (8008870 <HAL_DMA_IRQHandler+0xa20>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d02c      	beq.n	8008708 <HAL_DMA_IRQHandler+0x8b8>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a70      	ldr	r2, [pc, #448]	@ (8008874 <HAL_DMA_IRQHandler+0xa24>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d027      	beq.n	8008708 <HAL_DMA_IRQHandler+0x8b8>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a6e      	ldr	r2, [pc, #440]	@ (8008878 <HAL_DMA_IRQHandler+0xa28>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d022      	beq.n	8008708 <HAL_DMA_IRQHandler+0x8b8>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a6d      	ldr	r2, [pc, #436]	@ (800887c <HAL_DMA_IRQHandler+0xa2c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d01d      	beq.n	8008708 <HAL_DMA_IRQHandler+0x8b8>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a6b      	ldr	r2, [pc, #428]	@ (8008880 <HAL_DMA_IRQHandler+0xa30>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d018      	beq.n	8008708 <HAL_DMA_IRQHandler+0x8b8>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a6a      	ldr	r2, [pc, #424]	@ (8008884 <HAL_DMA_IRQHandler+0xa34>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d013      	beq.n	8008708 <HAL_DMA_IRQHandler+0x8b8>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a68      	ldr	r2, [pc, #416]	@ (8008888 <HAL_DMA_IRQHandler+0xa38>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d00e      	beq.n	8008708 <HAL_DMA_IRQHandler+0x8b8>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a67      	ldr	r2, [pc, #412]	@ (800888c <HAL_DMA_IRQHandler+0xa3c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d009      	beq.n	8008708 <HAL_DMA_IRQHandler+0x8b8>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a65      	ldr	r2, [pc, #404]	@ (8008890 <HAL_DMA_IRQHandler+0xa40>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d004      	beq.n	8008708 <HAL_DMA_IRQHandler+0x8b8>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a64      	ldr	r2, [pc, #400]	@ (8008894 <HAL_DMA_IRQHandler+0xa44>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d108      	bne.n	800871a <HAL_DMA_IRQHandler+0x8ca>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f022 0201 	bic.w	r2, r2, #1
 8008716:	601a      	str	r2, [r3, #0]
 8008718:	e007      	b.n	800872a <HAL_DMA_IRQHandler+0x8da>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 0201 	bic.w	r2, r2, #1
 8008728:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3301      	adds	r3, #1
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008732:	429a      	cmp	r2, r3
 8008734:	d307      	bcc.n	8008746 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1f2      	bne.n	800872a <HAL_DMA_IRQHandler+0x8da>
 8008744:	e000      	b.n	8008748 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008746:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	2b00      	cmp	r3, #0
 8008754:	d004      	beq.n	8008760 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2203      	movs	r2, #3
 800875a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800875e:	e003      	b.n	8008768 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008774:	2b00      	cmp	r3, #0
 8008776:	f000 8272 	beq.w	8008c5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	4798      	blx	r3
 8008782:	e26c      	b.n	8008c5e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a43      	ldr	r2, [pc, #268]	@ (8008898 <HAL_DMA_IRQHandler+0xa48>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d022      	beq.n	80087d4 <HAL_DMA_IRQHandler+0x984>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a42      	ldr	r2, [pc, #264]	@ (800889c <HAL_DMA_IRQHandler+0xa4c>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d01d      	beq.n	80087d4 <HAL_DMA_IRQHandler+0x984>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a40      	ldr	r2, [pc, #256]	@ (80088a0 <HAL_DMA_IRQHandler+0xa50>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d018      	beq.n	80087d4 <HAL_DMA_IRQHandler+0x984>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a3f      	ldr	r2, [pc, #252]	@ (80088a4 <HAL_DMA_IRQHandler+0xa54>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d013      	beq.n	80087d4 <HAL_DMA_IRQHandler+0x984>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a3d      	ldr	r2, [pc, #244]	@ (80088a8 <HAL_DMA_IRQHandler+0xa58>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d00e      	beq.n	80087d4 <HAL_DMA_IRQHandler+0x984>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a3c      	ldr	r2, [pc, #240]	@ (80088ac <HAL_DMA_IRQHandler+0xa5c>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d009      	beq.n	80087d4 <HAL_DMA_IRQHandler+0x984>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a3a      	ldr	r2, [pc, #232]	@ (80088b0 <HAL_DMA_IRQHandler+0xa60>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d004      	beq.n	80087d4 <HAL_DMA_IRQHandler+0x984>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a39      	ldr	r2, [pc, #228]	@ (80088b4 <HAL_DMA_IRQHandler+0xa64>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d101      	bne.n	80087d8 <HAL_DMA_IRQHandler+0x988>
 80087d4:	2301      	movs	r3, #1
 80087d6:	e000      	b.n	80087da <HAL_DMA_IRQHandler+0x98a>
 80087d8:	2300      	movs	r3, #0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 823f 	beq.w	8008c5e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087ec:	f003 031f 	and.w	r3, r3, #31
 80087f0:	2204      	movs	r2, #4
 80087f2:	409a      	lsls	r2, r3
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	4013      	ands	r3, r2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 80cd 	beq.w	8008998 <HAL_DMA_IRQHandler+0xb48>
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f003 0304 	and.w	r3, r3, #4
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 80c7 	beq.w	8008998 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800880e:	f003 031f 	and.w	r3, r3, #31
 8008812:	2204      	movs	r2, #4
 8008814:	409a      	lsls	r2, r3
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d049      	beq.n	80088b8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d109      	bne.n	8008842 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 8210 	beq.w	8008c58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008840:	e20a      	b.n	8008c58 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 8206 	beq.w	8008c58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008854:	e200      	b.n	8008c58 <HAL_DMA_IRQHandler+0xe08>
 8008856:	bf00      	nop
 8008858:	40020010 	.word	0x40020010
 800885c:	40020028 	.word	0x40020028
 8008860:	40020040 	.word	0x40020040
 8008864:	40020058 	.word	0x40020058
 8008868:	40020070 	.word	0x40020070
 800886c:	40020088 	.word	0x40020088
 8008870:	400200a0 	.word	0x400200a0
 8008874:	400200b8 	.word	0x400200b8
 8008878:	40020410 	.word	0x40020410
 800887c:	40020428 	.word	0x40020428
 8008880:	40020440 	.word	0x40020440
 8008884:	40020458 	.word	0x40020458
 8008888:	40020470 	.word	0x40020470
 800888c:	40020488 	.word	0x40020488
 8008890:	400204a0 	.word	0x400204a0
 8008894:	400204b8 	.word	0x400204b8
 8008898:	58025408 	.word	0x58025408
 800889c:	5802541c 	.word	0x5802541c
 80088a0:	58025430 	.word	0x58025430
 80088a4:	58025444 	.word	0x58025444
 80088a8:	58025458 	.word	0x58025458
 80088ac:	5802546c 	.word	0x5802546c
 80088b0:	58025480 	.word	0x58025480
 80088b4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	f003 0320 	and.w	r3, r3, #32
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d160      	bne.n	8008984 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a7f      	ldr	r2, [pc, #508]	@ (8008ac4 <HAL_DMA_IRQHandler+0xc74>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d04a      	beq.n	8008962 <HAL_DMA_IRQHandler+0xb12>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a7d      	ldr	r2, [pc, #500]	@ (8008ac8 <HAL_DMA_IRQHandler+0xc78>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d045      	beq.n	8008962 <HAL_DMA_IRQHandler+0xb12>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a7c      	ldr	r2, [pc, #496]	@ (8008acc <HAL_DMA_IRQHandler+0xc7c>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d040      	beq.n	8008962 <HAL_DMA_IRQHandler+0xb12>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a7a      	ldr	r2, [pc, #488]	@ (8008ad0 <HAL_DMA_IRQHandler+0xc80>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d03b      	beq.n	8008962 <HAL_DMA_IRQHandler+0xb12>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a79      	ldr	r2, [pc, #484]	@ (8008ad4 <HAL_DMA_IRQHandler+0xc84>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d036      	beq.n	8008962 <HAL_DMA_IRQHandler+0xb12>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a77      	ldr	r2, [pc, #476]	@ (8008ad8 <HAL_DMA_IRQHandler+0xc88>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d031      	beq.n	8008962 <HAL_DMA_IRQHandler+0xb12>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a76      	ldr	r2, [pc, #472]	@ (8008adc <HAL_DMA_IRQHandler+0xc8c>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d02c      	beq.n	8008962 <HAL_DMA_IRQHandler+0xb12>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a74      	ldr	r2, [pc, #464]	@ (8008ae0 <HAL_DMA_IRQHandler+0xc90>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d027      	beq.n	8008962 <HAL_DMA_IRQHandler+0xb12>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a73      	ldr	r2, [pc, #460]	@ (8008ae4 <HAL_DMA_IRQHandler+0xc94>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d022      	beq.n	8008962 <HAL_DMA_IRQHandler+0xb12>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a71      	ldr	r2, [pc, #452]	@ (8008ae8 <HAL_DMA_IRQHandler+0xc98>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d01d      	beq.n	8008962 <HAL_DMA_IRQHandler+0xb12>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a70      	ldr	r2, [pc, #448]	@ (8008aec <HAL_DMA_IRQHandler+0xc9c>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d018      	beq.n	8008962 <HAL_DMA_IRQHandler+0xb12>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a6e      	ldr	r2, [pc, #440]	@ (8008af0 <HAL_DMA_IRQHandler+0xca0>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d013      	beq.n	8008962 <HAL_DMA_IRQHandler+0xb12>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a6d      	ldr	r2, [pc, #436]	@ (8008af4 <HAL_DMA_IRQHandler+0xca4>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d00e      	beq.n	8008962 <HAL_DMA_IRQHandler+0xb12>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a6b      	ldr	r2, [pc, #428]	@ (8008af8 <HAL_DMA_IRQHandler+0xca8>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d009      	beq.n	8008962 <HAL_DMA_IRQHandler+0xb12>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a6a      	ldr	r2, [pc, #424]	@ (8008afc <HAL_DMA_IRQHandler+0xcac>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d004      	beq.n	8008962 <HAL_DMA_IRQHandler+0xb12>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a68      	ldr	r2, [pc, #416]	@ (8008b00 <HAL_DMA_IRQHandler+0xcb0>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d108      	bne.n	8008974 <HAL_DMA_IRQHandler+0xb24>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f022 0208 	bic.w	r2, r2, #8
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	e007      	b.n	8008984 <HAL_DMA_IRQHandler+0xb34>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f022 0204 	bic.w	r2, r2, #4
 8008982:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 8165 	beq.w	8008c58 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008996:	e15f      	b.n	8008c58 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800899c:	f003 031f 	and.w	r3, r3, #31
 80089a0:	2202      	movs	r2, #2
 80089a2:	409a      	lsls	r2, r3
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	4013      	ands	r3, r2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 80c5 	beq.w	8008b38 <HAL_DMA_IRQHandler+0xce8>
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 80bf 	beq.w	8008b38 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089be:	f003 031f 	and.w	r3, r3, #31
 80089c2:	2202      	movs	r2, #2
 80089c4:	409a      	lsls	r2, r3
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d018      	beq.n	8008a06 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d109      	bne.n	80089f2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f000 813a 	beq.w	8008c5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80089f0:	e134      	b.n	8008c5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 8130 	beq.w	8008c5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a04:	e12a      	b.n	8008c5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	f003 0320 	and.w	r3, r3, #32
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f040 8089 	bne.w	8008b24 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a2b      	ldr	r2, [pc, #172]	@ (8008ac4 <HAL_DMA_IRQHandler+0xc74>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d04a      	beq.n	8008ab2 <HAL_DMA_IRQHandler+0xc62>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a29      	ldr	r2, [pc, #164]	@ (8008ac8 <HAL_DMA_IRQHandler+0xc78>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d045      	beq.n	8008ab2 <HAL_DMA_IRQHandler+0xc62>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a28      	ldr	r2, [pc, #160]	@ (8008acc <HAL_DMA_IRQHandler+0xc7c>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d040      	beq.n	8008ab2 <HAL_DMA_IRQHandler+0xc62>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a26      	ldr	r2, [pc, #152]	@ (8008ad0 <HAL_DMA_IRQHandler+0xc80>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d03b      	beq.n	8008ab2 <HAL_DMA_IRQHandler+0xc62>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a25      	ldr	r2, [pc, #148]	@ (8008ad4 <HAL_DMA_IRQHandler+0xc84>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d036      	beq.n	8008ab2 <HAL_DMA_IRQHandler+0xc62>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a23      	ldr	r2, [pc, #140]	@ (8008ad8 <HAL_DMA_IRQHandler+0xc88>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d031      	beq.n	8008ab2 <HAL_DMA_IRQHandler+0xc62>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a22      	ldr	r2, [pc, #136]	@ (8008adc <HAL_DMA_IRQHandler+0xc8c>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d02c      	beq.n	8008ab2 <HAL_DMA_IRQHandler+0xc62>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a20      	ldr	r2, [pc, #128]	@ (8008ae0 <HAL_DMA_IRQHandler+0xc90>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d027      	beq.n	8008ab2 <HAL_DMA_IRQHandler+0xc62>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a1f      	ldr	r2, [pc, #124]	@ (8008ae4 <HAL_DMA_IRQHandler+0xc94>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d022      	beq.n	8008ab2 <HAL_DMA_IRQHandler+0xc62>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a1d      	ldr	r2, [pc, #116]	@ (8008ae8 <HAL_DMA_IRQHandler+0xc98>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d01d      	beq.n	8008ab2 <HAL_DMA_IRQHandler+0xc62>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8008aec <HAL_DMA_IRQHandler+0xc9c>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d018      	beq.n	8008ab2 <HAL_DMA_IRQHandler+0xc62>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a1a      	ldr	r2, [pc, #104]	@ (8008af0 <HAL_DMA_IRQHandler+0xca0>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d013      	beq.n	8008ab2 <HAL_DMA_IRQHandler+0xc62>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a19      	ldr	r2, [pc, #100]	@ (8008af4 <HAL_DMA_IRQHandler+0xca4>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d00e      	beq.n	8008ab2 <HAL_DMA_IRQHandler+0xc62>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a17      	ldr	r2, [pc, #92]	@ (8008af8 <HAL_DMA_IRQHandler+0xca8>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d009      	beq.n	8008ab2 <HAL_DMA_IRQHandler+0xc62>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a16      	ldr	r2, [pc, #88]	@ (8008afc <HAL_DMA_IRQHandler+0xcac>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d004      	beq.n	8008ab2 <HAL_DMA_IRQHandler+0xc62>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a14      	ldr	r2, [pc, #80]	@ (8008b00 <HAL_DMA_IRQHandler+0xcb0>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d128      	bne.n	8008b04 <HAL_DMA_IRQHandler+0xcb4>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f022 0214 	bic.w	r2, r2, #20
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	e027      	b.n	8008b14 <HAL_DMA_IRQHandler+0xcc4>
 8008ac4:	40020010 	.word	0x40020010
 8008ac8:	40020028 	.word	0x40020028
 8008acc:	40020040 	.word	0x40020040
 8008ad0:	40020058 	.word	0x40020058
 8008ad4:	40020070 	.word	0x40020070
 8008ad8:	40020088 	.word	0x40020088
 8008adc:	400200a0 	.word	0x400200a0
 8008ae0:	400200b8 	.word	0x400200b8
 8008ae4:	40020410 	.word	0x40020410
 8008ae8:	40020428 	.word	0x40020428
 8008aec:	40020440 	.word	0x40020440
 8008af0:	40020458 	.word	0x40020458
 8008af4:	40020470 	.word	0x40020470
 8008af8:	40020488 	.word	0x40020488
 8008afc:	400204a0 	.word	0x400204a0
 8008b00:	400204b8 	.word	0x400204b8
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f022 020a 	bic.w	r2, r2, #10
 8008b12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 8097 	beq.w	8008c5c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b36:	e091      	b.n	8008c5c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b3c:	f003 031f 	and.w	r3, r3, #31
 8008b40:	2208      	movs	r2, #8
 8008b42:	409a      	lsls	r2, r3
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	4013      	ands	r3, r2
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f000 8088 	beq.w	8008c5e <HAL_DMA_IRQHandler+0xe0e>
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f003 0308 	and.w	r3, r3, #8
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 8082 	beq.w	8008c5e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a41      	ldr	r2, [pc, #260]	@ (8008c64 <HAL_DMA_IRQHandler+0xe14>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d04a      	beq.n	8008bfa <HAL_DMA_IRQHandler+0xdaa>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a3f      	ldr	r2, [pc, #252]	@ (8008c68 <HAL_DMA_IRQHandler+0xe18>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d045      	beq.n	8008bfa <HAL_DMA_IRQHandler+0xdaa>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a3e      	ldr	r2, [pc, #248]	@ (8008c6c <HAL_DMA_IRQHandler+0xe1c>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d040      	beq.n	8008bfa <HAL_DMA_IRQHandler+0xdaa>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a3c      	ldr	r2, [pc, #240]	@ (8008c70 <HAL_DMA_IRQHandler+0xe20>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d03b      	beq.n	8008bfa <HAL_DMA_IRQHandler+0xdaa>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a3b      	ldr	r2, [pc, #236]	@ (8008c74 <HAL_DMA_IRQHandler+0xe24>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d036      	beq.n	8008bfa <HAL_DMA_IRQHandler+0xdaa>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a39      	ldr	r2, [pc, #228]	@ (8008c78 <HAL_DMA_IRQHandler+0xe28>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d031      	beq.n	8008bfa <HAL_DMA_IRQHandler+0xdaa>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a38      	ldr	r2, [pc, #224]	@ (8008c7c <HAL_DMA_IRQHandler+0xe2c>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d02c      	beq.n	8008bfa <HAL_DMA_IRQHandler+0xdaa>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a36      	ldr	r2, [pc, #216]	@ (8008c80 <HAL_DMA_IRQHandler+0xe30>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d027      	beq.n	8008bfa <HAL_DMA_IRQHandler+0xdaa>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a35      	ldr	r2, [pc, #212]	@ (8008c84 <HAL_DMA_IRQHandler+0xe34>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d022      	beq.n	8008bfa <HAL_DMA_IRQHandler+0xdaa>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a33      	ldr	r2, [pc, #204]	@ (8008c88 <HAL_DMA_IRQHandler+0xe38>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d01d      	beq.n	8008bfa <HAL_DMA_IRQHandler+0xdaa>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a32      	ldr	r2, [pc, #200]	@ (8008c8c <HAL_DMA_IRQHandler+0xe3c>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d018      	beq.n	8008bfa <HAL_DMA_IRQHandler+0xdaa>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a30      	ldr	r2, [pc, #192]	@ (8008c90 <HAL_DMA_IRQHandler+0xe40>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d013      	beq.n	8008bfa <HAL_DMA_IRQHandler+0xdaa>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8008c94 <HAL_DMA_IRQHandler+0xe44>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d00e      	beq.n	8008bfa <HAL_DMA_IRQHandler+0xdaa>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a2d      	ldr	r2, [pc, #180]	@ (8008c98 <HAL_DMA_IRQHandler+0xe48>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d009      	beq.n	8008bfa <HAL_DMA_IRQHandler+0xdaa>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a2c      	ldr	r2, [pc, #176]	@ (8008c9c <HAL_DMA_IRQHandler+0xe4c>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d004      	beq.n	8008bfa <HAL_DMA_IRQHandler+0xdaa>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a2a      	ldr	r2, [pc, #168]	@ (8008ca0 <HAL_DMA_IRQHandler+0xe50>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d108      	bne.n	8008c0c <HAL_DMA_IRQHandler+0xdbc>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f022 021c 	bic.w	r2, r2, #28
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	e007      	b.n	8008c1c <HAL_DMA_IRQHandler+0xdcc>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f022 020e 	bic.w	r2, r2, #14
 8008c1a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c20:	f003 031f 	and.w	r3, r3, #31
 8008c24:	2201      	movs	r2, #1
 8008c26:	409a      	lsls	r2, r3
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d009      	beq.n	8008c5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	4798      	blx	r3
 8008c52:	e004      	b.n	8008c5e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008c54:	bf00      	nop
 8008c56:	e002      	b.n	8008c5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c58:	bf00      	nop
 8008c5a:	e000      	b.n	8008c5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c5c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008c5e:	3728      	adds	r7, #40	@ 0x28
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	40020010 	.word	0x40020010
 8008c68:	40020028 	.word	0x40020028
 8008c6c:	40020040 	.word	0x40020040
 8008c70:	40020058 	.word	0x40020058
 8008c74:	40020070 	.word	0x40020070
 8008c78:	40020088 	.word	0x40020088
 8008c7c:	400200a0 	.word	0x400200a0
 8008c80:	400200b8 	.word	0x400200b8
 8008c84:	40020410 	.word	0x40020410
 8008c88:	40020428 	.word	0x40020428
 8008c8c:	40020440 	.word	0x40020440
 8008c90:	40020458 	.word	0x40020458
 8008c94:	40020470 	.word	0x40020470
 8008c98:	40020488 	.word	0x40020488
 8008c9c:	400204a0 	.word	0x400204a0
 8008ca0:	400204b8 	.word	0x400204b8

08008ca4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008cb2:	b2db      	uxtb	r3, r3
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
 8008ccc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cd2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cd8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a7f      	ldr	r2, [pc, #508]	@ (8008edc <DMA_SetConfig+0x21c>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d072      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a7d      	ldr	r2, [pc, #500]	@ (8008ee0 <DMA_SetConfig+0x220>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d06d      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a7c      	ldr	r2, [pc, #496]	@ (8008ee4 <DMA_SetConfig+0x224>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d068      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a7a      	ldr	r2, [pc, #488]	@ (8008ee8 <DMA_SetConfig+0x228>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d063      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a79      	ldr	r2, [pc, #484]	@ (8008eec <DMA_SetConfig+0x22c>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d05e      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a77      	ldr	r2, [pc, #476]	@ (8008ef0 <DMA_SetConfig+0x230>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d059      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a76      	ldr	r2, [pc, #472]	@ (8008ef4 <DMA_SetConfig+0x234>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d054      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a74      	ldr	r2, [pc, #464]	@ (8008ef8 <DMA_SetConfig+0x238>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d04f      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a73      	ldr	r2, [pc, #460]	@ (8008efc <DMA_SetConfig+0x23c>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d04a      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a71      	ldr	r2, [pc, #452]	@ (8008f00 <DMA_SetConfig+0x240>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d045      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a70      	ldr	r2, [pc, #448]	@ (8008f04 <DMA_SetConfig+0x244>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d040      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a6e      	ldr	r2, [pc, #440]	@ (8008f08 <DMA_SetConfig+0x248>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d03b      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a6d      	ldr	r2, [pc, #436]	@ (8008f0c <DMA_SetConfig+0x24c>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d036      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a6b      	ldr	r2, [pc, #428]	@ (8008f10 <DMA_SetConfig+0x250>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d031      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a6a      	ldr	r2, [pc, #424]	@ (8008f14 <DMA_SetConfig+0x254>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d02c      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a68      	ldr	r2, [pc, #416]	@ (8008f18 <DMA_SetConfig+0x258>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d027      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a67      	ldr	r2, [pc, #412]	@ (8008f1c <DMA_SetConfig+0x25c>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d022      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a65      	ldr	r2, [pc, #404]	@ (8008f20 <DMA_SetConfig+0x260>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d01d      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a64      	ldr	r2, [pc, #400]	@ (8008f24 <DMA_SetConfig+0x264>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d018      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a62      	ldr	r2, [pc, #392]	@ (8008f28 <DMA_SetConfig+0x268>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d013      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a61      	ldr	r2, [pc, #388]	@ (8008f2c <DMA_SetConfig+0x26c>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d00e      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a5f      	ldr	r2, [pc, #380]	@ (8008f30 <DMA_SetConfig+0x270>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d009      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a5e      	ldr	r2, [pc, #376]	@ (8008f34 <DMA_SetConfig+0x274>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d004      	beq.n	8008dca <DMA_SetConfig+0x10a>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a5c      	ldr	r2, [pc, #368]	@ (8008f38 <DMA_SetConfig+0x278>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d101      	bne.n	8008dce <DMA_SetConfig+0x10e>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e000      	b.n	8008dd0 <DMA_SetConfig+0x110>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00d      	beq.n	8008df0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008ddc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d004      	beq.n	8008df0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008dee:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a39      	ldr	r2, [pc, #228]	@ (8008edc <DMA_SetConfig+0x21c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d04a      	beq.n	8008e90 <DMA_SetConfig+0x1d0>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a38      	ldr	r2, [pc, #224]	@ (8008ee0 <DMA_SetConfig+0x220>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d045      	beq.n	8008e90 <DMA_SetConfig+0x1d0>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a36      	ldr	r2, [pc, #216]	@ (8008ee4 <DMA_SetConfig+0x224>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d040      	beq.n	8008e90 <DMA_SetConfig+0x1d0>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a35      	ldr	r2, [pc, #212]	@ (8008ee8 <DMA_SetConfig+0x228>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d03b      	beq.n	8008e90 <DMA_SetConfig+0x1d0>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a33      	ldr	r2, [pc, #204]	@ (8008eec <DMA_SetConfig+0x22c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d036      	beq.n	8008e90 <DMA_SetConfig+0x1d0>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a32      	ldr	r2, [pc, #200]	@ (8008ef0 <DMA_SetConfig+0x230>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d031      	beq.n	8008e90 <DMA_SetConfig+0x1d0>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a30      	ldr	r2, [pc, #192]	@ (8008ef4 <DMA_SetConfig+0x234>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d02c      	beq.n	8008e90 <DMA_SetConfig+0x1d0>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8008ef8 <DMA_SetConfig+0x238>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d027      	beq.n	8008e90 <DMA_SetConfig+0x1d0>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a2d      	ldr	r2, [pc, #180]	@ (8008efc <DMA_SetConfig+0x23c>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d022      	beq.n	8008e90 <DMA_SetConfig+0x1d0>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8008f00 <DMA_SetConfig+0x240>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d01d      	beq.n	8008e90 <DMA_SetConfig+0x1d0>
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a2a      	ldr	r2, [pc, #168]	@ (8008f04 <DMA_SetConfig+0x244>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d018      	beq.n	8008e90 <DMA_SetConfig+0x1d0>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a29      	ldr	r2, [pc, #164]	@ (8008f08 <DMA_SetConfig+0x248>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d013      	beq.n	8008e90 <DMA_SetConfig+0x1d0>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a27      	ldr	r2, [pc, #156]	@ (8008f0c <DMA_SetConfig+0x24c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d00e      	beq.n	8008e90 <DMA_SetConfig+0x1d0>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a26      	ldr	r2, [pc, #152]	@ (8008f10 <DMA_SetConfig+0x250>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d009      	beq.n	8008e90 <DMA_SetConfig+0x1d0>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a24      	ldr	r2, [pc, #144]	@ (8008f14 <DMA_SetConfig+0x254>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d004      	beq.n	8008e90 <DMA_SetConfig+0x1d0>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a23      	ldr	r2, [pc, #140]	@ (8008f18 <DMA_SetConfig+0x258>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d101      	bne.n	8008e94 <DMA_SetConfig+0x1d4>
 8008e90:	2301      	movs	r3, #1
 8008e92:	e000      	b.n	8008e96 <DMA_SetConfig+0x1d6>
 8008e94:	2300      	movs	r3, #0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d059      	beq.n	8008f4e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e9e:	f003 031f 	and.w	r3, r3, #31
 8008ea2:	223f      	movs	r2, #63	@ 0x3f
 8008ea4:	409a      	lsls	r2, r3
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008eb8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	2b40      	cmp	r3, #64	@ 0x40
 8008ec8:	d138      	bne.n	8008f3c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008eda:	e086      	b.n	8008fea <DMA_SetConfig+0x32a>
 8008edc:	40020010 	.word	0x40020010
 8008ee0:	40020028 	.word	0x40020028
 8008ee4:	40020040 	.word	0x40020040
 8008ee8:	40020058 	.word	0x40020058
 8008eec:	40020070 	.word	0x40020070
 8008ef0:	40020088 	.word	0x40020088
 8008ef4:	400200a0 	.word	0x400200a0
 8008ef8:	400200b8 	.word	0x400200b8
 8008efc:	40020410 	.word	0x40020410
 8008f00:	40020428 	.word	0x40020428
 8008f04:	40020440 	.word	0x40020440
 8008f08:	40020458 	.word	0x40020458
 8008f0c:	40020470 	.word	0x40020470
 8008f10:	40020488 	.word	0x40020488
 8008f14:	400204a0 	.word	0x400204a0
 8008f18:	400204b8 	.word	0x400204b8
 8008f1c:	58025408 	.word	0x58025408
 8008f20:	5802541c 	.word	0x5802541c
 8008f24:	58025430 	.word	0x58025430
 8008f28:	58025444 	.word	0x58025444
 8008f2c:	58025458 	.word	0x58025458
 8008f30:	5802546c 	.word	0x5802546c
 8008f34:	58025480 	.word	0x58025480
 8008f38:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	60da      	str	r2, [r3, #12]
}
 8008f4c:	e04d      	b.n	8008fea <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a29      	ldr	r2, [pc, #164]	@ (8008ff8 <DMA_SetConfig+0x338>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d022      	beq.n	8008f9e <DMA_SetConfig+0x2de>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a27      	ldr	r2, [pc, #156]	@ (8008ffc <DMA_SetConfig+0x33c>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d01d      	beq.n	8008f9e <DMA_SetConfig+0x2de>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a26      	ldr	r2, [pc, #152]	@ (8009000 <DMA_SetConfig+0x340>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d018      	beq.n	8008f9e <DMA_SetConfig+0x2de>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a24      	ldr	r2, [pc, #144]	@ (8009004 <DMA_SetConfig+0x344>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d013      	beq.n	8008f9e <DMA_SetConfig+0x2de>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a23      	ldr	r2, [pc, #140]	@ (8009008 <DMA_SetConfig+0x348>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d00e      	beq.n	8008f9e <DMA_SetConfig+0x2de>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a21      	ldr	r2, [pc, #132]	@ (800900c <DMA_SetConfig+0x34c>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d009      	beq.n	8008f9e <DMA_SetConfig+0x2de>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a20      	ldr	r2, [pc, #128]	@ (8009010 <DMA_SetConfig+0x350>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d004      	beq.n	8008f9e <DMA_SetConfig+0x2de>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a1e      	ldr	r2, [pc, #120]	@ (8009014 <DMA_SetConfig+0x354>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d101      	bne.n	8008fa2 <DMA_SetConfig+0x2e2>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e000      	b.n	8008fa4 <DMA_SetConfig+0x2e4>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d020      	beq.n	8008fea <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fac:	f003 031f 	and.w	r3, r3, #31
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	409a      	lsls	r2, r3
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	2b40      	cmp	r3, #64	@ 0x40
 8008fc6:	d108      	bne.n	8008fda <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	60da      	str	r2, [r3, #12]
}
 8008fd8:	e007      	b.n	8008fea <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	60da      	str	r2, [r3, #12]
}
 8008fea:	bf00      	nop
 8008fec:	371c      	adds	r7, #28
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	58025408 	.word	0x58025408
 8008ffc:	5802541c 	.word	0x5802541c
 8009000:	58025430 	.word	0x58025430
 8009004:	58025444 	.word	0x58025444
 8009008:	58025458 	.word	0x58025458
 800900c:	5802546c 	.word	0x5802546c
 8009010:	58025480 	.word	0x58025480
 8009014:	58025494 	.word	0x58025494

08009018 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a42      	ldr	r2, [pc, #264]	@ (8009130 <DMA_CalcBaseAndBitshift+0x118>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d04a      	beq.n	80090c0 <DMA_CalcBaseAndBitshift+0xa8>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a41      	ldr	r2, [pc, #260]	@ (8009134 <DMA_CalcBaseAndBitshift+0x11c>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d045      	beq.n	80090c0 <DMA_CalcBaseAndBitshift+0xa8>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a3f      	ldr	r2, [pc, #252]	@ (8009138 <DMA_CalcBaseAndBitshift+0x120>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d040      	beq.n	80090c0 <DMA_CalcBaseAndBitshift+0xa8>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a3e      	ldr	r2, [pc, #248]	@ (800913c <DMA_CalcBaseAndBitshift+0x124>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d03b      	beq.n	80090c0 <DMA_CalcBaseAndBitshift+0xa8>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a3c      	ldr	r2, [pc, #240]	@ (8009140 <DMA_CalcBaseAndBitshift+0x128>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d036      	beq.n	80090c0 <DMA_CalcBaseAndBitshift+0xa8>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a3b      	ldr	r2, [pc, #236]	@ (8009144 <DMA_CalcBaseAndBitshift+0x12c>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d031      	beq.n	80090c0 <DMA_CalcBaseAndBitshift+0xa8>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a39      	ldr	r2, [pc, #228]	@ (8009148 <DMA_CalcBaseAndBitshift+0x130>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d02c      	beq.n	80090c0 <DMA_CalcBaseAndBitshift+0xa8>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a38      	ldr	r2, [pc, #224]	@ (800914c <DMA_CalcBaseAndBitshift+0x134>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d027      	beq.n	80090c0 <DMA_CalcBaseAndBitshift+0xa8>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a36      	ldr	r2, [pc, #216]	@ (8009150 <DMA_CalcBaseAndBitshift+0x138>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d022      	beq.n	80090c0 <DMA_CalcBaseAndBitshift+0xa8>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a35      	ldr	r2, [pc, #212]	@ (8009154 <DMA_CalcBaseAndBitshift+0x13c>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d01d      	beq.n	80090c0 <DMA_CalcBaseAndBitshift+0xa8>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a33      	ldr	r2, [pc, #204]	@ (8009158 <DMA_CalcBaseAndBitshift+0x140>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d018      	beq.n	80090c0 <DMA_CalcBaseAndBitshift+0xa8>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a32      	ldr	r2, [pc, #200]	@ (800915c <DMA_CalcBaseAndBitshift+0x144>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d013      	beq.n	80090c0 <DMA_CalcBaseAndBitshift+0xa8>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a30      	ldr	r2, [pc, #192]	@ (8009160 <DMA_CalcBaseAndBitshift+0x148>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d00e      	beq.n	80090c0 <DMA_CalcBaseAndBitshift+0xa8>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a2f      	ldr	r2, [pc, #188]	@ (8009164 <DMA_CalcBaseAndBitshift+0x14c>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d009      	beq.n	80090c0 <DMA_CalcBaseAndBitshift+0xa8>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a2d      	ldr	r2, [pc, #180]	@ (8009168 <DMA_CalcBaseAndBitshift+0x150>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d004      	beq.n	80090c0 <DMA_CalcBaseAndBitshift+0xa8>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a2c      	ldr	r2, [pc, #176]	@ (800916c <DMA_CalcBaseAndBitshift+0x154>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d101      	bne.n	80090c4 <DMA_CalcBaseAndBitshift+0xac>
 80090c0:	2301      	movs	r3, #1
 80090c2:	e000      	b.n	80090c6 <DMA_CalcBaseAndBitshift+0xae>
 80090c4:	2300      	movs	r3, #0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d024      	beq.n	8009114 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	3b10      	subs	r3, #16
 80090d2:	4a27      	ldr	r2, [pc, #156]	@ (8009170 <DMA_CalcBaseAndBitshift+0x158>)
 80090d4:	fba2 2303 	umull	r2, r3, r2, r3
 80090d8:	091b      	lsrs	r3, r3, #4
 80090da:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f003 0307 	and.w	r3, r3, #7
 80090e2:	4a24      	ldr	r2, [pc, #144]	@ (8009174 <DMA_CalcBaseAndBitshift+0x15c>)
 80090e4:	5cd3      	ldrb	r3, [r2, r3]
 80090e6:	461a      	mov	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d908      	bls.n	8009104 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	4b1f      	ldr	r3, [pc, #124]	@ (8009178 <DMA_CalcBaseAndBitshift+0x160>)
 80090fa:	4013      	ands	r3, r2
 80090fc:	1d1a      	adds	r2, r3, #4
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	659a      	str	r2, [r3, #88]	@ 0x58
 8009102:	e00d      	b.n	8009120 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	461a      	mov	r2, r3
 800910a:	4b1b      	ldr	r3, [pc, #108]	@ (8009178 <DMA_CalcBaseAndBitshift+0x160>)
 800910c:	4013      	ands	r3, r2
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	6593      	str	r3, [r2, #88]	@ 0x58
 8009112:	e005      	b.n	8009120 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009124:	4618      	mov	r0, r3
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	40020010 	.word	0x40020010
 8009134:	40020028 	.word	0x40020028
 8009138:	40020040 	.word	0x40020040
 800913c:	40020058 	.word	0x40020058
 8009140:	40020070 	.word	0x40020070
 8009144:	40020088 	.word	0x40020088
 8009148:	400200a0 	.word	0x400200a0
 800914c:	400200b8 	.word	0x400200b8
 8009150:	40020410 	.word	0x40020410
 8009154:	40020428 	.word	0x40020428
 8009158:	40020440 	.word	0x40020440
 800915c:	40020458 	.word	0x40020458
 8009160:	40020470 	.word	0x40020470
 8009164:	40020488 	.word	0x40020488
 8009168:	400204a0 	.word	0x400204a0
 800916c:	400204b8 	.word	0x400204b8
 8009170:	aaaaaaab 	.word	0xaaaaaaab
 8009174:	0801c92c 	.word	0x0801c92c
 8009178:	fffffc00 	.word	0xfffffc00

0800917c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d120      	bne.n	80091d2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009194:	2b03      	cmp	r3, #3
 8009196:	d858      	bhi.n	800924a <DMA_CheckFifoParam+0xce>
 8009198:	a201      	add	r2, pc, #4	@ (adr r2, 80091a0 <DMA_CheckFifoParam+0x24>)
 800919a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919e:	bf00      	nop
 80091a0:	080091b1 	.word	0x080091b1
 80091a4:	080091c3 	.word	0x080091c3
 80091a8:	080091b1 	.word	0x080091b1
 80091ac:	0800924b 	.word	0x0800924b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d048      	beq.n	800924e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80091c0:	e045      	b.n	800924e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80091ca:	d142      	bne.n	8009252 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80091d0:	e03f      	b.n	8009252 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091da:	d123      	bne.n	8009224 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e0:	2b03      	cmp	r3, #3
 80091e2:	d838      	bhi.n	8009256 <DMA_CheckFifoParam+0xda>
 80091e4:	a201      	add	r2, pc, #4	@ (adr r2, 80091ec <DMA_CheckFifoParam+0x70>)
 80091e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ea:	bf00      	nop
 80091ec:	080091fd 	.word	0x080091fd
 80091f0:	08009203 	.word	0x08009203
 80091f4:	080091fd 	.word	0x080091fd
 80091f8:	08009215 	.word	0x08009215
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	73fb      	strb	r3, [r7, #15]
        break;
 8009200:	e030      	b.n	8009264 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009206:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800920a:	2b00      	cmp	r3, #0
 800920c:	d025      	beq.n	800925a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009212:	e022      	b.n	800925a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009218:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800921c:	d11f      	bne.n	800925e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009222:	e01c      	b.n	800925e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009228:	2b02      	cmp	r3, #2
 800922a:	d902      	bls.n	8009232 <DMA_CheckFifoParam+0xb6>
 800922c:	2b03      	cmp	r3, #3
 800922e:	d003      	beq.n	8009238 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009230:	e018      	b.n	8009264 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	73fb      	strb	r3, [r7, #15]
        break;
 8009236:	e015      	b.n	8009264 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00e      	beq.n	8009262 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	73fb      	strb	r3, [r7, #15]
    break;
 8009248:	e00b      	b.n	8009262 <DMA_CheckFifoParam+0xe6>
        break;
 800924a:	bf00      	nop
 800924c:	e00a      	b.n	8009264 <DMA_CheckFifoParam+0xe8>
        break;
 800924e:	bf00      	nop
 8009250:	e008      	b.n	8009264 <DMA_CheckFifoParam+0xe8>
        break;
 8009252:	bf00      	nop
 8009254:	e006      	b.n	8009264 <DMA_CheckFifoParam+0xe8>
        break;
 8009256:	bf00      	nop
 8009258:	e004      	b.n	8009264 <DMA_CheckFifoParam+0xe8>
        break;
 800925a:	bf00      	nop
 800925c:	e002      	b.n	8009264 <DMA_CheckFifoParam+0xe8>
        break;
 800925e:	bf00      	nop
 8009260:	e000      	b.n	8009264 <DMA_CheckFifoParam+0xe8>
    break;
 8009262:	bf00      	nop
    }
  }

  return status;
 8009264:	7bfb      	ldrb	r3, [r7, #15]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop

08009274 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a38      	ldr	r2, [pc, #224]	@ (8009368 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d022      	beq.n	80092d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a36      	ldr	r2, [pc, #216]	@ (800936c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d01d      	beq.n	80092d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a35      	ldr	r2, [pc, #212]	@ (8009370 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d018      	beq.n	80092d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a33      	ldr	r2, [pc, #204]	@ (8009374 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d013      	beq.n	80092d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a32      	ldr	r2, [pc, #200]	@ (8009378 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d00e      	beq.n	80092d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a30      	ldr	r2, [pc, #192]	@ (800937c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d009      	beq.n	80092d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a2f      	ldr	r2, [pc, #188]	@ (8009380 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d004      	beq.n	80092d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a2d      	ldr	r2, [pc, #180]	@ (8009384 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d101      	bne.n	80092d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80092d2:	2301      	movs	r3, #1
 80092d4:	e000      	b.n	80092d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80092d6:	2300      	movs	r3, #0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d01a      	beq.n	8009312 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	3b08      	subs	r3, #8
 80092e4:	4a28      	ldr	r2, [pc, #160]	@ (8009388 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80092e6:	fba2 2303 	umull	r2, r3, r2, r3
 80092ea:	091b      	lsrs	r3, r3, #4
 80092ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	4b26      	ldr	r3, [pc, #152]	@ (800938c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80092f2:	4413      	add	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	461a      	mov	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a24      	ldr	r2, [pc, #144]	@ (8009390 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009300:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f003 031f 	and.w	r3, r3, #31
 8009308:	2201      	movs	r2, #1
 800930a:	409a      	lsls	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009310:	e024      	b.n	800935c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	b2db      	uxtb	r3, r3
 8009318:	3b10      	subs	r3, #16
 800931a:	4a1e      	ldr	r2, [pc, #120]	@ (8009394 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800931c:	fba2 2303 	umull	r2, r3, r2, r3
 8009320:	091b      	lsrs	r3, r3, #4
 8009322:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	4a1c      	ldr	r2, [pc, #112]	@ (8009398 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d806      	bhi.n	800933a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	4a1b      	ldr	r2, [pc, #108]	@ (800939c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d902      	bls.n	800933a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	3308      	adds	r3, #8
 8009338:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	4b18      	ldr	r3, [pc, #96]	@ (80093a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800933e:	4413      	add	r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	461a      	mov	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a16      	ldr	r2, [pc, #88]	@ (80093a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800934c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f003 031f 	and.w	r3, r3, #31
 8009354:	2201      	movs	r2, #1
 8009356:	409a      	lsls	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800935c:	bf00      	nop
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	58025408 	.word	0x58025408
 800936c:	5802541c 	.word	0x5802541c
 8009370:	58025430 	.word	0x58025430
 8009374:	58025444 	.word	0x58025444
 8009378:	58025458 	.word	0x58025458
 800937c:	5802546c 	.word	0x5802546c
 8009380:	58025480 	.word	0x58025480
 8009384:	58025494 	.word	0x58025494
 8009388:	cccccccd 	.word	0xcccccccd
 800938c:	16009600 	.word	0x16009600
 8009390:	58025880 	.word	0x58025880
 8009394:	aaaaaaab 	.word	0xaaaaaaab
 8009398:	400204b8 	.word	0x400204b8
 800939c:	4002040f 	.word	0x4002040f
 80093a0:	10008200 	.word	0x10008200
 80093a4:	40020880 	.word	0x40020880

080093a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d04a      	beq.n	8009454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2b08      	cmp	r3, #8
 80093c2:	d847      	bhi.n	8009454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a25      	ldr	r2, [pc, #148]	@ (8009460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d022      	beq.n	8009414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a24      	ldr	r2, [pc, #144]	@ (8009464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d01d      	beq.n	8009414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a22      	ldr	r2, [pc, #136]	@ (8009468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d018      	beq.n	8009414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a21      	ldr	r2, [pc, #132]	@ (800946c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d013      	beq.n	8009414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a1f      	ldr	r2, [pc, #124]	@ (8009470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d00e      	beq.n	8009414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d009      	beq.n	8009414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a1c      	ldr	r2, [pc, #112]	@ (8009478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d004      	beq.n	8009414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a1b      	ldr	r2, [pc, #108]	@ (800947c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d101      	bne.n	8009418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009414:	2301      	movs	r3, #1
 8009416:	e000      	b.n	800941a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009418:	2300      	movs	r3, #0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00a      	beq.n	8009434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	4b17      	ldr	r3, [pc, #92]	@ (8009480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	461a      	mov	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a15      	ldr	r2, [pc, #84]	@ (8009484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009430:	671a      	str	r2, [r3, #112]	@ 0x70
 8009432:	e009      	b.n	8009448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	4b14      	ldr	r3, [pc, #80]	@ (8009488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009438:	4413      	add	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	461a      	mov	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a11      	ldr	r2, [pc, #68]	@ (800948c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009446:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	3b01      	subs	r3, #1
 800944c:	2201      	movs	r2, #1
 800944e:	409a      	lsls	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009454:	bf00      	nop
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	58025408 	.word	0x58025408
 8009464:	5802541c 	.word	0x5802541c
 8009468:	58025430 	.word	0x58025430
 800946c:	58025444 	.word	0x58025444
 8009470:	58025458 	.word	0x58025458
 8009474:	5802546c 	.word	0x5802546c
 8009478:	58025480 	.word	0x58025480
 800947c:	58025494 	.word	0x58025494
 8009480:	1600963f 	.word	0x1600963f
 8009484:	58025940 	.word	0x58025940
 8009488:	1000823f 	.word	0x1000823f
 800948c:	40020940 	.word	0x40020940

08009490 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8009490:	b480      	push	{r7}
 8009492:	b089      	sub	sp, #36	@ 0x24
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800949a:	2300      	movs	r3, #0
 800949c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800949e:	4b86      	ldr	r3, [pc, #536]	@ (80096b8 <HAL_GPIO_Init+0x228>)
 80094a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80094a2:	e18c      	b.n	80097be <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	2101      	movs	r1, #1
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	fa01 f303 	lsl.w	r3, r1, r3
 80094b0:	4013      	ands	r3, r2
 80094b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f000 817e 	beq.w	80097b8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	f003 0303 	and.w	r3, r3, #3
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d005      	beq.n	80094d4 <HAL_GPIO_Init+0x44>
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	f003 0303 	and.w	r3, r3, #3
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d130      	bne.n	8009536 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	005b      	lsls	r3, r3, #1
 80094de:	2203      	movs	r2, #3
 80094e0:	fa02 f303 	lsl.w	r3, r2, r3
 80094e4:	43db      	mvns	r3, r3
 80094e6:	69ba      	ldr	r2, [r7, #24]
 80094e8:	4013      	ands	r3, r2
 80094ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	68da      	ldr	r2, [r3, #12]
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	005b      	lsls	r3, r3, #1
 80094f4:	fa02 f303 	lsl.w	r3, r2, r3
 80094f8:	69ba      	ldr	r2, [r7, #24]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800950a:	2201      	movs	r2, #1
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	fa02 f303 	lsl.w	r3, r2, r3
 8009512:	43db      	mvns	r3, r3
 8009514:	69ba      	ldr	r2, [r7, #24]
 8009516:	4013      	ands	r3, r2
 8009518:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	091b      	lsrs	r3, r3, #4
 8009520:	f003 0201 	and.w	r2, r3, #1
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	fa02 f303 	lsl.w	r3, r2, r3
 800952a:	69ba      	ldr	r2, [r7, #24]
 800952c:	4313      	orrs	r3, r2
 800952e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	69ba      	ldr	r2, [r7, #24]
 8009534:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	f003 0303 	and.w	r3, r3, #3
 800953e:	2b03      	cmp	r3, #3
 8009540:	d017      	beq.n	8009572 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	005b      	lsls	r3, r3, #1
 800954c:	2203      	movs	r2, #3
 800954e:	fa02 f303 	lsl.w	r3, r2, r3
 8009552:	43db      	mvns	r3, r3
 8009554:	69ba      	ldr	r2, [r7, #24]
 8009556:	4013      	ands	r3, r2
 8009558:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	689a      	ldr	r2, [r3, #8]
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	005b      	lsls	r3, r3, #1
 8009562:	fa02 f303 	lsl.w	r3, r2, r3
 8009566:	69ba      	ldr	r2, [r7, #24]
 8009568:	4313      	orrs	r3, r2
 800956a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	69ba      	ldr	r2, [r7, #24]
 8009570:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	f003 0303 	and.w	r3, r3, #3
 800957a:	2b02      	cmp	r3, #2
 800957c:	d123      	bne.n	80095c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	08da      	lsrs	r2, r3, #3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	3208      	adds	r2, #8
 8009586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800958a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	f003 0307 	and.w	r3, r3, #7
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	220f      	movs	r2, #15
 8009596:	fa02 f303 	lsl.w	r3, r2, r3
 800959a:	43db      	mvns	r3, r3
 800959c:	69ba      	ldr	r2, [r7, #24]
 800959e:	4013      	ands	r3, r2
 80095a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	691a      	ldr	r2, [r3, #16]
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	f003 0307 	and.w	r3, r3, #7
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	fa02 f303 	lsl.w	r3, r2, r3
 80095b2:	69ba      	ldr	r2, [r7, #24]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	08da      	lsrs	r2, r3, #3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	3208      	adds	r2, #8
 80095c0:	69b9      	ldr	r1, [r7, #24]
 80095c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	005b      	lsls	r3, r3, #1
 80095d0:	2203      	movs	r2, #3
 80095d2:	fa02 f303 	lsl.w	r3, r2, r3
 80095d6:	43db      	mvns	r3, r3
 80095d8:	69ba      	ldr	r2, [r7, #24]
 80095da:	4013      	ands	r3, r2
 80095dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	f003 0203 	and.w	r2, r3, #3
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	fa02 f303 	lsl.w	r3, r2, r3
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	69ba      	ldr	r2, [r7, #24]
 80095f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 80d8 	beq.w	80097b8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009608:	4b2c      	ldr	r3, [pc, #176]	@ (80096bc <HAL_GPIO_Init+0x22c>)
 800960a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800960e:	4a2b      	ldr	r2, [pc, #172]	@ (80096bc <HAL_GPIO_Init+0x22c>)
 8009610:	f043 0302 	orr.w	r3, r3, #2
 8009614:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009618:	4b28      	ldr	r3, [pc, #160]	@ (80096bc <HAL_GPIO_Init+0x22c>)
 800961a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800961e:	f003 0302 	and.w	r3, r3, #2
 8009622:	60fb      	str	r3, [r7, #12]
 8009624:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009626:	4a26      	ldr	r2, [pc, #152]	@ (80096c0 <HAL_GPIO_Init+0x230>)
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	089b      	lsrs	r3, r3, #2
 800962c:	3302      	adds	r3, #2
 800962e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	f003 0303 	and.w	r3, r3, #3
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	220f      	movs	r2, #15
 800963e:	fa02 f303 	lsl.w	r3, r2, r3
 8009642:	43db      	mvns	r3, r3
 8009644:	69ba      	ldr	r2, [r7, #24]
 8009646:	4013      	ands	r3, r2
 8009648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a1d      	ldr	r2, [pc, #116]	@ (80096c4 <HAL_GPIO_Init+0x234>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d04a      	beq.n	80096e8 <HAL_GPIO_Init+0x258>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a1c      	ldr	r2, [pc, #112]	@ (80096c8 <HAL_GPIO_Init+0x238>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d02b      	beq.n	80096b2 <HAL_GPIO_Init+0x222>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a1b      	ldr	r2, [pc, #108]	@ (80096cc <HAL_GPIO_Init+0x23c>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d025      	beq.n	80096ae <HAL_GPIO_Init+0x21e>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a1a      	ldr	r2, [pc, #104]	@ (80096d0 <HAL_GPIO_Init+0x240>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d01f      	beq.n	80096aa <HAL_GPIO_Init+0x21a>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a19      	ldr	r2, [pc, #100]	@ (80096d4 <HAL_GPIO_Init+0x244>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d019      	beq.n	80096a6 <HAL_GPIO_Init+0x216>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a18      	ldr	r2, [pc, #96]	@ (80096d8 <HAL_GPIO_Init+0x248>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d013      	beq.n	80096a2 <HAL_GPIO_Init+0x212>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a17      	ldr	r2, [pc, #92]	@ (80096dc <HAL_GPIO_Init+0x24c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d00d      	beq.n	800969e <HAL_GPIO_Init+0x20e>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a16      	ldr	r2, [pc, #88]	@ (80096e0 <HAL_GPIO_Init+0x250>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d007      	beq.n	800969a <HAL_GPIO_Init+0x20a>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a15      	ldr	r2, [pc, #84]	@ (80096e4 <HAL_GPIO_Init+0x254>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d101      	bne.n	8009696 <HAL_GPIO_Init+0x206>
 8009692:	2309      	movs	r3, #9
 8009694:	e029      	b.n	80096ea <HAL_GPIO_Init+0x25a>
 8009696:	230a      	movs	r3, #10
 8009698:	e027      	b.n	80096ea <HAL_GPIO_Init+0x25a>
 800969a:	2307      	movs	r3, #7
 800969c:	e025      	b.n	80096ea <HAL_GPIO_Init+0x25a>
 800969e:	2306      	movs	r3, #6
 80096a0:	e023      	b.n	80096ea <HAL_GPIO_Init+0x25a>
 80096a2:	2305      	movs	r3, #5
 80096a4:	e021      	b.n	80096ea <HAL_GPIO_Init+0x25a>
 80096a6:	2304      	movs	r3, #4
 80096a8:	e01f      	b.n	80096ea <HAL_GPIO_Init+0x25a>
 80096aa:	2303      	movs	r3, #3
 80096ac:	e01d      	b.n	80096ea <HAL_GPIO_Init+0x25a>
 80096ae:	2302      	movs	r3, #2
 80096b0:	e01b      	b.n	80096ea <HAL_GPIO_Init+0x25a>
 80096b2:	2301      	movs	r3, #1
 80096b4:	e019      	b.n	80096ea <HAL_GPIO_Init+0x25a>
 80096b6:	bf00      	nop
 80096b8:	58000080 	.word	0x58000080
 80096bc:	58024400 	.word	0x58024400
 80096c0:	58000400 	.word	0x58000400
 80096c4:	58020000 	.word	0x58020000
 80096c8:	58020400 	.word	0x58020400
 80096cc:	58020800 	.word	0x58020800
 80096d0:	58020c00 	.word	0x58020c00
 80096d4:	58021000 	.word	0x58021000
 80096d8:	58021400 	.word	0x58021400
 80096dc:	58021800 	.word	0x58021800
 80096e0:	58021c00 	.word	0x58021c00
 80096e4:	58022400 	.word	0x58022400
 80096e8:	2300      	movs	r3, #0
 80096ea:	69fa      	ldr	r2, [r7, #28]
 80096ec:	f002 0203 	and.w	r2, r2, #3
 80096f0:	0092      	lsls	r2, r2, #2
 80096f2:	4093      	lsls	r3, r2
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80096fa:	4938      	ldr	r1, [pc, #224]	@ (80097dc <HAL_GPIO_Init+0x34c>)
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	089b      	lsrs	r3, r3, #2
 8009700:	3302      	adds	r3, #2
 8009702:	69ba      	ldr	r2, [r7, #24]
 8009704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	43db      	mvns	r3, r3
 8009714:	69ba      	ldr	r2, [r7, #24]
 8009716:	4013      	ands	r3, r2
 8009718:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009722:	2b00      	cmp	r3, #0
 8009724:	d003      	beq.n	800972e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009726:	69ba      	ldr	r2, [r7, #24]
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	4313      	orrs	r3, r2
 800972c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800972e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	43db      	mvns	r3, r3
 8009742:	69ba      	ldr	r2, [r7, #24]
 8009744:	4013      	ands	r3, r2
 8009746:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d003      	beq.n	800975c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009754:	69ba      	ldr	r2, [r7, #24]
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	4313      	orrs	r3, r2
 800975a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800975c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	43db      	mvns	r3, r3
 800976e:	69ba      	ldr	r2, [r7, #24]
 8009770:	4013      	ands	r3, r2
 8009772:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d003      	beq.n	8009788 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009780:	69ba      	ldr	r2, [r7, #24]
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	4313      	orrs	r3, r2
 8009786:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	69ba      	ldr	r2, [r7, #24]
 800978c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	43db      	mvns	r3, r3
 8009798:	69ba      	ldr	r2, [r7, #24]
 800979a:	4013      	ands	r3, r2
 800979c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80097aa:	69ba      	ldr	r2, [r7, #24]
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	69ba      	ldr	r2, [r7, #24]
 80097b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	3301      	adds	r3, #1
 80097bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	fa22 f303 	lsr.w	r3, r2, r3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f47f ae6b 	bne.w	80094a4 <HAL_GPIO_Init+0x14>
  }
}
 80097ce:	bf00      	nop
 80097d0:	bf00      	nop
 80097d2:	3724      	adds	r7, #36	@ 0x24
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	58000400 	.word	0x58000400

080097e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	460b      	mov	r3, r1
 80097ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	691a      	ldr	r2, [r3, #16]
 80097f0:	887b      	ldrh	r3, [r7, #2]
 80097f2:	4013      	ands	r3, r2
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d002      	beq.n	80097fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80097f8:	2301      	movs	r3, #1
 80097fa:	73fb      	strb	r3, [r7, #15]
 80097fc:	e001      	b.n	8009802 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80097fe:	2300      	movs	r3, #0
 8009800:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009802:	7bfb      	ldrb	r3, [r7, #15]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	807b      	strh	r3, [r7, #2]
 800981c:	4613      	mov	r3, r2
 800981e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009820:	787b      	ldrb	r3, [r7, #1]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d003      	beq.n	800982e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009826:	887a      	ldrh	r2, [r7, #2]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800982c:	e003      	b.n	8009836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800982e:	887b      	ldrh	r3, [r7, #2]
 8009830:	041a      	lsls	r2, r3, #16
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	619a      	str	r2, [r3, #24]
}
 8009836:	bf00      	nop
 8009838:	370c      	adds	r7, #12
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr

08009842 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b082      	sub	sp, #8
 8009846:	af00      	add	r7, sp, #0
 8009848:	4603      	mov	r3, r0
 800984a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800984c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009850:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009854:	88fb      	ldrh	r3, [r7, #6]
 8009856:	4013      	ands	r3, r2
 8009858:	2b00      	cmp	r3, #0
 800985a:	d008      	beq.n	800986e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800985c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009860:	88fb      	ldrh	r3, [r7, #6]
 8009862:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009866:	88fb      	ldrh	r3, [r7, #6]
 8009868:	4618      	mov	r0, r3
 800986a:	f7f9 fa01 	bl	8002c70 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800986e:	bf00      	nop
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
	...

08009878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e08b      	b.n	80099a2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	d106      	bne.n	80098a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7f9 fbb0 	bl	8003004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2224      	movs	r2, #36	@ 0x24
 80098a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f022 0201 	bic.w	r2, r2, #1
 80098ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685a      	ldr	r2, [r3, #4]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80098c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689a      	ldr	r2, [r3, #8]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80098d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d107      	bne.n	80098f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	689a      	ldr	r2, [r3, #8]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80098ee:	609a      	str	r2, [r3, #8]
 80098f0:	e006      	b.n	8009900 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	689a      	ldr	r2, [r3, #8]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80098fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	2b02      	cmp	r3, #2
 8009906:	d108      	bne.n	800991a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	685a      	ldr	r2, [r3, #4]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009916:	605a      	str	r2, [r3, #4]
 8009918:	e007      	b.n	800992a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009928:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	6859      	ldr	r1, [r3, #4]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	4b1d      	ldr	r3, [pc, #116]	@ (80099ac <HAL_I2C_Init+0x134>)
 8009936:	430b      	orrs	r3, r1
 8009938:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68da      	ldr	r2, [r3, #12]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009948:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	691a      	ldr	r2, [r3, #16]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	430a      	orrs	r2, r1
 8009962:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	69d9      	ldr	r1, [r3, #28]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a1a      	ldr	r2, [r3, #32]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	430a      	orrs	r2, r1
 8009972:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f042 0201 	orr.w	r2, r2, #1
 8009982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2220      	movs	r2, #32
 800998e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	02008000 	.word	0x02008000

080099b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b088      	sub	sp, #32
 80099b4:	af02      	add	r7, sp, #8
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	607a      	str	r2, [r7, #4]
 80099ba:	461a      	mov	r2, r3
 80099bc:	460b      	mov	r3, r1
 80099be:	817b      	strh	r3, [r7, #10]
 80099c0:	4613      	mov	r3, r2
 80099c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b20      	cmp	r3, #32
 80099ce:	f040 80fd 	bne.w	8009bcc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d101      	bne.n	80099e0 <HAL_I2C_Master_Transmit+0x30>
 80099dc:	2302      	movs	r3, #2
 80099de:	e0f6      	b.n	8009bce <HAL_I2C_Master_Transmit+0x21e>
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80099e8:	f7fa fd5e 	bl	80044a8 <HAL_GetTick>
 80099ec:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	2319      	movs	r3, #25
 80099f4:	2201      	movs	r2, #1
 80099f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f001 f891 	bl	800ab22 <I2C_WaitOnFlagUntilTimeout>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e0e1      	b.n	8009bce <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2221      	movs	r2, #33	@ 0x21
 8009a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2210      	movs	r2, #16
 8009a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	893a      	ldrh	r2, [r7, #8]
 8009a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	2bff      	cmp	r3, #255	@ 0xff
 8009a3a:	d906      	bls.n	8009a4a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	22ff      	movs	r2, #255	@ 0xff
 8009a40:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8009a42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009a46:	617b      	str	r3, [r7, #20]
 8009a48:	e007      	b.n	8009a5a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009a54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009a58:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d024      	beq.n	8009aac <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a66:	781a      	ldrb	r2, [r3, #0]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	3301      	adds	r3, #1
 8009a9a:	b2da      	uxtb	r2, r3
 8009a9c:	8979      	ldrh	r1, [r7, #10]
 8009a9e:	4b4e      	ldr	r3, [pc, #312]	@ (8009bd8 <HAL_I2C_Master_Transmit+0x228>)
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f001 fa8b 	bl	800afc0 <I2C_TransferConfig>
 8009aaa:	e066      	b.n	8009b7a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	8979      	ldrh	r1, [r7, #10]
 8009ab4:	4b48      	ldr	r3, [pc, #288]	@ (8009bd8 <HAL_I2C_Master_Transmit+0x228>)
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f001 fa80 	bl	800afc0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009ac0:	e05b      	b.n	8009b7a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	6a39      	ldr	r1, [r7, #32]
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f001 f884 	bl	800abd4 <I2C_WaitOnTXISFlagUntilTimeout>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d001      	beq.n	8009ad6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e07b      	b.n	8009bce <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ada:	781a      	ldrb	r2, [r3, #0]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae6:	1c5a      	adds	r2, r3, #1
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	3b01      	subs	r3, #1
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009afe:	3b01      	subs	r3, #1
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d034      	beq.n	8009b7a <HAL_I2C_Master_Transmit+0x1ca>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d130      	bne.n	8009b7a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	9300      	str	r3, [sp, #0]
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	2180      	movs	r1, #128	@ 0x80
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 fffd 	bl	800ab22 <I2C_WaitOnFlagUntilTimeout>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e04d      	b.n	8009bce <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	2bff      	cmp	r3, #255	@ 0xff
 8009b3a:	d90e      	bls.n	8009b5a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	22ff      	movs	r2, #255	@ 0xff
 8009b40:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	8979      	ldrh	r1, [r7, #10]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f001 fa34 	bl	800afc0 <I2C_TransferConfig>
 8009b58:	e00f      	b.n	8009b7a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	8979      	ldrh	r1, [r7, #10]
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f001 fa23 	bl	800afc0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d19e      	bne.n	8009ac2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b84:	693a      	ldr	r2, [r7, #16]
 8009b86:	6a39      	ldr	r1, [r7, #32]
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f001 f86a 	bl	800ac62 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e01a      	b.n	8009bce <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2220      	movs	r2, #32
 8009b9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6859      	ldr	r1, [r3, #4]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	4b0c      	ldr	r3, [pc, #48]	@ (8009bdc <HAL_I2C_Master_Transmit+0x22c>)
 8009bac:	400b      	ands	r3, r1
 8009bae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2220      	movs	r2, #32
 8009bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	e000      	b.n	8009bce <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009bcc:	2302      	movs	r3, #2
  }
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3718      	adds	r7, #24
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	80002000 	.word	0x80002000
 8009bdc:	fe00e800 	.word	0xfe00e800

08009be0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af02      	add	r7, sp, #8
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	607a      	str	r2, [r7, #4]
 8009bea:	461a      	mov	r2, r3
 8009bec:	460b      	mov	r3, r1
 8009bee:	817b      	strh	r3, [r7, #10]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b20      	cmp	r3, #32
 8009bfe:	f040 80db 	bne.w	8009db8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d101      	bne.n	8009c10 <HAL_I2C_Master_Receive+0x30>
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	e0d4      	b.n	8009dba <HAL_I2C_Master_Receive+0x1da>
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009c18:	f7fa fc46 	bl	80044a8 <HAL_GetTick>
 8009c1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	2319      	movs	r3, #25
 8009c24:	2201      	movs	r2, #1
 8009c26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f000 ff79 	bl	800ab22 <I2C_WaitOnFlagUntilTimeout>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d001      	beq.n	8009c3a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	e0bf      	b.n	8009dba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2222      	movs	r2, #34	@ 0x22
 8009c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2210      	movs	r2, #16
 8009c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	893a      	ldrh	r2, [r7, #8]
 8009c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	2bff      	cmp	r3, #255	@ 0xff
 8009c6a:	d90e      	bls.n	8009c8a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	22ff      	movs	r2, #255	@ 0xff
 8009c70:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	8979      	ldrh	r1, [r7, #10]
 8009c7a:	4b52      	ldr	r3, [pc, #328]	@ (8009dc4 <HAL_I2C_Master_Receive+0x1e4>)
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f001 f99c 	bl	800afc0 <I2C_TransferConfig>
 8009c88:	e06d      	b.n	8009d66 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	8979      	ldrh	r1, [r7, #10]
 8009c9c:	4b49      	ldr	r3, [pc, #292]	@ (8009dc4 <HAL_I2C_Master_Receive+0x1e4>)
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f001 f98b 	bl	800afc0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009caa:	e05c      	b.n	8009d66 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	6a39      	ldr	r1, [r7, #32]
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f001 f819 	bl	800ace8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e07c      	b.n	8009dba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cca:	b2d2      	uxtb	r2, r2
 8009ccc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	3b01      	subs	r3, #1
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d034      	beq.n	8009d66 <HAL_I2C_Master_Receive+0x186>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d130      	bne.n	8009d66 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	6a3b      	ldr	r3, [r7, #32]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	2180      	movs	r1, #128	@ 0x80
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f000 ff07 	bl	800ab22 <I2C_WaitOnFlagUntilTimeout>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e04d      	b.n	8009dba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	2bff      	cmp	r3, #255	@ 0xff
 8009d26:	d90e      	bls.n	8009d46 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	22ff      	movs	r2, #255	@ 0xff
 8009d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	8979      	ldrh	r1, [r7, #10]
 8009d36:	2300      	movs	r3, #0
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f001 f93e 	bl	800afc0 <I2C_TransferConfig>
 8009d44:	e00f      	b.n	8009d66 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	8979      	ldrh	r1, [r7, #10]
 8009d58:	2300      	movs	r3, #0
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f001 f92d 	bl	800afc0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d19d      	bne.n	8009cac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	6a39      	ldr	r1, [r7, #32]
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f000 ff74 	bl	800ac62 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	e01a      	b.n	8009dba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2220      	movs	r2, #32
 8009d8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6859      	ldr	r1, [r3, #4]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc8 <HAL_I2C_Master_Receive+0x1e8>)
 8009d98:	400b      	ands	r3, r1
 8009d9a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2220      	movs	r2, #32
 8009da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009db4:	2300      	movs	r3, #0
 8009db6:	e000      	b.n	8009dba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009db8:	2302      	movs	r3, #2
  }
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3718      	adds	r7, #24
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	80002400 	.word	0x80002400
 8009dc8:	fe00e800 	.word	0xfe00e800

08009dcc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d005      	beq.n	8009df8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	68f9      	ldr	r1, [r7, #12]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	4798      	blx	r3
  }
}
 8009df8:	bf00      	nop
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b086      	sub	sp, #24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	0a1b      	lsrs	r3, r3, #8
 8009e1c:	f003 0301 	and.w	r3, r3, #1
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d010      	beq.n	8009e46 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	09db      	lsrs	r3, r3, #7
 8009e28:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00a      	beq.n	8009e46 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e34:	f043 0201 	orr.w	r2, r3, #1
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e44:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	0a9b      	lsrs	r3, r3, #10
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d010      	beq.n	8009e74 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	09db      	lsrs	r3, r3, #7
 8009e56:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00a      	beq.n	8009e74 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e62:	f043 0208 	orr.w	r2, r3, #8
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009e72:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	0a5b      	lsrs	r3, r3, #9
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d010      	beq.n	8009ea2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	09db      	lsrs	r3, r3, #7
 8009e84:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00a      	beq.n	8009ea2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e90:	f043 0202 	orr.w	r2, r3, #2
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ea0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ea6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f003 030b 	and.w	r3, r3, #11
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d003      	beq.n	8009eba <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8009eb2:	68f9      	ldr	r1, [r7, #12]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fcdb 	bl	800a870 <I2C_ITError>
  }
}
 8009eba:	bf00      	nop
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b083      	sub	sp, #12
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009eca:	bf00      	nop
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b083      	sub	sp, #12
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009ede:	bf00      	nop
 8009ee0:	370c      	adds	r7, #12
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b083      	sub	sp, #12
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	70fb      	strb	r3, [r7, #3]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009efa:	bf00      	nop
 8009efc:	370c      	adds	r7, #12
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b083      	sub	sp, #12
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8009f0e:	bf00      	nop
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b083      	sub	sp, #12
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009f22:	bf00      	nop
 8009f24:	370c      	adds	r7, #12
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b083      	sub	sp, #12
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009f36:	bf00      	nop
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b086      	sub	sp, #24
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	60f8      	str	r0, [r7, #12]
 8009f4a:	60b9      	str	r1, [r7, #8]
 8009f4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f52:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d101      	bne.n	8009f66 <I2C_Slave_ISR_IT+0x24>
 8009f62:	2302      	movs	r3, #2
 8009f64:	e0ed      	b.n	800a142 <I2C_Slave_ISR_IT+0x200>
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	095b      	lsrs	r3, r3, #5
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00a      	beq.n	8009f90 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	095b      	lsrs	r3, r3, #5
 8009f7e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d004      	beq.n	8009f90 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009f86:	6939      	ldr	r1, [r7, #16]
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 f9c1 	bl	800a310 <I2C_ITSlaveCplt>
 8009f8e:	e0d3      	b.n	800a138 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	091b      	lsrs	r3, r3, #4
 8009f94:	f003 0301 	and.w	r3, r3, #1
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d04d      	beq.n	800a038 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	091b      	lsrs	r3, r3, #4
 8009fa0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d047      	beq.n	800a038 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d128      	bne.n	800a004 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b28      	cmp	r3, #40	@ 0x28
 8009fbc:	d108      	bne.n	8009fd0 <I2C_Slave_ISR_IT+0x8e>
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fc4:	d104      	bne.n	8009fd0 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009fc6:	6939      	ldr	r1, [r7, #16]
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f000 fbfb 	bl	800a7c4 <I2C_ITListenCplt>
 8009fce:	e032      	b.n	800a036 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b29      	cmp	r3, #41	@ 0x29
 8009fda:	d10e      	bne.n	8009ffa <I2C_Slave_ISR_IT+0xb8>
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009fe2:	d00a      	beq.n	8009ffa <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2210      	movs	r2, #16
 8009fea:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f000 fd56 	bl	800aa9e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f000 f92d 	bl	800a252 <I2C_ITSlaveSeqCplt>
 8009ff8:	e01d      	b.n	800a036 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2210      	movs	r2, #16
 800a000:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a002:	e096      	b.n	800a132 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2210      	movs	r2, #16
 800a00a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a010:	f043 0204 	orr.w	r2, r3, #4
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d004      	beq.n	800a028 <I2C_Slave_ISR_IT+0xe6>
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a024:	f040 8085 	bne.w	800a132 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a02c:	4619      	mov	r1, r3
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f000 fc1e 	bl	800a870 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a034:	e07d      	b.n	800a132 <I2C_Slave_ISR_IT+0x1f0>
 800a036:	e07c      	b.n	800a132 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	089b      	lsrs	r3, r3, #2
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	2b00      	cmp	r3, #0
 800a042:	d030      	beq.n	800a0a6 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	089b      	lsrs	r3, r3, #2
 800a048:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d02a      	beq.n	800a0a6 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a054:	b29b      	uxth	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d018      	beq.n	800a08c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a064:	b2d2      	uxtb	r2, r2
 800a066:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a06c:	1c5a      	adds	r2, r3, #1
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a076:	3b01      	subs	r3, #1
 800a078:	b29a      	uxth	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a082:	b29b      	uxth	r3, r3
 800a084:	3b01      	subs	r3, #1
 800a086:	b29a      	uxth	r2, r3
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a090:	b29b      	uxth	r3, r3
 800a092:	2b00      	cmp	r3, #0
 800a094:	d14f      	bne.n	800a136 <I2C_Slave_ISR_IT+0x1f4>
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a09c:	d04b      	beq.n	800a136 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f000 f8d7 	bl	800a252 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a0a4:	e047      	b.n	800a136 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	08db      	lsrs	r3, r3, #3
 800a0aa:	f003 0301 	and.w	r3, r3, #1
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00a      	beq.n	800a0c8 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	08db      	lsrs	r3, r3, #3
 800a0b6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d004      	beq.n	800a0c8 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a0be:	6939      	ldr	r1, [r7, #16]
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f000 f842 	bl	800a14a <I2C_ITAddrCplt>
 800a0c6:	e037      	b.n	800a138 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	085b      	lsrs	r3, r3, #1
 800a0cc:	f003 0301 	and.w	r3, r3, #1
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d031      	beq.n	800a138 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	085b      	lsrs	r3, r3, #1
 800a0d8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d02b      	beq.n	800a138 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d018      	beq.n	800a11c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ee:	781a      	ldrb	r2, [r3, #0]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0fa:	1c5a      	adds	r2, r3, #1
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a104:	b29b      	uxth	r3, r3
 800a106:	3b01      	subs	r3, #1
 800a108:	b29a      	uxth	r2, r3
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a112:	3b01      	subs	r3, #1
 800a114:	b29a      	uxth	r2, r3
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a11a:	e00d      	b.n	800a138 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a122:	d002      	beq.n	800a12a <I2C_Slave_ISR_IT+0x1e8>
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d106      	bne.n	800a138 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f000 f891 	bl	800a252 <I2C_ITSlaveSeqCplt>
 800a130:	e002      	b.n	800a138 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800a132:	bf00      	nop
 800a134:	e000      	b.n	800a138 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800a136:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3718      	adds	r7, #24
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b084      	sub	sp, #16
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a160:	2b28      	cmp	r3, #40	@ 0x28
 800a162:	d16a      	bne.n	800a23a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	0c1b      	lsrs	r3, r3, #16
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	0c1b      	lsrs	r3, r3, #16
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a182:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a190:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	b29b      	uxth	r3, r3
 800a19a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a19e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d138      	bne.n	800a21a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800a1a8:	897b      	ldrh	r3, [r7, #10]
 800a1aa:	09db      	lsrs	r3, r3, #7
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	89bb      	ldrh	r3, [r7, #12]
 800a1b0:	4053      	eors	r3, r2
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	f003 0306 	and.w	r3, r3, #6
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d11c      	bne.n	800a1f6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a1bc:	897b      	ldrh	r3, [r7, #10]
 800a1be:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1c4:	1c5a      	adds	r2, r3, #1
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d13b      	bne.n	800a24a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2208      	movs	r2, #8
 800a1de:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a1e8:	89ba      	ldrh	r2, [r7, #12]
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7ff fe7b 	bl	8009eea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a1f4:	e029      	b.n	800a24a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800a1f6:	893b      	ldrh	r3, [r7, #8]
 800a1f8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a1fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 ff10 	bl	800b024 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a20c:	89ba      	ldrh	r2, [r7, #12]
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
 800a210:	4619      	mov	r1, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7ff fe69 	bl	8009eea <HAL_I2C_AddrCallback>
}
 800a218:	e017      	b.n	800a24a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a21a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 ff00 	bl	800b024 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a22c:	89ba      	ldrh	r2, [r7, #12]
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
 800a230:	4619      	mov	r1, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7ff fe59 	bl	8009eea <HAL_I2C_AddrCallback>
}
 800a238:	e007      	b.n	800a24a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2208      	movs	r2, #8
 800a240:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800a24a:	bf00      	nop
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b084      	sub	sp, #16
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	0b9b      	lsrs	r3, r3, #14
 800a26e:	f003 0301 	and.w	r3, r3, #1
 800a272:	2b00      	cmp	r3, #0
 800a274:	d008      	beq.n	800a288 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	e00d      	b.n	800a2a4 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	0bdb      	lsrs	r3, r3, #15
 800a28c:	f003 0301 	and.w	r3, r3, #1
 800a290:	2b00      	cmp	r3, #0
 800a292:	d007      	beq.n	800a2a4 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a2a2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	2b29      	cmp	r3, #41	@ 0x29
 800a2ae:	d112      	bne.n	800a2d6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2228      	movs	r2, #40	@ 0x28
 800a2b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2221      	movs	r2, #33	@ 0x21
 800a2bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a2be:	2101      	movs	r1, #1
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 feaf 	bl	800b024 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7ff fdf7 	bl	8009ec2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a2d4:	e017      	b.n	800a306 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2e0:	d111      	bne.n	800a306 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2228      	movs	r2, #40	@ 0x28
 800a2e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2222      	movs	r2, #34	@ 0x22
 800a2ee:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a2f0:	2102      	movs	r1, #2
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 fe96 	bl	800b024 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f7ff fde8 	bl	8009ed6 <HAL_I2C_SlaveRxCpltCallback>
}
 800a306:	bf00      	nop
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
	...

0800a310 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a32a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a332:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2220      	movs	r2, #32
 800a33a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a33c:	7afb      	ldrb	r3, [r7, #11]
 800a33e:	2b21      	cmp	r3, #33	@ 0x21
 800a340:	d002      	beq.n	800a348 <I2C_ITSlaveCplt+0x38>
 800a342:	7afb      	ldrb	r3, [r7, #11]
 800a344:	2b29      	cmp	r3, #41	@ 0x29
 800a346:	d108      	bne.n	800a35a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a348:	f248 0101 	movw	r1, #32769	@ 0x8001
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fe69 	bl	800b024 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2221      	movs	r2, #33	@ 0x21
 800a356:	631a      	str	r2, [r3, #48]	@ 0x30
 800a358:	e019      	b.n	800a38e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a35a:	7afb      	ldrb	r3, [r7, #11]
 800a35c:	2b22      	cmp	r3, #34	@ 0x22
 800a35e:	d002      	beq.n	800a366 <I2C_ITSlaveCplt+0x56>
 800a360:	7afb      	ldrb	r3, [r7, #11]
 800a362:	2b2a      	cmp	r3, #42	@ 0x2a
 800a364:	d108      	bne.n	800a378 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a366:	f248 0102 	movw	r1, #32770	@ 0x8002
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fe5a 	bl	800b024 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2222      	movs	r2, #34	@ 0x22
 800a374:	631a      	str	r2, [r3, #48]	@ 0x30
 800a376:	e00a      	b.n	800a38e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800a378:	7afb      	ldrb	r3, [r7, #11]
 800a37a:	2b28      	cmp	r3, #40	@ 0x28
 800a37c:	d107      	bne.n	800a38e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a37e:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fe4e 	bl	800b024 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	685a      	ldr	r2, [r3, #4]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a39c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6859      	ldr	r1, [r3, #4]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	4b80      	ldr	r3, [pc, #512]	@ (800a5ac <I2C_ITSlaveCplt+0x29c>)
 800a3aa:	400b      	ands	r3, r1
 800a3ac:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 fb75 	bl	800aa9e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	0b9b      	lsrs	r3, r3, #14
 800a3b8:	f003 0301 	and.w	r3, r3, #1
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d07a      	beq.n	800a4b6 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a3ce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f000 8112 	beq.w	800a5fe <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a73      	ldr	r2, [pc, #460]	@ (800a5b0 <I2C_ITSlaveCplt+0x2a0>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d059      	beq.n	800a49a <I2C_ITSlaveCplt+0x18a>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a71      	ldr	r2, [pc, #452]	@ (800a5b4 <I2C_ITSlaveCplt+0x2a4>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d053      	beq.n	800a49a <I2C_ITSlaveCplt+0x18a>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a6f      	ldr	r2, [pc, #444]	@ (800a5b8 <I2C_ITSlaveCplt+0x2a8>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d04d      	beq.n	800a49a <I2C_ITSlaveCplt+0x18a>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a6d      	ldr	r2, [pc, #436]	@ (800a5bc <I2C_ITSlaveCplt+0x2ac>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d047      	beq.n	800a49a <I2C_ITSlaveCplt+0x18a>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a6b      	ldr	r2, [pc, #428]	@ (800a5c0 <I2C_ITSlaveCplt+0x2b0>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d041      	beq.n	800a49a <I2C_ITSlaveCplt+0x18a>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a69      	ldr	r2, [pc, #420]	@ (800a5c4 <I2C_ITSlaveCplt+0x2b4>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d03b      	beq.n	800a49a <I2C_ITSlaveCplt+0x18a>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a67      	ldr	r2, [pc, #412]	@ (800a5c8 <I2C_ITSlaveCplt+0x2b8>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d035      	beq.n	800a49a <I2C_ITSlaveCplt+0x18a>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a65      	ldr	r2, [pc, #404]	@ (800a5cc <I2C_ITSlaveCplt+0x2bc>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d02f      	beq.n	800a49a <I2C_ITSlaveCplt+0x18a>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a63      	ldr	r2, [pc, #396]	@ (800a5d0 <I2C_ITSlaveCplt+0x2c0>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d029      	beq.n	800a49a <I2C_ITSlaveCplt+0x18a>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a61      	ldr	r2, [pc, #388]	@ (800a5d4 <I2C_ITSlaveCplt+0x2c4>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d023      	beq.n	800a49a <I2C_ITSlaveCplt+0x18a>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a5f      	ldr	r2, [pc, #380]	@ (800a5d8 <I2C_ITSlaveCplt+0x2c8>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d01d      	beq.n	800a49a <I2C_ITSlaveCplt+0x18a>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a5d      	ldr	r2, [pc, #372]	@ (800a5dc <I2C_ITSlaveCplt+0x2cc>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d017      	beq.n	800a49a <I2C_ITSlaveCplt+0x18a>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a5b      	ldr	r2, [pc, #364]	@ (800a5e0 <I2C_ITSlaveCplt+0x2d0>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d011      	beq.n	800a49a <I2C_ITSlaveCplt+0x18a>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a59      	ldr	r2, [pc, #356]	@ (800a5e4 <I2C_ITSlaveCplt+0x2d4>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d00b      	beq.n	800a49a <I2C_ITSlaveCplt+0x18a>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a57      	ldr	r2, [pc, #348]	@ (800a5e8 <I2C_ITSlaveCplt+0x2d8>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d005      	beq.n	800a49a <I2C_ITSlaveCplt+0x18a>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a55      	ldr	r2, [pc, #340]	@ (800a5ec <I2C_ITSlaveCplt+0x2dc>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d105      	bne.n	800a4a6 <I2C_ITSlaveCplt+0x196>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	e004      	b.n	800a4b0 <I2C_ITSlaveCplt+0x1a0>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800a4b4:	e0a3      	b.n	800a5fe <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	0bdb      	lsrs	r3, r3, #15
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f000 809d 	beq.w	800a5fe <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a4d2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 8090 	beq.w	800a5fe <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a32      	ldr	r2, [pc, #200]	@ (800a5b0 <I2C_ITSlaveCplt+0x2a0>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d059      	beq.n	800a59e <I2C_ITSlaveCplt+0x28e>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a30      	ldr	r2, [pc, #192]	@ (800a5b4 <I2C_ITSlaveCplt+0x2a4>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d053      	beq.n	800a59e <I2C_ITSlaveCplt+0x28e>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a2e      	ldr	r2, [pc, #184]	@ (800a5b8 <I2C_ITSlaveCplt+0x2a8>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d04d      	beq.n	800a59e <I2C_ITSlaveCplt+0x28e>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a2c      	ldr	r2, [pc, #176]	@ (800a5bc <I2C_ITSlaveCplt+0x2ac>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d047      	beq.n	800a59e <I2C_ITSlaveCplt+0x28e>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a2a      	ldr	r2, [pc, #168]	@ (800a5c0 <I2C_ITSlaveCplt+0x2b0>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d041      	beq.n	800a59e <I2C_ITSlaveCplt+0x28e>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a28      	ldr	r2, [pc, #160]	@ (800a5c4 <I2C_ITSlaveCplt+0x2b4>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d03b      	beq.n	800a59e <I2C_ITSlaveCplt+0x28e>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a26      	ldr	r2, [pc, #152]	@ (800a5c8 <I2C_ITSlaveCplt+0x2b8>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d035      	beq.n	800a59e <I2C_ITSlaveCplt+0x28e>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a24      	ldr	r2, [pc, #144]	@ (800a5cc <I2C_ITSlaveCplt+0x2bc>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d02f      	beq.n	800a59e <I2C_ITSlaveCplt+0x28e>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a22      	ldr	r2, [pc, #136]	@ (800a5d0 <I2C_ITSlaveCplt+0x2c0>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d029      	beq.n	800a59e <I2C_ITSlaveCplt+0x28e>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a20      	ldr	r2, [pc, #128]	@ (800a5d4 <I2C_ITSlaveCplt+0x2c4>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d023      	beq.n	800a59e <I2C_ITSlaveCplt+0x28e>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a1e      	ldr	r2, [pc, #120]	@ (800a5d8 <I2C_ITSlaveCplt+0x2c8>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d01d      	beq.n	800a59e <I2C_ITSlaveCplt+0x28e>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a1c      	ldr	r2, [pc, #112]	@ (800a5dc <I2C_ITSlaveCplt+0x2cc>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d017      	beq.n	800a59e <I2C_ITSlaveCplt+0x28e>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a1a      	ldr	r2, [pc, #104]	@ (800a5e0 <I2C_ITSlaveCplt+0x2d0>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d011      	beq.n	800a59e <I2C_ITSlaveCplt+0x28e>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a18      	ldr	r2, [pc, #96]	@ (800a5e4 <I2C_ITSlaveCplt+0x2d4>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d00b      	beq.n	800a59e <I2C_ITSlaveCplt+0x28e>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a16      	ldr	r2, [pc, #88]	@ (800a5e8 <I2C_ITSlaveCplt+0x2d8>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d005      	beq.n	800a59e <I2C_ITSlaveCplt+0x28e>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a14      	ldr	r2, [pc, #80]	@ (800a5ec <I2C_ITSlaveCplt+0x2dc>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d128      	bne.n	800a5f0 <I2C_ITSlaveCplt+0x2e0>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	e027      	b.n	800a5fa <I2C_ITSlaveCplt+0x2ea>
 800a5aa:	bf00      	nop
 800a5ac:	fe00e800 	.word	0xfe00e800
 800a5b0:	40020010 	.word	0x40020010
 800a5b4:	40020028 	.word	0x40020028
 800a5b8:	40020040 	.word	0x40020040
 800a5bc:	40020058 	.word	0x40020058
 800a5c0:	40020070 	.word	0x40020070
 800a5c4:	40020088 	.word	0x40020088
 800a5c8:	400200a0 	.word	0x400200a0
 800a5cc:	400200b8 	.word	0x400200b8
 800a5d0:	40020410 	.word	0x40020410
 800a5d4:	40020428 	.word	0x40020428
 800a5d8:	40020440 	.word	0x40020440
 800a5dc:	40020458 	.word	0x40020458
 800a5e0:	40020470 	.word	0x40020470
 800a5e4:	40020488 	.word	0x40020488
 800a5e8:	400204a0 	.word	0x400204a0
 800a5ec:	400204b8 	.word	0x400204b8
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	089b      	lsrs	r3, r3, #2
 800a602:	f003 0301 	and.w	r3, r3, #1
 800a606:	2b00      	cmp	r3, #0
 800a608:	d020      	beq.n	800a64c <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f023 0304 	bic.w	r3, r3, #4
 800a610:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a61c:	b2d2      	uxtb	r2, r2
 800a61e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a624:	1c5a      	adds	r2, r3, #1
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00c      	beq.n	800a64c <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a636:	3b01      	subs	r3, #1
 800a638:	b29a      	uxth	r2, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a642:	b29b      	uxth	r3, r3
 800a644:	3b01      	subs	r3, #1
 800a646:	b29a      	uxth	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a650:	b29b      	uxth	r3, r3
 800a652:	2b00      	cmp	r3, #0
 800a654:	d005      	beq.n	800a662 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a65a:	f043 0204 	orr.w	r2, r3, #4
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	091b      	lsrs	r3, r3, #4
 800a666:	f003 0301 	and.w	r3, r3, #1
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d04a      	beq.n	800a704 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	091b      	lsrs	r3, r3, #4
 800a672:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a676:	2b00      	cmp	r3, #0
 800a678:	d044      	beq.n	800a704 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a67e:	b29b      	uxth	r3, r3
 800a680:	2b00      	cmp	r3, #0
 800a682:	d128      	bne.n	800a6d6 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b28      	cmp	r3, #40	@ 0x28
 800a68e:	d108      	bne.n	800a6a2 <I2C_ITSlaveCplt+0x392>
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a696:	d104      	bne.n	800a6a2 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a698:	6979      	ldr	r1, [r7, #20]
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f892 	bl	800a7c4 <I2C_ITListenCplt>
 800a6a0:	e030      	b.n	800a704 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b29      	cmp	r3, #41	@ 0x29
 800a6ac:	d10e      	bne.n	800a6cc <I2C_ITSlaveCplt+0x3bc>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a6b4:	d00a      	beq.n	800a6cc <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2210      	movs	r2, #16
 800a6bc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 f9ed 	bl	800aa9e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f7ff fdc4 	bl	800a252 <I2C_ITSlaveSeqCplt>
 800a6ca:	e01b      	b.n	800a704 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2210      	movs	r2, #16
 800a6d2:	61da      	str	r2, [r3, #28]
 800a6d4:	e016      	b.n	800a704 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2210      	movs	r2, #16
 800a6dc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6e2:	f043 0204 	orr.w	r2, r3, #4
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d003      	beq.n	800a6f8 <I2C_ITSlaveCplt+0x3e8>
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6f6:	d105      	bne.n	800a704 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f8b6 	bl	800a870 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a716:	2b00      	cmp	r3, #0
 800a718:	d010      	beq.n	800a73c <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a71e:	4619      	mov	r1, r3
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 f8a5 	bl	800a870 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b28      	cmp	r3, #40	@ 0x28
 800a730:	d141      	bne.n	800a7b6 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a732:	6979      	ldr	r1, [r7, #20]
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f845 	bl	800a7c4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a73a:	e03c      	b.n	800a7b6 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a740:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a744:	d014      	beq.n	800a770 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f7ff fd83 	bl	800a252 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a1c      	ldr	r2, [pc, #112]	@ (800a7c0 <I2C_ITSlaveCplt+0x4b0>)
 800a750:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2220      	movs	r2, #32
 800a756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f7ff fbcc 	bl	8009f06 <HAL_I2C_ListenCpltCallback>
}
 800a76e:	e022      	b.n	800a7b6 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a776:	b2db      	uxtb	r3, r3
 800a778:	2b22      	cmp	r3, #34	@ 0x22
 800a77a:	d10e      	bne.n	800a79a <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2220      	movs	r2, #32
 800a780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7ff fb9f 	bl	8009ed6 <HAL_I2C_SlaveRxCpltCallback>
}
 800a798:	e00d      	b.n	800a7b6 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2220      	movs	r2, #32
 800a79e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7ff fb86 	bl	8009ec2 <HAL_I2C_SlaveTxCpltCallback>
}
 800a7b6:	bf00      	nop
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	ffff0000 	.word	0xffff0000

0800a7c4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4a26      	ldr	r2, [pc, #152]	@ (800a86c <I2C_ITListenCplt+0xa8>)
 800a7d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2220      	movs	r2, #32
 800a7de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	089b      	lsrs	r3, r3, #2
 800a7f4:	f003 0301 	and.w	r3, r3, #1
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d022      	beq.n	800a842 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a806:	b2d2      	uxtb	r2, r2
 800a808:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a80e:	1c5a      	adds	r2, r3, #1
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d012      	beq.n	800a842 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a820:	3b01      	subs	r3, #1
 800a822:	b29a      	uxth	r2, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	3b01      	subs	r3, #1
 800a830:	b29a      	uxth	r2, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a83a:	f043 0204 	orr.w	r2, r3, #4
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a842:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 fbec 	bl	800b024 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2210      	movs	r2, #16
 800a852:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f7ff fb52 	bl	8009f06 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a862:	bf00      	nop
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	ffff0000 	.word	0xffff0000

0800a870 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a880:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a6d      	ldr	r2, [pc, #436]	@ (800aa44 <I2C_ITError+0x1d4>)
 800a88e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	431a      	orrs	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
 800a8a4:	2b28      	cmp	r3, #40	@ 0x28
 800a8a6:	d005      	beq.n	800a8b4 <I2C_ITError+0x44>
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
 800a8aa:	2b29      	cmp	r3, #41	@ 0x29
 800a8ac:	d002      	beq.n	800a8b4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a8ae:	7bfb      	ldrb	r3, [r7, #15]
 800a8b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8b2:	d10b      	bne.n	800a8cc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a8b4:	2103      	movs	r1, #3
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 fbb4 	bl	800b024 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2228      	movs	r2, #40	@ 0x28
 800a8c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a60      	ldr	r2, [pc, #384]	@ (800aa48 <I2C_ITError+0x1d8>)
 800a8c8:	635a      	str	r2, [r3, #52]	@ 0x34
 800a8ca:	e030      	b.n	800a92e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a8cc:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fba7 	bl	800b024 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 f8e1 	bl	800aa9e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	2b60      	cmp	r3, #96	@ 0x60
 800a8e6:	d01f      	beq.n	800a928 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2220      	movs	r2, #32
 800a8ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	f003 0320 	and.w	r3, r3, #32
 800a8fa:	2b20      	cmp	r3, #32
 800a8fc:	d114      	bne.n	800a928 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	f003 0310 	and.w	r3, r3, #16
 800a908:	2b10      	cmp	r3, #16
 800a90a:	d109      	bne.n	800a920 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2210      	movs	r2, #16
 800a912:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a918:	f043 0204 	orr.w	r2, r3, #4
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2220      	movs	r2, #32
 800a926:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a932:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d039      	beq.n	800a9b0 <I2C_ITError+0x140>
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	2b11      	cmp	r3, #17
 800a940:	d002      	beq.n	800a948 <I2C_ITError+0xd8>
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	2b21      	cmp	r3, #33	@ 0x21
 800a946:	d133      	bne.n	800a9b0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a952:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a956:	d107      	bne.n	800a968 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a966:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fe f999 	bl	8008ca4 <HAL_DMA_GetState>
 800a972:	4603      	mov	r3, r0
 800a974:	2b01      	cmp	r3, #1
 800a976:	d017      	beq.n	800a9a8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a97c:	4a33      	ldr	r2, [pc, #204]	@ (800aa4c <I2C_ITError+0x1dc>)
 800a97e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fd f819 	bl	80079c4 <HAL_DMA_Abort_IT>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d04d      	beq.n	800aa34 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a99c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a9a2:	4610      	mov	r0, r2
 800a9a4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a9a6:	e045      	b.n	800aa34 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 f851 	bl	800aa50 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a9ae:	e041      	b.n	800aa34 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d039      	beq.n	800aa2c <I2C_ITError+0x1bc>
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	2b12      	cmp	r3, #18
 800a9bc:	d002      	beq.n	800a9c4 <I2C_ITError+0x154>
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	2b22      	cmp	r3, #34	@ 0x22
 800a9c2:	d133      	bne.n	800aa2c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9d2:	d107      	bne.n	800a9e4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a9e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fe f95b 	bl	8008ca4 <HAL_DMA_GetState>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d017      	beq.n	800aa24 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9f8:	4a14      	ldr	r2, [pc, #80]	@ (800aa4c <I2C_ITError+0x1dc>)
 800a9fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fc ffdb 	bl	80079c4 <HAL_DMA_Abort_IT>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d011      	beq.n	800aa38 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800aa1e:	4610      	mov	r0, r2
 800aa20:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aa22:	e009      	b.n	800aa38 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 f813 	bl	800aa50 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aa2a:	e005      	b.n	800aa38 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 f80f 	bl	800aa50 <I2C_TreatErrorCallback>
  }
}
 800aa32:	e002      	b.n	800aa3a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800aa34:	bf00      	nop
 800aa36:	e000      	b.n	800aa3a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aa38:	bf00      	nop
}
 800aa3a:	bf00      	nop
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	ffff0000 	.word	0xffff0000
 800aa48:	08009f43 	.word	0x08009f43
 800aa4c:	0800aae7 	.word	0x0800aae7

0800aa50 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	2b60      	cmp	r3, #96	@ 0x60
 800aa62:	d10e      	bne.n	800aa82 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2220      	movs	r2, #32
 800aa68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f7ff fa57 	bl	8009f2e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800aa80:	e009      	b.n	800aa96 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f7ff fa42 	bl	8009f1a <HAL_I2C_ErrorCallback>
}
 800aa96:	bf00      	nop
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b083      	sub	sp, #12
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	f003 0302 	and.w	r3, r3, #2
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d103      	bne.n	800aabc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2200      	movs	r2, #0
 800aaba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	699b      	ldr	r3, [r3, #24]
 800aac2:	f003 0301 	and.w	r3, r3, #1
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d007      	beq.n	800aada <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	699a      	ldr	r2, [r3, #24]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f042 0201 	orr.w	r2, r2, #1
 800aad8:	619a      	str	r2, [r3, #24]
  }
}
 800aada:	bf00      	nop
 800aadc:	370c      	adds	r7, #12
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr

0800aae6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b084      	sub	sp, #16
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d003      	beq.n	800ab04 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab00:	2200      	movs	r2, #0
 800ab02:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d003      	beq.n	800ab14 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab10:	2200      	movs	r2, #0
 800ab12:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f7ff ff9b 	bl	800aa50 <I2C_TreatErrorCallback>
}
 800ab1a:	bf00      	nop
 800ab1c:	3710      	adds	r7, #16
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b084      	sub	sp, #16
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	60f8      	str	r0, [r7, #12]
 800ab2a:	60b9      	str	r1, [r7, #8]
 800ab2c:	603b      	str	r3, [r7, #0]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ab32:	e03b      	b.n	800abac <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab34:	69ba      	ldr	r2, [r7, #24]
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f000 f961 	bl	800ae00 <I2C_IsErrorOccurred>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d001      	beq.n	800ab48 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e041      	b.n	800abcc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4e:	d02d      	beq.n	800abac <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab50:	f7f9 fcaa 	bl	80044a8 <HAL_GetTick>
 800ab54:	4602      	mov	r2, r0
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	1ad3      	subs	r3, r2, r3
 800ab5a:	683a      	ldr	r2, [r7, #0]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d302      	bcc.n	800ab66 <I2C_WaitOnFlagUntilTimeout+0x44>
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d122      	bne.n	800abac <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	699a      	ldr	r2, [r3, #24]
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	4013      	ands	r3, r2
 800ab70:	68ba      	ldr	r2, [r7, #8]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	bf0c      	ite	eq
 800ab76:	2301      	moveq	r3, #1
 800ab78:	2300      	movne	r3, #0
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	79fb      	ldrb	r3, [r7, #7]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d113      	bne.n	800abac <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab88:	f043 0220 	orr.w	r2, r3, #32
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2220      	movs	r2, #32
 800ab94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	e00f      	b.n	800abcc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	699a      	ldr	r2, [r3, #24]
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	4013      	ands	r3, r2
 800abb6:	68ba      	ldr	r2, [r7, #8]
 800abb8:	429a      	cmp	r2, r3
 800abba:	bf0c      	ite	eq
 800abbc:	2301      	moveq	r3, #1
 800abbe:	2300      	movne	r3, #0
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	461a      	mov	r2, r3
 800abc4:	79fb      	ldrb	r3, [r7, #7]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d0b4      	beq.n	800ab34 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800abe0:	e033      	b.n	800ac4a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	68b9      	ldr	r1, [r7, #8]
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f000 f90a 	bl	800ae00 <I2C_IsErrorOccurred>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d001      	beq.n	800abf6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	e031      	b.n	800ac5a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abfc:	d025      	beq.n	800ac4a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abfe:	f7f9 fc53 	bl	80044a8 <HAL_GetTick>
 800ac02:	4602      	mov	r2, r0
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	1ad3      	subs	r3, r2, r3
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d302      	bcc.n	800ac14 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d11a      	bne.n	800ac4a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	699b      	ldr	r3, [r3, #24]
 800ac1a:	f003 0302 	and.w	r3, r3, #2
 800ac1e:	2b02      	cmp	r3, #2
 800ac20:	d013      	beq.n	800ac4a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac26:	f043 0220 	orr.w	r2, r3, #32
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2220      	movs	r2, #32
 800ac32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e007      	b.n	800ac5a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	699b      	ldr	r3, [r3, #24]
 800ac50:	f003 0302 	and.w	r3, r3, #2
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	d1c4      	bne.n	800abe2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ac58:	2300      	movs	r3, #0
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b084      	sub	sp, #16
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	60f8      	str	r0, [r7, #12]
 800ac6a:	60b9      	str	r1, [r7, #8]
 800ac6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ac6e:	e02f      	b.n	800acd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	68b9      	ldr	r1, [r7, #8]
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f000 f8c3 	bl	800ae00 <I2C_IsErrorOccurred>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d001      	beq.n	800ac84 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e02d      	b.n	800ace0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac84:	f7f9 fc10 	bl	80044a8 <HAL_GetTick>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	68ba      	ldr	r2, [r7, #8]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d302      	bcc.n	800ac9a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d11a      	bne.n	800acd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	699b      	ldr	r3, [r3, #24]
 800aca0:	f003 0320 	and.w	r3, r3, #32
 800aca4:	2b20      	cmp	r3, #32
 800aca6:	d013      	beq.n	800acd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acac:	f043 0220 	orr.w	r2, r3, #32
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2220      	movs	r2, #32
 800acb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	e007      	b.n	800ace0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	f003 0320 	and.w	r3, r3, #32
 800acda:	2b20      	cmp	r3, #32
 800acdc:	d1c8      	bne.n	800ac70 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acf4:	2300      	movs	r3, #0
 800acf6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800acf8:	e071      	b.n	800adde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	68b9      	ldr	r1, [r7, #8]
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	f000 f87e 	bl	800ae00 <I2C_IsErrorOccurred>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d001      	beq.n	800ad0e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	699b      	ldr	r3, [r3, #24]
 800ad14:	f003 0320 	and.w	r3, r3, #32
 800ad18:	2b20      	cmp	r3, #32
 800ad1a:	d13b      	bne.n	800ad94 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800ad1c:	7dfb      	ldrb	r3, [r7, #23]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d138      	bne.n	800ad94 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	f003 0304 	and.w	r3, r3, #4
 800ad2c:	2b04      	cmp	r3, #4
 800ad2e:	d105      	bne.n	800ad3c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d001      	beq.n	800ad3c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	f003 0310 	and.w	r3, r3, #16
 800ad46:	2b10      	cmp	r3, #16
 800ad48:	d121      	bne.n	800ad8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2210      	movs	r2, #16
 800ad50:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2204      	movs	r2, #4
 800ad56:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2220      	movs	r2, #32
 800ad5e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6859      	ldr	r1, [r3, #4]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	4b24      	ldr	r3, [pc, #144]	@ (800adfc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800ad6c:	400b      	ands	r3, r1
 800ad6e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2220      	movs	r2, #32
 800ad74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	75fb      	strb	r3, [r7, #23]
 800ad8c:	e002      	b.n	800ad94 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800ad94:	f7f9 fb88 	bl	80044a8 <HAL_GetTick>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d302      	bcc.n	800adaa <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d119      	bne.n	800adde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800adaa:	7dfb      	ldrb	r3, [r7, #23]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d116      	bne.n	800adde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	699b      	ldr	r3, [r3, #24]
 800adb6:	f003 0304 	and.w	r3, r3, #4
 800adba:	2b04      	cmp	r3, #4
 800adbc:	d00f      	beq.n	800adde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adc2:	f043 0220 	orr.w	r2, r3, #32
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2220      	movs	r2, #32
 800adce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	f003 0304 	and.w	r3, r3, #4
 800ade8:	2b04      	cmp	r3, #4
 800adea:	d002      	beq.n	800adf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800adec:	7dfb      	ldrb	r3, [r7, #23]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d083      	beq.n	800acfa <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3718      	adds	r7, #24
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	fe00e800 	.word	0xfe00e800

0800ae00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b08a      	sub	sp, #40	@ 0x28
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	f003 0310 	and.w	r3, r3, #16
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d068      	beq.n	800aefe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2210      	movs	r2, #16
 800ae32:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ae34:	e049      	b.n	800aeca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae3c:	d045      	beq.n	800aeca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ae3e:	f7f9 fb33 	bl	80044a8 <HAL_GetTick>
 800ae42:	4602      	mov	r2, r0
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d302      	bcc.n	800ae54 <I2C_IsErrorOccurred+0x54>
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d13a      	bne.n	800aeca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ae66:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	699b      	ldr	r3, [r3, #24]
 800ae6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae76:	d121      	bne.n	800aebc <I2C_IsErrorOccurred+0xbc>
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae7e:	d01d      	beq.n	800aebc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800ae80:	7cfb      	ldrb	r3, [r7, #19]
 800ae82:	2b20      	cmp	r3, #32
 800ae84:	d01a      	beq.n	800aebc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae94:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ae96:	f7f9 fb07 	bl	80044a8 <HAL_GetTick>
 800ae9a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae9c:	e00e      	b.n	800aebc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ae9e:	f7f9 fb03 	bl	80044a8 <HAL_GetTick>
 800aea2:	4602      	mov	r2, r0
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	2b19      	cmp	r3, #25
 800aeaa:	d907      	bls.n	800aebc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800aeac:	6a3b      	ldr	r3, [r7, #32]
 800aeae:	f043 0320 	orr.w	r3, r3, #32
 800aeb2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800aeba:	e006      	b.n	800aeca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	f003 0320 	and.w	r3, r3, #32
 800aec6:	2b20      	cmp	r3, #32
 800aec8:	d1e9      	bne.n	800ae9e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	699b      	ldr	r3, [r3, #24]
 800aed0:	f003 0320 	and.w	r3, r3, #32
 800aed4:	2b20      	cmp	r3, #32
 800aed6:	d003      	beq.n	800aee0 <I2C_IsErrorOccurred+0xe0>
 800aed8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d0aa      	beq.n	800ae36 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800aee0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d103      	bne.n	800aef0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2220      	movs	r2, #32
 800aeee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800aef0:	6a3b      	ldr	r3, [r7, #32]
 800aef2:	f043 0304 	orr.w	r3, r3, #4
 800aef6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00b      	beq.n	800af28 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800af10:	6a3b      	ldr	r3, [r7, #32]
 800af12:	f043 0301 	orr.w	r3, r3, #1
 800af16:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800af20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00b      	beq.n	800af4a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	f043 0308 	orr.w	r3, r3, #8
 800af38:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800af42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800af44:	2301      	movs	r3, #1
 800af46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00b      	beq.n	800af6c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800af54:	6a3b      	ldr	r3, [r7, #32]
 800af56:	f043 0302 	orr.w	r3, r3, #2
 800af5a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800af6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af70:	2b00      	cmp	r3, #0
 800af72:	d01c      	beq.n	800afae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f7ff fd92 	bl	800aa9e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	6859      	ldr	r1, [r3, #4]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	4b0d      	ldr	r3, [pc, #52]	@ (800afbc <I2C_IsErrorOccurred+0x1bc>)
 800af86:	400b      	ands	r3, r1
 800af88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af8e:	6a3b      	ldr	r3, [r7, #32]
 800af90:	431a      	orrs	r2, r3
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2220      	movs	r2, #32
 800af9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800afae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3728      	adds	r7, #40	@ 0x28
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	fe00e800 	.word	0xfe00e800

0800afc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b087      	sub	sp, #28
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	607b      	str	r3, [r7, #4]
 800afca:	460b      	mov	r3, r1
 800afcc:	817b      	strh	r3, [r7, #10]
 800afce:	4613      	mov	r3, r2
 800afd0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800afd2:	897b      	ldrh	r3, [r7, #10]
 800afd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800afd8:	7a7b      	ldrb	r3, [r7, #9]
 800afda:	041b      	lsls	r3, r3, #16
 800afdc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800afe0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800afe6:	6a3b      	ldr	r3, [r7, #32]
 800afe8:	4313      	orrs	r3, r2
 800afea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800afee:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	685a      	ldr	r2, [r3, #4]
 800aff6:	6a3b      	ldr	r3, [r7, #32]
 800aff8:	0d5b      	lsrs	r3, r3, #21
 800affa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800affe:	4b08      	ldr	r3, [pc, #32]	@ (800b020 <I2C_TransferConfig+0x60>)
 800b000:	430b      	orrs	r3, r1
 800b002:	43db      	mvns	r3, r3
 800b004:	ea02 0103 	and.w	r1, r2, r3
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	697a      	ldr	r2, [r7, #20]
 800b00e:	430a      	orrs	r2, r1
 800b010:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b012:	bf00      	nop
 800b014:	371c      	adds	r7, #28
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop
 800b020:	03ff63ff 	.word	0x03ff63ff

0800b024 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	460b      	mov	r3, r1
 800b02e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b030:	2300      	movs	r3, #0
 800b032:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b034:	887b      	ldrh	r3, [r7, #2]
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00f      	beq.n	800b05e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800b044:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b052:	2b28      	cmp	r3, #40	@ 0x28
 800b054:	d003      	beq.n	800b05e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800b05c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b05e:	887b      	ldrh	r3, [r7, #2]
 800b060:	f003 0302 	and.w	r3, r3, #2
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00f      	beq.n	800b088 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800b06e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b076:	b2db      	uxtb	r3, r3
 800b078:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b07c:	2b28      	cmp	r3, #40	@ 0x28
 800b07e:	d003      	beq.n	800b088 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800b086:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b088:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	da03      	bge.n	800b098 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800b096:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b098:	887b      	ldrh	r3, [r7, #2]
 800b09a:	2b10      	cmp	r3, #16
 800b09c:	d103      	bne.n	800b0a6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800b0a4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b0a6:	887b      	ldrh	r3, [r7, #2]
 800b0a8:	2b20      	cmp	r3, #32
 800b0aa:	d103      	bne.n	800b0b4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f043 0320 	orr.w	r3, r3, #32
 800b0b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b0b4:	887b      	ldrh	r3, [r7, #2]
 800b0b6:	2b40      	cmp	r3, #64	@ 0x40
 800b0b8:	d103      	bne.n	800b0c2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0c0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	6819      	ldr	r1, [r3, #0]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	43da      	mvns	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	400a      	ands	r2, r1
 800b0d2:	601a      	str	r2, [r3, #0]
}
 800b0d4:	bf00      	nop
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	2b20      	cmp	r3, #32
 800b0f4:	d138      	bne.n	800b168 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d101      	bne.n	800b104 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b100:	2302      	movs	r3, #2
 800b102:	e032      	b.n	800b16a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2224      	movs	r2, #36	@ 0x24
 800b110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f022 0201 	bic.w	r2, r2, #1
 800b122:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b132:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	6819      	ldr	r1, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	683a      	ldr	r2, [r7, #0]
 800b140:	430a      	orrs	r2, r1
 800b142:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f042 0201 	orr.w	r2, r2, #1
 800b152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2220      	movs	r2, #32
 800b158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b164:	2300      	movs	r3, #0
 800b166:	e000      	b.n	800b16a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b168:	2302      	movs	r3, #2
  }
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	370c      	adds	r7, #12
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr

0800b176 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b176:	b480      	push	{r7}
 800b178:	b085      	sub	sp, #20
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
 800b17e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b186:	b2db      	uxtb	r3, r3
 800b188:	2b20      	cmp	r3, #32
 800b18a:	d139      	bne.n	800b200 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b192:	2b01      	cmp	r3, #1
 800b194:	d101      	bne.n	800b19a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b196:	2302      	movs	r3, #2
 800b198:	e033      	b.n	800b202 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2201      	movs	r2, #1
 800b19e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2224      	movs	r2, #36	@ 0x24
 800b1a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f022 0201 	bic.w	r2, r2, #1
 800b1b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b1c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	021b      	lsls	r3, r3, #8
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f042 0201 	orr.w	r2, r2, #1
 800b1ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2220      	movs	r2, #32
 800b1f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	e000      	b.n	800b202 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b200:	2302      	movs	r3, #2
  }
}
 800b202:	4618      	mov	r0, r3
 800b204:	3714      	adds	r7, #20
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
	...

0800b210 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b218:	4b19      	ldr	r3, [pc, #100]	@ (800b280 <HAL_PWREx_ConfigSupply+0x70>)
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	f003 0304 	and.w	r3, r3, #4
 800b220:	2b04      	cmp	r3, #4
 800b222:	d00a      	beq.n	800b23a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b224:	4b16      	ldr	r3, [pc, #88]	@ (800b280 <HAL_PWREx_ConfigSupply+0x70>)
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	f003 0307 	and.w	r3, r3, #7
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d001      	beq.n	800b236 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b232:	2301      	movs	r3, #1
 800b234:	e01f      	b.n	800b276 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b236:	2300      	movs	r3, #0
 800b238:	e01d      	b.n	800b276 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b23a:	4b11      	ldr	r3, [pc, #68]	@ (800b280 <HAL_PWREx_ConfigSupply+0x70>)
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	f023 0207 	bic.w	r2, r3, #7
 800b242:	490f      	ldr	r1, [pc, #60]	@ (800b280 <HAL_PWREx_ConfigSupply+0x70>)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4313      	orrs	r3, r2
 800b248:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b24a:	f7f9 f92d 	bl	80044a8 <HAL_GetTick>
 800b24e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b250:	e009      	b.n	800b266 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b252:	f7f9 f929 	bl	80044a8 <HAL_GetTick>
 800b256:	4602      	mov	r2, r0
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	1ad3      	subs	r3, r2, r3
 800b25c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b260:	d901      	bls.n	800b266 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	e007      	b.n	800b276 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b266:	4b06      	ldr	r3, [pc, #24]	@ (800b280 <HAL_PWREx_ConfigSupply+0x70>)
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b26e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b272:	d1ee      	bne.n	800b252 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	58024800 	.word	0x58024800

0800b284 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b08c      	sub	sp, #48	@ 0x30
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d101      	bne.n	800b296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b292:	2301      	movs	r3, #1
 800b294:	e3c8      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f003 0301 	and.w	r3, r3, #1
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	f000 8087 	beq.w	800b3b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b2a4:	4b88      	ldr	r3, [pc, #544]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b2a6:	691b      	ldr	r3, [r3, #16]
 800b2a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b2ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b2ae:	4b86      	ldr	r3, [pc, #536]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b6:	2b10      	cmp	r3, #16
 800b2b8:	d007      	beq.n	800b2ca <HAL_RCC_OscConfig+0x46>
 800b2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2bc:	2b18      	cmp	r3, #24
 800b2be:	d110      	bne.n	800b2e2 <HAL_RCC_OscConfig+0x5e>
 800b2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c2:	f003 0303 	and.w	r3, r3, #3
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	d10b      	bne.n	800b2e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b2ca:	4b7f      	ldr	r3, [pc, #508]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d06c      	beq.n	800b3b0 <HAL_RCC_OscConfig+0x12c>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d168      	bne.n	800b3b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e3a2      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2ea:	d106      	bne.n	800b2fa <HAL_RCC_OscConfig+0x76>
 800b2ec:	4b76      	ldr	r3, [pc, #472]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a75      	ldr	r2, [pc, #468]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b2f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	e02e      	b.n	800b358 <HAL_RCC_OscConfig+0xd4>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10c      	bne.n	800b31c <HAL_RCC_OscConfig+0x98>
 800b302:	4b71      	ldr	r3, [pc, #452]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a70      	ldr	r2, [pc, #448]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b30c:	6013      	str	r3, [r2, #0]
 800b30e:	4b6e      	ldr	r3, [pc, #440]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a6d      	ldr	r2, [pc, #436]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b314:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b318:	6013      	str	r3, [r2, #0]
 800b31a:	e01d      	b.n	800b358 <HAL_RCC_OscConfig+0xd4>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b324:	d10c      	bne.n	800b340 <HAL_RCC_OscConfig+0xbc>
 800b326:	4b68      	ldr	r3, [pc, #416]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a67      	ldr	r2, [pc, #412]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b32c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b330:	6013      	str	r3, [r2, #0]
 800b332:	4b65      	ldr	r3, [pc, #404]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a64      	ldr	r2, [pc, #400]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b33c:	6013      	str	r3, [r2, #0]
 800b33e:	e00b      	b.n	800b358 <HAL_RCC_OscConfig+0xd4>
 800b340:	4b61      	ldr	r3, [pc, #388]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a60      	ldr	r2, [pc, #384]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b34a:	6013      	str	r3, [r2, #0]
 800b34c:	4b5e      	ldr	r3, [pc, #376]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a5d      	ldr	r2, [pc, #372]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d013      	beq.n	800b388 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b360:	f7f9 f8a2 	bl	80044a8 <HAL_GetTick>
 800b364:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b366:	e008      	b.n	800b37a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b368:	f7f9 f89e 	bl	80044a8 <HAL_GetTick>
 800b36c:	4602      	mov	r2, r0
 800b36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b370:	1ad3      	subs	r3, r2, r3
 800b372:	2b64      	cmp	r3, #100	@ 0x64
 800b374:	d901      	bls.n	800b37a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b376:	2303      	movs	r3, #3
 800b378:	e356      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b37a:	4b53      	ldr	r3, [pc, #332]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b382:	2b00      	cmp	r3, #0
 800b384:	d0f0      	beq.n	800b368 <HAL_RCC_OscConfig+0xe4>
 800b386:	e014      	b.n	800b3b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b388:	f7f9 f88e 	bl	80044a8 <HAL_GetTick>
 800b38c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b38e:	e008      	b.n	800b3a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b390:	f7f9 f88a 	bl	80044a8 <HAL_GetTick>
 800b394:	4602      	mov	r2, r0
 800b396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b398:	1ad3      	subs	r3, r2, r3
 800b39a:	2b64      	cmp	r3, #100	@ 0x64
 800b39c:	d901      	bls.n	800b3a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	e342      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b3a2:	4b49      	ldr	r3, [pc, #292]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1f0      	bne.n	800b390 <HAL_RCC_OscConfig+0x10c>
 800b3ae:	e000      	b.n	800b3b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f003 0302 	and.w	r3, r3, #2
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f000 808c 	beq.w	800b4d8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b3c0:	4b41      	ldr	r3, [pc, #260]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b3c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b3ca:	4b3f      	ldr	r3, [pc, #252]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b3d0:	6a3b      	ldr	r3, [r7, #32]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d007      	beq.n	800b3e6 <HAL_RCC_OscConfig+0x162>
 800b3d6:	6a3b      	ldr	r3, [r7, #32]
 800b3d8:	2b18      	cmp	r3, #24
 800b3da:	d137      	bne.n	800b44c <HAL_RCC_OscConfig+0x1c8>
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	f003 0303 	and.w	r3, r3, #3
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d132      	bne.n	800b44c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b3e6:	4b38      	ldr	r3, [pc, #224]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f003 0304 	and.w	r3, r3, #4
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d005      	beq.n	800b3fe <HAL_RCC_OscConfig+0x17a>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d101      	bne.n	800b3fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e314      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b3fe:	4b32      	ldr	r3, [pc, #200]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f023 0219 	bic.w	r2, r3, #25
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	492f      	ldr	r1, [pc, #188]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b40c:	4313      	orrs	r3, r2
 800b40e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b410:	f7f9 f84a 	bl	80044a8 <HAL_GetTick>
 800b414:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b416:	e008      	b.n	800b42a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b418:	f7f9 f846 	bl	80044a8 <HAL_GetTick>
 800b41c:	4602      	mov	r2, r0
 800b41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b420:	1ad3      	subs	r3, r2, r3
 800b422:	2b02      	cmp	r3, #2
 800b424:	d901      	bls.n	800b42a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b426:	2303      	movs	r3, #3
 800b428:	e2fe      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b42a:	4b27      	ldr	r3, [pc, #156]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f003 0304 	and.w	r3, r3, #4
 800b432:	2b00      	cmp	r3, #0
 800b434:	d0f0      	beq.n	800b418 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b436:	4b24      	ldr	r3, [pc, #144]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	691b      	ldr	r3, [r3, #16]
 800b442:	061b      	lsls	r3, r3, #24
 800b444:	4920      	ldr	r1, [pc, #128]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b446:	4313      	orrs	r3, r2
 800b448:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b44a:	e045      	b.n	800b4d8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d026      	beq.n	800b4a2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b454:	4b1c      	ldr	r3, [pc, #112]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f023 0219 	bic.w	r2, r3, #25
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	4919      	ldr	r1, [pc, #100]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b462:	4313      	orrs	r3, r2
 800b464:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b466:	f7f9 f81f 	bl	80044a8 <HAL_GetTick>
 800b46a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b46c:	e008      	b.n	800b480 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b46e:	f7f9 f81b 	bl	80044a8 <HAL_GetTick>
 800b472:	4602      	mov	r2, r0
 800b474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d901      	bls.n	800b480 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e2d3      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b480:	4b11      	ldr	r3, [pc, #68]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 0304 	and.w	r3, r3, #4
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d0f0      	beq.n	800b46e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b48c:	4b0e      	ldr	r3, [pc, #56]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	691b      	ldr	r3, [r3, #16]
 800b498:	061b      	lsls	r3, r3, #24
 800b49a:	490b      	ldr	r1, [pc, #44]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b49c:	4313      	orrs	r3, r2
 800b49e:	604b      	str	r3, [r1, #4]
 800b4a0:	e01a      	b.n	800b4d8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b4a2:	4b09      	ldr	r3, [pc, #36]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a08      	ldr	r2, [pc, #32]	@ (800b4c8 <HAL_RCC_OscConfig+0x244>)
 800b4a8:	f023 0301 	bic.w	r3, r3, #1
 800b4ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4ae:	f7f8 fffb 	bl	80044a8 <HAL_GetTick>
 800b4b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b4b4:	e00a      	b.n	800b4cc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4b6:	f7f8 fff7 	bl	80044a8 <HAL_GetTick>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4be:	1ad3      	subs	r3, r2, r3
 800b4c0:	2b02      	cmp	r3, #2
 800b4c2:	d903      	bls.n	800b4cc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b4c4:	2303      	movs	r3, #3
 800b4c6:	e2af      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
 800b4c8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b4cc:	4b96      	ldr	r3, [pc, #600]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 0304 	and.w	r3, r3, #4
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1ee      	bne.n	800b4b6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 0310 	and.w	r3, r3, #16
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d06a      	beq.n	800b5ba <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b4e4:	4b90      	ldr	r3, [pc, #576]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b4e6:	691b      	ldr	r3, [r3, #16]
 800b4e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b4ec:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b4ee:	4b8e      	ldr	r3, [pc, #568]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b4f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4f2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	2b08      	cmp	r3, #8
 800b4f8:	d007      	beq.n	800b50a <HAL_RCC_OscConfig+0x286>
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	2b18      	cmp	r3, #24
 800b4fe:	d11b      	bne.n	800b538 <HAL_RCC_OscConfig+0x2b4>
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	f003 0303 	and.w	r3, r3, #3
 800b506:	2b01      	cmp	r3, #1
 800b508:	d116      	bne.n	800b538 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b50a:	4b87      	ldr	r3, [pc, #540]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b512:	2b00      	cmp	r3, #0
 800b514:	d005      	beq.n	800b522 <HAL_RCC_OscConfig+0x29e>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	69db      	ldr	r3, [r3, #28]
 800b51a:	2b80      	cmp	r3, #128	@ 0x80
 800b51c:	d001      	beq.n	800b522 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	e282      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b522:	4b81      	ldr	r3, [pc, #516]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a1b      	ldr	r3, [r3, #32]
 800b52e:	061b      	lsls	r3, r3, #24
 800b530:	497d      	ldr	r1, [pc, #500]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b532:	4313      	orrs	r3, r2
 800b534:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b536:	e040      	b.n	800b5ba <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	69db      	ldr	r3, [r3, #28]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d023      	beq.n	800b588 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b540:	4b79      	ldr	r3, [pc, #484]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a78      	ldr	r2, [pc, #480]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b54a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b54c:	f7f8 ffac 	bl	80044a8 <HAL_GetTick>
 800b550:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b552:	e008      	b.n	800b566 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b554:	f7f8 ffa8 	bl	80044a8 <HAL_GetTick>
 800b558:	4602      	mov	r2, r0
 800b55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55c:	1ad3      	subs	r3, r2, r3
 800b55e:	2b02      	cmp	r3, #2
 800b560:	d901      	bls.n	800b566 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b562:	2303      	movs	r3, #3
 800b564:	e260      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b566:	4b70      	ldr	r3, [pc, #448]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d0f0      	beq.n	800b554 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b572:	4b6d      	ldr	r3, [pc, #436]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	061b      	lsls	r3, r3, #24
 800b580:	4969      	ldr	r1, [pc, #420]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b582:	4313      	orrs	r3, r2
 800b584:	60cb      	str	r3, [r1, #12]
 800b586:	e018      	b.n	800b5ba <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b588:	4b67      	ldr	r3, [pc, #412]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a66      	ldr	r2, [pc, #408]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b58e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b594:	f7f8 ff88 	bl	80044a8 <HAL_GetTick>
 800b598:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b59a:	e008      	b.n	800b5ae <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b59c:	f7f8 ff84 	bl	80044a8 <HAL_GetTick>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a4:	1ad3      	subs	r3, r2, r3
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	d901      	bls.n	800b5ae <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	e23c      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b5ae:	4b5e      	ldr	r3, [pc, #376]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d1f0      	bne.n	800b59c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f003 0308 	and.w	r3, r3, #8
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d036      	beq.n	800b634 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	695b      	ldr	r3, [r3, #20]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d019      	beq.n	800b602 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b5ce:	4b56      	ldr	r3, [pc, #344]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b5d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5d2:	4a55      	ldr	r2, [pc, #340]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b5d4:	f043 0301 	orr.w	r3, r3, #1
 800b5d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5da:	f7f8 ff65 	bl	80044a8 <HAL_GetTick>
 800b5de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b5e0:	e008      	b.n	800b5f4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b5e2:	f7f8 ff61 	bl	80044a8 <HAL_GetTick>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	d901      	bls.n	800b5f4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800b5f0:	2303      	movs	r3, #3
 800b5f2:	e219      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b5f4:	4b4c      	ldr	r3, [pc, #304]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b5f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5f8:	f003 0302 	and.w	r3, r3, #2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d0f0      	beq.n	800b5e2 <HAL_RCC_OscConfig+0x35e>
 800b600:	e018      	b.n	800b634 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b602:	4b49      	ldr	r3, [pc, #292]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b606:	4a48      	ldr	r2, [pc, #288]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b608:	f023 0301 	bic.w	r3, r3, #1
 800b60c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b60e:	f7f8 ff4b 	bl	80044a8 <HAL_GetTick>
 800b612:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b614:	e008      	b.n	800b628 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b616:	f7f8 ff47 	bl	80044a8 <HAL_GetTick>
 800b61a:	4602      	mov	r2, r0
 800b61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	2b02      	cmp	r3, #2
 800b622:	d901      	bls.n	800b628 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800b624:	2303      	movs	r3, #3
 800b626:	e1ff      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b628:	4b3f      	ldr	r3, [pc, #252]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b62a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b62c:	f003 0302 	and.w	r3, r3, #2
 800b630:	2b00      	cmp	r3, #0
 800b632:	d1f0      	bne.n	800b616 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f003 0320 	and.w	r3, r3, #32
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d036      	beq.n	800b6ae <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	699b      	ldr	r3, [r3, #24]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d019      	beq.n	800b67c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b648:	4b37      	ldr	r3, [pc, #220]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a36      	ldr	r2, [pc, #216]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b64e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b652:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b654:	f7f8 ff28 	bl	80044a8 <HAL_GetTick>
 800b658:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b65a:	e008      	b.n	800b66e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b65c:	f7f8 ff24 	bl	80044a8 <HAL_GetTick>
 800b660:	4602      	mov	r2, r0
 800b662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	2b02      	cmp	r3, #2
 800b668:	d901      	bls.n	800b66e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800b66a:	2303      	movs	r3, #3
 800b66c:	e1dc      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b66e:	4b2e      	ldr	r3, [pc, #184]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b676:	2b00      	cmp	r3, #0
 800b678:	d0f0      	beq.n	800b65c <HAL_RCC_OscConfig+0x3d8>
 800b67a:	e018      	b.n	800b6ae <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b67c:	4b2a      	ldr	r3, [pc, #168]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a29      	ldr	r2, [pc, #164]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b682:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b686:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b688:	f7f8 ff0e 	bl	80044a8 <HAL_GetTick>
 800b68c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b68e:	e008      	b.n	800b6a2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b690:	f7f8 ff0a 	bl	80044a8 <HAL_GetTick>
 800b694:	4602      	mov	r2, r0
 800b696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b698:	1ad3      	subs	r3, r2, r3
 800b69a:	2b02      	cmp	r3, #2
 800b69c:	d901      	bls.n	800b6a2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800b69e:	2303      	movs	r3, #3
 800b6a0:	e1c2      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b6a2:	4b21      	ldr	r3, [pc, #132]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1f0      	bne.n	800b690 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 0304 	and.w	r3, r3, #4
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f000 8086 	beq.w	800b7c8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b6bc:	4b1b      	ldr	r3, [pc, #108]	@ (800b72c <HAL_RCC_OscConfig+0x4a8>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a1a      	ldr	r2, [pc, #104]	@ (800b72c <HAL_RCC_OscConfig+0x4a8>)
 800b6c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b6c8:	f7f8 feee 	bl	80044a8 <HAL_GetTick>
 800b6cc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b6ce:	e008      	b.n	800b6e2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6d0:	f7f8 feea 	bl	80044a8 <HAL_GetTick>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	2b64      	cmp	r3, #100	@ 0x64
 800b6dc:	d901      	bls.n	800b6e2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	e1a2      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b6e2:	4b12      	ldr	r3, [pc, #72]	@ (800b72c <HAL_RCC_OscConfig+0x4a8>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d0f0      	beq.n	800b6d0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d106      	bne.n	800b704 <HAL_RCC_OscConfig+0x480>
 800b6f6:	4b0c      	ldr	r3, [pc, #48]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b6f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6fa:	4a0b      	ldr	r2, [pc, #44]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b6fc:	f043 0301 	orr.w	r3, r3, #1
 800b700:	6713      	str	r3, [r2, #112]	@ 0x70
 800b702:	e032      	b.n	800b76a <HAL_RCC_OscConfig+0x4e6>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d111      	bne.n	800b730 <HAL_RCC_OscConfig+0x4ac>
 800b70c:	4b06      	ldr	r3, [pc, #24]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b70e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b710:	4a05      	ldr	r2, [pc, #20]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b712:	f023 0301 	bic.w	r3, r3, #1
 800b716:	6713      	str	r3, [r2, #112]	@ 0x70
 800b718:	4b03      	ldr	r3, [pc, #12]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b71a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b71c:	4a02      	ldr	r2, [pc, #8]	@ (800b728 <HAL_RCC_OscConfig+0x4a4>)
 800b71e:	f023 0304 	bic.w	r3, r3, #4
 800b722:	6713      	str	r3, [r2, #112]	@ 0x70
 800b724:	e021      	b.n	800b76a <HAL_RCC_OscConfig+0x4e6>
 800b726:	bf00      	nop
 800b728:	58024400 	.word	0x58024400
 800b72c:	58024800 	.word	0x58024800
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	689b      	ldr	r3, [r3, #8]
 800b734:	2b05      	cmp	r3, #5
 800b736:	d10c      	bne.n	800b752 <HAL_RCC_OscConfig+0x4ce>
 800b738:	4b83      	ldr	r3, [pc, #524]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b73a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b73c:	4a82      	ldr	r2, [pc, #520]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b73e:	f043 0304 	orr.w	r3, r3, #4
 800b742:	6713      	str	r3, [r2, #112]	@ 0x70
 800b744:	4b80      	ldr	r3, [pc, #512]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b748:	4a7f      	ldr	r2, [pc, #508]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b74a:	f043 0301 	orr.w	r3, r3, #1
 800b74e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b750:	e00b      	b.n	800b76a <HAL_RCC_OscConfig+0x4e6>
 800b752:	4b7d      	ldr	r3, [pc, #500]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b756:	4a7c      	ldr	r2, [pc, #496]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b758:	f023 0301 	bic.w	r3, r3, #1
 800b75c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b75e:	4b7a      	ldr	r3, [pc, #488]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b762:	4a79      	ldr	r2, [pc, #484]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b764:	f023 0304 	bic.w	r3, r3, #4
 800b768:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d015      	beq.n	800b79e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b772:	f7f8 fe99 	bl	80044a8 <HAL_GetTick>
 800b776:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b778:	e00a      	b.n	800b790 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b77a:	f7f8 fe95 	bl	80044a8 <HAL_GetTick>
 800b77e:	4602      	mov	r2, r0
 800b780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b782:	1ad3      	subs	r3, r2, r3
 800b784:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b788:	4293      	cmp	r3, r2
 800b78a:	d901      	bls.n	800b790 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800b78c:	2303      	movs	r3, #3
 800b78e:	e14b      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b790:	4b6d      	ldr	r3, [pc, #436]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b794:	f003 0302 	and.w	r3, r3, #2
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d0ee      	beq.n	800b77a <HAL_RCC_OscConfig+0x4f6>
 800b79c:	e014      	b.n	800b7c8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b79e:	f7f8 fe83 	bl	80044a8 <HAL_GetTick>
 800b7a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b7a4:	e00a      	b.n	800b7bc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7a6:	f7f8 fe7f 	bl	80044a8 <HAL_GetTick>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ae:	1ad3      	subs	r3, r2, r3
 800b7b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d901      	bls.n	800b7bc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b7b8:	2303      	movs	r3, #3
 800b7ba:	e135      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b7bc:	4b62      	ldr	r3, [pc, #392]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b7be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7c0:	f003 0302 	and.w	r3, r3, #2
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1ee      	bne.n	800b7a6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 812a 	beq.w	800ba26 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b7d2:	4b5d      	ldr	r3, [pc, #372]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b7d4:	691b      	ldr	r3, [r3, #16]
 800b7d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b7da:	2b18      	cmp	r3, #24
 800b7dc:	f000 80ba 	beq.w	800b954 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	f040 8095 	bne.w	800b914 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7ea:	4b57      	ldr	r3, [pc, #348]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a56      	ldr	r2, [pc, #344]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b7f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b7f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7f6:	f7f8 fe57 	bl	80044a8 <HAL_GetTick>
 800b7fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b7fc:	e008      	b.n	800b810 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7fe:	f7f8 fe53 	bl	80044a8 <HAL_GetTick>
 800b802:	4602      	mov	r2, r0
 800b804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b806:	1ad3      	subs	r3, r2, r3
 800b808:	2b02      	cmp	r3, #2
 800b80a:	d901      	bls.n	800b810 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b80c:	2303      	movs	r3, #3
 800b80e:	e10b      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b810:	4b4d      	ldr	r3, [pc, #308]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1f0      	bne.n	800b7fe <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b81c:	4b4a      	ldr	r3, [pc, #296]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b81e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b820:	4b4a      	ldr	r3, [pc, #296]	@ (800b94c <HAL_RCC_OscConfig+0x6c8>)
 800b822:	4013      	ands	r3, r2
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b82c:	0112      	lsls	r2, r2, #4
 800b82e:	430a      	orrs	r2, r1
 800b830:	4945      	ldr	r1, [pc, #276]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b832:	4313      	orrs	r3, r2
 800b834:	628b      	str	r3, [r1, #40]	@ 0x28
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b83a:	3b01      	subs	r3, #1
 800b83c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b844:	3b01      	subs	r3, #1
 800b846:	025b      	lsls	r3, r3, #9
 800b848:	b29b      	uxth	r3, r3
 800b84a:	431a      	orrs	r2, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b850:	3b01      	subs	r3, #1
 800b852:	041b      	lsls	r3, r3, #16
 800b854:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b858:	431a      	orrs	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b85e:	3b01      	subs	r3, #1
 800b860:	061b      	lsls	r3, r3, #24
 800b862:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b866:	4938      	ldr	r1, [pc, #224]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b868:	4313      	orrs	r3, r2
 800b86a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b86c:	4b36      	ldr	r3, [pc, #216]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b870:	4a35      	ldr	r2, [pc, #212]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b872:	f023 0301 	bic.w	r3, r3, #1
 800b876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b878:	4b33      	ldr	r3, [pc, #204]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b87a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b87c:	4b34      	ldr	r3, [pc, #208]	@ (800b950 <HAL_RCC_OscConfig+0x6cc>)
 800b87e:	4013      	ands	r3, r2
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b884:	00d2      	lsls	r2, r2, #3
 800b886:	4930      	ldr	r1, [pc, #192]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b888:	4313      	orrs	r3, r2
 800b88a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b88c:	4b2e      	ldr	r3, [pc, #184]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b88e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b890:	f023 020c 	bic.w	r2, r3, #12
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b898:	492b      	ldr	r1, [pc, #172]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b89a:	4313      	orrs	r3, r2
 800b89c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b89e:	4b2a      	ldr	r3, [pc, #168]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a2:	f023 0202 	bic.w	r2, r3, #2
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8aa:	4927      	ldr	r1, [pc, #156]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b8b0:	4b25      	ldr	r3, [pc, #148]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b8b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8b4:	4a24      	ldr	r2, [pc, #144]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b8b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b8ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8bc:	4b22      	ldr	r3, [pc, #136]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8c0:	4a21      	ldr	r2, [pc, #132]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b8c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b8c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b8c8:	4b1f      	ldr	r3, [pc, #124]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8cc:	4a1e      	ldr	r2, [pc, #120]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b8ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b8d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b8d4:	4b1c      	ldr	r3, [pc, #112]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b8d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8d8:	4a1b      	ldr	r2, [pc, #108]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b8da:	f043 0301 	orr.w	r3, r3, #1
 800b8de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b8e0:	4b19      	ldr	r3, [pc, #100]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a18      	ldr	r2, [pc, #96]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b8e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b8ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8ec:	f7f8 fddc 	bl	80044a8 <HAL_GetTick>
 800b8f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b8f2:	e008      	b.n	800b906 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8f4:	f7f8 fdd8 	bl	80044a8 <HAL_GetTick>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8fc:	1ad3      	subs	r3, r2, r3
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	d901      	bls.n	800b906 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b902:	2303      	movs	r3, #3
 800b904:	e090      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b906:	4b10      	ldr	r3, [pc, #64]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d0f0      	beq.n	800b8f4 <HAL_RCC_OscConfig+0x670>
 800b912:	e088      	b.n	800ba26 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b914:	4b0c      	ldr	r3, [pc, #48]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a0b      	ldr	r2, [pc, #44]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b91a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b91e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b920:	f7f8 fdc2 	bl	80044a8 <HAL_GetTick>
 800b924:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b926:	e008      	b.n	800b93a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b928:	f7f8 fdbe 	bl	80044a8 <HAL_GetTick>
 800b92c:	4602      	mov	r2, r0
 800b92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b930:	1ad3      	subs	r3, r2, r3
 800b932:	2b02      	cmp	r3, #2
 800b934:	d901      	bls.n	800b93a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b936:	2303      	movs	r3, #3
 800b938:	e076      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b93a:	4b03      	ldr	r3, [pc, #12]	@ (800b948 <HAL_RCC_OscConfig+0x6c4>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b942:	2b00      	cmp	r3, #0
 800b944:	d1f0      	bne.n	800b928 <HAL_RCC_OscConfig+0x6a4>
 800b946:	e06e      	b.n	800ba26 <HAL_RCC_OscConfig+0x7a2>
 800b948:	58024400 	.word	0x58024400
 800b94c:	fffffc0c 	.word	0xfffffc0c
 800b950:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b954:	4b36      	ldr	r3, [pc, #216]	@ (800ba30 <HAL_RCC_OscConfig+0x7ac>)
 800b956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b958:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b95a:	4b35      	ldr	r3, [pc, #212]	@ (800ba30 <HAL_RCC_OscConfig+0x7ac>)
 800b95c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b95e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b964:	2b01      	cmp	r3, #1
 800b966:	d031      	beq.n	800b9cc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	f003 0203 	and.w	r2, r3, #3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b972:	429a      	cmp	r2, r3
 800b974:	d12a      	bne.n	800b9cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	091b      	lsrs	r3, r3, #4
 800b97a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b982:	429a      	cmp	r2, r3
 800b984:	d122      	bne.n	800b9cc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b990:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b992:	429a      	cmp	r2, r3
 800b994:	d11a      	bne.n	800b9cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	0a5b      	lsrs	r3, r3, #9
 800b99a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d111      	bne.n	800b9cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	0c1b      	lsrs	r3, r3, #16
 800b9ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d108      	bne.n	800b9cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	0e1b      	lsrs	r3, r3, #24
 800b9be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d001      	beq.n	800b9d0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e02b      	b.n	800ba28 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b9d0:	4b17      	ldr	r3, [pc, #92]	@ (800ba30 <HAL_RCC_OscConfig+0x7ac>)
 800b9d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9d4:	08db      	lsrs	r3, r3, #3
 800b9d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d01f      	beq.n	800ba26 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b9e6:	4b12      	ldr	r3, [pc, #72]	@ (800ba30 <HAL_RCC_OscConfig+0x7ac>)
 800b9e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ea:	4a11      	ldr	r2, [pc, #68]	@ (800ba30 <HAL_RCC_OscConfig+0x7ac>)
 800b9ec:	f023 0301 	bic.w	r3, r3, #1
 800b9f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b9f2:	f7f8 fd59 	bl	80044a8 <HAL_GetTick>
 800b9f6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b9f8:	bf00      	nop
 800b9fa:	f7f8 fd55 	bl	80044a8 <HAL_GetTick>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d0f9      	beq.n	800b9fa <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ba06:	4b0a      	ldr	r3, [pc, #40]	@ (800ba30 <HAL_RCC_OscConfig+0x7ac>)
 800ba08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba0a:	4b0a      	ldr	r3, [pc, #40]	@ (800ba34 <HAL_RCC_OscConfig+0x7b0>)
 800ba0c:	4013      	ands	r3, r2
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ba12:	00d2      	lsls	r2, r2, #3
 800ba14:	4906      	ldr	r1, [pc, #24]	@ (800ba30 <HAL_RCC_OscConfig+0x7ac>)
 800ba16:	4313      	orrs	r3, r2
 800ba18:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ba1a:	4b05      	ldr	r3, [pc, #20]	@ (800ba30 <HAL_RCC_OscConfig+0x7ac>)
 800ba1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba1e:	4a04      	ldr	r2, [pc, #16]	@ (800ba30 <HAL_RCC_OscConfig+0x7ac>)
 800ba20:	f043 0301 	orr.w	r3, r3, #1
 800ba24:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3730      	adds	r7, #48	@ 0x30
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	58024400 	.word	0x58024400
 800ba34:	ffff0007 	.word	0xffff0007

0800ba38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b086      	sub	sp, #24
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d101      	bne.n	800ba4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e19c      	b.n	800bd86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ba4c:	4b8a      	ldr	r3, [pc, #552]	@ (800bc78 <HAL_RCC_ClockConfig+0x240>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f003 030f 	and.w	r3, r3, #15
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d910      	bls.n	800ba7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba5a:	4b87      	ldr	r3, [pc, #540]	@ (800bc78 <HAL_RCC_ClockConfig+0x240>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f023 020f 	bic.w	r2, r3, #15
 800ba62:	4985      	ldr	r1, [pc, #532]	@ (800bc78 <HAL_RCC_ClockConfig+0x240>)
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba6a:	4b83      	ldr	r3, [pc, #524]	@ (800bc78 <HAL_RCC_ClockConfig+0x240>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f003 030f 	and.w	r3, r3, #15
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d001      	beq.n	800ba7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e184      	b.n	800bd86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 0304 	and.w	r3, r3, #4
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d010      	beq.n	800baaa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	691a      	ldr	r2, [r3, #16]
 800ba8c:	4b7b      	ldr	r3, [pc, #492]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d908      	bls.n	800baaa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ba98:	4b78      	ldr	r3, [pc, #480]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800ba9a:	699b      	ldr	r3, [r3, #24]
 800ba9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	691b      	ldr	r3, [r3, #16]
 800baa4:	4975      	ldr	r1, [pc, #468]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800baa6:	4313      	orrs	r3, r2
 800baa8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f003 0308 	and.w	r3, r3, #8
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d010      	beq.n	800bad8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	695a      	ldr	r2, [r3, #20]
 800baba:	4b70      	ldr	r3, [pc, #448]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800babc:	69db      	ldr	r3, [r3, #28]
 800babe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d908      	bls.n	800bad8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bac6:	4b6d      	ldr	r3, [pc, #436]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bac8:	69db      	ldr	r3, [r3, #28]
 800baca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	695b      	ldr	r3, [r3, #20]
 800bad2:	496a      	ldr	r1, [pc, #424]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bad4:	4313      	orrs	r3, r2
 800bad6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 0310 	and.w	r3, r3, #16
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d010      	beq.n	800bb06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	699a      	ldr	r2, [r3, #24]
 800bae8:	4b64      	ldr	r3, [pc, #400]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800baea:	69db      	ldr	r3, [r3, #28]
 800baec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d908      	bls.n	800bb06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800baf4:	4b61      	ldr	r3, [pc, #388]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800baf6:	69db      	ldr	r3, [r3, #28]
 800baf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	495e      	ldr	r1, [pc, #376]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bb02:	4313      	orrs	r3, r2
 800bb04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f003 0320 	and.w	r3, r3, #32
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d010      	beq.n	800bb34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	69da      	ldr	r2, [r3, #28]
 800bb16:	4b59      	ldr	r3, [pc, #356]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bb18:	6a1b      	ldr	r3, [r3, #32]
 800bb1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d908      	bls.n	800bb34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bb22:	4b56      	ldr	r3, [pc, #344]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bb24:	6a1b      	ldr	r3, [r3, #32]
 800bb26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	69db      	ldr	r3, [r3, #28]
 800bb2e:	4953      	ldr	r1, [pc, #332]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bb30:	4313      	orrs	r3, r2
 800bb32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0302 	and.w	r3, r3, #2
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d010      	beq.n	800bb62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	68da      	ldr	r2, [r3, #12]
 800bb44:	4b4d      	ldr	r3, [pc, #308]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	f003 030f 	and.w	r3, r3, #15
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d908      	bls.n	800bb62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bb50:	4b4a      	ldr	r3, [pc, #296]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	f023 020f 	bic.w	r2, r3, #15
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	4947      	ldr	r1, [pc, #284]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f003 0301 	and.w	r3, r3, #1
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d055      	beq.n	800bc1a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bb6e:	4b43      	ldr	r3, [pc, #268]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bb70:	699b      	ldr	r3, [r3, #24]
 800bb72:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	4940      	ldr	r1, [pc, #256]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d107      	bne.n	800bb98 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bb88:	4b3c      	ldr	r3, [pc, #240]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d121      	bne.n	800bbd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bb94:	2301      	movs	r3, #1
 800bb96:	e0f6      	b.n	800bd86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	2b03      	cmp	r3, #3
 800bb9e:	d107      	bne.n	800bbb0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bba0:	4b36      	ldr	r3, [pc, #216]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d115      	bne.n	800bbd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bbac:	2301      	movs	r3, #1
 800bbae:	e0ea      	b.n	800bd86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d107      	bne.n	800bbc8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bbb8:	4b30      	ldr	r3, [pc, #192]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d109      	bne.n	800bbd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e0de      	b.n	800bd86 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bbc8:	4b2c      	ldr	r3, [pc, #176]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f003 0304 	and.w	r3, r3, #4
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d101      	bne.n	800bbd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	e0d6      	b.n	800bd86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bbd8:	4b28      	ldr	r3, [pc, #160]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	f023 0207 	bic.w	r2, r3, #7
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	4925      	ldr	r1, [pc, #148]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbea:	f7f8 fc5d 	bl	80044a8 <HAL_GetTick>
 800bbee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bbf0:	e00a      	b.n	800bc08 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bbf2:	f7f8 fc59 	bl	80044a8 <HAL_GetTick>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d901      	bls.n	800bc08 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800bc04:	2303      	movs	r3, #3
 800bc06:	e0be      	b.n	800bd86 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc08:	4b1c      	ldr	r3, [pc, #112]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	00db      	lsls	r3, r3, #3
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d1eb      	bne.n	800bbf2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f003 0302 	and.w	r3, r3, #2
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d010      	beq.n	800bc48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	68da      	ldr	r2, [r3, #12]
 800bc2a:	4b14      	ldr	r3, [pc, #80]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bc2c:	699b      	ldr	r3, [r3, #24]
 800bc2e:	f003 030f 	and.w	r3, r3, #15
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d208      	bcs.n	800bc48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc36:	4b11      	ldr	r3, [pc, #68]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bc38:	699b      	ldr	r3, [r3, #24]
 800bc3a:	f023 020f 	bic.w	r2, r3, #15
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	490e      	ldr	r1, [pc, #56]	@ (800bc7c <HAL_RCC_ClockConfig+0x244>)
 800bc44:	4313      	orrs	r3, r2
 800bc46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bc48:	4b0b      	ldr	r3, [pc, #44]	@ (800bc78 <HAL_RCC_ClockConfig+0x240>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f003 030f 	and.w	r3, r3, #15
 800bc50:	683a      	ldr	r2, [r7, #0]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d214      	bcs.n	800bc80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc56:	4b08      	ldr	r3, [pc, #32]	@ (800bc78 <HAL_RCC_ClockConfig+0x240>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f023 020f 	bic.w	r2, r3, #15
 800bc5e:	4906      	ldr	r1, [pc, #24]	@ (800bc78 <HAL_RCC_ClockConfig+0x240>)
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	4313      	orrs	r3, r2
 800bc64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc66:	4b04      	ldr	r3, [pc, #16]	@ (800bc78 <HAL_RCC_ClockConfig+0x240>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f003 030f 	and.w	r3, r3, #15
 800bc6e:	683a      	ldr	r2, [r7, #0]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d005      	beq.n	800bc80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	e086      	b.n	800bd86 <HAL_RCC_ClockConfig+0x34e>
 800bc78:	52002000 	.word	0x52002000
 800bc7c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f003 0304 	and.w	r3, r3, #4
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d010      	beq.n	800bcae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	691a      	ldr	r2, [r3, #16]
 800bc90:	4b3f      	ldr	r3, [pc, #252]	@ (800bd90 <HAL_RCC_ClockConfig+0x358>)
 800bc92:	699b      	ldr	r3, [r3, #24]
 800bc94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d208      	bcs.n	800bcae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bc9c:	4b3c      	ldr	r3, [pc, #240]	@ (800bd90 <HAL_RCC_ClockConfig+0x358>)
 800bc9e:	699b      	ldr	r3, [r3, #24]
 800bca0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	691b      	ldr	r3, [r3, #16]
 800bca8:	4939      	ldr	r1, [pc, #228]	@ (800bd90 <HAL_RCC_ClockConfig+0x358>)
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f003 0308 	and.w	r3, r3, #8
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d010      	beq.n	800bcdc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	695a      	ldr	r2, [r3, #20]
 800bcbe:	4b34      	ldr	r3, [pc, #208]	@ (800bd90 <HAL_RCC_ClockConfig+0x358>)
 800bcc0:	69db      	ldr	r3, [r3, #28]
 800bcc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d208      	bcs.n	800bcdc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bcca:	4b31      	ldr	r3, [pc, #196]	@ (800bd90 <HAL_RCC_ClockConfig+0x358>)
 800bccc:	69db      	ldr	r3, [r3, #28]
 800bcce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	695b      	ldr	r3, [r3, #20]
 800bcd6:	492e      	ldr	r1, [pc, #184]	@ (800bd90 <HAL_RCC_ClockConfig+0x358>)
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f003 0310 	and.w	r3, r3, #16
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d010      	beq.n	800bd0a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	699a      	ldr	r2, [r3, #24]
 800bcec:	4b28      	ldr	r3, [pc, #160]	@ (800bd90 <HAL_RCC_ClockConfig+0x358>)
 800bcee:	69db      	ldr	r3, [r3, #28]
 800bcf0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d208      	bcs.n	800bd0a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bcf8:	4b25      	ldr	r3, [pc, #148]	@ (800bd90 <HAL_RCC_ClockConfig+0x358>)
 800bcfa:	69db      	ldr	r3, [r3, #28]
 800bcfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	699b      	ldr	r3, [r3, #24]
 800bd04:	4922      	ldr	r1, [pc, #136]	@ (800bd90 <HAL_RCC_ClockConfig+0x358>)
 800bd06:	4313      	orrs	r3, r2
 800bd08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f003 0320 	and.w	r3, r3, #32
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d010      	beq.n	800bd38 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	69da      	ldr	r2, [r3, #28]
 800bd1a:	4b1d      	ldr	r3, [pc, #116]	@ (800bd90 <HAL_RCC_ClockConfig+0x358>)
 800bd1c:	6a1b      	ldr	r3, [r3, #32]
 800bd1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d208      	bcs.n	800bd38 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bd26:	4b1a      	ldr	r3, [pc, #104]	@ (800bd90 <HAL_RCC_ClockConfig+0x358>)
 800bd28:	6a1b      	ldr	r3, [r3, #32]
 800bd2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	69db      	ldr	r3, [r3, #28]
 800bd32:	4917      	ldr	r1, [pc, #92]	@ (800bd90 <HAL_RCC_ClockConfig+0x358>)
 800bd34:	4313      	orrs	r3, r2
 800bd36:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bd38:	f000 f834 	bl	800bda4 <HAL_RCC_GetSysClockFreq>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	4b14      	ldr	r3, [pc, #80]	@ (800bd90 <HAL_RCC_ClockConfig+0x358>)
 800bd40:	699b      	ldr	r3, [r3, #24]
 800bd42:	0a1b      	lsrs	r3, r3, #8
 800bd44:	f003 030f 	and.w	r3, r3, #15
 800bd48:	4912      	ldr	r1, [pc, #72]	@ (800bd94 <HAL_RCC_ClockConfig+0x35c>)
 800bd4a:	5ccb      	ldrb	r3, [r1, r3]
 800bd4c:	f003 031f 	and.w	r3, r3, #31
 800bd50:	fa22 f303 	lsr.w	r3, r2, r3
 800bd54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bd56:	4b0e      	ldr	r3, [pc, #56]	@ (800bd90 <HAL_RCC_ClockConfig+0x358>)
 800bd58:	699b      	ldr	r3, [r3, #24]
 800bd5a:	f003 030f 	and.w	r3, r3, #15
 800bd5e:	4a0d      	ldr	r2, [pc, #52]	@ (800bd94 <HAL_RCC_ClockConfig+0x35c>)
 800bd60:	5cd3      	ldrb	r3, [r2, r3]
 800bd62:	f003 031f 	and.w	r3, r3, #31
 800bd66:	693a      	ldr	r2, [r7, #16]
 800bd68:	fa22 f303 	lsr.w	r3, r2, r3
 800bd6c:	4a0a      	ldr	r2, [pc, #40]	@ (800bd98 <HAL_RCC_ClockConfig+0x360>)
 800bd6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bd70:	4a0a      	ldr	r2, [pc, #40]	@ (800bd9c <HAL_RCC_ClockConfig+0x364>)
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800bd76:	4b0a      	ldr	r3, [pc, #40]	@ (800bda0 <HAL_RCC_ClockConfig+0x368>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7f8 fb4a 	bl	8004414 <HAL_InitTick>
 800bd80:	4603      	mov	r3, r0
 800bd82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800bd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3718      	adds	r7, #24
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	58024400 	.word	0x58024400
 800bd94:	0801c91c 	.word	0x0801c91c
 800bd98:	24000014 	.word	0x24000014
 800bd9c:	24000010 	.word	0x24000010
 800bda0:	24000018 	.word	0x24000018

0800bda4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b089      	sub	sp, #36	@ 0x24
 800bda8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bdaa:	4bb3      	ldr	r3, [pc, #716]	@ (800c078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bdac:	691b      	ldr	r3, [r3, #16]
 800bdae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bdb2:	2b18      	cmp	r3, #24
 800bdb4:	f200 8155 	bhi.w	800c062 <HAL_RCC_GetSysClockFreq+0x2be>
 800bdb8:	a201      	add	r2, pc, #4	@ (adr r2, 800bdc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800bdba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbe:	bf00      	nop
 800bdc0:	0800be25 	.word	0x0800be25
 800bdc4:	0800c063 	.word	0x0800c063
 800bdc8:	0800c063 	.word	0x0800c063
 800bdcc:	0800c063 	.word	0x0800c063
 800bdd0:	0800c063 	.word	0x0800c063
 800bdd4:	0800c063 	.word	0x0800c063
 800bdd8:	0800c063 	.word	0x0800c063
 800bddc:	0800c063 	.word	0x0800c063
 800bde0:	0800be4b 	.word	0x0800be4b
 800bde4:	0800c063 	.word	0x0800c063
 800bde8:	0800c063 	.word	0x0800c063
 800bdec:	0800c063 	.word	0x0800c063
 800bdf0:	0800c063 	.word	0x0800c063
 800bdf4:	0800c063 	.word	0x0800c063
 800bdf8:	0800c063 	.word	0x0800c063
 800bdfc:	0800c063 	.word	0x0800c063
 800be00:	0800be51 	.word	0x0800be51
 800be04:	0800c063 	.word	0x0800c063
 800be08:	0800c063 	.word	0x0800c063
 800be0c:	0800c063 	.word	0x0800c063
 800be10:	0800c063 	.word	0x0800c063
 800be14:	0800c063 	.word	0x0800c063
 800be18:	0800c063 	.word	0x0800c063
 800be1c:	0800c063 	.word	0x0800c063
 800be20:	0800be57 	.word	0x0800be57
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be24:	4b94      	ldr	r3, [pc, #592]	@ (800c078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f003 0320 	and.w	r3, r3, #32
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d009      	beq.n	800be44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be30:	4b91      	ldr	r3, [pc, #580]	@ (800c078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	08db      	lsrs	r3, r3, #3
 800be36:	f003 0303 	and.w	r3, r3, #3
 800be3a:	4a90      	ldr	r2, [pc, #576]	@ (800c07c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800be3c:	fa22 f303 	lsr.w	r3, r2, r3
 800be40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800be42:	e111      	b.n	800c068 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800be44:	4b8d      	ldr	r3, [pc, #564]	@ (800c07c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800be46:	61bb      	str	r3, [r7, #24]
      break;
 800be48:	e10e      	b.n	800c068 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800be4a:	4b8d      	ldr	r3, [pc, #564]	@ (800c080 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800be4c:	61bb      	str	r3, [r7, #24]
      break;
 800be4e:	e10b      	b.n	800c068 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800be50:	4b8c      	ldr	r3, [pc, #560]	@ (800c084 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800be52:	61bb      	str	r3, [r7, #24]
      break;
 800be54:	e108      	b.n	800c068 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be56:	4b88      	ldr	r3, [pc, #544]	@ (800c078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be5a:	f003 0303 	and.w	r3, r3, #3
 800be5e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800be60:	4b85      	ldr	r3, [pc, #532]	@ (800c078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be64:	091b      	lsrs	r3, r3, #4
 800be66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be6a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800be6c:	4b82      	ldr	r3, [pc, #520]	@ (800c078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be70:	f003 0301 	and.w	r3, r3, #1
 800be74:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800be76:	4b80      	ldr	r3, [pc, #512]	@ (800c078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be7a:	08db      	lsrs	r3, r3, #3
 800be7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	fb02 f303 	mul.w	r3, r2, r3
 800be86:	ee07 3a90 	vmov	s15, r3
 800be8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be8e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	2b00      	cmp	r3, #0
 800be96:	f000 80e1 	beq.w	800c05c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	f000 8083 	beq.w	800bfa8 <HAL_RCC_GetSysClockFreq+0x204>
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	2b02      	cmp	r3, #2
 800bea6:	f200 80a1 	bhi.w	800bfec <HAL_RCC_GetSysClockFreq+0x248>
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d003      	beq.n	800beb8 <HAL_RCC_GetSysClockFreq+0x114>
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d056      	beq.n	800bf64 <HAL_RCC_GetSysClockFreq+0x1c0>
 800beb6:	e099      	b.n	800bfec <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800beb8:	4b6f      	ldr	r3, [pc, #444]	@ (800c078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 0320 	and.w	r3, r3, #32
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d02d      	beq.n	800bf20 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bec4:	4b6c      	ldr	r3, [pc, #432]	@ (800c078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	08db      	lsrs	r3, r3, #3
 800beca:	f003 0303 	and.w	r3, r3, #3
 800bece:	4a6b      	ldr	r2, [pc, #428]	@ (800c07c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bed0:	fa22 f303 	lsr.w	r3, r2, r3
 800bed4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	ee07 3a90 	vmov	s15, r3
 800bedc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	ee07 3a90 	vmov	s15, r3
 800bee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beee:	4b62      	ldr	r3, [pc, #392]	@ (800c078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bef6:	ee07 3a90 	vmov	s15, r3
 800befa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800befe:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf02:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c088 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bf06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf1a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800bf1e:	e087      	b.n	800c030 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	ee07 3a90 	vmov	s15, r3
 800bf26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf2a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c08c <HAL_RCC_GetSysClockFreq+0x2e8>
 800bf2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf32:	4b51      	ldr	r3, [pc, #324]	@ (800c078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf3a:	ee07 3a90 	vmov	s15, r3
 800bf3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf42:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf46:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c088 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bf4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bf62:	e065      	b.n	800c030 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	ee07 3a90 	vmov	s15, r3
 800bf6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf6e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c090 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bf72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf76:	4b40      	ldr	r3, [pc, #256]	@ (800c078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf7e:	ee07 3a90 	vmov	s15, r3
 800bf82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf86:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf8a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c088 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bf8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bfa6:	e043      	b.n	800c030 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	ee07 3a90 	vmov	s15, r3
 800bfae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfb2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c094 <HAL_RCC_GetSysClockFreq+0x2f0>
 800bfb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfba:	4b2f      	ldr	r3, [pc, #188]	@ (800c078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfc2:	ee07 3a90 	vmov	s15, r3
 800bfc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfca:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c088 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bfd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfe6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bfea:	e021      	b.n	800c030 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	ee07 3a90 	vmov	s15, r3
 800bff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c090 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bffe:	4b1e      	ldr	r3, [pc, #120]	@ (800c078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c006:	ee07 3a90 	vmov	s15, r3
 800c00a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c00e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c012:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c088 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c01a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c01e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c02a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c02e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c030:	4b11      	ldr	r3, [pc, #68]	@ (800c078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c034:	0a5b      	lsrs	r3, r3, #9
 800c036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c03a:	3301      	adds	r3, #1
 800c03c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	ee07 3a90 	vmov	s15, r3
 800c044:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c048:	edd7 6a07 	vldr	s13, [r7, #28]
 800c04c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c054:	ee17 3a90 	vmov	r3, s15
 800c058:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c05a:	e005      	b.n	800c068 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c05c:	2300      	movs	r3, #0
 800c05e:	61bb      	str	r3, [r7, #24]
      break;
 800c060:	e002      	b.n	800c068 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c062:	4b07      	ldr	r3, [pc, #28]	@ (800c080 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c064:	61bb      	str	r3, [r7, #24]
      break;
 800c066:	bf00      	nop
  }

  return sysclockfreq;
 800c068:	69bb      	ldr	r3, [r7, #24]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3724      	adds	r7, #36	@ 0x24
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr
 800c076:	bf00      	nop
 800c078:	58024400 	.word	0x58024400
 800c07c:	03d09000 	.word	0x03d09000
 800c080:	003d0900 	.word	0x003d0900
 800c084:	007a1200 	.word	0x007a1200
 800c088:	46000000 	.word	0x46000000
 800c08c:	4c742400 	.word	0x4c742400
 800c090:	4a742400 	.word	0x4a742400
 800c094:	4af42400 	.word	0x4af42400

0800c098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c09e:	f7ff fe81 	bl	800bda4 <HAL_RCC_GetSysClockFreq>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	4b10      	ldr	r3, [pc, #64]	@ (800c0e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800c0a6:	699b      	ldr	r3, [r3, #24]
 800c0a8:	0a1b      	lsrs	r3, r3, #8
 800c0aa:	f003 030f 	and.w	r3, r3, #15
 800c0ae:	490f      	ldr	r1, [pc, #60]	@ (800c0ec <HAL_RCC_GetHCLKFreq+0x54>)
 800c0b0:	5ccb      	ldrb	r3, [r1, r3]
 800c0b2:	f003 031f 	and.w	r3, r3, #31
 800c0b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c0bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c0e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800c0be:	699b      	ldr	r3, [r3, #24]
 800c0c0:	f003 030f 	and.w	r3, r3, #15
 800c0c4:	4a09      	ldr	r2, [pc, #36]	@ (800c0ec <HAL_RCC_GetHCLKFreq+0x54>)
 800c0c6:	5cd3      	ldrb	r3, [r2, r3]
 800c0c8:	f003 031f 	and.w	r3, r3, #31
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c0d2:	4a07      	ldr	r2, [pc, #28]	@ (800c0f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800c0d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c0d6:	4a07      	ldr	r2, [pc, #28]	@ (800c0f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c0dc:	4b04      	ldr	r3, [pc, #16]	@ (800c0f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800c0de:	681b      	ldr	r3, [r3, #0]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	58024400 	.word	0x58024400
 800c0ec:	0801c91c 	.word	0x0801c91c
 800c0f0:	24000014 	.word	0x24000014
 800c0f4:	24000010 	.word	0x24000010

0800c0f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c0fc:	f7ff ffcc 	bl	800c098 <HAL_RCC_GetHCLKFreq>
 800c100:	4602      	mov	r2, r0
 800c102:	4b06      	ldr	r3, [pc, #24]	@ (800c11c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c104:	69db      	ldr	r3, [r3, #28]
 800c106:	091b      	lsrs	r3, r3, #4
 800c108:	f003 0307 	and.w	r3, r3, #7
 800c10c:	4904      	ldr	r1, [pc, #16]	@ (800c120 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c10e:	5ccb      	ldrb	r3, [r1, r3]
 800c110:	f003 031f 	and.w	r3, r3, #31
 800c114:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c118:	4618      	mov	r0, r3
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	58024400 	.word	0x58024400
 800c120:	0801c91c 	.word	0x0801c91c

0800c124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c128:	f7ff ffb6 	bl	800c098 <HAL_RCC_GetHCLKFreq>
 800c12c:	4602      	mov	r2, r0
 800c12e:	4b06      	ldr	r3, [pc, #24]	@ (800c148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c130:	69db      	ldr	r3, [r3, #28]
 800c132:	0a1b      	lsrs	r3, r3, #8
 800c134:	f003 0307 	and.w	r3, r3, #7
 800c138:	4904      	ldr	r1, [pc, #16]	@ (800c14c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c13a:	5ccb      	ldrb	r3, [r1, r3]
 800c13c:	f003 031f 	and.w	r3, r3, #31
 800c140:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c144:	4618      	mov	r0, r3
 800c146:	bd80      	pop	{r7, pc}
 800c148:	58024400 	.word	0x58024400
 800c14c:	0801c91c 	.word	0x0801c91c

0800c150 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c154:	b0c6      	sub	sp, #280	@ 0x118
 800c156:	af00      	add	r7, sp, #0
 800c158:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c15c:	2300      	movs	r3, #0
 800c15e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c162:	2300      	movs	r3, #0
 800c164:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c170:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800c174:	2500      	movs	r5, #0
 800c176:	ea54 0305 	orrs.w	r3, r4, r5
 800c17a:	d049      	beq.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c182:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c186:	d02f      	beq.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c188:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c18c:	d828      	bhi.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c18e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c192:	d01a      	beq.n	800c1ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c194:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c198:	d822      	bhi.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c19e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1a2:	d007      	beq.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c1a4:	e01c      	b.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1a6:	4bab      	ldr	r3, [pc, #684]	@ (800c454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c1a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1aa:	4aaa      	ldr	r2, [pc, #680]	@ (800c454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c1ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c1b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c1b2:	e01a      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c1b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1b8:	3308      	adds	r3, #8
 800c1ba:	2102      	movs	r1, #2
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f002 fa49 	bl	800e654 <RCCEx_PLL2_Config>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c1c8:	e00f      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ce:	3328      	adds	r3, #40	@ 0x28
 800c1d0:	2102      	movs	r1, #2
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f002 faf0 	bl	800e7b8 <RCCEx_PLL3_Config>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c1de:	e004      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c1e6:	e000      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c1e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10a      	bne.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c1f2:	4b98      	ldr	r3, [pc, #608]	@ (800c454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c1f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c1fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c200:	4a94      	ldr	r2, [pc, #592]	@ (800c454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c202:	430b      	orrs	r3, r1
 800c204:	6513      	str	r3, [r2, #80]	@ 0x50
 800c206:	e003      	b.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c208:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c20c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c218:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800c21c:	f04f 0900 	mov.w	r9, #0
 800c220:	ea58 0309 	orrs.w	r3, r8, r9
 800c224:	d047      	beq.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c22a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c22c:	2b04      	cmp	r3, #4
 800c22e:	d82a      	bhi.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c230:	a201      	add	r2, pc, #4	@ (adr r2, 800c238 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c236:	bf00      	nop
 800c238:	0800c24d 	.word	0x0800c24d
 800c23c:	0800c25b 	.word	0x0800c25b
 800c240:	0800c271 	.word	0x0800c271
 800c244:	0800c28f 	.word	0x0800c28f
 800c248:	0800c28f 	.word	0x0800c28f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c24c:	4b81      	ldr	r3, [pc, #516]	@ (800c454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c250:	4a80      	ldr	r2, [pc, #512]	@ (800c454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c256:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c258:	e01a      	b.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c25e:	3308      	adds	r3, #8
 800c260:	2100      	movs	r1, #0
 800c262:	4618      	mov	r0, r3
 800c264:	f002 f9f6 	bl	800e654 <RCCEx_PLL2_Config>
 800c268:	4603      	mov	r3, r0
 800c26a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c26e:	e00f      	b.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c274:	3328      	adds	r3, #40	@ 0x28
 800c276:	2100      	movs	r1, #0
 800c278:	4618      	mov	r0, r3
 800c27a:	f002 fa9d 	bl	800e7b8 <RCCEx_PLL3_Config>
 800c27e:	4603      	mov	r3, r0
 800c280:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c284:	e004      	b.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c286:	2301      	movs	r3, #1
 800c288:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c28c:	e000      	b.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c28e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10a      	bne.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c298:	4b6e      	ldr	r3, [pc, #440]	@ (800c454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c29a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c29c:	f023 0107 	bic.w	r1, r3, #7
 800c2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2a6:	4a6b      	ldr	r2, [pc, #428]	@ (800c454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c2a8:	430b      	orrs	r3, r1
 800c2aa:	6513      	str	r3, [r2, #80]	@ 0x50
 800c2ac:	e003      	b.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2be:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800c2c2:	f04f 0b00 	mov.w	fp, #0
 800c2c6:	ea5a 030b 	orrs.w	r3, sl, fp
 800c2ca:	d05b      	beq.n	800c384 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c2d4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c2d8:	d03b      	beq.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800c2da:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c2de:	d834      	bhi.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c2e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c2e4:	d037      	beq.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c2e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c2ea:	d82e      	bhi.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c2ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c2f0:	d033      	beq.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800c2f2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c2f6:	d828      	bhi.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c2f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c2fc:	d01a      	beq.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800c2fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c302:	d822      	bhi.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c304:	2b00      	cmp	r3, #0
 800c306:	d003      	beq.n	800c310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c308:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c30c:	d007      	beq.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800c30e:	e01c      	b.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c310:	4b50      	ldr	r3, [pc, #320]	@ (800c454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c314:	4a4f      	ldr	r2, [pc, #316]	@ (800c454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c31a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c31c:	e01e      	b.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c322:	3308      	adds	r3, #8
 800c324:	2100      	movs	r1, #0
 800c326:	4618      	mov	r0, r3
 800c328:	f002 f994 	bl	800e654 <RCCEx_PLL2_Config>
 800c32c:	4603      	mov	r3, r0
 800c32e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c332:	e013      	b.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c338:	3328      	adds	r3, #40	@ 0x28
 800c33a:	2100      	movs	r1, #0
 800c33c:	4618      	mov	r0, r3
 800c33e:	f002 fa3b 	bl	800e7b8 <RCCEx_PLL3_Config>
 800c342:	4603      	mov	r3, r0
 800c344:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c348:	e008      	b.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c34a:	2301      	movs	r3, #1
 800c34c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c350:	e004      	b.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c352:	bf00      	nop
 800c354:	e002      	b.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c356:	bf00      	nop
 800c358:	e000      	b.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c35a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c35c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c360:	2b00      	cmp	r3, #0
 800c362:	d10b      	bne.n	800c37c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c364:	4b3b      	ldr	r3, [pc, #236]	@ (800c454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c368:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800c36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c370:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c374:	4a37      	ldr	r2, [pc, #220]	@ (800c454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c376:	430b      	orrs	r3, r1
 800c378:	6593      	str	r3, [r2, #88]	@ 0x58
 800c37a:	e003      	b.n	800c384 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c37c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c380:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c390:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c394:	2300      	movs	r3, #0
 800c396:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c39a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800c39e:	460b      	mov	r3, r1
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	d05d      	beq.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c3a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c3ac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c3b0:	d03b      	beq.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c3b2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c3b6:	d834      	bhi.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c3b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c3bc:	d037      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800c3be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c3c2:	d82e      	bhi.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c3c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c3c8:	d033      	beq.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800c3ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c3ce:	d828      	bhi.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c3d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c3d4:	d01a      	beq.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800c3d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c3da:	d822      	bhi.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d003      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c3e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c3e4:	d007      	beq.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c3e6:	e01c      	b.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3e8:	4b1a      	ldr	r3, [pc, #104]	@ (800c454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c3ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ec:	4a19      	ldr	r2, [pc, #100]	@ (800c454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c3ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c3f4:	e01e      	b.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3fa:	3308      	adds	r3, #8
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	4618      	mov	r0, r3
 800c400:	f002 f928 	bl	800e654 <RCCEx_PLL2_Config>
 800c404:	4603      	mov	r3, r0
 800c406:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c40a:	e013      	b.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c410:	3328      	adds	r3, #40	@ 0x28
 800c412:	2100      	movs	r1, #0
 800c414:	4618      	mov	r0, r3
 800c416:	f002 f9cf 	bl	800e7b8 <RCCEx_PLL3_Config>
 800c41a:	4603      	mov	r3, r0
 800c41c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c420:	e008      	b.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c422:	2301      	movs	r3, #1
 800c424:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c428:	e004      	b.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c42a:	bf00      	nop
 800c42c:	e002      	b.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c42e:	bf00      	nop
 800c430:	e000      	b.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c432:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c434:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d10d      	bne.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c43c:	4b05      	ldr	r3, [pc, #20]	@ (800c454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c43e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c440:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800c444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c448:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c44c:	4a01      	ldr	r2, [pc, #4]	@ (800c454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c44e:	430b      	orrs	r3, r1
 800c450:	6593      	str	r3, [r2, #88]	@ 0x58
 800c452:	e005      	b.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800c454:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c458:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c45c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c46c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c470:	2300      	movs	r3, #0
 800c472:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c476:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800c47a:	460b      	mov	r3, r1
 800c47c:	4313      	orrs	r3, r2
 800c47e:	d03a      	beq.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800c480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c486:	2b30      	cmp	r3, #48	@ 0x30
 800c488:	d01f      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800c48a:	2b30      	cmp	r3, #48	@ 0x30
 800c48c:	d819      	bhi.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c48e:	2b20      	cmp	r3, #32
 800c490:	d00c      	beq.n	800c4ac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c492:	2b20      	cmp	r3, #32
 800c494:	d815      	bhi.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c496:	2b00      	cmp	r3, #0
 800c498:	d019      	beq.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c49a:	2b10      	cmp	r3, #16
 800c49c:	d111      	bne.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c49e:	4baa      	ldr	r3, [pc, #680]	@ (800c748 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a2:	4aa9      	ldr	r2, [pc, #676]	@ (800c748 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c4a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c4aa:	e011      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4b0:	3308      	adds	r3, #8
 800c4b2:	2102      	movs	r1, #2
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f002 f8cd 	bl	800e654 <RCCEx_PLL2_Config>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c4c0:	e006      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c4c8:	e002      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c4ca:	bf00      	nop
 800c4cc:	e000      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c4ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d10a      	bne.n	800c4ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c4d8:	4b9b      	ldr	r3, [pc, #620]	@ (800c748 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c4da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4dc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800c4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4e6:	4a98      	ldr	r2, [pc, #608]	@ (800c748 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c4e8:	430b      	orrs	r3, r1
 800c4ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c4ec:	e003      	b.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c502:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c506:	2300      	movs	r3, #0
 800c508:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c50c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800c510:	460b      	mov	r3, r1
 800c512:	4313      	orrs	r3, r2
 800c514:	d051      	beq.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c51a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c51c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c520:	d035      	beq.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800c522:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c526:	d82e      	bhi.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c528:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c52c:	d031      	beq.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800c52e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c532:	d828      	bhi.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c538:	d01a      	beq.n	800c570 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800c53a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c53e:	d822      	bhi.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c540:	2b00      	cmp	r3, #0
 800c542:	d003      	beq.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800c544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c548:	d007      	beq.n	800c55a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800c54a:	e01c      	b.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c54c:	4b7e      	ldr	r3, [pc, #504]	@ (800c748 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c550:	4a7d      	ldr	r2, [pc, #500]	@ (800c748 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c558:	e01c      	b.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c55e:	3308      	adds	r3, #8
 800c560:	2100      	movs	r1, #0
 800c562:	4618      	mov	r0, r3
 800c564:	f002 f876 	bl	800e654 <RCCEx_PLL2_Config>
 800c568:	4603      	mov	r3, r0
 800c56a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c56e:	e011      	b.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c574:	3328      	adds	r3, #40	@ 0x28
 800c576:	2100      	movs	r1, #0
 800c578:	4618      	mov	r0, r3
 800c57a:	f002 f91d 	bl	800e7b8 <RCCEx_PLL3_Config>
 800c57e:	4603      	mov	r3, r0
 800c580:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c584:	e006      	b.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c586:	2301      	movs	r3, #1
 800c588:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c58c:	e002      	b.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c58e:	bf00      	nop
 800c590:	e000      	b.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c592:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c594:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10a      	bne.n	800c5b2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c59c:	4b6a      	ldr	r3, [pc, #424]	@ (800c748 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c59e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5a0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800c5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5aa:	4a67      	ldr	r2, [pc, #412]	@ (800c748 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c5ac:	430b      	orrs	r3, r1
 800c5ae:	6513      	str	r3, [r2, #80]	@ 0x50
 800c5b0:	e003      	b.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c5ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800c5c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c5d0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	d053      	beq.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c5da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c5e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c5e4:	d033      	beq.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800c5e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c5ea:	d82c      	bhi.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c5ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c5f0:	d02f      	beq.n	800c652 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800c5f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c5f6:	d826      	bhi.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c5f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c5fc:	d02b      	beq.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c5fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c602:	d820      	bhi.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c604:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c608:	d012      	beq.n	800c630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800c60a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c60e:	d81a      	bhi.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c610:	2b00      	cmp	r3, #0
 800c612:	d022      	beq.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800c614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c618:	d115      	bne.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c61e:	3308      	adds	r3, #8
 800c620:	2101      	movs	r1, #1
 800c622:	4618      	mov	r0, r3
 800c624:	f002 f816 	bl	800e654 <RCCEx_PLL2_Config>
 800c628:	4603      	mov	r3, r0
 800c62a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c62e:	e015      	b.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c634:	3328      	adds	r3, #40	@ 0x28
 800c636:	2101      	movs	r1, #1
 800c638:	4618      	mov	r0, r3
 800c63a:	f002 f8bd 	bl	800e7b8 <RCCEx_PLL3_Config>
 800c63e:	4603      	mov	r3, r0
 800c640:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c644:	e00a      	b.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c64c:	e006      	b.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c64e:	bf00      	nop
 800c650:	e004      	b.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c652:	bf00      	nop
 800c654:	e002      	b.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c656:	bf00      	nop
 800c658:	e000      	b.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c65a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c65c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c660:	2b00      	cmp	r3, #0
 800c662:	d10a      	bne.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c664:	4b38      	ldr	r3, [pc, #224]	@ (800c748 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c668:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c672:	4a35      	ldr	r2, [pc, #212]	@ (800c748 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c674:	430b      	orrs	r3, r1
 800c676:	6513      	str	r3, [r2, #80]	@ 0x50
 800c678:	e003      	b.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c67a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c67e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800c68e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c692:	2300      	movs	r3, #0
 800c694:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c698:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c69c:	460b      	mov	r3, r1
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	d058      	beq.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c6a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c6aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c6ae:	d033      	beq.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c6b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c6b4:	d82c      	bhi.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c6b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6ba:	d02f      	beq.n	800c71c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c6bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6c0:	d826      	bhi.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c6c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c6c6:	d02b      	beq.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c6c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c6cc:	d820      	bhi.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c6ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c6d2:	d012      	beq.n	800c6fa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800c6d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c6d8:	d81a      	bhi.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d022      	beq.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c6de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c6e2:	d115      	bne.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6e8:	3308      	adds	r3, #8
 800c6ea:	2101      	movs	r1, #1
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f001 ffb1 	bl	800e654 <RCCEx_PLL2_Config>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c6f8:	e015      	b.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6fe:	3328      	adds	r3, #40	@ 0x28
 800c700:	2101      	movs	r1, #1
 800c702:	4618      	mov	r0, r3
 800c704:	f002 f858 	bl	800e7b8 <RCCEx_PLL3_Config>
 800c708:	4603      	mov	r3, r0
 800c70a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c70e:	e00a      	b.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c710:	2301      	movs	r3, #1
 800c712:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c716:	e006      	b.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c718:	bf00      	nop
 800c71a:	e004      	b.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c71c:	bf00      	nop
 800c71e:	e002      	b.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c720:	bf00      	nop
 800c722:	e000      	b.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c724:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c726:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d10e      	bne.n	800c74c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c72e:	4b06      	ldr	r3, [pc, #24]	@ (800c748 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c732:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c73a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c73e:	4a02      	ldr	r2, [pc, #8]	@ (800c748 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c740:	430b      	orrs	r3, r1
 800c742:	6593      	str	r3, [r2, #88]	@ 0x58
 800c744:	e006      	b.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c746:	bf00      	nop
 800c748:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c74c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c750:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c760:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c764:	2300      	movs	r3, #0
 800c766:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c76a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c76e:	460b      	mov	r3, r1
 800c770:	4313      	orrs	r3, r2
 800c772:	d037      	beq.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c77a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c77e:	d00e      	beq.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c780:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c784:	d816      	bhi.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c786:	2b00      	cmp	r3, #0
 800c788:	d018      	beq.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c78a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c78e:	d111      	bne.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c790:	4bc4      	ldr	r3, [pc, #784]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c794:	4ac3      	ldr	r2, [pc, #780]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c79a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c79c:	e00f      	b.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7a2:	3308      	adds	r3, #8
 800c7a4:	2101      	movs	r1, #1
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f001 ff54 	bl	800e654 <RCCEx_PLL2_Config>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c7b2:	e004      	b.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7ba:	e000      	b.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c7bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d10a      	bne.n	800c7dc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c7c6:	4bb7      	ldr	r3, [pc, #732]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c7c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c7ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7d4:	4ab3      	ldr	r2, [pc, #716]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c7d6:	430b      	orrs	r3, r1
 800c7d8:	6513      	str	r3, [r2, #80]	@ 0x50
 800c7da:	e003      	b.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c7e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c7f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c7fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c7fe:	460b      	mov	r3, r1
 800c800:	4313      	orrs	r3, r2
 800c802:	d039      	beq.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c80a:	2b03      	cmp	r3, #3
 800c80c:	d81c      	bhi.n	800c848 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c80e:	a201      	add	r2, pc, #4	@ (adr r2, 800c814 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c814:	0800c851 	.word	0x0800c851
 800c818:	0800c825 	.word	0x0800c825
 800c81c:	0800c833 	.word	0x0800c833
 800c820:	0800c851 	.word	0x0800c851
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c824:	4b9f      	ldr	r3, [pc, #636]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c828:	4a9e      	ldr	r2, [pc, #632]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c82a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c82e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c830:	e00f      	b.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c836:	3308      	adds	r3, #8
 800c838:	2102      	movs	r1, #2
 800c83a:	4618      	mov	r0, r3
 800c83c:	f001 ff0a 	bl	800e654 <RCCEx_PLL2_Config>
 800c840:	4603      	mov	r3, r0
 800c842:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c846:	e004      	b.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c848:	2301      	movs	r3, #1
 800c84a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c84e:	e000      	b.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c850:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c852:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c856:	2b00      	cmp	r3, #0
 800c858:	d10a      	bne.n	800c870 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c85a:	4b92      	ldr	r3, [pc, #584]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c85c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c85e:	f023 0103 	bic.w	r1, r3, #3
 800c862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c868:	4a8e      	ldr	r2, [pc, #568]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c86a:	430b      	orrs	r3, r1
 800c86c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c86e:	e003      	b.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c874:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c880:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c884:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c888:	2300      	movs	r3, #0
 800c88a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c88e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c892:	460b      	mov	r3, r1
 800c894:	4313      	orrs	r3, r2
 800c896:	f000 8099 	beq.w	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c89a:	4b83      	ldr	r3, [pc, #524]	@ (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4a82      	ldr	r2, [pc, #520]	@ (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c8a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c8a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c8a6:	f7f7 fdff 	bl	80044a8 <HAL_GetTick>
 800c8aa:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c8ae:	e00b      	b.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c8b0:	f7f7 fdfa 	bl	80044a8 <HAL_GetTick>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c8ba:	1ad3      	subs	r3, r2, r3
 800c8bc:	2b64      	cmp	r3, #100	@ 0x64
 800c8be:	d903      	bls.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c8c0:	2303      	movs	r3, #3
 800c8c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c8c6:	e005      	b.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c8c8:	4b77      	ldr	r3, [pc, #476]	@ (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d0ed      	beq.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c8d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d173      	bne.n	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c8dc:	4b71      	ldr	r3, [pc, #452]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c8de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c8e8:	4053      	eors	r3, r2
 800c8ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d015      	beq.n	800c91e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c8f2:	4b6c      	ldr	r3, [pc, #432]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c8f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c8fa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c8fe:	4b69      	ldr	r3, [pc, #420]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c902:	4a68      	ldr	r2, [pc, #416]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c908:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c90a:	4b66      	ldr	r3, [pc, #408]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c90c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c90e:	4a65      	ldr	r2, [pc, #404]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c910:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c914:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c916:	4a63      	ldr	r2, [pc, #396]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c918:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c91c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c922:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c92a:	d118      	bne.n	800c95e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c92c:	f7f7 fdbc 	bl	80044a8 <HAL_GetTick>
 800c930:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c934:	e00d      	b.n	800c952 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c936:	f7f7 fdb7 	bl	80044a8 <HAL_GetTick>
 800c93a:	4602      	mov	r2, r0
 800c93c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c940:	1ad2      	subs	r2, r2, r3
 800c942:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c946:	429a      	cmp	r2, r3
 800c948:	d903      	bls.n	800c952 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c94a:	2303      	movs	r3, #3
 800c94c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800c950:	e005      	b.n	800c95e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c952:	4b54      	ldr	r3, [pc, #336]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c956:	f003 0302 	and.w	r3, r3, #2
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d0eb      	beq.n	800c936 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c95e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c962:	2b00      	cmp	r3, #0
 800c964:	d129      	bne.n	800c9ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c96a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c96e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c972:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c976:	d10e      	bne.n	800c996 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c978:	4b4a      	ldr	r3, [pc, #296]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c984:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c988:	091a      	lsrs	r2, r3, #4
 800c98a:	4b48      	ldr	r3, [pc, #288]	@ (800caac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c98c:	4013      	ands	r3, r2
 800c98e:	4a45      	ldr	r2, [pc, #276]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c990:	430b      	orrs	r3, r1
 800c992:	6113      	str	r3, [r2, #16]
 800c994:	e005      	b.n	800c9a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c996:	4b43      	ldr	r3, [pc, #268]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	4a42      	ldr	r2, [pc, #264]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c99c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c9a0:	6113      	str	r3, [r2, #16]
 800c9a2:	4b40      	ldr	r3, [pc, #256]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9a4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c9ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c9b2:	4a3c      	ldr	r2, [pc, #240]	@ (800caa4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9b4:	430b      	orrs	r3, r1
 800c9b6:	6713      	str	r3, [r2, #112]	@ 0x70
 800c9b8:	e008      	b.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c9ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800c9c2:	e003      	b.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d4:	f002 0301 	and.w	r3, r2, #1
 800c9d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c9dc:	2300      	movs	r3, #0
 800c9de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c9e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	f000 808f 	beq.w	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c9f4:	2b28      	cmp	r3, #40	@ 0x28
 800c9f6:	d871      	bhi.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c9f8:	a201      	add	r2, pc, #4	@ (adr r2, 800ca00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9fe:	bf00      	nop
 800ca00:	0800cae5 	.word	0x0800cae5
 800ca04:	0800cadd 	.word	0x0800cadd
 800ca08:	0800cadd 	.word	0x0800cadd
 800ca0c:	0800cadd 	.word	0x0800cadd
 800ca10:	0800cadd 	.word	0x0800cadd
 800ca14:	0800cadd 	.word	0x0800cadd
 800ca18:	0800cadd 	.word	0x0800cadd
 800ca1c:	0800cadd 	.word	0x0800cadd
 800ca20:	0800cab1 	.word	0x0800cab1
 800ca24:	0800cadd 	.word	0x0800cadd
 800ca28:	0800cadd 	.word	0x0800cadd
 800ca2c:	0800cadd 	.word	0x0800cadd
 800ca30:	0800cadd 	.word	0x0800cadd
 800ca34:	0800cadd 	.word	0x0800cadd
 800ca38:	0800cadd 	.word	0x0800cadd
 800ca3c:	0800cadd 	.word	0x0800cadd
 800ca40:	0800cac7 	.word	0x0800cac7
 800ca44:	0800cadd 	.word	0x0800cadd
 800ca48:	0800cadd 	.word	0x0800cadd
 800ca4c:	0800cadd 	.word	0x0800cadd
 800ca50:	0800cadd 	.word	0x0800cadd
 800ca54:	0800cadd 	.word	0x0800cadd
 800ca58:	0800cadd 	.word	0x0800cadd
 800ca5c:	0800cadd 	.word	0x0800cadd
 800ca60:	0800cae5 	.word	0x0800cae5
 800ca64:	0800cadd 	.word	0x0800cadd
 800ca68:	0800cadd 	.word	0x0800cadd
 800ca6c:	0800cadd 	.word	0x0800cadd
 800ca70:	0800cadd 	.word	0x0800cadd
 800ca74:	0800cadd 	.word	0x0800cadd
 800ca78:	0800cadd 	.word	0x0800cadd
 800ca7c:	0800cadd 	.word	0x0800cadd
 800ca80:	0800cae5 	.word	0x0800cae5
 800ca84:	0800cadd 	.word	0x0800cadd
 800ca88:	0800cadd 	.word	0x0800cadd
 800ca8c:	0800cadd 	.word	0x0800cadd
 800ca90:	0800cadd 	.word	0x0800cadd
 800ca94:	0800cadd 	.word	0x0800cadd
 800ca98:	0800cadd 	.word	0x0800cadd
 800ca9c:	0800cadd 	.word	0x0800cadd
 800caa0:	0800cae5 	.word	0x0800cae5
 800caa4:	58024400 	.word	0x58024400
 800caa8:	58024800 	.word	0x58024800
 800caac:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cab4:	3308      	adds	r3, #8
 800cab6:	2101      	movs	r1, #1
 800cab8:	4618      	mov	r0, r3
 800caba:	f001 fdcb 	bl	800e654 <RCCEx_PLL2_Config>
 800cabe:	4603      	mov	r3, r0
 800cac0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cac4:	e00f      	b.n	800cae6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caca:	3328      	adds	r3, #40	@ 0x28
 800cacc:	2101      	movs	r1, #1
 800cace:	4618      	mov	r0, r3
 800cad0:	f001 fe72 	bl	800e7b8 <RCCEx_PLL3_Config>
 800cad4:	4603      	mov	r3, r0
 800cad6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cada:	e004      	b.n	800cae6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cadc:	2301      	movs	r3, #1
 800cade:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cae2:	e000      	b.n	800cae6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800cae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cae6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800caea:	2b00      	cmp	r3, #0
 800caec:	d10a      	bne.n	800cb04 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800caee:	4bbf      	ldr	r3, [pc, #764]	@ (800cdec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800caf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caf2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800caf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cafa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cafc:	4abb      	ldr	r2, [pc, #748]	@ (800cdec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cafe:	430b      	orrs	r3, r1
 800cb00:	6553      	str	r3, [r2, #84]	@ 0x54
 800cb02:	e003      	b.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb14:	f002 0302 	and.w	r3, r2, #2
 800cb18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cb22:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800cb26:	460b      	mov	r3, r1
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	d041      	beq.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cb2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb32:	2b05      	cmp	r3, #5
 800cb34:	d824      	bhi.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800cb36:	a201      	add	r2, pc, #4	@ (adr r2, 800cb3c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800cb38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb3c:	0800cb89 	.word	0x0800cb89
 800cb40:	0800cb55 	.word	0x0800cb55
 800cb44:	0800cb6b 	.word	0x0800cb6b
 800cb48:	0800cb89 	.word	0x0800cb89
 800cb4c:	0800cb89 	.word	0x0800cb89
 800cb50:	0800cb89 	.word	0x0800cb89
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb58:	3308      	adds	r3, #8
 800cb5a:	2101      	movs	r1, #1
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f001 fd79 	bl	800e654 <RCCEx_PLL2_Config>
 800cb62:	4603      	mov	r3, r0
 800cb64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cb68:	e00f      	b.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb6e:	3328      	adds	r3, #40	@ 0x28
 800cb70:	2101      	movs	r1, #1
 800cb72:	4618      	mov	r0, r3
 800cb74:	f001 fe20 	bl	800e7b8 <RCCEx_PLL3_Config>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cb7e:	e004      	b.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb80:	2301      	movs	r3, #1
 800cb82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cb86:	e000      	b.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800cb88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d10a      	bne.n	800cba8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cb92:	4b96      	ldr	r3, [pc, #600]	@ (800cdec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cb94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb96:	f023 0107 	bic.w	r1, r3, #7
 800cb9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cba0:	4a92      	ldr	r2, [pc, #584]	@ (800cdec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cba2:	430b      	orrs	r3, r1
 800cba4:	6553      	str	r3, [r2, #84]	@ 0x54
 800cba6:	e003      	b.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cba8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cbb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb8:	f002 0304 	and.w	r3, r2, #4
 800cbbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cbc6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cbca:	460b      	mov	r3, r1
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	d044      	beq.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800cbd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbd8:	2b05      	cmp	r3, #5
 800cbda:	d825      	bhi.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800cbdc:	a201      	add	r2, pc, #4	@ (adr r2, 800cbe4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800cbde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbe2:	bf00      	nop
 800cbe4:	0800cc31 	.word	0x0800cc31
 800cbe8:	0800cbfd 	.word	0x0800cbfd
 800cbec:	0800cc13 	.word	0x0800cc13
 800cbf0:	0800cc31 	.word	0x0800cc31
 800cbf4:	0800cc31 	.word	0x0800cc31
 800cbf8:	0800cc31 	.word	0x0800cc31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cbfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc00:	3308      	adds	r3, #8
 800cc02:	2101      	movs	r1, #1
 800cc04:	4618      	mov	r0, r3
 800cc06:	f001 fd25 	bl	800e654 <RCCEx_PLL2_Config>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800cc10:	e00f      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc16:	3328      	adds	r3, #40	@ 0x28
 800cc18:	2101      	movs	r1, #1
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f001 fdcc 	bl	800e7b8 <RCCEx_PLL3_Config>
 800cc20:	4603      	mov	r3, r0
 800cc22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800cc26:	e004      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cc2e:	e000      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800cc30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d10b      	bne.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cc3a:	4b6c      	ldr	r3, [pc, #432]	@ (800cdec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cc3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc3e:	f023 0107 	bic.w	r1, r3, #7
 800cc42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc4a:	4a68      	ldr	r2, [pc, #416]	@ (800cdec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cc4c:	430b      	orrs	r3, r1
 800cc4e:	6593      	str	r3, [r2, #88]	@ 0x58
 800cc50:	e003      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cc5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc62:	f002 0320 	and.w	r3, r2, #32
 800cc66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cc70:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800cc74:	460b      	mov	r3, r1
 800cc76:	4313      	orrs	r3, r2
 800cc78:	d055      	beq.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800cc7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cc86:	d033      	beq.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800cc88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cc8c:	d82c      	bhi.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800cc8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc92:	d02f      	beq.n	800ccf4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800cc94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc98:	d826      	bhi.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800cc9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cc9e:	d02b      	beq.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800cca0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cca4:	d820      	bhi.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800cca6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ccaa:	d012      	beq.n	800ccd2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800ccac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ccb0:	d81a      	bhi.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d022      	beq.n	800ccfc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800ccb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccba:	d115      	bne.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ccbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccc0:	3308      	adds	r3, #8
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f001 fcc5 	bl	800e654 <RCCEx_PLL2_Config>
 800ccca:	4603      	mov	r3, r0
 800cccc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ccd0:	e015      	b.n	800ccfe <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ccd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccd6:	3328      	adds	r3, #40	@ 0x28
 800ccd8:	2102      	movs	r1, #2
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f001 fd6c 	bl	800e7b8 <RCCEx_PLL3_Config>
 800cce0:	4603      	mov	r3, r0
 800cce2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800cce6:	e00a      	b.n	800ccfe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cce8:	2301      	movs	r3, #1
 800ccea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ccee:	e006      	b.n	800ccfe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ccf0:	bf00      	nop
 800ccf2:	e004      	b.n	800ccfe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ccf4:	bf00      	nop
 800ccf6:	e002      	b.n	800ccfe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ccf8:	bf00      	nop
 800ccfa:	e000      	b.n	800ccfe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ccfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d10b      	bne.n	800cd1e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cd06:	4b39      	ldr	r3, [pc, #228]	@ (800cdec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cd08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800cd0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd16:	4a35      	ldr	r2, [pc, #212]	@ (800cdec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cd18:	430b      	orrs	r3, r1
 800cd1a:	6553      	str	r3, [r2, #84]	@ 0x54
 800cd1c:	e003      	b.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cd26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800cd32:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cd36:	2300      	movs	r3, #0
 800cd38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cd3c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800cd40:	460b      	mov	r3, r1
 800cd42:	4313      	orrs	r3, r2
 800cd44:	d058      	beq.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800cd46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cd4e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800cd52:	d033      	beq.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800cd54:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800cd58:	d82c      	bhi.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cd5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd5e:	d02f      	beq.n	800cdc0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800cd60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd64:	d826      	bhi.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cd66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cd6a:	d02b      	beq.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800cd6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cd70:	d820      	bhi.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cd72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd76:	d012      	beq.n	800cd9e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800cd78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd7c:	d81a      	bhi.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d022      	beq.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800cd82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd86:	d115      	bne.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd8c:	3308      	adds	r3, #8
 800cd8e:	2100      	movs	r1, #0
 800cd90:	4618      	mov	r0, r3
 800cd92:	f001 fc5f 	bl	800e654 <RCCEx_PLL2_Config>
 800cd96:	4603      	mov	r3, r0
 800cd98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800cd9c:	e015      	b.n	800cdca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cd9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cda2:	3328      	adds	r3, #40	@ 0x28
 800cda4:	2102      	movs	r1, #2
 800cda6:	4618      	mov	r0, r3
 800cda8:	f001 fd06 	bl	800e7b8 <RCCEx_PLL3_Config>
 800cdac:	4603      	mov	r3, r0
 800cdae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800cdb2:	e00a      	b.n	800cdca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cdba:	e006      	b.n	800cdca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cdbc:	bf00      	nop
 800cdbe:	e004      	b.n	800cdca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cdc0:	bf00      	nop
 800cdc2:	e002      	b.n	800cdca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cdc4:	bf00      	nop
 800cdc6:	e000      	b.n	800cdca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cdc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cdca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10e      	bne.n	800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cdd2:	4b06      	ldr	r3, [pc, #24]	@ (800cdec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cdd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdd6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800cdda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cde2:	4a02      	ldr	r2, [pc, #8]	@ (800cdec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cde4:	430b      	orrs	r3, r1
 800cde6:	6593      	str	r3, [r2, #88]	@ 0x58
 800cde8:	e006      	b.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800cdea:	bf00      	nop
 800cdec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdf4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cdf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce00:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ce04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ce08:	2300      	movs	r3, #0
 800ce0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ce0e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ce12:	460b      	mov	r3, r1
 800ce14:	4313      	orrs	r3, r2
 800ce16:	d055      	beq.n	800cec4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ce18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ce20:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ce24:	d033      	beq.n	800ce8e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800ce26:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ce2a:	d82c      	bhi.n	800ce86 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ce2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce30:	d02f      	beq.n	800ce92 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800ce32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce36:	d826      	bhi.n	800ce86 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ce38:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ce3c:	d02b      	beq.n	800ce96 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800ce3e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ce42:	d820      	bhi.n	800ce86 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ce44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce48:	d012      	beq.n	800ce70 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800ce4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce4e:	d81a      	bhi.n	800ce86 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d022      	beq.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800ce54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ce58:	d115      	bne.n	800ce86 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce5e:	3308      	adds	r3, #8
 800ce60:	2100      	movs	r1, #0
 800ce62:	4618      	mov	r0, r3
 800ce64:	f001 fbf6 	bl	800e654 <RCCEx_PLL2_Config>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ce6e:	e015      	b.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ce70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce74:	3328      	adds	r3, #40	@ 0x28
 800ce76:	2102      	movs	r1, #2
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f001 fc9d 	bl	800e7b8 <RCCEx_PLL3_Config>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ce84:	e00a      	b.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce86:	2301      	movs	r3, #1
 800ce88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ce8c:	e006      	b.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ce8e:	bf00      	nop
 800ce90:	e004      	b.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ce92:	bf00      	nop
 800ce94:	e002      	b.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ce96:	bf00      	nop
 800ce98:	e000      	b.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ce9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10b      	bne.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800cea4:	4ba0      	ldr	r3, [pc, #640]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cea8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ceac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ceb4:	4a9c      	ldr	r2, [pc, #624]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ceb6:	430b      	orrs	r3, r1
 800ceb8:	6593      	str	r3, [r2, #88]	@ 0x58
 800ceba:	e003      	b.n	800cec4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cebc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cec0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800cec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cecc:	f002 0308 	and.w	r3, r2, #8
 800ced0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ced4:	2300      	movs	r3, #0
 800ced6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ceda:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800cede:	460b      	mov	r3, r1
 800cee0:	4313      	orrs	r3, r2
 800cee2:	d01e      	beq.n	800cf22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800cee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ceec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cef0:	d10c      	bne.n	800cf0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cef6:	3328      	adds	r3, #40	@ 0x28
 800cef8:	2102      	movs	r1, #2
 800cefa:	4618      	mov	r0, r3
 800cefc:	f001 fc5c 	bl	800e7b8 <RCCEx_PLL3_Config>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d002      	beq.n	800cf0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800cf06:	2301      	movs	r3, #1
 800cf08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800cf0c:	4b86      	ldr	r3, [pc, #536]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cf0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf10:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cf14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf1c:	4a82      	ldr	r2, [pc, #520]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cf1e:	430b      	orrs	r3, r1
 800cf20:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cf22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2a:	f002 0310 	and.w	r3, r2, #16
 800cf2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cf32:	2300      	movs	r3, #0
 800cf34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cf38:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	d01e      	beq.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800cf42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cf4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf4e:	d10c      	bne.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cf50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf54:	3328      	adds	r3, #40	@ 0x28
 800cf56:	2102      	movs	r1, #2
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f001 fc2d 	bl	800e7b8 <RCCEx_PLL3_Config>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d002      	beq.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800cf64:	2301      	movs	r3, #1
 800cf66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cf6a:	4b6f      	ldr	r3, [pc, #444]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cf6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cf72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cf7a:	4a6b      	ldr	r2, [pc, #428]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cf7c:	430b      	orrs	r3, r1
 800cf7e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cf80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf88:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800cf8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cf8e:	2300      	movs	r3, #0
 800cf90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cf92:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800cf96:	460b      	mov	r3, r1
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	d03e      	beq.n	800d01a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800cf9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cfa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cfa8:	d022      	beq.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800cfaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cfae:	d81b      	bhi.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d003      	beq.n	800cfbc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800cfb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cfb8:	d00b      	beq.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800cfba:	e015      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cfbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfc0:	3308      	adds	r3, #8
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f001 fb45 	bl	800e654 <RCCEx_PLL2_Config>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800cfd0:	e00f      	b.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cfd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfd6:	3328      	adds	r3, #40	@ 0x28
 800cfd8:	2102      	movs	r1, #2
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f001 fbec 	bl	800e7b8 <RCCEx_PLL3_Config>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800cfe6:	e004      	b.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cfee:	e000      	b.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800cff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cff2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d10b      	bne.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cffa:	4b4b      	ldr	r3, [pc, #300]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cffe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d006:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d00a:	4a47      	ldr	r2, [pc, #284]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d00c:	430b      	orrs	r3, r1
 800d00e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d010:	e003      	b.n	800d01a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d012:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d016:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d022:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d026:	673b      	str	r3, [r7, #112]	@ 0x70
 800d028:	2300      	movs	r3, #0
 800d02a:	677b      	str	r3, [r7, #116]	@ 0x74
 800d02c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800d030:	460b      	mov	r3, r1
 800d032:	4313      	orrs	r3, r2
 800d034:	d03b      	beq.n	800d0ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d03a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d03e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d042:	d01f      	beq.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800d044:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d048:	d818      	bhi.n	800d07c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800d04a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d04e:	d003      	beq.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800d050:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d054:	d007      	beq.n	800d066 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800d056:	e011      	b.n	800d07c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d058:	4b33      	ldr	r3, [pc, #204]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d05a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d05c:	4a32      	ldr	r2, [pc, #200]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d05e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d062:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d064:	e00f      	b.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d06a:	3328      	adds	r3, #40	@ 0x28
 800d06c:	2101      	movs	r1, #1
 800d06e:	4618      	mov	r0, r3
 800d070:	f001 fba2 	bl	800e7b8 <RCCEx_PLL3_Config>
 800d074:	4603      	mov	r3, r0
 800d076:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800d07a:	e004      	b.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d07c:	2301      	movs	r3, #1
 800d07e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d082:	e000      	b.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800d084:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d086:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d10b      	bne.n	800d0a6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d08e:	4b26      	ldr	r3, [pc, #152]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d092:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d09a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d09e:	4a22      	ldr	r2, [pc, #136]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d0a0:	430b      	orrs	r3, r1
 800d0a2:	6553      	str	r3, [r2, #84]	@ 0x54
 800d0a4:	e003      	b.n	800d0ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d0ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d0ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d0bc:	2300      	movs	r3, #0
 800d0be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d0c0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	d034      	beq.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d0ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d003      	beq.n	800d0dc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800d0d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0d8:	d007      	beq.n	800d0ea <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800d0da:	e011      	b.n	800d100 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0dc:	4b12      	ldr	r3, [pc, #72]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0e0:	4a11      	ldr	r2, [pc, #68]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d0e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d0e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d0e8:	e00e      	b.n	800d108 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d0ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0ee:	3308      	adds	r3, #8
 800d0f0:	2102      	movs	r1, #2
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f001 faae 	bl	800e654 <RCCEx_PLL2_Config>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d0fe:	e003      	b.n	800d108 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800d100:	2301      	movs	r3, #1
 800d102:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d106:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d108:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d10d      	bne.n	800d12c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d110:	4b05      	ldr	r3, [pc, #20]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d114:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d11c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d11e:	4a02      	ldr	r2, [pc, #8]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d120:	430b      	orrs	r3, r1
 800d122:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d124:	e006      	b.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800d126:	bf00      	nop
 800d128:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d12c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d130:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800d140:	663b      	str	r3, [r7, #96]	@ 0x60
 800d142:	2300      	movs	r3, #0
 800d144:	667b      	str	r3, [r7, #100]	@ 0x64
 800d146:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d14a:	460b      	mov	r3, r1
 800d14c:	4313      	orrs	r3, r2
 800d14e:	d00c      	beq.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d154:	3328      	adds	r3, #40	@ 0x28
 800d156:	2102      	movs	r1, #2
 800d158:	4618      	mov	r0, r3
 800d15a:	f001 fb2d 	bl	800e7b8 <RCCEx_PLL3_Config>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d002      	beq.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800d164:	2301      	movs	r3, #1
 800d166:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d172:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d176:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d178:	2300      	movs	r3, #0
 800d17a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d17c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d180:	460b      	mov	r3, r1
 800d182:	4313      	orrs	r3, r2
 800d184:	d036      	beq.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d18a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d18c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d190:	d018      	beq.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800d192:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d196:	d811      	bhi.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d19c:	d014      	beq.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800d19e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1a2:	d80b      	bhi.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d011      	beq.n	800d1cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800d1a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1ac:	d106      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d1ae:	4bb7      	ldr	r3, [pc, #732]	@ (800d48c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d1b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1b2:	4ab6      	ldr	r2, [pc, #728]	@ (800d48c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d1b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d1b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d1ba:	e008      	b.n	800d1ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d1c2:	e004      	b.n	800d1ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d1c4:	bf00      	nop
 800d1c6:	e002      	b.n	800d1ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d1c8:	bf00      	nop
 800d1ca:	e000      	b.n	800d1ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d1cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d10a      	bne.n	800d1ec <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d1d6:	4bad      	ldr	r3, [pc, #692]	@ (800d48c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d1d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d1e4:	4aa9      	ldr	r2, [pc, #676]	@ (800d48c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d1e6:	430b      	orrs	r3, r1
 800d1e8:	6553      	str	r3, [r2, #84]	@ 0x54
 800d1ea:	e003      	b.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d1f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d1f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800d200:	653b      	str	r3, [r7, #80]	@ 0x50
 800d202:	2300      	movs	r3, #0
 800d204:	657b      	str	r3, [r7, #84]	@ 0x54
 800d206:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800d20a:	460b      	mov	r3, r1
 800d20c:	4313      	orrs	r3, r2
 800d20e:	d009      	beq.n	800d224 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d210:	4b9e      	ldr	r3, [pc, #632]	@ (800d48c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d214:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d21c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d21e:	4a9b      	ldr	r2, [pc, #620]	@ (800d48c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d220:	430b      	orrs	r3, r1
 800d222:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800d230:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d232:	2300      	movs	r3, #0
 800d234:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d236:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800d23a:	460b      	mov	r3, r1
 800d23c:	4313      	orrs	r3, r2
 800d23e:	d009      	beq.n	800d254 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d240:	4b92      	ldr	r3, [pc, #584]	@ (800d48c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d244:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800d248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d24c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d24e:	4a8f      	ldr	r2, [pc, #572]	@ (800d48c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d250:	430b      	orrs	r3, r1
 800d252:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800d260:	643b      	str	r3, [r7, #64]	@ 0x40
 800d262:	2300      	movs	r3, #0
 800d264:	647b      	str	r3, [r7, #68]	@ 0x44
 800d266:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800d26a:	460b      	mov	r3, r1
 800d26c:	4313      	orrs	r3, r2
 800d26e:	d00e      	beq.n	800d28e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d270:	4b86      	ldr	r3, [pc, #536]	@ (800d48c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d272:	691b      	ldr	r3, [r3, #16]
 800d274:	4a85      	ldr	r2, [pc, #532]	@ (800d48c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d276:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d27a:	6113      	str	r3, [r2, #16]
 800d27c:	4b83      	ldr	r3, [pc, #524]	@ (800d48c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d27e:	6919      	ldr	r1, [r3, #16]
 800d280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d284:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d288:	4a80      	ldr	r2, [pc, #512]	@ (800d48c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d28a:	430b      	orrs	r3, r1
 800d28c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d296:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800d29a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d29c:	2300      	movs	r3, #0
 800d29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2a0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	d009      	beq.n	800d2be <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d2aa:	4b78      	ldr	r3, [pc, #480]	@ (800d48c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d2ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d2b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2b8:	4a74      	ldr	r2, [pc, #464]	@ (800d48c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d2ba:	430b      	orrs	r3, r1
 800d2bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d2be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800d2ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2d0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	d00a      	beq.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d2da:	4b6c      	ldr	r3, [pc, #432]	@ (800d48c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d2dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2de:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800d2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2ea:	4a68      	ldr	r2, [pc, #416]	@ (800d48c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d2ec:	430b      	orrs	r3, r1
 800d2ee:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d2f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d2fc:	f003 0301 	and.w	r3, r3, #1
 800d300:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d302:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800d306:	460b      	mov	r3, r1
 800d308:	4313      	orrs	r3, r2
 800d30a:	d011      	beq.n	800d330 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d30c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d310:	3308      	adds	r3, #8
 800d312:	2100      	movs	r1, #0
 800d314:	4618      	mov	r0, r3
 800d316:	f001 f99d 	bl	800e654 <RCCEx_PLL2_Config>
 800d31a:	4603      	mov	r3, r0
 800d31c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d320:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d324:	2b00      	cmp	r3, #0
 800d326:	d003      	beq.n	800d330 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d328:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d32c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d338:	2100      	movs	r1, #0
 800d33a:	6239      	str	r1, [r7, #32]
 800d33c:	f003 0302 	and.w	r3, r3, #2
 800d340:	627b      	str	r3, [r7, #36]	@ 0x24
 800d342:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d346:	460b      	mov	r3, r1
 800d348:	4313      	orrs	r3, r2
 800d34a:	d011      	beq.n	800d370 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d34c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d350:	3308      	adds	r3, #8
 800d352:	2101      	movs	r1, #1
 800d354:	4618      	mov	r0, r3
 800d356:	f001 f97d 	bl	800e654 <RCCEx_PLL2_Config>
 800d35a:	4603      	mov	r3, r0
 800d35c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d360:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d364:	2b00      	cmp	r3, #0
 800d366:	d003      	beq.n	800d370 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d368:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d36c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d378:	2100      	movs	r1, #0
 800d37a:	61b9      	str	r1, [r7, #24]
 800d37c:	f003 0304 	and.w	r3, r3, #4
 800d380:	61fb      	str	r3, [r7, #28]
 800d382:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d386:	460b      	mov	r3, r1
 800d388:	4313      	orrs	r3, r2
 800d38a:	d011      	beq.n	800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d390:	3308      	adds	r3, #8
 800d392:	2102      	movs	r1, #2
 800d394:	4618      	mov	r0, r3
 800d396:	f001 f95d 	bl	800e654 <RCCEx_PLL2_Config>
 800d39a:	4603      	mov	r3, r0
 800d39c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d3a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d003      	beq.n	800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d3ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	6139      	str	r1, [r7, #16]
 800d3bc:	f003 0308 	and.w	r3, r3, #8
 800d3c0:	617b      	str	r3, [r7, #20]
 800d3c2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	d011      	beq.n	800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3d0:	3328      	adds	r3, #40	@ 0x28
 800d3d2:	2100      	movs	r1, #0
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f001 f9ef 	bl	800e7b8 <RCCEx_PLL3_Config>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800d3e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d003      	beq.n	800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d3ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d3f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	60b9      	str	r1, [r7, #8]
 800d3fc:	f003 0310 	and.w	r3, r3, #16
 800d400:	60fb      	str	r3, [r7, #12]
 800d402:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d406:	460b      	mov	r3, r1
 800d408:	4313      	orrs	r3, r2
 800d40a:	d011      	beq.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d410:	3328      	adds	r3, #40	@ 0x28
 800d412:	2101      	movs	r1, #1
 800d414:	4618      	mov	r0, r3
 800d416:	f001 f9cf 	bl	800e7b8 <RCCEx_PLL3_Config>
 800d41a:	4603      	mov	r3, r0
 800d41c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d420:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d424:	2b00      	cmp	r3, #0
 800d426:	d003      	beq.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d428:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d42c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d438:	2100      	movs	r1, #0
 800d43a:	6039      	str	r1, [r7, #0]
 800d43c:	f003 0320 	and.w	r3, r3, #32
 800d440:	607b      	str	r3, [r7, #4]
 800d442:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d446:	460b      	mov	r3, r1
 800d448:	4313      	orrs	r3, r2
 800d44a:	d011      	beq.n	800d470 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d450:	3328      	adds	r3, #40	@ 0x28
 800d452:	2102      	movs	r1, #2
 800d454:	4618      	mov	r0, r3
 800d456:	f001 f9af 	bl	800e7b8 <RCCEx_PLL3_Config>
 800d45a:	4603      	mov	r3, r0
 800d45c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d460:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d464:	2b00      	cmp	r3, #0
 800d466:	d003      	beq.n	800d470 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d468:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d46c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800d470:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800d474:	2b00      	cmp	r3, #0
 800d476:	d101      	bne.n	800d47c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800d478:	2300      	movs	r3, #0
 800d47a:	e000      	b.n	800d47e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800d47c:	2301      	movs	r3, #1
}
 800d47e:	4618      	mov	r0, r3
 800d480:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800d484:	46bd      	mov	sp, r7
 800d486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d48a:	bf00      	nop
 800d48c:	58024400 	.word	0x58024400

0800d490 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b090      	sub	sp, #64	@ 0x40
 800d494:	af00      	add	r7, sp, #0
 800d496:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d49a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d49e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d4a2:	430b      	orrs	r3, r1
 800d4a4:	f040 8094 	bne.w	800d5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800d4a8:	4b9b      	ldr	r3, [pc, #620]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d4aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4ac:	f003 0307 	and.w	r3, r3, #7
 800d4b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4b4:	2b04      	cmp	r3, #4
 800d4b6:	f200 8087 	bhi.w	800d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800d4ba:	a201      	add	r2, pc, #4	@ (adr r2, 800d4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800d4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c0:	0800d4d5 	.word	0x0800d4d5
 800d4c4:	0800d4fd 	.word	0x0800d4fd
 800d4c8:	0800d525 	.word	0x0800d525
 800d4cc:	0800d5c1 	.word	0x0800d5c1
 800d4d0:	0800d54d 	.word	0x0800d54d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d4d4:	4b90      	ldr	r3, [pc, #576]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d4dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d4e0:	d108      	bne.n	800d4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d4e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f000 ff62 	bl	800e3b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4f0:	f000 bc93 	b.w	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4f8:	f000 bc8f 	b.w	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d4fc:	4b86      	ldr	r3, [pc, #536]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d504:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d508:	d108      	bne.n	800d51c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d50a:	f107 0318 	add.w	r3, r7, #24
 800d50e:	4618      	mov	r0, r3
 800d510:	f000 fca6 	bl	800de60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d514:	69bb      	ldr	r3, [r7, #24]
 800d516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d518:	f000 bc7f 	b.w	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d51c:	2300      	movs	r3, #0
 800d51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d520:	f000 bc7b 	b.w	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d524:	4b7c      	ldr	r3, [pc, #496]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d52c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d530:	d108      	bne.n	800d544 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d532:	f107 030c 	add.w	r3, r7, #12
 800d536:	4618      	mov	r0, r3
 800d538:	f000 fde6 	bl	800e108 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d540:	f000 bc6b 	b.w	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d544:	2300      	movs	r3, #0
 800d546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d548:	f000 bc67 	b.w	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d54c:	4b72      	ldr	r3, [pc, #456]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d54e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d550:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d554:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d556:	4b70      	ldr	r3, [pc, #448]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f003 0304 	and.w	r3, r3, #4
 800d55e:	2b04      	cmp	r3, #4
 800d560:	d10c      	bne.n	800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d564:	2b00      	cmp	r3, #0
 800d566:	d109      	bne.n	800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d568:	4b6b      	ldr	r3, [pc, #428]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	08db      	lsrs	r3, r3, #3
 800d56e:	f003 0303 	and.w	r3, r3, #3
 800d572:	4a6a      	ldr	r2, [pc, #424]	@ (800d71c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d574:	fa22 f303 	lsr.w	r3, r2, r3
 800d578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d57a:	e01f      	b.n	800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d57c:	4b66      	ldr	r3, [pc, #408]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d584:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d588:	d106      	bne.n	800d598 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800d58a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d58c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d590:	d102      	bne.n	800d598 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d592:	4b63      	ldr	r3, [pc, #396]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d594:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d596:	e011      	b.n	800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d598:	4b5f      	ldr	r3, [pc, #380]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d5a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d5a4:	d106      	bne.n	800d5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800d5a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d5ac:	d102      	bne.n	800d5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d5ae:	4b5d      	ldr	r3, [pc, #372]	@ (800d724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d5b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d5b2:	e003      	b.n	800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d5b8:	f000 bc2f 	b.w	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d5bc:	f000 bc2d 	b.w	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d5c0:	4b59      	ldr	r3, [pc, #356]	@ (800d728 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5c4:	f000 bc29 	b.w	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5cc:	f000 bc25 	b.w	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d5d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5d4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d5d8:	430b      	orrs	r3, r1
 800d5da:	f040 80a7 	bne.w	800d72c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800d5de:	4b4e      	ldr	r3, [pc, #312]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d5e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5e2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800d5e6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d5ee:	d054      	beq.n	800d69a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d5f6:	f200 808b 	bhi.w	800d710 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d600:	f000 8083 	beq.w	800d70a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800d604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d606:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d60a:	f200 8081 	bhi.w	800d710 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d610:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d614:	d02f      	beq.n	800d676 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800d616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d618:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d61c:	d878      	bhi.n	800d710 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d620:	2b00      	cmp	r3, #0
 800d622:	d004      	beq.n	800d62e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800d624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d626:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d62a:	d012      	beq.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800d62c:	e070      	b.n	800d710 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d62e:	4b3a      	ldr	r3, [pc, #232]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d636:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d63a:	d107      	bne.n	800d64c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d63c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d640:	4618      	mov	r0, r3
 800d642:	f000 feb5 	bl	800e3b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d64a:	e3e6      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d64c:	2300      	movs	r3, #0
 800d64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d650:	e3e3      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d652:	4b31      	ldr	r3, [pc, #196]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d65a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d65e:	d107      	bne.n	800d670 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d660:	f107 0318 	add.w	r3, r7, #24
 800d664:	4618      	mov	r0, r3
 800d666:	f000 fbfb 	bl	800de60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d66e:	e3d4      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d670:	2300      	movs	r3, #0
 800d672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d674:	e3d1      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d676:	4b28      	ldr	r3, [pc, #160]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d67e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d682:	d107      	bne.n	800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d684:	f107 030c 	add.w	r3, r7, #12
 800d688:	4618      	mov	r0, r3
 800d68a:	f000 fd3d 	bl	800e108 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d692:	e3c2      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d694:	2300      	movs	r3, #0
 800d696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d698:	e3bf      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d69a:	4b1f      	ldr	r3, [pc, #124]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d69c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d69e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d6a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d6a4:	4b1c      	ldr	r3, [pc, #112]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f003 0304 	and.w	r3, r3, #4
 800d6ac:	2b04      	cmp	r3, #4
 800d6ae:	d10c      	bne.n	800d6ca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800d6b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d109      	bne.n	800d6ca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d6b6:	4b18      	ldr	r3, [pc, #96]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	08db      	lsrs	r3, r3, #3
 800d6bc:	f003 0303 	and.w	r3, r3, #3
 800d6c0:	4a16      	ldr	r2, [pc, #88]	@ (800d71c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d6c2:	fa22 f303 	lsr.w	r3, r2, r3
 800d6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d6c8:	e01e      	b.n	800d708 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d6ca:	4b13      	ldr	r3, [pc, #76]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6d6:	d106      	bne.n	800d6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800d6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d6de:	d102      	bne.n	800d6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d6e0:	4b0f      	ldr	r3, [pc, #60]	@ (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d6e4:	e010      	b.n	800d708 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d6e6:	4b0c      	ldr	r3, [pc, #48]	@ (800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d6f2:	d106      	bne.n	800d702 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800d6f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d6fa:	d102      	bne.n	800d702 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d6fc:	4b09      	ldr	r3, [pc, #36]	@ (800d724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d700:	e002      	b.n	800d708 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d702:	2300      	movs	r3, #0
 800d704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d706:	e388      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d708:	e387      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d70a:	4b07      	ldr	r3, [pc, #28]	@ (800d728 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d70c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d70e:	e384      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d710:	2300      	movs	r3, #0
 800d712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d714:	e381      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d716:	bf00      	nop
 800d718:	58024400 	.word	0x58024400
 800d71c:	03d09000 	.word	0x03d09000
 800d720:	003d0900 	.word	0x003d0900
 800d724:	007a1200 	.word	0x007a1200
 800d728:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d72c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d730:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d734:	430b      	orrs	r3, r1
 800d736:	f040 809c 	bne.w	800d872 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800d73a:	4b9e      	ldr	r3, [pc, #632]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d73c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d73e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800d742:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d746:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d74a:	d054      	beq.n	800d7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800d74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d74e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d752:	f200 808b 	bhi.w	800d86c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d758:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d75c:	f000 8083 	beq.w	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800d760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d762:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d766:	f200 8081 	bhi.w	800d86c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d770:	d02f      	beq.n	800d7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800d772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d774:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d778:	d878      	bhi.n	800d86c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d004      	beq.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800d780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d782:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d786:	d012      	beq.n	800d7ae <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800d788:	e070      	b.n	800d86c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d78a:	4b8a      	ldr	r3, [pc, #552]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d792:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d796:	d107      	bne.n	800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d79c:	4618      	mov	r0, r3
 800d79e:	f000 fe07 	bl	800e3b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d7a6:	e338      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7ac:	e335      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d7ae:	4b81      	ldr	r3, [pc, #516]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d7b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d7ba:	d107      	bne.n	800d7cc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7bc:	f107 0318 	add.w	r3, r7, #24
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f000 fb4d 	bl	800de60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d7ca:	e326      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7d0:	e323      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d7d2:	4b78      	ldr	r3, [pc, #480]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d7da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d7de:	d107      	bne.n	800d7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7e0:	f107 030c 	add.w	r3, r7, #12
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f000 fc8f 	bl	800e108 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d7ee:	e314      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7f4:	e311      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d7f6:	4b6f      	ldr	r3, [pc, #444]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d7f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d7fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d800:	4b6c      	ldr	r3, [pc, #432]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f003 0304 	and.w	r3, r3, #4
 800d808:	2b04      	cmp	r3, #4
 800d80a:	d10c      	bne.n	800d826 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800d80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d109      	bne.n	800d826 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d812:	4b68      	ldr	r3, [pc, #416]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	08db      	lsrs	r3, r3, #3
 800d818:	f003 0303 	and.w	r3, r3, #3
 800d81c:	4a66      	ldr	r2, [pc, #408]	@ (800d9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d81e:	fa22 f303 	lsr.w	r3, r2, r3
 800d822:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d824:	e01e      	b.n	800d864 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d826:	4b63      	ldr	r3, [pc, #396]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d82e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d832:	d106      	bne.n	800d842 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d83a:	d102      	bne.n	800d842 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d83c:	4b5f      	ldr	r3, [pc, #380]	@ (800d9bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d840:	e010      	b.n	800d864 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d842:	4b5c      	ldr	r3, [pc, #368]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d84a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d84e:	d106      	bne.n	800d85e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800d850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d856:	d102      	bne.n	800d85e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d858:	4b59      	ldr	r3, [pc, #356]	@ (800d9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d85c:	e002      	b.n	800d864 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d85e:	2300      	movs	r3, #0
 800d860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d862:	e2da      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d864:	e2d9      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d866:	4b57      	ldr	r3, [pc, #348]	@ (800d9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d86a:	e2d6      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d86c:	2300      	movs	r3, #0
 800d86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d870:	e2d3      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d872:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d876:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d87a:	430b      	orrs	r3, r1
 800d87c:	f040 80a7 	bne.w	800d9ce <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d880:	4b4c      	ldr	r3, [pc, #304]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d884:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d888:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d88c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d890:	d055      	beq.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800d892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d894:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d898:	f200 8096 	bhi.w	800d9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d89e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d8a2:	f000 8084 	beq.w	800d9ae <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800d8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d8ac:	f200 808c 	bhi.w	800d9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8b6:	d030      	beq.n	800d91a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8be:	f200 8083 	bhi.w	800d9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d8c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d004      	beq.n	800d8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800d8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d8ce:	d012      	beq.n	800d8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800d8d0:	e07a      	b.n	800d9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d8d2:	4b38      	ldr	r3, [pc, #224]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d8da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d8de:	d107      	bne.n	800d8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d8e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f000 fd63 	bl	800e3b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d8ee:	e294      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8f4:	e291      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d8f6:	4b2f      	ldr	r3, [pc, #188]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d8fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d902:	d107      	bne.n	800d914 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d904:	f107 0318 	add.w	r3, r7, #24
 800d908:	4618      	mov	r0, r3
 800d90a:	f000 faa9 	bl	800de60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d90e:	69bb      	ldr	r3, [r7, #24]
 800d910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d912:	e282      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d914:	2300      	movs	r3, #0
 800d916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d918:	e27f      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d91a:	4b26      	ldr	r3, [pc, #152]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d926:	d107      	bne.n	800d938 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d928:	f107 030c 	add.w	r3, r7, #12
 800d92c:	4618      	mov	r0, r3
 800d92e:	f000 fbeb 	bl	800e108 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d936:	e270      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d938:	2300      	movs	r3, #0
 800d93a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d93c:	e26d      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d93e:	4b1d      	ldr	r3, [pc, #116]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d942:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d946:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d948:	4b1a      	ldr	r3, [pc, #104]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f003 0304 	and.w	r3, r3, #4
 800d950:	2b04      	cmp	r3, #4
 800d952:	d10c      	bne.n	800d96e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d956:	2b00      	cmp	r3, #0
 800d958:	d109      	bne.n	800d96e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d95a:	4b16      	ldr	r3, [pc, #88]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	08db      	lsrs	r3, r3, #3
 800d960:	f003 0303 	and.w	r3, r3, #3
 800d964:	4a14      	ldr	r2, [pc, #80]	@ (800d9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d966:	fa22 f303 	lsr.w	r3, r2, r3
 800d96a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d96c:	e01e      	b.n	800d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d96e:	4b11      	ldr	r3, [pc, #68]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d97a:	d106      	bne.n	800d98a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d97c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d97e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d982:	d102      	bne.n	800d98a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d984:	4b0d      	ldr	r3, [pc, #52]	@ (800d9bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d986:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d988:	e010      	b.n	800d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d98a:	4b0a      	ldr	r3, [pc, #40]	@ (800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d992:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d996:	d106      	bne.n	800d9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d99a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d99e:	d102      	bne.n	800d9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d9a0:	4b07      	ldr	r3, [pc, #28]	@ (800d9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9a4:	e002      	b.n	800d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d9aa:	e236      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d9ac:	e235      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d9ae:	4b05      	ldr	r3, [pc, #20]	@ (800d9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9b2:	e232      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d9b4:	58024400 	.word	0x58024400
 800d9b8:	03d09000 	.word	0x03d09000
 800d9bc:	003d0900 	.word	0x003d0900
 800d9c0:	007a1200 	.word	0x007a1200
 800d9c4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9cc:	e225      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d9ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9d2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d9d6:	430b      	orrs	r3, r1
 800d9d8:	f040 8085 	bne.w	800dae6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d9dc:	4b9c      	ldr	r3, [pc, #624]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d9de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9e0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d9e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800d9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d9ec:	d06b      	beq.n	800dac6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d9f4:	d874      	bhi.n	800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d9f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d9fc:	d056      	beq.n	800daac <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800da04:	d86c      	bhi.n	800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800da06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800da0c:	d03b      	beq.n	800da86 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800da0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800da14:	d864      	bhi.n	800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800da16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800da1c:	d021      	beq.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800da1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800da24:	d85c      	bhi.n	800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800da26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d004      	beq.n	800da36 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800da2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da32:	d004      	beq.n	800da3e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800da34:	e054      	b.n	800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800da36:	f7fe fb5f 	bl	800c0f8 <HAL_RCC_GetPCLK1Freq>
 800da3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800da3c:	e1ed      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800da3e:	4b84      	ldr	r3, [pc, #528]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800da4a:	d107      	bne.n	800da5c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da4c:	f107 0318 	add.w	r3, r7, #24
 800da50:	4618      	mov	r0, r3
 800da52:	f000 fa05 	bl	800de60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da5a:	e1de      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800da5c:	2300      	movs	r3, #0
 800da5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da60:	e1db      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800da62:	4b7b      	ldr	r3, [pc, #492]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800da6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800da6e:	d107      	bne.n	800da80 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da70:	f107 030c 	add.w	r3, r7, #12
 800da74:	4618      	mov	r0, r3
 800da76:	f000 fb47 	bl	800e108 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da7e:	e1cc      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800da80:	2300      	movs	r3, #0
 800da82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da84:	e1c9      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800da86:	4b72      	ldr	r3, [pc, #456]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f003 0304 	and.w	r3, r3, #4
 800da8e:	2b04      	cmp	r3, #4
 800da90:	d109      	bne.n	800daa6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800da92:	4b6f      	ldr	r3, [pc, #444]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	08db      	lsrs	r3, r3, #3
 800da98:	f003 0303 	and.w	r3, r3, #3
 800da9c:	4a6d      	ldr	r2, [pc, #436]	@ (800dc54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800da9e:	fa22 f303 	lsr.w	r3, r2, r3
 800daa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800daa4:	e1b9      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800daa6:	2300      	movs	r3, #0
 800daa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800daaa:	e1b6      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800daac:	4b68      	ldr	r3, [pc, #416]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dab8:	d102      	bne.n	800dac0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800daba:	4b67      	ldr	r3, [pc, #412]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800dabc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dabe:	e1ac      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dac0:	2300      	movs	r3, #0
 800dac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dac4:	e1a9      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800dac6:	4b62      	ldr	r3, [pc, #392]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dace:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dad2:	d102      	bne.n	800dada <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800dad4:	4b61      	ldr	r3, [pc, #388]	@ (800dc5c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800dad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dad8:	e19f      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dada:	2300      	movs	r3, #0
 800dadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dade:	e19c      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800dae0:	2300      	movs	r3, #0
 800dae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dae4:	e199      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800dae6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800daea:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800daee:	430b      	orrs	r3, r1
 800daf0:	d173      	bne.n	800dbda <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800daf2:	4b57      	ldr	r3, [pc, #348]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800daf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800daf6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800dafa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800dafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dafe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db02:	d02f      	beq.n	800db64 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800db04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db0a:	d863      	bhi.n	800dbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800db0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d004      	beq.n	800db1c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800db12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db18:	d012      	beq.n	800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800db1a:	e05b      	b.n	800dbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800db1c:	4b4c      	ldr	r3, [pc, #304]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800db24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800db28:	d107      	bne.n	800db3a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db2a:	f107 0318 	add.w	r3, r7, #24
 800db2e:	4618      	mov	r0, r3
 800db30:	f000 f996 	bl	800de60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db38:	e16f      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800db3a:	2300      	movs	r3, #0
 800db3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db3e:	e16c      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800db40:	4b43      	ldr	r3, [pc, #268]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800db48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db4c:	d107      	bne.n	800db5e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db4e:	f107 030c 	add.w	r3, r7, #12
 800db52:	4618      	mov	r0, r3
 800db54:	f000 fad8 	bl	800e108 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db5c:	e15d      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800db5e:	2300      	movs	r3, #0
 800db60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db62:	e15a      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800db64:	4b3a      	ldr	r3, [pc, #232]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800db6c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800db6e:	4b38      	ldr	r3, [pc, #224]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f003 0304 	and.w	r3, r3, #4
 800db76:	2b04      	cmp	r3, #4
 800db78:	d10c      	bne.n	800db94 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800db7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d109      	bne.n	800db94 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db80:	4b33      	ldr	r3, [pc, #204]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	08db      	lsrs	r3, r3, #3
 800db86:	f003 0303 	and.w	r3, r3, #3
 800db8a:	4a32      	ldr	r2, [pc, #200]	@ (800dc54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800db8c:	fa22 f303 	lsr.w	r3, r2, r3
 800db90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db92:	e01e      	b.n	800dbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800db94:	4b2e      	ldr	r3, [pc, #184]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dba0:	d106      	bne.n	800dbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800dba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dba4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dba8:	d102      	bne.n	800dbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dbaa:	4b2b      	ldr	r3, [pc, #172]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800dbac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dbae:	e010      	b.n	800dbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dbb0:	4b27      	ldr	r3, [pc, #156]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dbbc:	d106      	bne.n	800dbcc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800dbbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dbc4:	d102      	bne.n	800dbcc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dbc6:	4b25      	ldr	r3, [pc, #148]	@ (800dc5c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800dbc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dbca:	e002      	b.n	800dbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800dbd0:	e123      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800dbd2:	e122      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbd8:	e11f      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800dbda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbde:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800dbe2:	430b      	orrs	r3, r1
 800dbe4:	d13c      	bne.n	800dc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800dbe6:	4b1a      	ldr	r3, [pc, #104]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dbe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dbee:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800dbf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d004      	beq.n	800dc00 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800dbf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbfc:	d012      	beq.n	800dc24 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800dbfe:	e023      	b.n	800dc48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dc00:	4b13      	ldr	r3, [pc, #76]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dc0c:	d107      	bne.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dc0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dc12:	4618      	mov	r0, r3
 800dc14:	f000 fbcc 	bl	800e3b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc1c:	e0fd      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc22:	e0fa      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dc24:	4b0a      	ldr	r3, [pc, #40]	@ (800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dc30:	d107      	bne.n	800dc42 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc32:	f107 0318 	add.w	r3, r7, #24
 800dc36:	4618      	mov	r0, r3
 800dc38:	f000 f912 	bl	800de60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800dc3c:	6a3b      	ldr	r3, [r7, #32]
 800dc3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc40:	e0eb      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dc42:	2300      	movs	r3, #0
 800dc44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc46:	e0e8      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc4c:	e0e5      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800dc4e:	bf00      	nop
 800dc50:	58024400 	.word	0x58024400
 800dc54:	03d09000 	.word	0x03d09000
 800dc58:	003d0900 	.word	0x003d0900
 800dc5c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800dc60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc64:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800dc68:	430b      	orrs	r3, r1
 800dc6a:	f040 8085 	bne.w	800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800dc6e:	4b6d      	ldr	r3, [pc, #436]	@ (800de24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dc70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc72:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800dc76:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800dc78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dc7e:	d06b      	beq.n	800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800dc80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dc86:	d874      	bhi.n	800dd72 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800dc88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc8e:	d056      	beq.n	800dd3e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800dc90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc96:	d86c      	bhi.n	800dd72 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800dc98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dc9e:	d03b      	beq.n	800dd18 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800dca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dca2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dca6:	d864      	bhi.n	800dd72 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800dca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dcae:	d021      	beq.n	800dcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800dcb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dcb6:	d85c      	bhi.n	800dd72 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800dcb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d004      	beq.n	800dcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800dcbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dcc4:	d004      	beq.n	800dcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800dcc6:	e054      	b.n	800dd72 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800dcc8:	f000 f8b4 	bl	800de34 <HAL_RCCEx_GetD3PCLK1Freq>
 800dccc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dcce:	e0a4      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dcd0:	4b54      	ldr	r3, [pc, #336]	@ (800de24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dcd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dcdc:	d107      	bne.n	800dcee <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcde:	f107 0318 	add.w	r3, r7, #24
 800dce2:	4618      	mov	r0, r3
 800dce4:	f000 f8bc 	bl	800de60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800dce8:	69fb      	ldr	r3, [r7, #28]
 800dcea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dcec:	e095      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcf2:	e092      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dcf4:	4b4b      	ldr	r3, [pc, #300]	@ (800de24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dcfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd00:	d107      	bne.n	800dd12 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd02:	f107 030c 	add.w	r3, r7, #12
 800dd06:	4618      	mov	r0, r3
 800dd08:	f000 f9fe 	bl	800e108 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd10:	e083      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dd12:	2300      	movs	r3, #0
 800dd14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd16:	e080      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800dd18:	4b42      	ldr	r3, [pc, #264]	@ (800de24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f003 0304 	and.w	r3, r3, #4
 800dd20:	2b04      	cmp	r3, #4
 800dd22:	d109      	bne.n	800dd38 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dd24:	4b3f      	ldr	r3, [pc, #252]	@ (800de24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	08db      	lsrs	r3, r3, #3
 800dd2a:	f003 0303 	and.w	r3, r3, #3
 800dd2e:	4a3e      	ldr	r2, [pc, #248]	@ (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800dd30:	fa22 f303 	lsr.w	r3, r2, r3
 800dd34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd36:	e070      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd3c:	e06d      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800dd3e:	4b39      	ldr	r3, [pc, #228]	@ (800de24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd4a:	d102      	bne.n	800dd52 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800dd4c:	4b37      	ldr	r3, [pc, #220]	@ (800de2c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800dd4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd50:	e063      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dd52:	2300      	movs	r3, #0
 800dd54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd56:	e060      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800dd58:	4b32      	ldr	r3, [pc, #200]	@ (800de24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dd64:	d102      	bne.n	800dd6c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800dd66:	4b32      	ldr	r3, [pc, #200]	@ (800de30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800dd68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd6a:	e056      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd70:	e053      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800dd72:	2300      	movs	r3, #0
 800dd74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd76:	e050      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800dd78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd7c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800dd80:	430b      	orrs	r3, r1
 800dd82:	d148      	bne.n	800de16 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800dd84:	4b27      	ldr	r3, [pc, #156]	@ (800de24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dd86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800dd8c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800dd8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd94:	d02a      	beq.n	800ddec <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800dd96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd9c:	d838      	bhi.n	800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800dd9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d004      	beq.n	800ddae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800dda4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dda6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ddaa:	d00d      	beq.n	800ddc8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800ddac:	e030      	b.n	800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ddae:	4b1d      	ldr	r3, [pc, #116]	@ (800de24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ddb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ddba:	d102      	bne.n	800ddc2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800ddbc:	4b1c      	ldr	r3, [pc, #112]	@ (800de30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ddbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ddc0:	e02b      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddc6:	e028      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ddc8:	4b16      	ldr	r3, [pc, #88]	@ (800de24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ddd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ddd4:	d107      	bne.n	800dde6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ddd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ddda:	4618      	mov	r0, r3
 800dddc:	f000 fae8 	bl	800e3b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dde0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dde2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dde4:	e019      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dde6:	2300      	movs	r3, #0
 800dde8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddea:	e016      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ddec:	4b0d      	ldr	r3, [pc, #52]	@ (800de24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ddf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ddf8:	d107      	bne.n	800de0a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddfa:	f107 0318 	add.w	r3, r7, #24
 800ddfe:	4618      	mov	r0, r3
 800de00:	f000 f82e 	bl	800de60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de08:	e007      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800de0a:	2300      	movs	r3, #0
 800de0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de0e:	e004      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800de10:	2300      	movs	r3, #0
 800de12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de14:	e001      	b.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800de16:	2300      	movs	r3, #0
 800de18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800de1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3740      	adds	r7, #64	@ 0x40
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	58024400 	.word	0x58024400
 800de28:	03d09000 	.word	0x03d09000
 800de2c:	003d0900 	.word	0x003d0900
 800de30:	007a1200 	.word	0x007a1200

0800de34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800de38:	f7fe f92e 	bl	800c098 <HAL_RCC_GetHCLKFreq>
 800de3c:	4602      	mov	r2, r0
 800de3e:	4b06      	ldr	r3, [pc, #24]	@ (800de58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800de40:	6a1b      	ldr	r3, [r3, #32]
 800de42:	091b      	lsrs	r3, r3, #4
 800de44:	f003 0307 	and.w	r3, r3, #7
 800de48:	4904      	ldr	r1, [pc, #16]	@ (800de5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800de4a:	5ccb      	ldrb	r3, [r1, r3]
 800de4c:	f003 031f 	and.w	r3, r3, #31
 800de50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800de54:	4618      	mov	r0, r3
 800de56:	bd80      	pop	{r7, pc}
 800de58:	58024400 	.word	0x58024400
 800de5c:	0801c91c 	.word	0x0801c91c

0800de60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800de60:	b480      	push	{r7}
 800de62:	b089      	sub	sp, #36	@ 0x24
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800de68:	4ba1      	ldr	r3, [pc, #644]	@ (800e0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de6c:	f003 0303 	and.w	r3, r3, #3
 800de70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800de72:	4b9f      	ldr	r3, [pc, #636]	@ (800e0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de76:	0b1b      	lsrs	r3, r3, #12
 800de78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800de7e:	4b9c      	ldr	r3, [pc, #624]	@ (800e0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de82:	091b      	lsrs	r3, r3, #4
 800de84:	f003 0301 	and.w	r3, r3, #1
 800de88:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800de8a:	4b99      	ldr	r3, [pc, #612]	@ (800e0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de8e:	08db      	lsrs	r3, r3, #3
 800de90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de94:	693a      	ldr	r2, [r7, #16]
 800de96:	fb02 f303 	mul.w	r3, r2, r3
 800de9a:	ee07 3a90 	vmov	s15, r3
 800de9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dea2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f000 8111 	beq.w	800e0d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	2b02      	cmp	r3, #2
 800deb2:	f000 8083 	beq.w	800dfbc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800deb6:	69bb      	ldr	r3, [r7, #24]
 800deb8:	2b02      	cmp	r3, #2
 800deba:	f200 80a1 	bhi.w	800e000 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d003      	beq.n	800decc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800dec4:	69bb      	ldr	r3, [r7, #24]
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	d056      	beq.n	800df78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800deca:	e099      	b.n	800e000 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800decc:	4b88      	ldr	r3, [pc, #544]	@ (800e0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f003 0320 	and.w	r3, r3, #32
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d02d      	beq.n	800df34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ded8:	4b85      	ldr	r3, [pc, #532]	@ (800e0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	08db      	lsrs	r3, r3, #3
 800dede:	f003 0303 	and.w	r3, r3, #3
 800dee2:	4a84      	ldr	r2, [pc, #528]	@ (800e0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800dee4:	fa22 f303 	lsr.w	r3, r2, r3
 800dee8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	ee07 3a90 	vmov	s15, r3
 800def0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	ee07 3a90 	vmov	s15, r3
 800defa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800defe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df02:	4b7b      	ldr	r3, [pc, #492]	@ (800e0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df0a:	ee07 3a90 	vmov	s15, r3
 800df0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df12:	ed97 6a03 	vldr	s12, [r7, #12]
 800df16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800df1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800df32:	e087      	b.n	800e044 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	ee07 3a90 	vmov	s15, r3
 800df3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e0fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800df42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df46:	4b6a      	ldr	r3, [pc, #424]	@ (800e0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df4e:	ee07 3a90 	vmov	s15, r3
 800df52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df56:	ed97 6a03 	vldr	s12, [r7, #12]
 800df5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800df5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df76:	e065      	b.n	800e044 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	ee07 3a90 	vmov	s15, r3
 800df7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e100 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800df86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df8a:	4b59      	ldr	r3, [pc, #356]	@ (800e0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df92:	ee07 3a90 	vmov	s15, r3
 800df96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800df9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dfa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dfba:	e043      	b.n	800e044 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	ee07 3a90 	vmov	s15, r3
 800dfc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfc6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800dfca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfce:	4b48      	ldr	r3, [pc, #288]	@ (800e0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dfd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfd6:	ee07 3a90 	vmov	s15, r3
 800dfda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfde:	ed97 6a03 	vldr	s12, [r7, #12]
 800dfe2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dfe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dffa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dffe:	e021      	b.n	800e044 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	ee07 3a90 	vmov	s15, r3
 800e006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e00a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e100 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e00e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e012:	4b37      	ldr	r3, [pc, #220]	@ (800e0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e01a:	ee07 3a90 	vmov	s15, r3
 800e01e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e022:	ed97 6a03 	vldr	s12, [r7, #12]
 800e026:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e02a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e02e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e03a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e03e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e042:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e044:	4b2a      	ldr	r3, [pc, #168]	@ (800e0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e048:	0a5b      	lsrs	r3, r3, #9
 800e04a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e04e:	ee07 3a90 	vmov	s15, r3
 800e052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e056:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e05a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e05e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e06a:	ee17 2a90 	vmov	r2, s15
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e072:	4b1f      	ldr	r3, [pc, #124]	@ (800e0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e076:	0c1b      	lsrs	r3, r3, #16
 800e078:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e07c:	ee07 3a90 	vmov	s15, r3
 800e080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e084:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e088:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e08c:	edd7 6a07 	vldr	s13, [r7, #28]
 800e090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e098:	ee17 2a90 	vmov	r2, s15
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e0a0:	4b13      	ldr	r3, [pc, #76]	@ (800e0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e0a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0a4:	0e1b      	lsrs	r3, r3, #24
 800e0a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0aa:	ee07 3a90 	vmov	s15, r3
 800e0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e0b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e0ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0c6:	ee17 2a90 	vmov	r2, s15
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e0ce:	e008      	b.n	800e0e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	609a      	str	r2, [r3, #8]
}
 800e0e2:	bf00      	nop
 800e0e4:	3724      	adds	r7, #36	@ 0x24
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	58024400 	.word	0x58024400
 800e0f4:	03d09000 	.word	0x03d09000
 800e0f8:	46000000 	.word	0x46000000
 800e0fc:	4c742400 	.word	0x4c742400
 800e100:	4a742400 	.word	0x4a742400
 800e104:	4af42400 	.word	0x4af42400

0800e108 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e108:	b480      	push	{r7}
 800e10a:	b089      	sub	sp, #36	@ 0x24
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e110:	4ba1      	ldr	r3, [pc, #644]	@ (800e398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e114:	f003 0303 	and.w	r3, r3, #3
 800e118:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e11a:	4b9f      	ldr	r3, [pc, #636]	@ (800e398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e11c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e11e:	0d1b      	lsrs	r3, r3, #20
 800e120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e124:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e126:	4b9c      	ldr	r3, [pc, #624]	@ (800e398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e12a:	0a1b      	lsrs	r3, r3, #8
 800e12c:	f003 0301 	and.w	r3, r3, #1
 800e130:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e132:	4b99      	ldr	r3, [pc, #612]	@ (800e398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e136:	08db      	lsrs	r3, r3, #3
 800e138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e13c:	693a      	ldr	r2, [r7, #16]
 800e13e:	fb02 f303 	mul.w	r3, r2, r3
 800e142:	ee07 3a90 	vmov	s15, r3
 800e146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e14a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	2b00      	cmp	r3, #0
 800e152:	f000 8111 	beq.w	800e378 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e156:	69bb      	ldr	r3, [r7, #24]
 800e158:	2b02      	cmp	r3, #2
 800e15a:	f000 8083 	beq.w	800e264 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e15e:	69bb      	ldr	r3, [r7, #24]
 800e160:	2b02      	cmp	r3, #2
 800e162:	f200 80a1 	bhi.w	800e2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d003      	beq.n	800e174 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e16c:	69bb      	ldr	r3, [r7, #24]
 800e16e:	2b01      	cmp	r3, #1
 800e170:	d056      	beq.n	800e220 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e172:	e099      	b.n	800e2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e174:	4b88      	ldr	r3, [pc, #544]	@ (800e398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f003 0320 	and.w	r3, r3, #32
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d02d      	beq.n	800e1dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e180:	4b85      	ldr	r3, [pc, #532]	@ (800e398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	08db      	lsrs	r3, r3, #3
 800e186:	f003 0303 	and.w	r3, r3, #3
 800e18a:	4a84      	ldr	r2, [pc, #528]	@ (800e39c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e18c:	fa22 f303 	lsr.w	r3, r2, r3
 800e190:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	ee07 3a90 	vmov	s15, r3
 800e198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	ee07 3a90 	vmov	s15, r3
 800e1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1aa:	4b7b      	ldr	r3, [pc, #492]	@ (800e398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1b2:	ee07 3a90 	vmov	s15, r3
 800e1b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800e1be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e1c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e1c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e1ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e1da:	e087      	b.n	800e2ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	ee07 3a90 	vmov	s15, r3
 800e1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e1ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1ee:	4b6a      	ldr	r3, [pc, #424]	@ (800e398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1f6:	ee07 3a90 	vmov	s15, r3
 800e1fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800e202:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e20a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e20e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e21a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e21e:	e065      	b.n	800e2ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	ee07 3a90 	vmov	s15, r3
 800e226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e22a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e22e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e232:	4b59      	ldr	r3, [pc, #356]	@ (800e398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e23a:	ee07 3a90 	vmov	s15, r3
 800e23e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e242:	ed97 6a03 	vldr	s12, [r7, #12]
 800e246:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e24a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e24e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e25a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e25e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e262:	e043      	b.n	800e2ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	ee07 3a90 	vmov	s15, r3
 800e26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e26e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e276:	4b48      	ldr	r3, [pc, #288]	@ (800e398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e27e:	ee07 3a90 	vmov	s15, r3
 800e282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e286:	ed97 6a03 	vldr	s12, [r7, #12]
 800e28a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e2a6:	e021      	b.n	800e2ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	ee07 3a90 	vmov	s15, r3
 800e2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2ba:	4b37      	ldr	r3, [pc, #220]	@ (800e398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e2bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2c2:	ee07 3a90 	vmov	s15, r3
 800e2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800e2ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e2d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e2de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e2ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e2ec:	4b2a      	ldr	r3, [pc, #168]	@ (800e398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e2ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2f0:	0a5b      	lsrs	r3, r3, #9
 800e2f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2f6:	ee07 3a90 	vmov	s15, r3
 800e2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e302:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e306:	edd7 6a07 	vldr	s13, [r7, #28]
 800e30a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e30e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e312:	ee17 2a90 	vmov	r2, s15
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e31a:	4b1f      	ldr	r3, [pc, #124]	@ (800e398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e31c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e31e:	0c1b      	lsrs	r3, r3, #16
 800e320:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e324:	ee07 3a90 	vmov	s15, r3
 800e328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e32c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e330:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e334:	edd7 6a07 	vldr	s13, [r7, #28]
 800e338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e33c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e340:	ee17 2a90 	vmov	r2, s15
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e348:	4b13      	ldr	r3, [pc, #76]	@ (800e398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e34a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e34c:	0e1b      	lsrs	r3, r3, #24
 800e34e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e352:	ee07 3a90 	vmov	s15, r3
 800e356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e35a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e35e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e362:	edd7 6a07 	vldr	s13, [r7, #28]
 800e366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e36a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e36e:	ee17 2a90 	vmov	r2, s15
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e376:	e008      	b.n	800e38a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2200      	movs	r2, #0
 800e37c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2200      	movs	r2, #0
 800e382:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2200      	movs	r2, #0
 800e388:	609a      	str	r2, [r3, #8]
}
 800e38a:	bf00      	nop
 800e38c:	3724      	adds	r7, #36	@ 0x24
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop
 800e398:	58024400 	.word	0x58024400
 800e39c:	03d09000 	.word	0x03d09000
 800e3a0:	46000000 	.word	0x46000000
 800e3a4:	4c742400 	.word	0x4c742400
 800e3a8:	4a742400 	.word	0x4a742400
 800e3ac:	4af42400 	.word	0x4af42400

0800e3b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b089      	sub	sp, #36	@ 0x24
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e3b8:	4ba0      	ldr	r3, [pc, #640]	@ (800e63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3bc:	f003 0303 	and.w	r3, r3, #3
 800e3c0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800e3c2:	4b9e      	ldr	r3, [pc, #632]	@ (800e63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e3c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3c6:	091b      	lsrs	r3, r3, #4
 800e3c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e3cc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e3ce:	4b9b      	ldr	r3, [pc, #620]	@ (800e63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3d2:	f003 0301 	and.w	r3, r3, #1
 800e3d6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e3d8:	4b98      	ldr	r3, [pc, #608]	@ (800e63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e3da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3dc:	08db      	lsrs	r3, r3, #3
 800e3de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e3e2:	693a      	ldr	r2, [r7, #16]
 800e3e4:	fb02 f303 	mul.w	r3, r2, r3
 800e3e8:	ee07 3a90 	vmov	s15, r3
 800e3ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	f000 8111 	beq.w	800e61e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800e3fc:	69bb      	ldr	r3, [r7, #24]
 800e3fe:	2b02      	cmp	r3, #2
 800e400:	f000 8083 	beq.w	800e50a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800e404:	69bb      	ldr	r3, [r7, #24]
 800e406:	2b02      	cmp	r3, #2
 800e408:	f200 80a1 	bhi.w	800e54e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800e40c:	69bb      	ldr	r3, [r7, #24]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d003      	beq.n	800e41a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800e412:	69bb      	ldr	r3, [r7, #24]
 800e414:	2b01      	cmp	r3, #1
 800e416:	d056      	beq.n	800e4c6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800e418:	e099      	b.n	800e54e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e41a:	4b88      	ldr	r3, [pc, #544]	@ (800e63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f003 0320 	and.w	r3, r3, #32
 800e422:	2b00      	cmp	r3, #0
 800e424:	d02d      	beq.n	800e482 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e426:	4b85      	ldr	r3, [pc, #532]	@ (800e63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	08db      	lsrs	r3, r3, #3
 800e42c:	f003 0303 	and.w	r3, r3, #3
 800e430:	4a83      	ldr	r2, [pc, #524]	@ (800e640 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800e432:	fa22 f303 	lsr.w	r3, r2, r3
 800e436:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	ee07 3a90 	vmov	s15, r3
 800e43e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	ee07 3a90 	vmov	s15, r3
 800e448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e44c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e450:	4b7a      	ldr	r3, [pc, #488]	@ (800e63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e458:	ee07 3a90 	vmov	s15, r3
 800e45c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e460:	ed97 6a03 	vldr	s12, [r7, #12]
 800e464:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800e644 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e468:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e46c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e470:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e47c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e480:	e087      	b.n	800e592 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	ee07 3a90 	vmov	s15, r3
 800e488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e48c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800e648 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e494:	4b69      	ldr	r3, [pc, #420]	@ (800e63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e49c:	ee07 3a90 	vmov	s15, r3
 800e4a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800e4a8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800e644 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e4ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e4b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e4b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e4b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e4bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e4c4:	e065      	b.n	800e592 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	ee07 3a90 	vmov	s15, r3
 800e4cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4d0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800e64c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800e4d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e4d8:	4b58      	ldr	r3, [pc, #352]	@ (800e63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e4da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4e0:	ee07 3a90 	vmov	s15, r3
 800e4e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800e4ec:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800e644 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e4f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e4f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e4f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e4fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e500:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e504:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e508:	e043      	b.n	800e592 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	ee07 3a90 	vmov	s15, r3
 800e510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e514:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800e650 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800e518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e51c:	4b47      	ldr	r3, [pc, #284]	@ (800e63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e51e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e524:	ee07 3a90 	vmov	s15, r3
 800e528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e52c:	ed97 6a03 	vldr	s12, [r7, #12]
 800e530:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800e644 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e53c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e544:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e548:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e54c:	e021      	b.n	800e592 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	ee07 3a90 	vmov	s15, r3
 800e554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e558:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800e648 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e55c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e560:	4b36      	ldr	r3, [pc, #216]	@ (800e63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e568:	ee07 3a90 	vmov	s15, r3
 800e56c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e570:	ed97 6a03 	vldr	s12, [r7, #12]
 800e574:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800e644 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e57c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e580:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e58c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e590:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800e592:	4b2a      	ldr	r3, [pc, #168]	@ (800e63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e596:	0a5b      	lsrs	r3, r3, #9
 800e598:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e59c:	ee07 3a90 	vmov	s15, r3
 800e5a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e5a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e5ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800e5b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e5b8:	ee17 2a90 	vmov	r2, s15
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800e5c0:	4b1e      	ldr	r3, [pc, #120]	@ (800e63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e5c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5c4:	0c1b      	lsrs	r3, r3, #16
 800e5c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e5ca:	ee07 3a90 	vmov	s15, r3
 800e5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e5d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e5da:	edd7 6a07 	vldr	s13, [r7, #28]
 800e5de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e5e6:	ee17 2a90 	vmov	r2, s15
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800e5ee:	4b13      	ldr	r3, [pc, #76]	@ (800e63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e5f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5f2:	0e1b      	lsrs	r3, r3, #24
 800e5f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e5f8:	ee07 3a90 	vmov	s15, r3
 800e5fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e600:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e604:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e608:	edd7 6a07 	vldr	s13, [r7, #28]
 800e60c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e614:	ee17 2a90 	vmov	r2, s15
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e61c:	e008      	b.n	800e630 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2200      	movs	r2, #0
 800e622:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2200      	movs	r2, #0
 800e628:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2200      	movs	r2, #0
 800e62e:	609a      	str	r2, [r3, #8]
}
 800e630:	bf00      	nop
 800e632:	3724      	adds	r7, #36	@ 0x24
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr
 800e63c:	58024400 	.word	0x58024400
 800e640:	03d09000 	.word	0x03d09000
 800e644:	46000000 	.word	0x46000000
 800e648:	4c742400 	.word	0x4c742400
 800e64c:	4a742400 	.word	0x4a742400
 800e650:	4af42400 	.word	0x4af42400

0800e654 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e65e:	2300      	movs	r3, #0
 800e660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e662:	4b53      	ldr	r3, [pc, #332]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e666:	f003 0303 	and.w	r3, r3, #3
 800e66a:	2b03      	cmp	r3, #3
 800e66c:	d101      	bne.n	800e672 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e66e:	2301      	movs	r3, #1
 800e670:	e099      	b.n	800e7a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e672:	4b4f      	ldr	r3, [pc, #316]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	4a4e      	ldr	r2, [pc, #312]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e678:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e67c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e67e:	f7f5 ff13 	bl	80044a8 <HAL_GetTick>
 800e682:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e684:	e008      	b.n	800e698 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e686:	f7f5 ff0f 	bl	80044a8 <HAL_GetTick>
 800e68a:	4602      	mov	r2, r0
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	1ad3      	subs	r3, r2, r3
 800e690:	2b02      	cmp	r3, #2
 800e692:	d901      	bls.n	800e698 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e694:	2303      	movs	r3, #3
 800e696:	e086      	b.n	800e7a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e698:	4b45      	ldr	r3, [pc, #276]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d1f0      	bne.n	800e686 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e6a4:	4b42      	ldr	r3, [pc, #264]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e6a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	031b      	lsls	r3, r3, #12
 800e6b2:	493f      	ldr	r1, [pc, #252]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e6b4:	4313      	orrs	r3, r2
 800e6b6:	628b      	str	r3, [r1, #40]	@ 0x28
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	685b      	ldr	r3, [r3, #4]
 800e6bc:	3b01      	subs	r3, #1
 800e6be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	689b      	ldr	r3, [r3, #8]
 800e6c6:	3b01      	subs	r3, #1
 800e6c8:	025b      	lsls	r3, r3, #9
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	431a      	orrs	r2, r3
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	68db      	ldr	r3, [r3, #12]
 800e6d2:	3b01      	subs	r3, #1
 800e6d4:	041b      	lsls	r3, r3, #16
 800e6d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e6da:	431a      	orrs	r2, r3
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	691b      	ldr	r3, [r3, #16]
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	061b      	lsls	r3, r3, #24
 800e6e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e6e8:	4931      	ldr	r1, [pc, #196]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e6ee:	4b30      	ldr	r3, [pc, #192]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	695b      	ldr	r3, [r3, #20]
 800e6fa:	492d      	ldr	r1, [pc, #180]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e700:	4b2b      	ldr	r3, [pc, #172]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e704:	f023 0220 	bic.w	r2, r3, #32
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	699b      	ldr	r3, [r3, #24]
 800e70c:	4928      	ldr	r1, [pc, #160]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e70e:	4313      	orrs	r3, r2
 800e710:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e712:	4b27      	ldr	r3, [pc, #156]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e716:	4a26      	ldr	r2, [pc, #152]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e718:	f023 0310 	bic.w	r3, r3, #16
 800e71c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e71e:	4b24      	ldr	r3, [pc, #144]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e720:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e722:	4b24      	ldr	r3, [pc, #144]	@ (800e7b4 <RCCEx_PLL2_Config+0x160>)
 800e724:	4013      	ands	r3, r2
 800e726:	687a      	ldr	r2, [r7, #4]
 800e728:	69d2      	ldr	r2, [r2, #28]
 800e72a:	00d2      	lsls	r2, r2, #3
 800e72c:	4920      	ldr	r1, [pc, #128]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e72e:	4313      	orrs	r3, r2
 800e730:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e732:	4b1f      	ldr	r3, [pc, #124]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e736:	4a1e      	ldr	r2, [pc, #120]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e738:	f043 0310 	orr.w	r3, r3, #16
 800e73c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d106      	bne.n	800e752 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e744:	4b1a      	ldr	r3, [pc, #104]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e748:	4a19      	ldr	r2, [pc, #100]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e74a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e74e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e750:	e00f      	b.n	800e772 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	2b01      	cmp	r3, #1
 800e756:	d106      	bne.n	800e766 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e758:	4b15      	ldr	r3, [pc, #84]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e75a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e75c:	4a14      	ldr	r2, [pc, #80]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e75e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e762:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e764:	e005      	b.n	800e772 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e766:	4b12      	ldr	r3, [pc, #72]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e76a:	4a11      	ldr	r2, [pc, #68]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e76c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e770:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e772:	4b0f      	ldr	r3, [pc, #60]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	4a0e      	ldr	r2, [pc, #56]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e778:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e77c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e77e:	f7f5 fe93 	bl	80044a8 <HAL_GetTick>
 800e782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e784:	e008      	b.n	800e798 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e786:	f7f5 fe8f 	bl	80044a8 <HAL_GetTick>
 800e78a:	4602      	mov	r2, r0
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	1ad3      	subs	r3, r2, r3
 800e790:	2b02      	cmp	r3, #2
 800e792:	d901      	bls.n	800e798 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e794:	2303      	movs	r3, #3
 800e796:	e006      	b.n	800e7a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e798:	4b05      	ldr	r3, [pc, #20]	@ (800e7b0 <RCCEx_PLL2_Config+0x15c>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d0f0      	beq.n	800e786 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	58024400 	.word	0x58024400
 800e7b4:	ffff0007 	.word	0xffff0007

0800e7b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e7c6:	4b53      	ldr	r3, [pc, #332]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e7c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7ca:	f003 0303 	and.w	r3, r3, #3
 800e7ce:	2b03      	cmp	r3, #3
 800e7d0:	d101      	bne.n	800e7d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	e099      	b.n	800e90a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e7d6:	4b4f      	ldr	r3, [pc, #316]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	4a4e      	ldr	r2, [pc, #312]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e7dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e7e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e7e2:	f7f5 fe61 	bl	80044a8 <HAL_GetTick>
 800e7e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e7e8:	e008      	b.n	800e7fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e7ea:	f7f5 fe5d 	bl	80044a8 <HAL_GetTick>
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	1ad3      	subs	r3, r2, r3
 800e7f4:	2b02      	cmp	r3, #2
 800e7f6:	d901      	bls.n	800e7fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e7f8:	2303      	movs	r3, #3
 800e7fa:	e086      	b.n	800e90a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e7fc:	4b45      	ldr	r3, [pc, #276]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e804:	2b00      	cmp	r3, #0
 800e806:	d1f0      	bne.n	800e7ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e808:	4b42      	ldr	r3, [pc, #264]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e80a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e80c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	051b      	lsls	r3, r3, #20
 800e816:	493f      	ldr	r1, [pc, #252]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e818:	4313      	orrs	r3, r2
 800e81a:	628b      	str	r3, [r1, #40]	@ 0x28
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	3b01      	subs	r3, #1
 800e822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	689b      	ldr	r3, [r3, #8]
 800e82a:	3b01      	subs	r3, #1
 800e82c:	025b      	lsls	r3, r3, #9
 800e82e:	b29b      	uxth	r3, r3
 800e830:	431a      	orrs	r2, r3
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	3b01      	subs	r3, #1
 800e838:	041b      	lsls	r3, r3, #16
 800e83a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e83e:	431a      	orrs	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	691b      	ldr	r3, [r3, #16]
 800e844:	3b01      	subs	r3, #1
 800e846:	061b      	lsls	r3, r3, #24
 800e848:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e84c:	4931      	ldr	r1, [pc, #196]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e84e:	4313      	orrs	r3, r2
 800e850:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e852:	4b30      	ldr	r3, [pc, #192]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e856:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	695b      	ldr	r3, [r3, #20]
 800e85e:	492d      	ldr	r1, [pc, #180]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e860:	4313      	orrs	r3, r2
 800e862:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e864:	4b2b      	ldr	r3, [pc, #172]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e868:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	699b      	ldr	r3, [r3, #24]
 800e870:	4928      	ldr	r1, [pc, #160]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e872:	4313      	orrs	r3, r2
 800e874:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e876:	4b27      	ldr	r3, [pc, #156]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e87a:	4a26      	ldr	r2, [pc, #152]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e87c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e880:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e882:	4b24      	ldr	r3, [pc, #144]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e886:	4b24      	ldr	r3, [pc, #144]	@ (800e918 <RCCEx_PLL3_Config+0x160>)
 800e888:	4013      	ands	r3, r2
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	69d2      	ldr	r2, [r2, #28]
 800e88e:	00d2      	lsls	r2, r2, #3
 800e890:	4920      	ldr	r1, [pc, #128]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e892:	4313      	orrs	r3, r2
 800e894:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e896:	4b1f      	ldr	r3, [pc, #124]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e89a:	4a1e      	ldr	r2, [pc, #120]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e89c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e8a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d106      	bne.n	800e8b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e8a8:	4b1a      	ldr	r3, [pc, #104]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e8aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8ac:	4a19      	ldr	r2, [pc, #100]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e8ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e8b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e8b4:	e00f      	b.n	800e8d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	d106      	bne.n	800e8ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e8bc:	4b15      	ldr	r3, [pc, #84]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8c0:	4a14      	ldr	r2, [pc, #80]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e8c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e8c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e8c8:	e005      	b.n	800e8d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e8ca:	4b12      	ldr	r3, [pc, #72]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8ce:	4a11      	ldr	r2, [pc, #68]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e8d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e8d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e8d6:	4b0f      	ldr	r3, [pc, #60]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a0e      	ldr	r2, [pc, #56]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e8dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e8e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e8e2:	f7f5 fde1 	bl	80044a8 <HAL_GetTick>
 800e8e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e8e8:	e008      	b.n	800e8fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e8ea:	f7f5 fddd 	bl	80044a8 <HAL_GetTick>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	1ad3      	subs	r3, r2, r3
 800e8f4:	2b02      	cmp	r3, #2
 800e8f6:	d901      	bls.n	800e8fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e8f8:	2303      	movs	r3, #3
 800e8fa:	e006      	b.n	800e90a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e8fc:	4b05      	ldr	r3, [pc, #20]	@ (800e914 <RCCEx_PLL3_Config+0x15c>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e904:	2b00      	cmp	r3, #0
 800e906:	d0f0      	beq.n	800e8ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e908:	7bfb      	ldrb	r3, [r7, #15]
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3710      	adds	r7, #16
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	58024400 	.word	0x58024400
 800e918:	ffff0007 	.word	0xffff0007

0800e91c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d101      	bne.n	800e92e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e92a:	2301      	movs	r3, #1
 800e92c:	e049      	b.n	800e9c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e934:	b2db      	uxtb	r3, r3
 800e936:	2b00      	cmp	r3, #0
 800e938:	d106      	bne.n	800e948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2200      	movs	r2, #0
 800e93e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f7f4 fed8 	bl	80036f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2202      	movs	r2, #2
 800e94c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	3304      	adds	r3, #4
 800e958:	4619      	mov	r1, r3
 800e95a:	4610      	mov	r0, r2
 800e95c:	f000 fdf4 	bl	800f548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2201      	movs	r2, #1
 800e964:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2201      	movs	r2, #1
 800e96c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2201      	movs	r2, #1
 800e974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2201      	movs	r2, #1
 800e97c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2201      	movs	r2, #1
 800e984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2201      	movs	r2, #1
 800e98c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2201      	movs	r2, #1
 800e994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2201      	movs	r2, #1
 800e99c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e9c0:	2300      	movs	r3, #0
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3708      	adds	r7, #8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
	...

0800e9cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b085      	sub	sp, #20
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d001      	beq.n	800e9e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	e05e      	b.n	800eaa2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2202      	movs	r2, #2
 800e9e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	68da      	ldr	r2, [r3, #12]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f042 0201 	orr.w	r2, r2, #1
 800e9fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4a2b      	ldr	r2, [pc, #172]	@ (800eab0 <HAL_TIM_Base_Start_IT+0xe4>)
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d02c      	beq.n	800ea60 <HAL_TIM_Base_Start_IT+0x94>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea0e:	d027      	beq.n	800ea60 <HAL_TIM_Base_Start_IT+0x94>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4a27      	ldr	r2, [pc, #156]	@ (800eab4 <HAL_TIM_Base_Start_IT+0xe8>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d022      	beq.n	800ea60 <HAL_TIM_Base_Start_IT+0x94>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	4a26      	ldr	r2, [pc, #152]	@ (800eab8 <HAL_TIM_Base_Start_IT+0xec>)
 800ea20:	4293      	cmp	r3, r2
 800ea22:	d01d      	beq.n	800ea60 <HAL_TIM_Base_Start_IT+0x94>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4a24      	ldr	r2, [pc, #144]	@ (800eabc <HAL_TIM_Base_Start_IT+0xf0>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d018      	beq.n	800ea60 <HAL_TIM_Base_Start_IT+0x94>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4a23      	ldr	r2, [pc, #140]	@ (800eac0 <HAL_TIM_Base_Start_IT+0xf4>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d013      	beq.n	800ea60 <HAL_TIM_Base_Start_IT+0x94>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4a21      	ldr	r2, [pc, #132]	@ (800eac4 <HAL_TIM_Base_Start_IT+0xf8>)
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	d00e      	beq.n	800ea60 <HAL_TIM_Base_Start_IT+0x94>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	4a20      	ldr	r2, [pc, #128]	@ (800eac8 <HAL_TIM_Base_Start_IT+0xfc>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d009      	beq.n	800ea60 <HAL_TIM_Base_Start_IT+0x94>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	4a1e      	ldr	r2, [pc, #120]	@ (800eacc <HAL_TIM_Base_Start_IT+0x100>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d004      	beq.n	800ea60 <HAL_TIM_Base_Start_IT+0x94>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	4a1d      	ldr	r2, [pc, #116]	@ (800ead0 <HAL_TIM_Base_Start_IT+0x104>)
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	d115      	bne.n	800ea8c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	689a      	ldr	r2, [r3, #8]
 800ea66:	4b1b      	ldr	r3, [pc, #108]	@ (800ead4 <HAL_TIM_Base_Start_IT+0x108>)
 800ea68:	4013      	ands	r3, r2
 800ea6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2b06      	cmp	r3, #6
 800ea70:	d015      	beq.n	800ea9e <HAL_TIM_Base_Start_IT+0xd2>
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea78:	d011      	beq.n	800ea9e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	681a      	ldr	r2, [r3, #0]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f042 0201 	orr.w	r2, r2, #1
 800ea88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea8a:	e008      	b.n	800ea9e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f042 0201 	orr.w	r2, r2, #1
 800ea9a:	601a      	str	r2, [r3, #0]
 800ea9c:	e000      	b.n	800eaa0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eaa0:	2300      	movs	r3, #0
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3714      	adds	r7, #20
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop
 800eab0:	40010000 	.word	0x40010000
 800eab4:	40000400 	.word	0x40000400
 800eab8:	40000800 	.word	0x40000800
 800eabc:	40000c00 	.word	0x40000c00
 800eac0:	40010400 	.word	0x40010400
 800eac4:	40001800 	.word	0x40001800
 800eac8:	40014000 	.word	0x40014000
 800eacc:	4000e000 	.word	0x4000e000
 800ead0:	4000e400 	.word	0x4000e400
 800ead4:	00010007 	.word	0x00010007

0800ead8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d101      	bne.n	800eaea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800eae6:	2301      	movs	r3, #1
 800eae8:	e049      	b.n	800eb7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d106      	bne.n	800eb04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f7f4 fdaa 	bl	8003658 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2202      	movs	r2, #2
 800eb08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	3304      	adds	r3, #4
 800eb14:	4619      	mov	r1, r3
 800eb16:	4610      	mov	r0, r2
 800eb18:	f000 fd16 	bl	800f548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2201      	movs	r2, #1
 800eb20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2201      	movs	r2, #1
 800eb28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2201      	movs	r2, #1
 800eb30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2201      	movs	r2, #1
 800eb38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2201      	movs	r2, #1
 800eb48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2201      	movs	r2, #1
 800eb50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2201      	movs	r2, #1
 800eb58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2201      	movs	r2, #1
 800eb60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2201      	movs	r2, #1
 800eb68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2201      	movs	r2, #1
 800eb70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2201      	movs	r2, #1
 800eb78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800eb7c:	2300      	movs	r3, #0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3708      	adds	r7, #8
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
	...

0800eb88 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b084      	sub	sp, #16
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb92:	2300      	movs	r3, #0
 800eb94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d109      	bne.n	800ebb0 <HAL_TIM_PWM_Start_IT+0x28>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	bf14      	ite	ne
 800eba8:	2301      	movne	r3, #1
 800ebaa:	2300      	moveq	r3, #0
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	e03c      	b.n	800ec2a <HAL_TIM_PWM_Start_IT+0xa2>
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	2b04      	cmp	r3, #4
 800ebb4:	d109      	bne.n	800ebca <HAL_TIM_PWM_Start_IT+0x42>
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	2b01      	cmp	r3, #1
 800ebc0:	bf14      	ite	ne
 800ebc2:	2301      	movne	r3, #1
 800ebc4:	2300      	moveq	r3, #0
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	e02f      	b.n	800ec2a <HAL_TIM_PWM_Start_IT+0xa2>
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	2b08      	cmp	r3, #8
 800ebce:	d109      	bne.n	800ebe4 <HAL_TIM_PWM_Start_IT+0x5c>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	bf14      	ite	ne
 800ebdc:	2301      	movne	r3, #1
 800ebde:	2300      	moveq	r3, #0
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	e022      	b.n	800ec2a <HAL_TIM_PWM_Start_IT+0xa2>
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	2b0c      	cmp	r3, #12
 800ebe8:	d109      	bne.n	800ebfe <HAL_TIM_PWM_Start_IT+0x76>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	bf14      	ite	ne
 800ebf6:	2301      	movne	r3, #1
 800ebf8:	2300      	moveq	r3, #0
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	e015      	b.n	800ec2a <HAL_TIM_PWM_Start_IT+0xa2>
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	2b10      	cmp	r3, #16
 800ec02:	d109      	bne.n	800ec18 <HAL_TIM_PWM_Start_IT+0x90>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ec0a:	b2db      	uxtb	r3, r3
 800ec0c:	2b01      	cmp	r3, #1
 800ec0e:	bf14      	ite	ne
 800ec10:	2301      	movne	r3, #1
 800ec12:	2300      	moveq	r3, #0
 800ec14:	b2db      	uxtb	r3, r3
 800ec16:	e008      	b.n	800ec2a <HAL_TIM_PWM_Start_IT+0xa2>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ec1e:	b2db      	uxtb	r3, r3
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	bf14      	ite	ne
 800ec24:	2301      	movne	r3, #1
 800ec26:	2300      	moveq	r3, #0
 800ec28:	b2db      	uxtb	r3, r3
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d001      	beq.n	800ec32 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ec2e:	2301      	movs	r3, #1
 800ec30:	e0f6      	b.n	800ee20 <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d104      	bne.n	800ec42 <HAL_TIM_PWM_Start_IT+0xba>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2202      	movs	r2, #2
 800ec3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ec40:	e023      	b.n	800ec8a <HAL_TIM_PWM_Start_IT+0x102>
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	2b04      	cmp	r3, #4
 800ec46:	d104      	bne.n	800ec52 <HAL_TIM_PWM_Start_IT+0xca>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2202      	movs	r2, #2
 800ec4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ec50:	e01b      	b.n	800ec8a <HAL_TIM_PWM_Start_IT+0x102>
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	2b08      	cmp	r3, #8
 800ec56:	d104      	bne.n	800ec62 <HAL_TIM_PWM_Start_IT+0xda>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2202      	movs	r2, #2
 800ec5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ec60:	e013      	b.n	800ec8a <HAL_TIM_PWM_Start_IT+0x102>
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	2b0c      	cmp	r3, #12
 800ec66:	d104      	bne.n	800ec72 <HAL_TIM_PWM_Start_IT+0xea>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2202      	movs	r2, #2
 800ec6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ec70:	e00b      	b.n	800ec8a <HAL_TIM_PWM_Start_IT+0x102>
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	2b10      	cmp	r3, #16
 800ec76:	d104      	bne.n	800ec82 <HAL_TIM_PWM_Start_IT+0xfa>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2202      	movs	r2, #2
 800ec7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ec80:	e003      	b.n	800ec8a <HAL_TIM_PWM_Start_IT+0x102>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2202      	movs	r2, #2
 800ec86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	2b0c      	cmp	r3, #12
 800ec8e:	d841      	bhi.n	800ed14 <HAL_TIM_PWM_Start_IT+0x18c>
 800ec90:	a201      	add	r2, pc, #4	@ (adr r2, 800ec98 <HAL_TIM_PWM_Start_IT+0x110>)
 800ec92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec96:	bf00      	nop
 800ec98:	0800eccd 	.word	0x0800eccd
 800ec9c:	0800ed15 	.word	0x0800ed15
 800eca0:	0800ed15 	.word	0x0800ed15
 800eca4:	0800ed15 	.word	0x0800ed15
 800eca8:	0800ecdf 	.word	0x0800ecdf
 800ecac:	0800ed15 	.word	0x0800ed15
 800ecb0:	0800ed15 	.word	0x0800ed15
 800ecb4:	0800ed15 	.word	0x0800ed15
 800ecb8:	0800ecf1 	.word	0x0800ecf1
 800ecbc:	0800ed15 	.word	0x0800ed15
 800ecc0:	0800ed15 	.word	0x0800ed15
 800ecc4:	0800ed15 	.word	0x0800ed15
 800ecc8:	0800ed03 	.word	0x0800ed03
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	68da      	ldr	r2, [r3, #12]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f042 0202 	orr.w	r2, r2, #2
 800ecda:	60da      	str	r2, [r3, #12]
      break;
 800ecdc:	e01d      	b.n	800ed1a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	68da      	ldr	r2, [r3, #12]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f042 0204 	orr.w	r2, r2, #4
 800ecec:	60da      	str	r2, [r3, #12]
      break;
 800ecee:	e014      	b.n	800ed1a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	68da      	ldr	r2, [r3, #12]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f042 0208 	orr.w	r2, r2, #8
 800ecfe:	60da      	str	r2, [r3, #12]
      break;
 800ed00:	e00b      	b.n	800ed1a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	68da      	ldr	r2, [r3, #12]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f042 0210 	orr.w	r2, r2, #16
 800ed10:	60da      	str	r2, [r3, #12]
      break;
 800ed12:	e002      	b.n	800ed1a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ed14:	2301      	movs	r3, #1
 800ed16:	73fb      	strb	r3, [r7, #15]
      break;
 800ed18:	bf00      	nop
  }

  if (status == HAL_OK)
 800ed1a:	7bfb      	ldrb	r3, [r7, #15]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d17e      	bne.n	800ee1e <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	2201      	movs	r2, #1
 800ed26:	6839      	ldr	r1, [r7, #0]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f000 ff8f 	bl	800fc4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	4a3d      	ldr	r2, [pc, #244]	@ (800ee28 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d013      	beq.n	800ed60 <HAL_TIM_PWM_Start_IT+0x1d8>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4a3b      	ldr	r2, [pc, #236]	@ (800ee2c <HAL_TIM_PWM_Start_IT+0x2a4>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d00e      	beq.n	800ed60 <HAL_TIM_PWM_Start_IT+0x1d8>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	4a3a      	ldr	r2, [pc, #232]	@ (800ee30 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	d009      	beq.n	800ed60 <HAL_TIM_PWM_Start_IT+0x1d8>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4a38      	ldr	r2, [pc, #224]	@ (800ee34 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d004      	beq.n	800ed60 <HAL_TIM_PWM_Start_IT+0x1d8>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	4a37      	ldr	r2, [pc, #220]	@ (800ee38 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	d101      	bne.n	800ed64 <HAL_TIM_PWM_Start_IT+0x1dc>
 800ed60:	2301      	movs	r3, #1
 800ed62:	e000      	b.n	800ed66 <HAL_TIM_PWM_Start_IT+0x1de>
 800ed64:	2300      	movs	r3, #0
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d007      	beq.n	800ed7a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ed78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	4a2a      	ldr	r2, [pc, #168]	@ (800ee28 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d02c      	beq.n	800edde <HAL_TIM_PWM_Start_IT+0x256>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed8c:	d027      	beq.n	800edde <HAL_TIM_PWM_Start_IT+0x256>
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	4a2a      	ldr	r2, [pc, #168]	@ (800ee3c <HAL_TIM_PWM_Start_IT+0x2b4>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d022      	beq.n	800edde <HAL_TIM_PWM_Start_IT+0x256>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4a28      	ldr	r2, [pc, #160]	@ (800ee40 <HAL_TIM_PWM_Start_IT+0x2b8>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d01d      	beq.n	800edde <HAL_TIM_PWM_Start_IT+0x256>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	4a27      	ldr	r2, [pc, #156]	@ (800ee44 <HAL_TIM_PWM_Start_IT+0x2bc>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d018      	beq.n	800edde <HAL_TIM_PWM_Start_IT+0x256>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a1e      	ldr	r2, [pc, #120]	@ (800ee2c <HAL_TIM_PWM_Start_IT+0x2a4>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d013      	beq.n	800edde <HAL_TIM_PWM_Start_IT+0x256>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	4a23      	ldr	r2, [pc, #140]	@ (800ee48 <HAL_TIM_PWM_Start_IT+0x2c0>)
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d00e      	beq.n	800edde <HAL_TIM_PWM_Start_IT+0x256>
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	4a1a      	ldr	r2, [pc, #104]	@ (800ee30 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d009      	beq.n	800edde <HAL_TIM_PWM_Start_IT+0x256>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	4a1f      	ldr	r2, [pc, #124]	@ (800ee4c <HAL_TIM_PWM_Start_IT+0x2c4>)
 800edd0:	4293      	cmp	r3, r2
 800edd2:	d004      	beq.n	800edde <HAL_TIM_PWM_Start_IT+0x256>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a1d      	ldr	r2, [pc, #116]	@ (800ee50 <HAL_TIM_PWM_Start_IT+0x2c8>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d115      	bne.n	800ee0a <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	689a      	ldr	r2, [r3, #8]
 800ede4:	4b1b      	ldr	r3, [pc, #108]	@ (800ee54 <HAL_TIM_PWM_Start_IT+0x2cc>)
 800ede6:	4013      	ands	r3, r2
 800ede8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	2b06      	cmp	r3, #6
 800edee:	d015      	beq.n	800ee1c <HAL_TIM_PWM_Start_IT+0x294>
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800edf6:	d011      	beq.n	800ee1c <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	681a      	ldr	r2, [r3, #0]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f042 0201 	orr.w	r2, r2, #1
 800ee06:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee08:	e008      	b.n	800ee1c <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	681a      	ldr	r2, [r3, #0]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	f042 0201 	orr.w	r2, r2, #1
 800ee18:	601a      	str	r2, [r3, #0]
 800ee1a:	e000      	b.n	800ee1e <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee1c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ee1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3710      	adds	r7, #16
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}
 800ee28:	40010000 	.word	0x40010000
 800ee2c:	40010400 	.word	0x40010400
 800ee30:	40014000 	.word	0x40014000
 800ee34:	40014400 	.word	0x40014400
 800ee38:	40014800 	.word	0x40014800
 800ee3c:	40000400 	.word	0x40000400
 800ee40:	40000800 	.word	0x40000800
 800ee44:	40000c00 	.word	0x40000c00
 800ee48:	40001800 	.word	0x40001800
 800ee4c:	4000e000 	.word	0x4000e000
 800ee50:	4000e400 	.word	0x4000e400
 800ee54:	00010007 	.word	0x00010007

0800ee58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b086      	sub	sp, #24
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d101      	bne.n	800ee6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ee68:	2301      	movs	r3, #1
 800ee6a:	e08f      	b.n	800ef8c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d106      	bne.n	800ee86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f7f4 fa1d 	bl	80032c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2202      	movs	r2, #2
 800ee8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	6899      	ldr	r1, [r3, #8]
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	4b3e      	ldr	r3, [pc, #248]	@ (800ef94 <HAL_TIM_Encoder_Init+0x13c>)
 800ee9a:	400b      	ands	r3, r1
 800ee9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	3304      	adds	r3, #4
 800eea6:	4619      	mov	r1, r3
 800eea8:	4610      	mov	r0, r2
 800eeaa:	f000 fb4d 	bl	800f548 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	689b      	ldr	r3, [r3, #8]
 800eeb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	699b      	ldr	r3, [r3, #24]
 800eebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	6a1b      	ldr	r3, [r3, #32]
 800eec4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	697a      	ldr	r2, [r7, #20]
 800eecc:	4313      	orrs	r3, r2
 800eece:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800eed0:	693a      	ldr	r2, [r7, #16]
 800eed2:	4b31      	ldr	r3, [pc, #196]	@ (800ef98 <HAL_TIM_Encoder_Init+0x140>)
 800eed4:	4013      	ands	r3, r2
 800eed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	689a      	ldr	r2, [r3, #8]
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	699b      	ldr	r3, [r3, #24]
 800eee0:	021b      	lsls	r3, r3, #8
 800eee2:	4313      	orrs	r3, r2
 800eee4:	693a      	ldr	r2, [r7, #16]
 800eee6:	4313      	orrs	r3, r2
 800eee8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800eeea:	693a      	ldr	r2, [r7, #16]
 800eeec:	4b2b      	ldr	r3, [pc, #172]	@ (800ef9c <HAL_TIM_Encoder_Init+0x144>)
 800eeee:	4013      	ands	r3, r2
 800eef0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800eef2:	693a      	ldr	r2, [r7, #16]
 800eef4:	4b2a      	ldr	r3, [pc, #168]	@ (800efa0 <HAL_TIM_Encoder_Init+0x148>)
 800eef6:	4013      	ands	r3, r2
 800eef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	68da      	ldr	r2, [r3, #12]
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	69db      	ldr	r3, [r3, #28]
 800ef02:	021b      	lsls	r3, r3, #8
 800ef04:	4313      	orrs	r3, r2
 800ef06:	693a      	ldr	r2, [r7, #16]
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	691b      	ldr	r3, [r3, #16]
 800ef10:	011a      	lsls	r2, r3, #4
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	6a1b      	ldr	r3, [r3, #32]
 800ef16:	031b      	lsls	r3, r3, #12
 800ef18:	4313      	orrs	r3, r2
 800ef1a:	693a      	ldr	r2, [r7, #16]
 800ef1c:	4313      	orrs	r3, r2
 800ef1e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800ef26:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800ef2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	685a      	ldr	r2, [r3, #4]
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	695b      	ldr	r3, [r3, #20]
 800ef38:	011b      	lsls	r3, r3, #4
 800ef3a:	4313      	orrs	r3, r2
 800ef3c:	68fa      	ldr	r2, [r7, #12]
 800ef3e:	4313      	orrs	r3, r2
 800ef40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	697a      	ldr	r2, [r7, #20]
 800ef48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	693a      	ldr	r2, [r7, #16]
 800ef50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	68fa      	ldr	r2, [r7, #12]
 800ef58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2201      	movs	r2, #1
 800ef5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2201      	movs	r2, #1
 800ef66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2201      	movs	r2, #1
 800ef6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2201      	movs	r2, #1
 800ef76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2201      	movs	r2, #1
 800ef7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2201      	movs	r2, #1
 800ef86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ef8a:	2300      	movs	r3, #0
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3718      	adds	r7, #24
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	fffebff8 	.word	0xfffebff8
 800ef98:	fffffcfc 	.word	0xfffffcfc
 800ef9c:	fffff3f3 	.word	0xfffff3f3
 800efa0:	ffff0f0f 	.word	0xffff0f0f

0800efa4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800efb4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800efbc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800efc4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800efcc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d110      	bne.n	800eff6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800efd4:	7bfb      	ldrb	r3, [r7, #15]
 800efd6:	2b01      	cmp	r3, #1
 800efd8:	d102      	bne.n	800efe0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800efda:	7b7b      	ldrb	r3, [r7, #13]
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d001      	beq.n	800efe4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800efe0:	2301      	movs	r3, #1
 800efe2:	e069      	b.n	800f0b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2202      	movs	r2, #2
 800efe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2202      	movs	r2, #2
 800eff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eff4:	e031      	b.n	800f05a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	2b04      	cmp	r3, #4
 800effa:	d110      	bne.n	800f01e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800effc:	7bbb      	ldrb	r3, [r7, #14]
 800effe:	2b01      	cmp	r3, #1
 800f000:	d102      	bne.n	800f008 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800f002:	7b3b      	ldrb	r3, [r7, #12]
 800f004:	2b01      	cmp	r3, #1
 800f006:	d001      	beq.n	800f00c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800f008:	2301      	movs	r3, #1
 800f00a:	e055      	b.n	800f0b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2202      	movs	r2, #2
 800f010:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2202      	movs	r2, #2
 800f018:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f01c:	e01d      	b.n	800f05a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f01e:	7bfb      	ldrb	r3, [r7, #15]
 800f020:	2b01      	cmp	r3, #1
 800f022:	d108      	bne.n	800f036 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800f024:	7bbb      	ldrb	r3, [r7, #14]
 800f026:	2b01      	cmp	r3, #1
 800f028:	d105      	bne.n	800f036 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f02a:	7b7b      	ldrb	r3, [r7, #13]
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	d102      	bne.n	800f036 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800f030:	7b3b      	ldrb	r3, [r7, #12]
 800f032:	2b01      	cmp	r3, #1
 800f034:	d001      	beq.n	800f03a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800f036:	2301      	movs	r3, #1
 800f038:	e03e      	b.n	800f0b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2202      	movs	r2, #2
 800f03e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2202      	movs	r2, #2
 800f046:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2202      	movs	r2, #2
 800f04e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2202      	movs	r2, #2
 800f056:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d003      	beq.n	800f068 <HAL_TIM_Encoder_Start+0xc4>
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	2b04      	cmp	r3, #4
 800f064:	d008      	beq.n	800f078 <HAL_TIM_Encoder_Start+0xd4>
 800f066:	e00f      	b.n	800f088 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	2201      	movs	r2, #1
 800f06e:	2100      	movs	r1, #0
 800f070:	4618      	mov	r0, r3
 800f072:	f000 fdeb 	bl	800fc4c <TIM_CCxChannelCmd>
      break;
 800f076:	e016      	b.n	800f0a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	2201      	movs	r2, #1
 800f07e:	2104      	movs	r1, #4
 800f080:	4618      	mov	r0, r3
 800f082:	f000 fde3 	bl	800fc4c <TIM_CCxChannelCmd>
      break;
 800f086:	e00e      	b.n	800f0a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	2201      	movs	r2, #1
 800f08e:	2100      	movs	r1, #0
 800f090:	4618      	mov	r0, r3
 800f092:	f000 fddb 	bl	800fc4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	2201      	movs	r2, #1
 800f09c:	2104      	movs	r1, #4
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f000 fdd4 	bl	800fc4c <TIM_CCxChannelCmd>
      break;
 800f0a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	681a      	ldr	r2, [r3, #0]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f042 0201 	orr.w	r2, r2, #1
 800f0b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f0b6:	2300      	movs	r3, #0
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3710      	adds	r7, #16
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}

0800f0c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b084      	sub	sp, #16
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	68db      	ldr	r3, [r3, #12]
 800f0ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	691b      	ldr	r3, [r3, #16]
 800f0d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	f003 0302 	and.w	r3, r3, #2
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d020      	beq.n	800f124 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	f003 0302 	and.w	r3, r3, #2
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d01b      	beq.n	800f124 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f06f 0202 	mvn.w	r2, #2
 800f0f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2201      	movs	r2, #1
 800f0fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	699b      	ldr	r3, [r3, #24]
 800f102:	f003 0303 	and.w	r3, r3, #3
 800f106:	2b00      	cmp	r3, #0
 800f108:	d003      	beq.n	800f112 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f000 f9fe 	bl	800f50c <HAL_TIM_IC_CaptureCallback>
 800f110:	e005      	b.n	800f11e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f000 f9f0 	bl	800f4f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f000 fa01 	bl	800f520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2200      	movs	r2, #0
 800f122:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	f003 0304 	and.w	r3, r3, #4
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d020      	beq.n	800f170 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f003 0304 	and.w	r3, r3, #4
 800f134:	2b00      	cmp	r3, #0
 800f136:	d01b      	beq.n	800f170 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f06f 0204 	mvn.w	r2, #4
 800f140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2202      	movs	r2, #2
 800f146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	699b      	ldr	r3, [r3, #24]
 800f14e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f152:	2b00      	cmp	r3, #0
 800f154:	d003      	beq.n	800f15e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f000 f9d8 	bl	800f50c <HAL_TIM_IC_CaptureCallback>
 800f15c:	e005      	b.n	800f16a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 f9ca 	bl	800f4f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 f9db 	bl	800f520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2200      	movs	r2, #0
 800f16e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	f003 0308 	and.w	r3, r3, #8
 800f176:	2b00      	cmp	r3, #0
 800f178:	d020      	beq.n	800f1bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f003 0308 	and.w	r3, r3, #8
 800f180:	2b00      	cmp	r3, #0
 800f182:	d01b      	beq.n	800f1bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f06f 0208 	mvn.w	r2, #8
 800f18c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2204      	movs	r2, #4
 800f192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	69db      	ldr	r3, [r3, #28]
 800f19a:	f003 0303 	and.w	r3, r3, #3
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d003      	beq.n	800f1aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f000 f9b2 	bl	800f50c <HAL_TIM_IC_CaptureCallback>
 800f1a8:	e005      	b.n	800f1b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f000 f9a4 	bl	800f4f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f000 f9b5 	bl	800f520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	f003 0310 	and.w	r3, r3, #16
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d020      	beq.n	800f208 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f003 0310 	and.w	r3, r3, #16
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d01b      	beq.n	800f208 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f06f 0210 	mvn.w	r2, #16
 800f1d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2208      	movs	r2, #8
 800f1de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	69db      	ldr	r3, [r3, #28]
 800f1e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d003      	beq.n	800f1f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f000 f98c 	bl	800f50c <HAL_TIM_IC_CaptureCallback>
 800f1f4:	e005      	b.n	800f202 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 f97e 	bl	800f4f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 f98f 	bl	800f520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2200      	movs	r2, #0
 800f206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	f003 0301 	and.w	r3, r3, #1
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d00c      	beq.n	800f22c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f003 0301 	and.w	r3, r3, #1
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d007      	beq.n	800f22c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f06f 0201 	mvn.w	r2, #1
 800f224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f7f3 fcb6 	bl	8002b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f232:	2b00      	cmp	r3, #0
 800f234:	d104      	bne.n	800f240 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d00c      	beq.n	800f25a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f246:	2b00      	cmp	r3, #0
 800f248:	d007      	beq.n	800f25a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f000 fe51 	bl	800fefc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00c      	beq.n	800f27e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d007      	beq.n	800f27e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f000 fe49 	bl	800ff10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f284:	2b00      	cmp	r3, #0
 800f286:	d00c      	beq.n	800f2a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d007      	beq.n	800f2a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f29a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f000 f949 	bl	800f534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	f003 0320 	and.w	r3, r3, #32
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d00c      	beq.n	800f2c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	f003 0320 	and.w	r3, r3, #32
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d007      	beq.n	800f2c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f06f 0220 	mvn.w	r2, #32
 800f2be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f000 fe11 	bl	800fee8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f2c6:	bf00      	nop
 800f2c8:	3710      	adds	r7, #16
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
	...

0800f2d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b086      	sub	sp, #24
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	60f8      	str	r0, [r7, #12]
 800f2d8:	60b9      	str	r1, [r7, #8]
 800f2da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	d101      	bne.n	800f2ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f2ea:	2302      	movs	r3, #2
 800f2ec:	e0ff      	b.n	800f4ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2b14      	cmp	r3, #20
 800f2fa:	f200 80f0 	bhi.w	800f4de <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f2fe:	a201      	add	r2, pc, #4	@ (adr r2, 800f304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f304:	0800f359 	.word	0x0800f359
 800f308:	0800f4df 	.word	0x0800f4df
 800f30c:	0800f4df 	.word	0x0800f4df
 800f310:	0800f4df 	.word	0x0800f4df
 800f314:	0800f399 	.word	0x0800f399
 800f318:	0800f4df 	.word	0x0800f4df
 800f31c:	0800f4df 	.word	0x0800f4df
 800f320:	0800f4df 	.word	0x0800f4df
 800f324:	0800f3db 	.word	0x0800f3db
 800f328:	0800f4df 	.word	0x0800f4df
 800f32c:	0800f4df 	.word	0x0800f4df
 800f330:	0800f4df 	.word	0x0800f4df
 800f334:	0800f41b 	.word	0x0800f41b
 800f338:	0800f4df 	.word	0x0800f4df
 800f33c:	0800f4df 	.word	0x0800f4df
 800f340:	0800f4df 	.word	0x0800f4df
 800f344:	0800f45d 	.word	0x0800f45d
 800f348:	0800f4df 	.word	0x0800f4df
 800f34c:	0800f4df 	.word	0x0800f4df
 800f350:	0800f4df 	.word	0x0800f4df
 800f354:	0800f49d 	.word	0x0800f49d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	68b9      	ldr	r1, [r7, #8]
 800f35e:	4618      	mov	r0, r3
 800f360:	f000 f99e 	bl	800f6a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	699a      	ldr	r2, [r3, #24]
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f042 0208 	orr.w	r2, r2, #8
 800f372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	699a      	ldr	r2, [r3, #24]
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f022 0204 	bic.w	r2, r2, #4
 800f382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	6999      	ldr	r1, [r3, #24]
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	691a      	ldr	r2, [r3, #16]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	430a      	orrs	r2, r1
 800f394:	619a      	str	r2, [r3, #24]
      break;
 800f396:	e0a5      	b.n	800f4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	68b9      	ldr	r1, [r7, #8]
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f000 fa0e 	bl	800f7c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	699a      	ldr	r2, [r3, #24]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f3b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	699a      	ldr	r2, [r3, #24]
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f3c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	6999      	ldr	r1, [r3, #24]
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	691b      	ldr	r3, [r3, #16]
 800f3ce:	021a      	lsls	r2, r3, #8
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	430a      	orrs	r2, r1
 800f3d6:	619a      	str	r2, [r3, #24]
      break;
 800f3d8:	e084      	b.n	800f4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	68b9      	ldr	r1, [r7, #8]
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f000 fa77 	bl	800f8d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	69da      	ldr	r2, [r3, #28]
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	f042 0208 	orr.w	r2, r2, #8
 800f3f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	69da      	ldr	r2, [r3, #28]
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	f022 0204 	bic.w	r2, r2, #4
 800f404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	69d9      	ldr	r1, [r3, #28]
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	691a      	ldr	r2, [r3, #16]
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	430a      	orrs	r2, r1
 800f416:	61da      	str	r2, [r3, #28]
      break;
 800f418:	e064      	b.n	800f4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	68b9      	ldr	r1, [r7, #8]
 800f420:	4618      	mov	r0, r3
 800f422:	f000 fadf 	bl	800f9e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	69da      	ldr	r2, [r3, #28]
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	69da      	ldr	r2, [r3, #28]
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	69d9      	ldr	r1, [r3, #28]
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	691b      	ldr	r3, [r3, #16]
 800f450:	021a      	lsls	r2, r3, #8
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	430a      	orrs	r2, r1
 800f458:	61da      	str	r2, [r3, #28]
      break;
 800f45a:	e043      	b.n	800f4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	68b9      	ldr	r1, [r7, #8]
 800f462:	4618      	mov	r0, r3
 800f464:	f000 fb28 	bl	800fab8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	f042 0208 	orr.w	r2, r2, #8
 800f476:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	f022 0204 	bic.w	r2, r2, #4
 800f486:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	691a      	ldr	r2, [r3, #16]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	430a      	orrs	r2, r1
 800f498:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f49a:	e023      	b.n	800f4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	68b9      	ldr	r1, [r7, #8]
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f000 fb6c 	bl	800fb80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f4b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f4c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	691b      	ldr	r3, [r3, #16]
 800f4d2:	021a      	lsls	r2, r3, #8
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	430a      	orrs	r2, r1
 800f4da:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f4dc:	e002      	b.n	800f4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f4de:	2301      	movs	r3, #1
 800f4e0:	75fb      	strb	r3, [r7, #23]
      break;
 800f4e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f4ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	3718      	adds	r7, #24
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
 800f4f6:	bf00      	nop

0800f4f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f4f8:	b480      	push	{r7}
 800f4fa:	b083      	sub	sp, #12
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f500:	bf00      	nop
 800f502:	370c      	adds	r7, #12
 800f504:	46bd      	mov	sp, r7
 800f506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50a:	4770      	bx	lr

0800f50c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f50c:	b480      	push	{r7}
 800f50e:	b083      	sub	sp, #12
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f514:	bf00      	nop
 800f516:	370c      	adds	r7, #12
 800f518:	46bd      	mov	sp, r7
 800f51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51e:	4770      	bx	lr

0800f520 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f520:	b480      	push	{r7}
 800f522:	b083      	sub	sp, #12
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f528:	bf00      	nop
 800f52a:	370c      	adds	r7, #12
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr

0800f534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f534:	b480      	push	{r7}
 800f536:	b083      	sub	sp, #12
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f53c:	bf00      	nop
 800f53e:	370c      	adds	r7, #12
 800f540:	46bd      	mov	sp, r7
 800f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f546:	4770      	bx	lr

0800f548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f548:	b480      	push	{r7}
 800f54a:	b085      	sub	sp, #20
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	4a47      	ldr	r2, [pc, #284]	@ (800f678 <TIM_Base_SetConfig+0x130>)
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d013      	beq.n	800f588 <TIM_Base_SetConfig+0x40>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f566:	d00f      	beq.n	800f588 <TIM_Base_SetConfig+0x40>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	4a44      	ldr	r2, [pc, #272]	@ (800f67c <TIM_Base_SetConfig+0x134>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d00b      	beq.n	800f588 <TIM_Base_SetConfig+0x40>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4a43      	ldr	r2, [pc, #268]	@ (800f680 <TIM_Base_SetConfig+0x138>)
 800f574:	4293      	cmp	r3, r2
 800f576:	d007      	beq.n	800f588 <TIM_Base_SetConfig+0x40>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	4a42      	ldr	r2, [pc, #264]	@ (800f684 <TIM_Base_SetConfig+0x13c>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d003      	beq.n	800f588 <TIM_Base_SetConfig+0x40>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	4a41      	ldr	r2, [pc, #260]	@ (800f688 <TIM_Base_SetConfig+0x140>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d108      	bne.n	800f59a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f58e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	685b      	ldr	r3, [r3, #4]
 800f594:	68fa      	ldr	r2, [r7, #12]
 800f596:	4313      	orrs	r3, r2
 800f598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	4a36      	ldr	r2, [pc, #216]	@ (800f678 <TIM_Base_SetConfig+0x130>)
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d027      	beq.n	800f5f2 <TIM_Base_SetConfig+0xaa>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5a8:	d023      	beq.n	800f5f2 <TIM_Base_SetConfig+0xaa>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	4a33      	ldr	r2, [pc, #204]	@ (800f67c <TIM_Base_SetConfig+0x134>)
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d01f      	beq.n	800f5f2 <TIM_Base_SetConfig+0xaa>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	4a32      	ldr	r2, [pc, #200]	@ (800f680 <TIM_Base_SetConfig+0x138>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d01b      	beq.n	800f5f2 <TIM_Base_SetConfig+0xaa>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	4a31      	ldr	r2, [pc, #196]	@ (800f684 <TIM_Base_SetConfig+0x13c>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d017      	beq.n	800f5f2 <TIM_Base_SetConfig+0xaa>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	4a30      	ldr	r2, [pc, #192]	@ (800f688 <TIM_Base_SetConfig+0x140>)
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d013      	beq.n	800f5f2 <TIM_Base_SetConfig+0xaa>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	4a2f      	ldr	r2, [pc, #188]	@ (800f68c <TIM_Base_SetConfig+0x144>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d00f      	beq.n	800f5f2 <TIM_Base_SetConfig+0xaa>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	4a2e      	ldr	r2, [pc, #184]	@ (800f690 <TIM_Base_SetConfig+0x148>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d00b      	beq.n	800f5f2 <TIM_Base_SetConfig+0xaa>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4a2d      	ldr	r2, [pc, #180]	@ (800f694 <TIM_Base_SetConfig+0x14c>)
 800f5de:	4293      	cmp	r3, r2
 800f5e0:	d007      	beq.n	800f5f2 <TIM_Base_SetConfig+0xaa>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	4a2c      	ldr	r2, [pc, #176]	@ (800f698 <TIM_Base_SetConfig+0x150>)
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d003      	beq.n	800f5f2 <TIM_Base_SetConfig+0xaa>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4a2b      	ldr	r2, [pc, #172]	@ (800f69c <TIM_Base_SetConfig+0x154>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d108      	bne.n	800f604 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f5f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	68db      	ldr	r3, [r3, #12]
 800f5fe:	68fa      	ldr	r2, [r7, #12]
 800f600:	4313      	orrs	r3, r2
 800f602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	695b      	ldr	r3, [r3, #20]
 800f60e:	4313      	orrs	r3, r2
 800f610:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	689a      	ldr	r2, [r3, #8]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	681a      	ldr	r2, [r3, #0]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	4a14      	ldr	r2, [pc, #80]	@ (800f678 <TIM_Base_SetConfig+0x130>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d00f      	beq.n	800f64a <TIM_Base_SetConfig+0x102>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	4a16      	ldr	r2, [pc, #88]	@ (800f688 <TIM_Base_SetConfig+0x140>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d00b      	beq.n	800f64a <TIM_Base_SetConfig+0x102>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	4a15      	ldr	r2, [pc, #84]	@ (800f68c <TIM_Base_SetConfig+0x144>)
 800f636:	4293      	cmp	r3, r2
 800f638:	d007      	beq.n	800f64a <TIM_Base_SetConfig+0x102>
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	4a14      	ldr	r2, [pc, #80]	@ (800f690 <TIM_Base_SetConfig+0x148>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d003      	beq.n	800f64a <TIM_Base_SetConfig+0x102>
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	4a13      	ldr	r2, [pc, #76]	@ (800f694 <TIM_Base_SetConfig+0x14c>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d103      	bne.n	800f652 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	691a      	ldr	r2, [r3, #16]
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f043 0204 	orr.w	r2, r3, #4
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2201      	movs	r2, #1
 800f662:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	68fa      	ldr	r2, [r7, #12]
 800f668:	601a      	str	r2, [r3, #0]
}
 800f66a:	bf00      	nop
 800f66c:	3714      	adds	r7, #20
 800f66e:	46bd      	mov	sp, r7
 800f670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f674:	4770      	bx	lr
 800f676:	bf00      	nop
 800f678:	40010000 	.word	0x40010000
 800f67c:	40000400 	.word	0x40000400
 800f680:	40000800 	.word	0x40000800
 800f684:	40000c00 	.word	0x40000c00
 800f688:	40010400 	.word	0x40010400
 800f68c:	40014000 	.word	0x40014000
 800f690:	40014400 	.word	0x40014400
 800f694:	40014800 	.word	0x40014800
 800f698:	4000e000 	.word	0x4000e000
 800f69c:	4000e400 	.word	0x4000e400

0800f6a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	b087      	sub	sp, #28
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6a1b      	ldr	r3, [r3, #32]
 800f6ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	6a1b      	ldr	r3, [r3, #32]
 800f6b4:	f023 0201 	bic.w	r2, r3, #1
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	699b      	ldr	r3, [r3, #24]
 800f6c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f6c8:	68fa      	ldr	r2, [r7, #12]
 800f6ca:	4b37      	ldr	r3, [pc, #220]	@ (800f7a8 <TIM_OC1_SetConfig+0x108>)
 800f6cc:	4013      	ands	r3, r2
 800f6ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	f023 0303 	bic.w	r3, r3, #3
 800f6d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	68fa      	ldr	r2, [r7, #12]
 800f6de:	4313      	orrs	r3, r2
 800f6e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	f023 0302 	bic.w	r3, r3, #2
 800f6e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	689b      	ldr	r3, [r3, #8]
 800f6ee:	697a      	ldr	r2, [r7, #20]
 800f6f0:	4313      	orrs	r3, r2
 800f6f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	4a2d      	ldr	r2, [pc, #180]	@ (800f7ac <TIM_OC1_SetConfig+0x10c>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d00f      	beq.n	800f71c <TIM_OC1_SetConfig+0x7c>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4a2c      	ldr	r2, [pc, #176]	@ (800f7b0 <TIM_OC1_SetConfig+0x110>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d00b      	beq.n	800f71c <TIM_OC1_SetConfig+0x7c>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4a2b      	ldr	r2, [pc, #172]	@ (800f7b4 <TIM_OC1_SetConfig+0x114>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d007      	beq.n	800f71c <TIM_OC1_SetConfig+0x7c>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	4a2a      	ldr	r2, [pc, #168]	@ (800f7b8 <TIM_OC1_SetConfig+0x118>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d003      	beq.n	800f71c <TIM_OC1_SetConfig+0x7c>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	4a29      	ldr	r2, [pc, #164]	@ (800f7bc <TIM_OC1_SetConfig+0x11c>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d10c      	bne.n	800f736 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	f023 0308 	bic.w	r3, r3, #8
 800f722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	68db      	ldr	r3, [r3, #12]
 800f728:	697a      	ldr	r2, [r7, #20]
 800f72a:	4313      	orrs	r3, r2
 800f72c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	f023 0304 	bic.w	r3, r3, #4
 800f734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	4a1c      	ldr	r2, [pc, #112]	@ (800f7ac <TIM_OC1_SetConfig+0x10c>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d00f      	beq.n	800f75e <TIM_OC1_SetConfig+0xbe>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	4a1b      	ldr	r2, [pc, #108]	@ (800f7b0 <TIM_OC1_SetConfig+0x110>)
 800f742:	4293      	cmp	r3, r2
 800f744:	d00b      	beq.n	800f75e <TIM_OC1_SetConfig+0xbe>
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	4a1a      	ldr	r2, [pc, #104]	@ (800f7b4 <TIM_OC1_SetConfig+0x114>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d007      	beq.n	800f75e <TIM_OC1_SetConfig+0xbe>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	4a19      	ldr	r2, [pc, #100]	@ (800f7b8 <TIM_OC1_SetConfig+0x118>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d003      	beq.n	800f75e <TIM_OC1_SetConfig+0xbe>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	4a18      	ldr	r2, [pc, #96]	@ (800f7bc <TIM_OC1_SetConfig+0x11c>)
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d111      	bne.n	800f782 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f76c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	695b      	ldr	r3, [r3, #20]
 800f772:	693a      	ldr	r2, [r7, #16]
 800f774:	4313      	orrs	r3, r2
 800f776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	699b      	ldr	r3, [r3, #24]
 800f77c:	693a      	ldr	r2, [r7, #16]
 800f77e:	4313      	orrs	r3, r2
 800f780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	693a      	ldr	r2, [r7, #16]
 800f786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	68fa      	ldr	r2, [r7, #12]
 800f78c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	685a      	ldr	r2, [r3, #4]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	697a      	ldr	r2, [r7, #20]
 800f79a:	621a      	str	r2, [r3, #32]
}
 800f79c:	bf00      	nop
 800f79e:	371c      	adds	r7, #28
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a6:	4770      	bx	lr
 800f7a8:	fffeff8f 	.word	0xfffeff8f
 800f7ac:	40010000 	.word	0x40010000
 800f7b0:	40010400 	.word	0x40010400
 800f7b4:	40014000 	.word	0x40014000
 800f7b8:	40014400 	.word	0x40014400
 800f7bc:	40014800 	.word	0x40014800

0800f7c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f7c0:	b480      	push	{r7}
 800f7c2:	b087      	sub	sp, #28
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6a1b      	ldr	r3, [r3, #32]
 800f7ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6a1b      	ldr	r3, [r3, #32]
 800f7d4:	f023 0210 	bic.w	r2, r3, #16
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	699b      	ldr	r3, [r3, #24]
 800f7e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f7e8:	68fa      	ldr	r2, [r7, #12]
 800f7ea:	4b34      	ldr	r3, [pc, #208]	@ (800f8bc <TIM_OC2_SetConfig+0xfc>)
 800f7ec:	4013      	ands	r3, r2
 800f7ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f7f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	021b      	lsls	r3, r3, #8
 800f7fe:	68fa      	ldr	r2, [r7, #12]
 800f800:	4313      	orrs	r3, r2
 800f802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	f023 0320 	bic.w	r3, r3, #32
 800f80a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	689b      	ldr	r3, [r3, #8]
 800f810:	011b      	lsls	r3, r3, #4
 800f812:	697a      	ldr	r2, [r7, #20]
 800f814:	4313      	orrs	r3, r2
 800f816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	4a29      	ldr	r2, [pc, #164]	@ (800f8c0 <TIM_OC2_SetConfig+0x100>)
 800f81c:	4293      	cmp	r3, r2
 800f81e:	d003      	beq.n	800f828 <TIM_OC2_SetConfig+0x68>
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	4a28      	ldr	r2, [pc, #160]	@ (800f8c4 <TIM_OC2_SetConfig+0x104>)
 800f824:	4293      	cmp	r3, r2
 800f826:	d10d      	bne.n	800f844 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f82e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	68db      	ldr	r3, [r3, #12]
 800f834:	011b      	lsls	r3, r3, #4
 800f836:	697a      	ldr	r2, [r7, #20]
 800f838:	4313      	orrs	r3, r2
 800f83a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f842:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	4a1e      	ldr	r2, [pc, #120]	@ (800f8c0 <TIM_OC2_SetConfig+0x100>)
 800f848:	4293      	cmp	r3, r2
 800f84a:	d00f      	beq.n	800f86c <TIM_OC2_SetConfig+0xac>
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	4a1d      	ldr	r2, [pc, #116]	@ (800f8c4 <TIM_OC2_SetConfig+0x104>)
 800f850:	4293      	cmp	r3, r2
 800f852:	d00b      	beq.n	800f86c <TIM_OC2_SetConfig+0xac>
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	4a1c      	ldr	r2, [pc, #112]	@ (800f8c8 <TIM_OC2_SetConfig+0x108>)
 800f858:	4293      	cmp	r3, r2
 800f85a:	d007      	beq.n	800f86c <TIM_OC2_SetConfig+0xac>
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	4a1b      	ldr	r2, [pc, #108]	@ (800f8cc <TIM_OC2_SetConfig+0x10c>)
 800f860:	4293      	cmp	r3, r2
 800f862:	d003      	beq.n	800f86c <TIM_OC2_SetConfig+0xac>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	4a1a      	ldr	r2, [pc, #104]	@ (800f8d0 <TIM_OC2_SetConfig+0x110>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d113      	bne.n	800f894 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f872:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f87a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	695b      	ldr	r3, [r3, #20]
 800f880:	009b      	lsls	r3, r3, #2
 800f882:	693a      	ldr	r2, [r7, #16]
 800f884:	4313      	orrs	r3, r2
 800f886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	699b      	ldr	r3, [r3, #24]
 800f88c:	009b      	lsls	r3, r3, #2
 800f88e:	693a      	ldr	r2, [r7, #16]
 800f890:	4313      	orrs	r3, r2
 800f892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	693a      	ldr	r2, [r7, #16]
 800f898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	68fa      	ldr	r2, [r7, #12]
 800f89e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	685a      	ldr	r2, [r3, #4]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	697a      	ldr	r2, [r7, #20]
 800f8ac:	621a      	str	r2, [r3, #32]
}
 800f8ae:	bf00      	nop
 800f8b0:	371c      	adds	r7, #28
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b8:	4770      	bx	lr
 800f8ba:	bf00      	nop
 800f8bc:	feff8fff 	.word	0xfeff8fff
 800f8c0:	40010000 	.word	0x40010000
 800f8c4:	40010400 	.word	0x40010400
 800f8c8:	40014000 	.word	0x40014000
 800f8cc:	40014400 	.word	0x40014400
 800f8d0:	40014800 	.word	0x40014800

0800f8d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b087      	sub	sp, #28
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6a1b      	ldr	r3, [r3, #32]
 800f8e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6a1b      	ldr	r3, [r3, #32]
 800f8e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	685b      	ldr	r3, [r3, #4]
 800f8f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	69db      	ldr	r3, [r3, #28]
 800f8fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f8fc:	68fa      	ldr	r2, [r7, #12]
 800f8fe:	4b33      	ldr	r3, [pc, #204]	@ (800f9cc <TIM_OC3_SetConfig+0xf8>)
 800f900:	4013      	ands	r3, r2
 800f902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	f023 0303 	bic.w	r3, r3, #3
 800f90a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	68fa      	ldr	r2, [r7, #12]
 800f912:	4313      	orrs	r3, r2
 800f914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f91c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	689b      	ldr	r3, [r3, #8]
 800f922:	021b      	lsls	r3, r3, #8
 800f924:	697a      	ldr	r2, [r7, #20]
 800f926:	4313      	orrs	r3, r2
 800f928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4a28      	ldr	r2, [pc, #160]	@ (800f9d0 <TIM_OC3_SetConfig+0xfc>)
 800f92e:	4293      	cmp	r3, r2
 800f930:	d003      	beq.n	800f93a <TIM_OC3_SetConfig+0x66>
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	4a27      	ldr	r2, [pc, #156]	@ (800f9d4 <TIM_OC3_SetConfig+0x100>)
 800f936:	4293      	cmp	r3, r2
 800f938:	d10d      	bne.n	800f956 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	68db      	ldr	r3, [r3, #12]
 800f946:	021b      	lsls	r3, r3, #8
 800f948:	697a      	ldr	r2, [r7, #20]
 800f94a:	4313      	orrs	r3, r2
 800f94c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	4a1d      	ldr	r2, [pc, #116]	@ (800f9d0 <TIM_OC3_SetConfig+0xfc>)
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d00f      	beq.n	800f97e <TIM_OC3_SetConfig+0xaa>
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	4a1c      	ldr	r2, [pc, #112]	@ (800f9d4 <TIM_OC3_SetConfig+0x100>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d00b      	beq.n	800f97e <TIM_OC3_SetConfig+0xaa>
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	4a1b      	ldr	r2, [pc, #108]	@ (800f9d8 <TIM_OC3_SetConfig+0x104>)
 800f96a:	4293      	cmp	r3, r2
 800f96c:	d007      	beq.n	800f97e <TIM_OC3_SetConfig+0xaa>
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	4a1a      	ldr	r2, [pc, #104]	@ (800f9dc <TIM_OC3_SetConfig+0x108>)
 800f972:	4293      	cmp	r3, r2
 800f974:	d003      	beq.n	800f97e <TIM_OC3_SetConfig+0xaa>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	4a19      	ldr	r2, [pc, #100]	@ (800f9e0 <TIM_OC3_SetConfig+0x10c>)
 800f97a:	4293      	cmp	r3, r2
 800f97c:	d113      	bne.n	800f9a6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f98c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	695b      	ldr	r3, [r3, #20]
 800f992:	011b      	lsls	r3, r3, #4
 800f994:	693a      	ldr	r2, [r7, #16]
 800f996:	4313      	orrs	r3, r2
 800f998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	699b      	ldr	r3, [r3, #24]
 800f99e:	011b      	lsls	r3, r3, #4
 800f9a0:	693a      	ldr	r2, [r7, #16]
 800f9a2:	4313      	orrs	r3, r2
 800f9a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	693a      	ldr	r2, [r7, #16]
 800f9aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	68fa      	ldr	r2, [r7, #12]
 800f9b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	685a      	ldr	r2, [r3, #4]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	697a      	ldr	r2, [r7, #20]
 800f9be:	621a      	str	r2, [r3, #32]
}
 800f9c0:	bf00      	nop
 800f9c2:	371c      	adds	r7, #28
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr
 800f9cc:	fffeff8f 	.word	0xfffeff8f
 800f9d0:	40010000 	.word	0x40010000
 800f9d4:	40010400 	.word	0x40010400
 800f9d8:	40014000 	.word	0x40014000
 800f9dc:	40014400 	.word	0x40014400
 800f9e0:	40014800 	.word	0x40014800

0800f9e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b087      	sub	sp, #28
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6a1b      	ldr	r3, [r3, #32]
 800f9f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6a1b      	ldr	r3, [r3, #32]
 800f9f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	685b      	ldr	r3, [r3, #4]
 800fa04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	69db      	ldr	r3, [r3, #28]
 800fa0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fa0c:	68fa      	ldr	r2, [r7, #12]
 800fa0e:	4b24      	ldr	r3, [pc, #144]	@ (800faa0 <TIM_OC4_SetConfig+0xbc>)
 800fa10:	4013      	ands	r3, r2
 800fa12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fa1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	021b      	lsls	r3, r3, #8
 800fa22:	68fa      	ldr	r2, [r7, #12]
 800fa24:	4313      	orrs	r3, r2
 800fa26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fa2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	689b      	ldr	r3, [r3, #8]
 800fa34:	031b      	lsls	r3, r3, #12
 800fa36:	693a      	ldr	r2, [r7, #16]
 800fa38:	4313      	orrs	r3, r2
 800fa3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	4a19      	ldr	r2, [pc, #100]	@ (800faa4 <TIM_OC4_SetConfig+0xc0>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d00f      	beq.n	800fa64 <TIM_OC4_SetConfig+0x80>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	4a18      	ldr	r2, [pc, #96]	@ (800faa8 <TIM_OC4_SetConfig+0xc4>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d00b      	beq.n	800fa64 <TIM_OC4_SetConfig+0x80>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	4a17      	ldr	r2, [pc, #92]	@ (800faac <TIM_OC4_SetConfig+0xc8>)
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d007      	beq.n	800fa64 <TIM_OC4_SetConfig+0x80>
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	4a16      	ldr	r2, [pc, #88]	@ (800fab0 <TIM_OC4_SetConfig+0xcc>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d003      	beq.n	800fa64 <TIM_OC4_SetConfig+0x80>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	4a15      	ldr	r2, [pc, #84]	@ (800fab4 <TIM_OC4_SetConfig+0xd0>)
 800fa60:	4293      	cmp	r3, r2
 800fa62:	d109      	bne.n	800fa78 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fa6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	695b      	ldr	r3, [r3, #20]
 800fa70:	019b      	lsls	r3, r3, #6
 800fa72:	697a      	ldr	r2, [r7, #20]
 800fa74:	4313      	orrs	r3, r2
 800fa76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	697a      	ldr	r2, [r7, #20]
 800fa7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	68fa      	ldr	r2, [r7, #12]
 800fa82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	685a      	ldr	r2, [r3, #4]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	693a      	ldr	r2, [r7, #16]
 800fa90:	621a      	str	r2, [r3, #32]
}
 800fa92:	bf00      	nop
 800fa94:	371c      	adds	r7, #28
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop
 800faa0:	feff8fff 	.word	0xfeff8fff
 800faa4:	40010000 	.word	0x40010000
 800faa8:	40010400 	.word	0x40010400
 800faac:	40014000 	.word	0x40014000
 800fab0:	40014400 	.word	0x40014400
 800fab4:	40014800 	.word	0x40014800

0800fab8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fab8:	b480      	push	{r7}
 800faba:	b087      	sub	sp, #28
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6a1b      	ldr	r3, [r3, #32]
 800fac6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	6a1b      	ldr	r3, [r3, #32]
 800facc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	685b      	ldr	r3, [r3, #4]
 800fad8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fae0:	68fa      	ldr	r2, [r7, #12]
 800fae2:	4b21      	ldr	r3, [pc, #132]	@ (800fb68 <TIM_OC5_SetConfig+0xb0>)
 800fae4:	4013      	ands	r3, r2
 800fae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	68fa      	ldr	r2, [r7, #12]
 800faee:	4313      	orrs	r3, r2
 800faf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800faf2:	693b      	ldr	r3, [r7, #16]
 800faf4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800faf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	689b      	ldr	r3, [r3, #8]
 800fafe:	041b      	lsls	r3, r3, #16
 800fb00:	693a      	ldr	r2, [r7, #16]
 800fb02:	4313      	orrs	r3, r2
 800fb04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	4a18      	ldr	r2, [pc, #96]	@ (800fb6c <TIM_OC5_SetConfig+0xb4>)
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	d00f      	beq.n	800fb2e <TIM_OC5_SetConfig+0x76>
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	4a17      	ldr	r2, [pc, #92]	@ (800fb70 <TIM_OC5_SetConfig+0xb8>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d00b      	beq.n	800fb2e <TIM_OC5_SetConfig+0x76>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4a16      	ldr	r2, [pc, #88]	@ (800fb74 <TIM_OC5_SetConfig+0xbc>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d007      	beq.n	800fb2e <TIM_OC5_SetConfig+0x76>
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	4a15      	ldr	r2, [pc, #84]	@ (800fb78 <TIM_OC5_SetConfig+0xc0>)
 800fb22:	4293      	cmp	r3, r2
 800fb24:	d003      	beq.n	800fb2e <TIM_OC5_SetConfig+0x76>
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	4a14      	ldr	r2, [pc, #80]	@ (800fb7c <TIM_OC5_SetConfig+0xc4>)
 800fb2a:	4293      	cmp	r3, r2
 800fb2c:	d109      	bne.n	800fb42 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fb34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	695b      	ldr	r3, [r3, #20]
 800fb3a:	021b      	lsls	r3, r3, #8
 800fb3c:	697a      	ldr	r2, [r7, #20]
 800fb3e:	4313      	orrs	r3, r2
 800fb40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	697a      	ldr	r2, [r7, #20]
 800fb46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	68fa      	ldr	r2, [r7, #12]
 800fb4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	685a      	ldr	r2, [r3, #4]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	693a      	ldr	r2, [r7, #16]
 800fb5a:	621a      	str	r2, [r3, #32]
}
 800fb5c:	bf00      	nop
 800fb5e:	371c      	adds	r7, #28
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr
 800fb68:	fffeff8f 	.word	0xfffeff8f
 800fb6c:	40010000 	.word	0x40010000
 800fb70:	40010400 	.word	0x40010400
 800fb74:	40014000 	.word	0x40014000
 800fb78:	40014400 	.word	0x40014400
 800fb7c:	40014800 	.word	0x40014800

0800fb80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b087      	sub	sp, #28
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6a1b      	ldr	r3, [r3, #32]
 800fb8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6a1b      	ldr	r3, [r3, #32]
 800fb94:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fba8:	68fa      	ldr	r2, [r7, #12]
 800fbaa:	4b22      	ldr	r3, [pc, #136]	@ (800fc34 <TIM_OC6_SetConfig+0xb4>)
 800fbac:	4013      	ands	r3, r2
 800fbae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	021b      	lsls	r3, r3, #8
 800fbb6:	68fa      	ldr	r2, [r7, #12]
 800fbb8:	4313      	orrs	r3, r2
 800fbba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fbbc:	693b      	ldr	r3, [r7, #16]
 800fbbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fbc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	689b      	ldr	r3, [r3, #8]
 800fbc8:	051b      	lsls	r3, r3, #20
 800fbca:	693a      	ldr	r2, [r7, #16]
 800fbcc:	4313      	orrs	r3, r2
 800fbce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	4a19      	ldr	r2, [pc, #100]	@ (800fc38 <TIM_OC6_SetConfig+0xb8>)
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	d00f      	beq.n	800fbf8 <TIM_OC6_SetConfig+0x78>
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	4a18      	ldr	r2, [pc, #96]	@ (800fc3c <TIM_OC6_SetConfig+0xbc>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d00b      	beq.n	800fbf8 <TIM_OC6_SetConfig+0x78>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	4a17      	ldr	r2, [pc, #92]	@ (800fc40 <TIM_OC6_SetConfig+0xc0>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d007      	beq.n	800fbf8 <TIM_OC6_SetConfig+0x78>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	4a16      	ldr	r2, [pc, #88]	@ (800fc44 <TIM_OC6_SetConfig+0xc4>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d003      	beq.n	800fbf8 <TIM_OC6_SetConfig+0x78>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	4a15      	ldr	r2, [pc, #84]	@ (800fc48 <TIM_OC6_SetConfig+0xc8>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d109      	bne.n	800fc0c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fbfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	695b      	ldr	r3, [r3, #20]
 800fc04:	029b      	lsls	r3, r3, #10
 800fc06:	697a      	ldr	r2, [r7, #20]
 800fc08:	4313      	orrs	r3, r2
 800fc0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	697a      	ldr	r2, [r7, #20]
 800fc10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	68fa      	ldr	r2, [r7, #12]
 800fc16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	685a      	ldr	r2, [r3, #4]
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	693a      	ldr	r2, [r7, #16]
 800fc24:	621a      	str	r2, [r3, #32]
}
 800fc26:	bf00      	nop
 800fc28:	371c      	adds	r7, #28
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc30:	4770      	bx	lr
 800fc32:	bf00      	nop
 800fc34:	feff8fff 	.word	0xfeff8fff
 800fc38:	40010000 	.word	0x40010000
 800fc3c:	40010400 	.word	0x40010400
 800fc40:	40014000 	.word	0x40014000
 800fc44:	40014400 	.word	0x40014400
 800fc48:	40014800 	.word	0x40014800

0800fc4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b087      	sub	sp, #28
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	60b9      	str	r1, [r7, #8]
 800fc56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	f003 031f 	and.w	r3, r3, #31
 800fc5e:	2201      	movs	r2, #1
 800fc60:	fa02 f303 	lsl.w	r3, r2, r3
 800fc64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	6a1a      	ldr	r2, [r3, #32]
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	43db      	mvns	r3, r3
 800fc6e:	401a      	ands	r2, r3
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	6a1a      	ldr	r2, [r3, #32]
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	f003 031f 	and.w	r3, r3, #31
 800fc7e:	6879      	ldr	r1, [r7, #4]
 800fc80:	fa01 f303 	lsl.w	r3, r1, r3
 800fc84:	431a      	orrs	r2, r3
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	621a      	str	r2, [r3, #32]
}
 800fc8a:	bf00      	nop
 800fc8c:	371c      	adds	r7, #28
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc94:	4770      	bx	lr
	...

0800fc98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fc98:	b480      	push	{r7}
 800fc9a:	b085      	sub	sp, #20
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d101      	bne.n	800fcb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fcac:	2302      	movs	r3, #2
 800fcae:	e077      	b.n	800fda0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2202      	movs	r2, #2
 800fcbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	689b      	ldr	r3, [r3, #8]
 800fcce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	4a35      	ldr	r2, [pc, #212]	@ (800fdac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	d004      	beq.n	800fce4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	4a34      	ldr	r2, [pc, #208]	@ (800fdb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fce0:	4293      	cmp	r3, r2
 800fce2:	d108      	bne.n	800fcf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fcea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	68fa      	ldr	r2, [r7, #12]
 800fcf2:	4313      	orrs	r3, r2
 800fcf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fcfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	68fa      	ldr	r2, [r7, #12]
 800fd04:	4313      	orrs	r3, r2
 800fd06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	68fa      	ldr	r2, [r7, #12]
 800fd0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	4a25      	ldr	r2, [pc, #148]	@ (800fdac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d02c      	beq.n	800fd74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd22:	d027      	beq.n	800fd74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	4a22      	ldr	r2, [pc, #136]	@ (800fdb4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	d022      	beq.n	800fd74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	4a21      	ldr	r2, [pc, #132]	@ (800fdb8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800fd34:	4293      	cmp	r3, r2
 800fd36:	d01d      	beq.n	800fd74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	4a1f      	ldr	r2, [pc, #124]	@ (800fdbc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800fd3e:	4293      	cmp	r3, r2
 800fd40:	d018      	beq.n	800fd74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	4a1a      	ldr	r2, [pc, #104]	@ (800fdb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d013      	beq.n	800fd74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4a1b      	ldr	r2, [pc, #108]	@ (800fdc0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800fd52:	4293      	cmp	r3, r2
 800fd54:	d00e      	beq.n	800fd74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4a1a      	ldr	r2, [pc, #104]	@ (800fdc4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d009      	beq.n	800fd74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4a18      	ldr	r2, [pc, #96]	@ (800fdc8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800fd66:	4293      	cmp	r3, r2
 800fd68:	d004      	beq.n	800fd74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	4a17      	ldr	r2, [pc, #92]	@ (800fdcc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d10c      	bne.n	800fd8e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fd7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	689b      	ldr	r3, [r3, #8]
 800fd80:	68ba      	ldr	r2, [r7, #8]
 800fd82:	4313      	orrs	r3, r2
 800fd84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	68ba      	ldr	r2, [r7, #8]
 800fd8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2201      	movs	r2, #1
 800fd92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fd9e:	2300      	movs	r3, #0
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3714      	adds	r7, #20
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr
 800fdac:	40010000 	.word	0x40010000
 800fdb0:	40010400 	.word	0x40010400
 800fdb4:	40000400 	.word	0x40000400
 800fdb8:	40000800 	.word	0x40000800
 800fdbc:	40000c00 	.word	0x40000c00
 800fdc0:	40001800 	.word	0x40001800
 800fdc4:	40014000 	.word	0x40014000
 800fdc8:	4000e000 	.word	0x4000e000
 800fdcc:	4000e400 	.word	0x4000e400

0800fdd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b085      	sub	sp, #20
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fdda:	2300      	movs	r3, #0
 800fddc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	d101      	bne.n	800fdec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fde8:	2302      	movs	r3, #2
 800fdea:	e073      	b.n	800fed4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2201      	movs	r2, #1
 800fdf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	68db      	ldr	r3, [r3, #12]
 800fdfe:	4313      	orrs	r3, r2
 800fe00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	689b      	ldr	r3, [r3, #8]
 800fe0c:	4313      	orrs	r3, r2
 800fe0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	685b      	ldr	r3, [r3, #4]
 800fe1a:	4313      	orrs	r3, r2
 800fe1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	4313      	orrs	r3, r2
 800fe2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	691b      	ldr	r3, [r3, #16]
 800fe36:	4313      	orrs	r3, r2
 800fe38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	695b      	ldr	r3, [r3, #20]
 800fe44:	4313      	orrs	r3, r2
 800fe46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe52:	4313      	orrs	r3, r2
 800fe54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	699b      	ldr	r3, [r3, #24]
 800fe60:	041b      	lsls	r3, r3, #16
 800fe62:	4313      	orrs	r3, r2
 800fe64:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	69db      	ldr	r3, [r3, #28]
 800fe70:	4313      	orrs	r3, r2
 800fe72:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	4a19      	ldr	r2, [pc, #100]	@ (800fee0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800fe7a:	4293      	cmp	r3, r2
 800fe7c:	d004      	beq.n	800fe88 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	4a18      	ldr	r2, [pc, #96]	@ (800fee4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800fe84:	4293      	cmp	r3, r2
 800fe86:	d11c      	bne.n	800fec2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe92:	051b      	lsls	r3, r3, #20
 800fe94:	4313      	orrs	r3, r2
 800fe96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	6a1b      	ldr	r3, [r3, #32]
 800fea2:	4313      	orrs	r3, r2
 800fea4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feb0:	4313      	orrs	r3, r2
 800feb2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800febe:	4313      	orrs	r3, r2
 800fec0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	68fa      	ldr	r2, [r7, #12]
 800fec8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2200      	movs	r2, #0
 800fece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fed2:	2300      	movs	r3, #0
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3714      	adds	r7, #20
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr
 800fee0:	40010000 	.word	0x40010000
 800fee4:	40010400 	.word	0x40010400

0800fee8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fee8:	b480      	push	{r7}
 800feea:	b083      	sub	sp, #12
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fef0:	bf00      	nop
 800fef2:	370c      	adds	r7, #12
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b083      	sub	sp, #12
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff04:	bf00      	nop
 800ff06:	370c      	adds	r7, #12
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr

0800ff10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ff18:	bf00      	nop
 800ff1a:	370c      	adds	r7, #12
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr

0800ff24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d101      	bne.n	800ff36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff32:	2301      	movs	r3, #1
 800ff34:	e042      	b.n	800ffbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d106      	bne.n	800ff4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2200      	movs	r2, #0
 800ff44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f7f3 fd67 	bl	8003a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2224      	movs	r2, #36	@ 0x24
 800ff52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	681a      	ldr	r2, [r3, #0]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f022 0201 	bic.w	r2, r2, #1
 800ff64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d002      	beq.n	800ff74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f001 fb6a 	bl	8011648 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f000 fcfb 	bl	8010970 <UART_SetConfig>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	2b01      	cmp	r3, #1
 800ff7e:	d101      	bne.n	800ff84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ff80:	2301      	movs	r3, #1
 800ff82:	e01b      	b.n	800ffbc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	685a      	ldr	r2, [r3, #4]
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ff92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	689a      	ldr	r2, [r3, #8]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ffa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	f042 0201 	orr.w	r2, r2, #1
 800ffb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f001 fbe9 	bl	801178c <UART_CheckIdleState>
 800ffba:	4603      	mov	r3, r0
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3708      	adds	r7, #8
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}

0800ffc4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b08a      	sub	sp, #40	@ 0x28
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	4613      	mov	r3, r2
 800ffd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ffd8:	2b20      	cmp	r3, #32
 800ffda:	d167      	bne.n	80100ac <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d002      	beq.n	800ffe8 <HAL_UART_Transmit_DMA+0x24>
 800ffe2:	88fb      	ldrh	r3, [r7, #6]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d101      	bne.n	800ffec <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ffe8:	2301      	movs	r3, #1
 800ffea:	e060      	b.n	80100ae <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	68ba      	ldr	r2, [r7, #8]
 800fff0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	88fa      	ldrh	r2, [r7, #6]
 800fff6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	88fa      	ldrh	r2, [r7, #6]
 800fffe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	2200      	movs	r2, #0
 8010006:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	2221      	movs	r2, #33	@ 0x21
 801000e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010016:	2b00      	cmp	r3, #0
 8010018:	d028      	beq.n	801006c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801001e:	4a26      	ldr	r2, [pc, #152]	@ (80100b8 <HAL_UART_Transmit_DMA+0xf4>)
 8010020:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010026:	4a25      	ldr	r2, [pc, #148]	@ (80100bc <HAL_UART_Transmit_DMA+0xf8>)
 8010028:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801002e:	4a24      	ldr	r2, [pc, #144]	@ (80100c0 <HAL_UART_Transmit_DMA+0xfc>)
 8010030:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010036:	2200      	movs	r2, #0
 8010038:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010042:	4619      	mov	r1, r3
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	3328      	adds	r3, #40	@ 0x28
 801004a:	461a      	mov	r2, r3
 801004c:	88fb      	ldrh	r3, [r7, #6]
 801004e:	f7f6 ff31 	bl	8006eb4 <HAL_DMA_Start_IT>
 8010052:	4603      	mov	r3, r0
 8010054:	2b00      	cmp	r3, #0
 8010056:	d009      	beq.n	801006c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2210      	movs	r2, #16
 801005c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	2220      	movs	r2, #32
 8010064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8010068:	2301      	movs	r3, #1
 801006a:	e020      	b.n	80100ae <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	2240      	movs	r2, #64	@ 0x40
 8010072:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	3308      	adds	r3, #8
 801007a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	e853 3f00 	ldrex	r3, [r3]
 8010082:	613b      	str	r3, [r7, #16]
   return(result);
 8010084:	693b      	ldr	r3, [r7, #16]
 8010086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801008a:	627b      	str	r3, [r7, #36]	@ 0x24
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	3308      	adds	r3, #8
 8010092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010094:	623a      	str	r2, [r7, #32]
 8010096:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010098:	69f9      	ldr	r1, [r7, #28]
 801009a:	6a3a      	ldr	r2, [r7, #32]
 801009c:	e841 2300 	strex	r3, r2, [r1]
 80100a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80100a2:	69bb      	ldr	r3, [r7, #24]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d1e5      	bne.n	8010074 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80100a8:	2300      	movs	r3, #0
 80100aa:	e000      	b.n	80100ae <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80100ac:	2302      	movs	r3, #2
  }
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3728      	adds	r7, #40	@ 0x28
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}
 80100b6:	bf00      	nop
 80100b8:	08011c59 	.word	0x08011c59
 80100bc:	08011cef 	.word	0x08011cef
 80100c0:	08011e71 	.word	0x08011e71

080100c4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b08a      	sub	sp, #40	@ 0x28
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	60f8      	str	r0, [r7, #12]
 80100cc:	60b9      	str	r1, [r7, #8]
 80100ce:	4613      	mov	r3, r2
 80100d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80100d8:	2b20      	cmp	r3, #32
 80100da:	d137      	bne.n	801014c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d002      	beq.n	80100e8 <HAL_UART_Receive_DMA+0x24>
 80100e2:	88fb      	ldrh	r3, [r7, #6]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d101      	bne.n	80100ec <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80100e8:	2301      	movs	r3, #1
 80100ea:	e030      	b.n	801014e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	2200      	movs	r2, #0
 80100f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	4a18      	ldr	r2, [pc, #96]	@ (8010158 <HAL_UART_Receive_DMA+0x94>)
 80100f8:	4293      	cmp	r3, r2
 80100fa:	d01f      	beq.n	801013c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	685b      	ldr	r3, [r3, #4]
 8010102:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010106:	2b00      	cmp	r3, #0
 8010108:	d018      	beq.n	801013c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	e853 3f00 	ldrex	r3, [r3]
 8010116:	613b      	str	r3, [r7, #16]
   return(result);
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801011e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	461a      	mov	r2, r3
 8010126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010128:	623b      	str	r3, [r7, #32]
 801012a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801012c:	69f9      	ldr	r1, [r7, #28]
 801012e:	6a3a      	ldr	r2, [r7, #32]
 8010130:	e841 2300 	strex	r3, r2, [r1]
 8010134:	61bb      	str	r3, [r7, #24]
   return(result);
 8010136:	69bb      	ldr	r3, [r7, #24]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d1e6      	bne.n	801010a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801013c:	88fb      	ldrh	r3, [r7, #6]
 801013e:	461a      	mov	r2, r3
 8010140:	68b9      	ldr	r1, [r7, #8]
 8010142:	68f8      	ldr	r0, [r7, #12]
 8010144:	f001 fc3a 	bl	80119bc <UART_Start_Receive_DMA>
 8010148:	4603      	mov	r3, r0
 801014a:	e000      	b.n	801014e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801014c:	2302      	movs	r3, #2
  }
}
 801014e:	4618      	mov	r0, r3
 8010150:	3728      	adds	r7, #40	@ 0x28
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop
 8010158:	58000c00 	.word	0x58000c00

0801015c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b0ba      	sub	sp, #232	@ 0xe8
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	69db      	ldr	r3, [r3, #28]
 801016a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	689b      	ldr	r3, [r3, #8]
 801017e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010182:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010186:	f640 030f 	movw	r3, #2063	@ 0x80f
 801018a:	4013      	ands	r3, r2
 801018c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010194:	2b00      	cmp	r3, #0
 8010196:	d11b      	bne.n	80101d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801019c:	f003 0320 	and.w	r3, r3, #32
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d015      	beq.n	80101d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80101a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101a8:	f003 0320 	and.w	r3, r3, #32
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d105      	bne.n	80101bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80101b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80101b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d009      	beq.n	80101d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	f000 8393 	beq.w	80108ec <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	4798      	blx	r3
      }
      return;
 80101ce:	e38d      	b.n	80108ec <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80101d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	f000 8123 	beq.w	8010420 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80101da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80101de:	4b8d      	ldr	r3, [pc, #564]	@ (8010414 <HAL_UART_IRQHandler+0x2b8>)
 80101e0:	4013      	ands	r3, r2
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d106      	bne.n	80101f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80101e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80101ea:	4b8b      	ldr	r3, [pc, #556]	@ (8010418 <HAL_UART_IRQHandler+0x2bc>)
 80101ec:	4013      	ands	r3, r2
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	f000 8116 	beq.w	8010420 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80101f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101f8:	f003 0301 	and.w	r3, r3, #1
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d011      	beq.n	8010224 <HAL_UART_IRQHandler+0xc8>
 8010200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00b      	beq.n	8010224 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2201      	movs	r2, #1
 8010212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801021a:	f043 0201 	orr.w	r2, r3, #1
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010228:	f003 0302 	and.w	r3, r3, #2
 801022c:	2b00      	cmp	r3, #0
 801022e:	d011      	beq.n	8010254 <HAL_UART_IRQHandler+0xf8>
 8010230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010234:	f003 0301 	and.w	r3, r3, #1
 8010238:	2b00      	cmp	r3, #0
 801023a:	d00b      	beq.n	8010254 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	2202      	movs	r2, #2
 8010242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801024a:	f043 0204 	orr.w	r2, r3, #4
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010258:	f003 0304 	and.w	r3, r3, #4
 801025c:	2b00      	cmp	r3, #0
 801025e:	d011      	beq.n	8010284 <HAL_UART_IRQHandler+0x128>
 8010260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010264:	f003 0301 	and.w	r3, r3, #1
 8010268:	2b00      	cmp	r3, #0
 801026a:	d00b      	beq.n	8010284 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	2204      	movs	r2, #4
 8010272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801027a:	f043 0202 	orr.w	r2, r3, #2
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010288:	f003 0308 	and.w	r3, r3, #8
 801028c:	2b00      	cmp	r3, #0
 801028e:	d017      	beq.n	80102c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010294:	f003 0320 	and.w	r3, r3, #32
 8010298:	2b00      	cmp	r3, #0
 801029a:	d105      	bne.n	80102a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801029c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80102a0:	4b5c      	ldr	r3, [pc, #368]	@ (8010414 <HAL_UART_IRQHandler+0x2b8>)
 80102a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d00b      	beq.n	80102c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	2208      	movs	r2, #8
 80102ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102b6:	f043 0208 	orr.w	r2, r3, #8
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80102c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d012      	beq.n	80102f2 <HAL_UART_IRQHandler+0x196>
 80102cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80102d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d00c      	beq.n	80102f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80102e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102e8:	f043 0220 	orr.w	r2, r3, #32
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	f000 82f9 	beq.w	80108f0 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80102fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010302:	f003 0320 	and.w	r3, r3, #32
 8010306:	2b00      	cmp	r3, #0
 8010308:	d013      	beq.n	8010332 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801030a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801030e:	f003 0320 	and.w	r3, r3, #32
 8010312:	2b00      	cmp	r3, #0
 8010314:	d105      	bne.n	8010322 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801031a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801031e:	2b00      	cmp	r3, #0
 8010320:	d007      	beq.n	8010332 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010326:	2b00      	cmp	r3, #0
 8010328:	d003      	beq.n	8010332 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010338:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	689b      	ldr	r3, [r3, #8]
 8010342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010346:	2b40      	cmp	r3, #64	@ 0x40
 8010348:	d005      	beq.n	8010356 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801034a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801034e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010352:	2b00      	cmp	r3, #0
 8010354:	d054      	beq.n	8010400 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f001 fc18 	bl	8011b8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	689b      	ldr	r3, [r3, #8]
 8010362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010366:	2b40      	cmp	r3, #64	@ 0x40
 8010368:	d146      	bne.n	80103f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	3308      	adds	r3, #8
 8010370:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010374:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010378:	e853 3f00 	ldrex	r3, [r3]
 801037c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010380:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010384:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010388:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	3308      	adds	r3, #8
 8010392:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010396:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801039a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801039e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80103a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80103a6:	e841 2300 	strex	r3, r2, [r1]
 80103aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80103ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d1d9      	bne.n	801036a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d017      	beq.n	80103f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103c6:	4a15      	ldr	r2, [pc, #84]	@ (801041c <HAL_UART_IRQHandler+0x2c0>)
 80103c8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7f7 faf7 	bl	80079c4 <HAL_DMA_Abort_IT>
 80103d6:	4603      	mov	r3, r0
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d019      	beq.n	8010410 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80103ea:	4610      	mov	r0, r2
 80103ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103ee:	e00f      	b.n	8010410 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f000 faa7 	bl	8010944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103f6:	e00b      	b.n	8010410 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 faa3 	bl	8010944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103fe:	e007      	b.n	8010410 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f000 fa9f 	bl	8010944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2200      	movs	r2, #0
 801040a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801040e:	e26f      	b.n	80108f0 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010410:	bf00      	nop
    return;
 8010412:	e26d      	b.n	80108f0 <HAL_UART_IRQHandler+0x794>
 8010414:	10000001 	.word	0x10000001
 8010418:	04000120 	.word	0x04000120
 801041c:	08011ef1 	.word	0x08011ef1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010424:	2b01      	cmp	r3, #1
 8010426:	f040 8203 	bne.w	8010830 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801042a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801042e:	f003 0310 	and.w	r3, r3, #16
 8010432:	2b00      	cmp	r3, #0
 8010434:	f000 81fc 	beq.w	8010830 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801043c:	f003 0310 	and.w	r3, r3, #16
 8010440:	2b00      	cmp	r3, #0
 8010442:	f000 81f5 	beq.w	8010830 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	2210      	movs	r2, #16
 801044c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	689b      	ldr	r3, [r3, #8]
 8010454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010458:	2b40      	cmp	r3, #64	@ 0x40
 801045a:	f040 816d 	bne.w	8010738 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	4aa4      	ldr	r2, [pc, #656]	@ (80106f8 <HAL_UART_IRQHandler+0x59c>)
 8010468:	4293      	cmp	r3, r2
 801046a:	d068      	beq.n	801053e <HAL_UART_IRQHandler+0x3e2>
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	4aa1      	ldr	r2, [pc, #644]	@ (80106fc <HAL_UART_IRQHandler+0x5a0>)
 8010476:	4293      	cmp	r3, r2
 8010478:	d061      	beq.n	801053e <HAL_UART_IRQHandler+0x3e2>
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	4a9f      	ldr	r2, [pc, #636]	@ (8010700 <HAL_UART_IRQHandler+0x5a4>)
 8010484:	4293      	cmp	r3, r2
 8010486:	d05a      	beq.n	801053e <HAL_UART_IRQHandler+0x3e2>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	4a9c      	ldr	r2, [pc, #624]	@ (8010704 <HAL_UART_IRQHandler+0x5a8>)
 8010492:	4293      	cmp	r3, r2
 8010494:	d053      	beq.n	801053e <HAL_UART_IRQHandler+0x3e2>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4a9a      	ldr	r2, [pc, #616]	@ (8010708 <HAL_UART_IRQHandler+0x5ac>)
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d04c      	beq.n	801053e <HAL_UART_IRQHandler+0x3e2>
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	4a97      	ldr	r2, [pc, #604]	@ (801070c <HAL_UART_IRQHandler+0x5b0>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d045      	beq.n	801053e <HAL_UART_IRQHandler+0x3e2>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	4a95      	ldr	r2, [pc, #596]	@ (8010710 <HAL_UART_IRQHandler+0x5b4>)
 80104bc:	4293      	cmp	r3, r2
 80104be:	d03e      	beq.n	801053e <HAL_UART_IRQHandler+0x3e2>
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	4a92      	ldr	r2, [pc, #584]	@ (8010714 <HAL_UART_IRQHandler+0x5b8>)
 80104ca:	4293      	cmp	r3, r2
 80104cc:	d037      	beq.n	801053e <HAL_UART_IRQHandler+0x3e2>
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	4a90      	ldr	r2, [pc, #576]	@ (8010718 <HAL_UART_IRQHandler+0x5bc>)
 80104d8:	4293      	cmp	r3, r2
 80104da:	d030      	beq.n	801053e <HAL_UART_IRQHandler+0x3e2>
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	4a8d      	ldr	r2, [pc, #564]	@ (801071c <HAL_UART_IRQHandler+0x5c0>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d029      	beq.n	801053e <HAL_UART_IRQHandler+0x3e2>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	4a8b      	ldr	r2, [pc, #556]	@ (8010720 <HAL_UART_IRQHandler+0x5c4>)
 80104f4:	4293      	cmp	r3, r2
 80104f6:	d022      	beq.n	801053e <HAL_UART_IRQHandler+0x3e2>
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4a88      	ldr	r2, [pc, #544]	@ (8010724 <HAL_UART_IRQHandler+0x5c8>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d01b      	beq.n	801053e <HAL_UART_IRQHandler+0x3e2>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	4a86      	ldr	r2, [pc, #536]	@ (8010728 <HAL_UART_IRQHandler+0x5cc>)
 8010510:	4293      	cmp	r3, r2
 8010512:	d014      	beq.n	801053e <HAL_UART_IRQHandler+0x3e2>
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	4a83      	ldr	r2, [pc, #524]	@ (801072c <HAL_UART_IRQHandler+0x5d0>)
 801051e:	4293      	cmp	r3, r2
 8010520:	d00d      	beq.n	801053e <HAL_UART_IRQHandler+0x3e2>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	4a81      	ldr	r2, [pc, #516]	@ (8010730 <HAL_UART_IRQHandler+0x5d4>)
 801052c:	4293      	cmp	r3, r2
 801052e:	d006      	beq.n	801053e <HAL_UART_IRQHandler+0x3e2>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	4a7e      	ldr	r2, [pc, #504]	@ (8010734 <HAL_UART_IRQHandler+0x5d8>)
 801053a:	4293      	cmp	r3, r2
 801053c:	d106      	bne.n	801054c <HAL_UART_IRQHandler+0x3f0>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	685b      	ldr	r3, [r3, #4]
 8010548:	b29b      	uxth	r3, r3
 801054a:	e005      	b.n	8010558 <HAL_UART_IRQHandler+0x3fc>
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	b29b      	uxth	r3, r3
 8010558:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801055c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010560:	2b00      	cmp	r3, #0
 8010562:	f000 80ad 	beq.w	80106c0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801056c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010570:	429a      	cmp	r2, r3
 8010572:	f080 80a5 	bcs.w	80106c0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801057c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010586:	69db      	ldr	r3, [r3, #28]
 8010588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801058c:	f000 8087 	beq.w	801069e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010598:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801059c:	e853 3f00 	ldrex	r3, [r3]
 80105a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80105a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80105a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80105ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	461a      	mov	r2, r3
 80105b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80105ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80105be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80105c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80105ca:	e841 2300 	strex	r3, r2, [r1]
 80105ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80105d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d1da      	bne.n	8010590 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	3308      	adds	r3, #8
 80105e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80105e4:	e853 3f00 	ldrex	r3, [r3]
 80105e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80105ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80105ec:	f023 0301 	bic.w	r3, r3, #1
 80105f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	3308      	adds	r3, #8
 80105fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80105fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010602:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010604:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010606:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801060a:	e841 2300 	strex	r3, r2, [r1]
 801060e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010610:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010612:	2b00      	cmp	r3, #0
 8010614:	d1e1      	bne.n	80105da <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	3308      	adds	r3, #8
 801061c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801061e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010620:	e853 3f00 	ldrex	r3, [r3]
 8010624:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010626:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801062c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	3308      	adds	r3, #8
 8010636:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801063a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801063c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801063e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010640:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010642:	e841 2300 	strex	r3, r2, [r1]
 8010646:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010648:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801064a:	2b00      	cmp	r3, #0
 801064c:	d1e3      	bne.n	8010616 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2220      	movs	r2, #32
 8010652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2200      	movs	r2, #0
 801065a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010664:	e853 3f00 	ldrex	r3, [r3]
 8010668:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801066a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801066c:	f023 0310 	bic.w	r3, r3, #16
 8010670:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	461a      	mov	r2, r3
 801067a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801067e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010680:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010682:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010684:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010686:	e841 2300 	strex	r3, r2, [r1]
 801068a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801068c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801068e:	2b00      	cmp	r3, #0
 8010690:	d1e4      	bne.n	801065c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010698:	4618      	mov	r0, r3
 801069a:	f7f6 fe75 	bl	8007388 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2202      	movs	r2, #2
 80106a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80106b0:	b29b      	uxth	r3, r3
 80106b2:	1ad3      	subs	r3, r2, r3
 80106b4:	b29b      	uxth	r3, r3
 80106b6:	4619      	mov	r1, r3
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f000 f94d 	bl	8010958 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80106be:	e119      	b.n	80108f4 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80106c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80106ca:	429a      	cmp	r2, r3
 80106cc:	f040 8112 	bne.w	80108f4 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106d6:	69db      	ldr	r3, [r3, #28]
 80106d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80106dc:	f040 810a 	bne.w	80108f4 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2202      	movs	r2, #2
 80106e4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80106ec:	4619      	mov	r1, r3
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f000 f932 	bl	8010958 <HAL_UARTEx_RxEventCallback>
      return;
 80106f4:	e0fe      	b.n	80108f4 <HAL_UART_IRQHandler+0x798>
 80106f6:	bf00      	nop
 80106f8:	40020010 	.word	0x40020010
 80106fc:	40020028 	.word	0x40020028
 8010700:	40020040 	.word	0x40020040
 8010704:	40020058 	.word	0x40020058
 8010708:	40020070 	.word	0x40020070
 801070c:	40020088 	.word	0x40020088
 8010710:	400200a0 	.word	0x400200a0
 8010714:	400200b8 	.word	0x400200b8
 8010718:	40020410 	.word	0x40020410
 801071c:	40020428 	.word	0x40020428
 8010720:	40020440 	.word	0x40020440
 8010724:	40020458 	.word	0x40020458
 8010728:	40020470 	.word	0x40020470
 801072c:	40020488 	.word	0x40020488
 8010730:	400204a0 	.word	0x400204a0
 8010734:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010744:	b29b      	uxth	r3, r3
 8010746:	1ad3      	subs	r3, r2, r3
 8010748:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010752:	b29b      	uxth	r3, r3
 8010754:	2b00      	cmp	r3, #0
 8010756:	f000 80cf 	beq.w	80108f8 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 801075a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801075e:	2b00      	cmp	r3, #0
 8010760:	f000 80ca 	beq.w	80108f8 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801076a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801076c:	e853 3f00 	ldrex	r3, [r3]
 8010770:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010774:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010778:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	461a      	mov	r2, r3
 8010782:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010786:	647b      	str	r3, [r7, #68]	@ 0x44
 8010788:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801078a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801078c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801078e:	e841 2300 	strex	r3, r2, [r1]
 8010792:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010796:	2b00      	cmp	r3, #0
 8010798:	d1e4      	bne.n	8010764 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	3308      	adds	r3, #8
 80107a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a4:	e853 3f00 	ldrex	r3, [r3]
 80107a8:	623b      	str	r3, [r7, #32]
   return(result);
 80107aa:	6a3a      	ldr	r2, [r7, #32]
 80107ac:	4b55      	ldr	r3, [pc, #340]	@ (8010904 <HAL_UART_IRQHandler+0x7a8>)
 80107ae:	4013      	ands	r3, r2
 80107b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	3308      	adds	r3, #8
 80107ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80107be:	633a      	str	r2, [r7, #48]	@ 0x30
 80107c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80107c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107c6:	e841 2300 	strex	r3, r2, [r1]
 80107ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80107cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d1e3      	bne.n	801079a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2220      	movs	r2, #32
 80107d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2200      	movs	r2, #0
 80107de:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2200      	movs	r2, #0
 80107e4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	e853 3f00 	ldrex	r3, [r3]
 80107f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	f023 0310 	bic.w	r3, r3, #16
 80107fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	461a      	mov	r2, r3
 8010804:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010808:	61fb      	str	r3, [r7, #28]
 801080a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801080c:	69b9      	ldr	r1, [r7, #24]
 801080e:	69fa      	ldr	r2, [r7, #28]
 8010810:	e841 2300 	strex	r3, r2, [r1]
 8010814:	617b      	str	r3, [r7, #20]
   return(result);
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d1e4      	bne.n	80107e6 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2202      	movs	r2, #2
 8010820:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010822:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010826:	4619      	mov	r1, r3
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f000 f895 	bl	8010958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801082e:	e063      	b.n	80108f8 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010834:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010838:	2b00      	cmp	r3, #0
 801083a:	d00e      	beq.n	801085a <HAL_UART_IRQHandler+0x6fe>
 801083c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010840:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010844:	2b00      	cmp	r3, #0
 8010846:	d008      	beq.n	801085a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8010850:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f001 fb89 	bl	8011f6a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010858:	e051      	b.n	80108fe <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801085a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801085e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010862:	2b00      	cmp	r3, #0
 8010864:	d014      	beq.n	8010890 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801086a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801086e:	2b00      	cmp	r3, #0
 8010870:	d105      	bne.n	801087e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010876:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801087a:	2b00      	cmp	r3, #0
 801087c:	d008      	beq.n	8010890 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010882:	2b00      	cmp	r3, #0
 8010884:	d03a      	beq.n	80108fc <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	4798      	blx	r3
    }
    return;
 801088e:	e035      	b.n	80108fc <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010898:	2b00      	cmp	r3, #0
 801089a:	d009      	beq.n	80108b0 <HAL_UART_IRQHandler+0x754>
 801089c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80108a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d003      	beq.n	80108b0 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f001 fb33 	bl	8011f14 <UART_EndTransmit_IT>
    return;
 80108ae:	e026      	b.n	80108fe <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80108b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80108b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d009      	beq.n	80108d0 <HAL_UART_IRQHandler+0x774>
 80108bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80108c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d003      	beq.n	80108d0 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80108c8:	6878      	ldr	r0, [r7, #4]
 80108ca:	f001 fb62 	bl	8011f92 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80108ce:	e016      	b.n	80108fe <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80108d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80108d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d010      	beq.n	80108fe <HAL_UART_IRQHandler+0x7a2>
 80108dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	da0c      	bge.n	80108fe <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f001 fb4a 	bl	8011f7e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80108ea:	e008      	b.n	80108fe <HAL_UART_IRQHandler+0x7a2>
      return;
 80108ec:	bf00      	nop
 80108ee:	e006      	b.n	80108fe <HAL_UART_IRQHandler+0x7a2>
    return;
 80108f0:	bf00      	nop
 80108f2:	e004      	b.n	80108fe <HAL_UART_IRQHandler+0x7a2>
      return;
 80108f4:	bf00      	nop
 80108f6:	e002      	b.n	80108fe <HAL_UART_IRQHandler+0x7a2>
      return;
 80108f8:	bf00      	nop
 80108fa:	e000      	b.n	80108fe <HAL_UART_IRQHandler+0x7a2>
    return;
 80108fc:	bf00      	nop
  }
}
 80108fe:	37e8      	adds	r7, #232	@ 0xe8
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}
 8010904:	effffffe 	.word	0xeffffffe

08010908 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010908:	b480      	push	{r7}
 801090a:	b083      	sub	sp, #12
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010910:	bf00      	nop
 8010912:	370c      	adds	r7, #12
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr

0801091c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801091c:	b480      	push	{r7}
 801091e:	b083      	sub	sp, #12
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8010924:	bf00      	nop
 8010926:	370c      	adds	r7, #12
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr

08010930 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010930:	b480      	push	{r7}
 8010932:	b083      	sub	sp, #12
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010938:	bf00      	nop
 801093a:	370c      	adds	r7, #12
 801093c:	46bd      	mov	sp, r7
 801093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010942:	4770      	bx	lr

08010944 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010944:	b480      	push	{r7}
 8010946:	b083      	sub	sp, #12
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801094c:	bf00      	nop
 801094e:	370c      	adds	r7, #12
 8010950:	46bd      	mov	sp, r7
 8010952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010956:	4770      	bx	lr

08010958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010958:	b480      	push	{r7}
 801095a:	b083      	sub	sp, #12
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
 8010960:	460b      	mov	r3, r1
 8010962:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010964:	bf00      	nop
 8010966:	370c      	adds	r7, #12
 8010968:	46bd      	mov	sp, r7
 801096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096e:	4770      	bx	lr

08010970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010974:	b092      	sub	sp, #72	@ 0x48
 8010976:	af00      	add	r7, sp, #0
 8010978:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801097a:	2300      	movs	r3, #0
 801097c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	689a      	ldr	r2, [r3, #8]
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	691b      	ldr	r3, [r3, #16]
 8010988:	431a      	orrs	r2, r3
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	695b      	ldr	r3, [r3, #20]
 801098e:	431a      	orrs	r2, r3
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	69db      	ldr	r3, [r3, #28]
 8010994:	4313      	orrs	r3, r2
 8010996:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	681a      	ldr	r2, [r3, #0]
 801099e:	4bbe      	ldr	r3, [pc, #760]	@ (8010c98 <UART_SetConfig+0x328>)
 80109a0:	4013      	ands	r3, r2
 80109a2:	697a      	ldr	r2, [r7, #20]
 80109a4:	6812      	ldr	r2, [r2, #0]
 80109a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80109a8:	430b      	orrs	r3, r1
 80109aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	68da      	ldr	r2, [r3, #12]
 80109ba:	697b      	ldr	r3, [r7, #20]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	430a      	orrs	r2, r1
 80109c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	699b      	ldr	r3, [r3, #24]
 80109c6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	4ab3      	ldr	r2, [pc, #716]	@ (8010c9c <UART_SetConfig+0x32c>)
 80109ce:	4293      	cmp	r3, r2
 80109d0:	d004      	beq.n	80109dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	6a1b      	ldr	r3, [r3, #32]
 80109d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80109d8:	4313      	orrs	r3, r2
 80109da:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	689a      	ldr	r2, [r3, #8]
 80109e2:	4baf      	ldr	r3, [pc, #700]	@ (8010ca0 <UART_SetConfig+0x330>)
 80109e4:	4013      	ands	r3, r2
 80109e6:	697a      	ldr	r2, [r7, #20]
 80109e8:	6812      	ldr	r2, [r2, #0]
 80109ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80109ec:	430b      	orrs	r3, r1
 80109ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109f6:	f023 010f 	bic.w	r1, r3, #15
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	430a      	orrs	r2, r1
 8010a04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	4aa6      	ldr	r2, [pc, #664]	@ (8010ca4 <UART_SetConfig+0x334>)
 8010a0c:	4293      	cmp	r3, r2
 8010a0e:	d177      	bne.n	8010b00 <UART_SetConfig+0x190>
 8010a10:	4ba5      	ldr	r3, [pc, #660]	@ (8010ca8 <UART_SetConfig+0x338>)
 8010a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010a18:	2b28      	cmp	r3, #40	@ 0x28
 8010a1a:	d86d      	bhi.n	8010af8 <UART_SetConfig+0x188>
 8010a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8010a24 <UART_SetConfig+0xb4>)
 8010a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a22:	bf00      	nop
 8010a24:	08010ac9 	.word	0x08010ac9
 8010a28:	08010af9 	.word	0x08010af9
 8010a2c:	08010af9 	.word	0x08010af9
 8010a30:	08010af9 	.word	0x08010af9
 8010a34:	08010af9 	.word	0x08010af9
 8010a38:	08010af9 	.word	0x08010af9
 8010a3c:	08010af9 	.word	0x08010af9
 8010a40:	08010af9 	.word	0x08010af9
 8010a44:	08010ad1 	.word	0x08010ad1
 8010a48:	08010af9 	.word	0x08010af9
 8010a4c:	08010af9 	.word	0x08010af9
 8010a50:	08010af9 	.word	0x08010af9
 8010a54:	08010af9 	.word	0x08010af9
 8010a58:	08010af9 	.word	0x08010af9
 8010a5c:	08010af9 	.word	0x08010af9
 8010a60:	08010af9 	.word	0x08010af9
 8010a64:	08010ad9 	.word	0x08010ad9
 8010a68:	08010af9 	.word	0x08010af9
 8010a6c:	08010af9 	.word	0x08010af9
 8010a70:	08010af9 	.word	0x08010af9
 8010a74:	08010af9 	.word	0x08010af9
 8010a78:	08010af9 	.word	0x08010af9
 8010a7c:	08010af9 	.word	0x08010af9
 8010a80:	08010af9 	.word	0x08010af9
 8010a84:	08010ae1 	.word	0x08010ae1
 8010a88:	08010af9 	.word	0x08010af9
 8010a8c:	08010af9 	.word	0x08010af9
 8010a90:	08010af9 	.word	0x08010af9
 8010a94:	08010af9 	.word	0x08010af9
 8010a98:	08010af9 	.word	0x08010af9
 8010a9c:	08010af9 	.word	0x08010af9
 8010aa0:	08010af9 	.word	0x08010af9
 8010aa4:	08010ae9 	.word	0x08010ae9
 8010aa8:	08010af9 	.word	0x08010af9
 8010aac:	08010af9 	.word	0x08010af9
 8010ab0:	08010af9 	.word	0x08010af9
 8010ab4:	08010af9 	.word	0x08010af9
 8010ab8:	08010af9 	.word	0x08010af9
 8010abc:	08010af9 	.word	0x08010af9
 8010ac0:	08010af9 	.word	0x08010af9
 8010ac4:	08010af1 	.word	0x08010af1
 8010ac8:	2301      	movs	r3, #1
 8010aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ace:	e326      	b.n	801111e <UART_SetConfig+0x7ae>
 8010ad0:	2304      	movs	r3, #4
 8010ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ad6:	e322      	b.n	801111e <UART_SetConfig+0x7ae>
 8010ad8:	2308      	movs	r3, #8
 8010ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ade:	e31e      	b.n	801111e <UART_SetConfig+0x7ae>
 8010ae0:	2310      	movs	r3, #16
 8010ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ae6:	e31a      	b.n	801111e <UART_SetConfig+0x7ae>
 8010ae8:	2320      	movs	r3, #32
 8010aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aee:	e316      	b.n	801111e <UART_SetConfig+0x7ae>
 8010af0:	2340      	movs	r3, #64	@ 0x40
 8010af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010af6:	e312      	b.n	801111e <UART_SetConfig+0x7ae>
 8010af8:	2380      	movs	r3, #128	@ 0x80
 8010afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010afe:	e30e      	b.n	801111e <UART_SetConfig+0x7ae>
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	4a69      	ldr	r2, [pc, #420]	@ (8010cac <UART_SetConfig+0x33c>)
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d130      	bne.n	8010b6c <UART_SetConfig+0x1fc>
 8010b0a:	4b67      	ldr	r3, [pc, #412]	@ (8010ca8 <UART_SetConfig+0x338>)
 8010b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b0e:	f003 0307 	and.w	r3, r3, #7
 8010b12:	2b05      	cmp	r3, #5
 8010b14:	d826      	bhi.n	8010b64 <UART_SetConfig+0x1f4>
 8010b16:	a201      	add	r2, pc, #4	@ (adr r2, 8010b1c <UART_SetConfig+0x1ac>)
 8010b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b1c:	08010b35 	.word	0x08010b35
 8010b20:	08010b3d 	.word	0x08010b3d
 8010b24:	08010b45 	.word	0x08010b45
 8010b28:	08010b4d 	.word	0x08010b4d
 8010b2c:	08010b55 	.word	0x08010b55
 8010b30:	08010b5d 	.word	0x08010b5d
 8010b34:	2300      	movs	r3, #0
 8010b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b3a:	e2f0      	b.n	801111e <UART_SetConfig+0x7ae>
 8010b3c:	2304      	movs	r3, #4
 8010b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b42:	e2ec      	b.n	801111e <UART_SetConfig+0x7ae>
 8010b44:	2308      	movs	r3, #8
 8010b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b4a:	e2e8      	b.n	801111e <UART_SetConfig+0x7ae>
 8010b4c:	2310      	movs	r3, #16
 8010b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b52:	e2e4      	b.n	801111e <UART_SetConfig+0x7ae>
 8010b54:	2320      	movs	r3, #32
 8010b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b5a:	e2e0      	b.n	801111e <UART_SetConfig+0x7ae>
 8010b5c:	2340      	movs	r3, #64	@ 0x40
 8010b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b62:	e2dc      	b.n	801111e <UART_SetConfig+0x7ae>
 8010b64:	2380      	movs	r3, #128	@ 0x80
 8010b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b6a:	e2d8      	b.n	801111e <UART_SetConfig+0x7ae>
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	4a4f      	ldr	r2, [pc, #316]	@ (8010cb0 <UART_SetConfig+0x340>)
 8010b72:	4293      	cmp	r3, r2
 8010b74:	d130      	bne.n	8010bd8 <UART_SetConfig+0x268>
 8010b76:	4b4c      	ldr	r3, [pc, #304]	@ (8010ca8 <UART_SetConfig+0x338>)
 8010b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b7a:	f003 0307 	and.w	r3, r3, #7
 8010b7e:	2b05      	cmp	r3, #5
 8010b80:	d826      	bhi.n	8010bd0 <UART_SetConfig+0x260>
 8010b82:	a201      	add	r2, pc, #4	@ (adr r2, 8010b88 <UART_SetConfig+0x218>)
 8010b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b88:	08010ba1 	.word	0x08010ba1
 8010b8c:	08010ba9 	.word	0x08010ba9
 8010b90:	08010bb1 	.word	0x08010bb1
 8010b94:	08010bb9 	.word	0x08010bb9
 8010b98:	08010bc1 	.word	0x08010bc1
 8010b9c:	08010bc9 	.word	0x08010bc9
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ba6:	e2ba      	b.n	801111e <UART_SetConfig+0x7ae>
 8010ba8:	2304      	movs	r3, #4
 8010baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bae:	e2b6      	b.n	801111e <UART_SetConfig+0x7ae>
 8010bb0:	2308      	movs	r3, #8
 8010bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bb6:	e2b2      	b.n	801111e <UART_SetConfig+0x7ae>
 8010bb8:	2310      	movs	r3, #16
 8010bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bbe:	e2ae      	b.n	801111e <UART_SetConfig+0x7ae>
 8010bc0:	2320      	movs	r3, #32
 8010bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bc6:	e2aa      	b.n	801111e <UART_SetConfig+0x7ae>
 8010bc8:	2340      	movs	r3, #64	@ 0x40
 8010bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bce:	e2a6      	b.n	801111e <UART_SetConfig+0x7ae>
 8010bd0:	2380      	movs	r3, #128	@ 0x80
 8010bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bd6:	e2a2      	b.n	801111e <UART_SetConfig+0x7ae>
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	4a35      	ldr	r2, [pc, #212]	@ (8010cb4 <UART_SetConfig+0x344>)
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d130      	bne.n	8010c44 <UART_SetConfig+0x2d4>
 8010be2:	4b31      	ldr	r3, [pc, #196]	@ (8010ca8 <UART_SetConfig+0x338>)
 8010be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010be6:	f003 0307 	and.w	r3, r3, #7
 8010bea:	2b05      	cmp	r3, #5
 8010bec:	d826      	bhi.n	8010c3c <UART_SetConfig+0x2cc>
 8010bee:	a201      	add	r2, pc, #4	@ (adr r2, 8010bf4 <UART_SetConfig+0x284>)
 8010bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bf4:	08010c0d 	.word	0x08010c0d
 8010bf8:	08010c15 	.word	0x08010c15
 8010bfc:	08010c1d 	.word	0x08010c1d
 8010c00:	08010c25 	.word	0x08010c25
 8010c04:	08010c2d 	.word	0x08010c2d
 8010c08:	08010c35 	.word	0x08010c35
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c12:	e284      	b.n	801111e <UART_SetConfig+0x7ae>
 8010c14:	2304      	movs	r3, #4
 8010c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c1a:	e280      	b.n	801111e <UART_SetConfig+0x7ae>
 8010c1c:	2308      	movs	r3, #8
 8010c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c22:	e27c      	b.n	801111e <UART_SetConfig+0x7ae>
 8010c24:	2310      	movs	r3, #16
 8010c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c2a:	e278      	b.n	801111e <UART_SetConfig+0x7ae>
 8010c2c:	2320      	movs	r3, #32
 8010c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c32:	e274      	b.n	801111e <UART_SetConfig+0x7ae>
 8010c34:	2340      	movs	r3, #64	@ 0x40
 8010c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c3a:	e270      	b.n	801111e <UART_SetConfig+0x7ae>
 8010c3c:	2380      	movs	r3, #128	@ 0x80
 8010c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c42:	e26c      	b.n	801111e <UART_SetConfig+0x7ae>
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	4a1b      	ldr	r2, [pc, #108]	@ (8010cb8 <UART_SetConfig+0x348>)
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	d142      	bne.n	8010cd4 <UART_SetConfig+0x364>
 8010c4e:	4b16      	ldr	r3, [pc, #88]	@ (8010ca8 <UART_SetConfig+0x338>)
 8010c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c52:	f003 0307 	and.w	r3, r3, #7
 8010c56:	2b05      	cmp	r3, #5
 8010c58:	d838      	bhi.n	8010ccc <UART_SetConfig+0x35c>
 8010c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8010c60 <UART_SetConfig+0x2f0>)
 8010c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c60:	08010c79 	.word	0x08010c79
 8010c64:	08010c81 	.word	0x08010c81
 8010c68:	08010c89 	.word	0x08010c89
 8010c6c:	08010c91 	.word	0x08010c91
 8010c70:	08010cbd 	.word	0x08010cbd
 8010c74:	08010cc5 	.word	0x08010cc5
 8010c78:	2300      	movs	r3, #0
 8010c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c7e:	e24e      	b.n	801111e <UART_SetConfig+0x7ae>
 8010c80:	2304      	movs	r3, #4
 8010c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c86:	e24a      	b.n	801111e <UART_SetConfig+0x7ae>
 8010c88:	2308      	movs	r3, #8
 8010c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c8e:	e246      	b.n	801111e <UART_SetConfig+0x7ae>
 8010c90:	2310      	movs	r3, #16
 8010c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c96:	e242      	b.n	801111e <UART_SetConfig+0x7ae>
 8010c98:	cfff69f3 	.word	0xcfff69f3
 8010c9c:	58000c00 	.word	0x58000c00
 8010ca0:	11fff4ff 	.word	0x11fff4ff
 8010ca4:	40011000 	.word	0x40011000
 8010ca8:	58024400 	.word	0x58024400
 8010cac:	40004400 	.word	0x40004400
 8010cb0:	40004800 	.word	0x40004800
 8010cb4:	40004c00 	.word	0x40004c00
 8010cb8:	40005000 	.word	0x40005000
 8010cbc:	2320      	movs	r3, #32
 8010cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cc2:	e22c      	b.n	801111e <UART_SetConfig+0x7ae>
 8010cc4:	2340      	movs	r3, #64	@ 0x40
 8010cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cca:	e228      	b.n	801111e <UART_SetConfig+0x7ae>
 8010ccc:	2380      	movs	r3, #128	@ 0x80
 8010cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cd2:	e224      	b.n	801111e <UART_SetConfig+0x7ae>
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	4ab1      	ldr	r2, [pc, #708]	@ (8010fa0 <UART_SetConfig+0x630>)
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d176      	bne.n	8010dcc <UART_SetConfig+0x45c>
 8010cde:	4bb1      	ldr	r3, [pc, #708]	@ (8010fa4 <UART_SetConfig+0x634>)
 8010ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ce2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010ce6:	2b28      	cmp	r3, #40	@ 0x28
 8010ce8:	d86c      	bhi.n	8010dc4 <UART_SetConfig+0x454>
 8010cea:	a201      	add	r2, pc, #4	@ (adr r2, 8010cf0 <UART_SetConfig+0x380>)
 8010cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cf0:	08010d95 	.word	0x08010d95
 8010cf4:	08010dc5 	.word	0x08010dc5
 8010cf8:	08010dc5 	.word	0x08010dc5
 8010cfc:	08010dc5 	.word	0x08010dc5
 8010d00:	08010dc5 	.word	0x08010dc5
 8010d04:	08010dc5 	.word	0x08010dc5
 8010d08:	08010dc5 	.word	0x08010dc5
 8010d0c:	08010dc5 	.word	0x08010dc5
 8010d10:	08010d9d 	.word	0x08010d9d
 8010d14:	08010dc5 	.word	0x08010dc5
 8010d18:	08010dc5 	.word	0x08010dc5
 8010d1c:	08010dc5 	.word	0x08010dc5
 8010d20:	08010dc5 	.word	0x08010dc5
 8010d24:	08010dc5 	.word	0x08010dc5
 8010d28:	08010dc5 	.word	0x08010dc5
 8010d2c:	08010dc5 	.word	0x08010dc5
 8010d30:	08010da5 	.word	0x08010da5
 8010d34:	08010dc5 	.word	0x08010dc5
 8010d38:	08010dc5 	.word	0x08010dc5
 8010d3c:	08010dc5 	.word	0x08010dc5
 8010d40:	08010dc5 	.word	0x08010dc5
 8010d44:	08010dc5 	.word	0x08010dc5
 8010d48:	08010dc5 	.word	0x08010dc5
 8010d4c:	08010dc5 	.word	0x08010dc5
 8010d50:	08010dad 	.word	0x08010dad
 8010d54:	08010dc5 	.word	0x08010dc5
 8010d58:	08010dc5 	.word	0x08010dc5
 8010d5c:	08010dc5 	.word	0x08010dc5
 8010d60:	08010dc5 	.word	0x08010dc5
 8010d64:	08010dc5 	.word	0x08010dc5
 8010d68:	08010dc5 	.word	0x08010dc5
 8010d6c:	08010dc5 	.word	0x08010dc5
 8010d70:	08010db5 	.word	0x08010db5
 8010d74:	08010dc5 	.word	0x08010dc5
 8010d78:	08010dc5 	.word	0x08010dc5
 8010d7c:	08010dc5 	.word	0x08010dc5
 8010d80:	08010dc5 	.word	0x08010dc5
 8010d84:	08010dc5 	.word	0x08010dc5
 8010d88:	08010dc5 	.word	0x08010dc5
 8010d8c:	08010dc5 	.word	0x08010dc5
 8010d90:	08010dbd 	.word	0x08010dbd
 8010d94:	2301      	movs	r3, #1
 8010d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d9a:	e1c0      	b.n	801111e <UART_SetConfig+0x7ae>
 8010d9c:	2304      	movs	r3, #4
 8010d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010da2:	e1bc      	b.n	801111e <UART_SetConfig+0x7ae>
 8010da4:	2308      	movs	r3, #8
 8010da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010daa:	e1b8      	b.n	801111e <UART_SetConfig+0x7ae>
 8010dac:	2310      	movs	r3, #16
 8010dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010db2:	e1b4      	b.n	801111e <UART_SetConfig+0x7ae>
 8010db4:	2320      	movs	r3, #32
 8010db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dba:	e1b0      	b.n	801111e <UART_SetConfig+0x7ae>
 8010dbc:	2340      	movs	r3, #64	@ 0x40
 8010dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dc2:	e1ac      	b.n	801111e <UART_SetConfig+0x7ae>
 8010dc4:	2380      	movs	r3, #128	@ 0x80
 8010dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dca:	e1a8      	b.n	801111e <UART_SetConfig+0x7ae>
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4a75      	ldr	r2, [pc, #468]	@ (8010fa8 <UART_SetConfig+0x638>)
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	d130      	bne.n	8010e38 <UART_SetConfig+0x4c8>
 8010dd6:	4b73      	ldr	r3, [pc, #460]	@ (8010fa4 <UART_SetConfig+0x634>)
 8010dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010dda:	f003 0307 	and.w	r3, r3, #7
 8010dde:	2b05      	cmp	r3, #5
 8010de0:	d826      	bhi.n	8010e30 <UART_SetConfig+0x4c0>
 8010de2:	a201      	add	r2, pc, #4	@ (adr r2, 8010de8 <UART_SetConfig+0x478>)
 8010de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010de8:	08010e01 	.word	0x08010e01
 8010dec:	08010e09 	.word	0x08010e09
 8010df0:	08010e11 	.word	0x08010e11
 8010df4:	08010e19 	.word	0x08010e19
 8010df8:	08010e21 	.word	0x08010e21
 8010dfc:	08010e29 	.word	0x08010e29
 8010e00:	2300      	movs	r3, #0
 8010e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e06:	e18a      	b.n	801111e <UART_SetConfig+0x7ae>
 8010e08:	2304      	movs	r3, #4
 8010e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e0e:	e186      	b.n	801111e <UART_SetConfig+0x7ae>
 8010e10:	2308      	movs	r3, #8
 8010e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e16:	e182      	b.n	801111e <UART_SetConfig+0x7ae>
 8010e18:	2310      	movs	r3, #16
 8010e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e1e:	e17e      	b.n	801111e <UART_SetConfig+0x7ae>
 8010e20:	2320      	movs	r3, #32
 8010e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e26:	e17a      	b.n	801111e <UART_SetConfig+0x7ae>
 8010e28:	2340      	movs	r3, #64	@ 0x40
 8010e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e2e:	e176      	b.n	801111e <UART_SetConfig+0x7ae>
 8010e30:	2380      	movs	r3, #128	@ 0x80
 8010e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e36:	e172      	b.n	801111e <UART_SetConfig+0x7ae>
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	4a5b      	ldr	r2, [pc, #364]	@ (8010fac <UART_SetConfig+0x63c>)
 8010e3e:	4293      	cmp	r3, r2
 8010e40:	d130      	bne.n	8010ea4 <UART_SetConfig+0x534>
 8010e42:	4b58      	ldr	r3, [pc, #352]	@ (8010fa4 <UART_SetConfig+0x634>)
 8010e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010e46:	f003 0307 	and.w	r3, r3, #7
 8010e4a:	2b05      	cmp	r3, #5
 8010e4c:	d826      	bhi.n	8010e9c <UART_SetConfig+0x52c>
 8010e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8010e54 <UART_SetConfig+0x4e4>)
 8010e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e54:	08010e6d 	.word	0x08010e6d
 8010e58:	08010e75 	.word	0x08010e75
 8010e5c:	08010e7d 	.word	0x08010e7d
 8010e60:	08010e85 	.word	0x08010e85
 8010e64:	08010e8d 	.word	0x08010e8d
 8010e68:	08010e95 	.word	0x08010e95
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e72:	e154      	b.n	801111e <UART_SetConfig+0x7ae>
 8010e74:	2304      	movs	r3, #4
 8010e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e7a:	e150      	b.n	801111e <UART_SetConfig+0x7ae>
 8010e7c:	2308      	movs	r3, #8
 8010e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e82:	e14c      	b.n	801111e <UART_SetConfig+0x7ae>
 8010e84:	2310      	movs	r3, #16
 8010e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e8a:	e148      	b.n	801111e <UART_SetConfig+0x7ae>
 8010e8c:	2320      	movs	r3, #32
 8010e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e92:	e144      	b.n	801111e <UART_SetConfig+0x7ae>
 8010e94:	2340      	movs	r3, #64	@ 0x40
 8010e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e9a:	e140      	b.n	801111e <UART_SetConfig+0x7ae>
 8010e9c:	2380      	movs	r3, #128	@ 0x80
 8010e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ea2:	e13c      	b.n	801111e <UART_SetConfig+0x7ae>
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	4a41      	ldr	r2, [pc, #260]	@ (8010fb0 <UART_SetConfig+0x640>)
 8010eaa:	4293      	cmp	r3, r2
 8010eac:	f040 8082 	bne.w	8010fb4 <UART_SetConfig+0x644>
 8010eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8010fa4 <UART_SetConfig+0x634>)
 8010eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010eb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010eb8:	2b28      	cmp	r3, #40	@ 0x28
 8010eba:	d86d      	bhi.n	8010f98 <UART_SetConfig+0x628>
 8010ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8010ec4 <UART_SetConfig+0x554>)
 8010ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ec2:	bf00      	nop
 8010ec4:	08010f69 	.word	0x08010f69
 8010ec8:	08010f99 	.word	0x08010f99
 8010ecc:	08010f99 	.word	0x08010f99
 8010ed0:	08010f99 	.word	0x08010f99
 8010ed4:	08010f99 	.word	0x08010f99
 8010ed8:	08010f99 	.word	0x08010f99
 8010edc:	08010f99 	.word	0x08010f99
 8010ee0:	08010f99 	.word	0x08010f99
 8010ee4:	08010f71 	.word	0x08010f71
 8010ee8:	08010f99 	.word	0x08010f99
 8010eec:	08010f99 	.word	0x08010f99
 8010ef0:	08010f99 	.word	0x08010f99
 8010ef4:	08010f99 	.word	0x08010f99
 8010ef8:	08010f99 	.word	0x08010f99
 8010efc:	08010f99 	.word	0x08010f99
 8010f00:	08010f99 	.word	0x08010f99
 8010f04:	08010f79 	.word	0x08010f79
 8010f08:	08010f99 	.word	0x08010f99
 8010f0c:	08010f99 	.word	0x08010f99
 8010f10:	08010f99 	.word	0x08010f99
 8010f14:	08010f99 	.word	0x08010f99
 8010f18:	08010f99 	.word	0x08010f99
 8010f1c:	08010f99 	.word	0x08010f99
 8010f20:	08010f99 	.word	0x08010f99
 8010f24:	08010f81 	.word	0x08010f81
 8010f28:	08010f99 	.word	0x08010f99
 8010f2c:	08010f99 	.word	0x08010f99
 8010f30:	08010f99 	.word	0x08010f99
 8010f34:	08010f99 	.word	0x08010f99
 8010f38:	08010f99 	.word	0x08010f99
 8010f3c:	08010f99 	.word	0x08010f99
 8010f40:	08010f99 	.word	0x08010f99
 8010f44:	08010f89 	.word	0x08010f89
 8010f48:	08010f99 	.word	0x08010f99
 8010f4c:	08010f99 	.word	0x08010f99
 8010f50:	08010f99 	.word	0x08010f99
 8010f54:	08010f99 	.word	0x08010f99
 8010f58:	08010f99 	.word	0x08010f99
 8010f5c:	08010f99 	.word	0x08010f99
 8010f60:	08010f99 	.word	0x08010f99
 8010f64:	08010f91 	.word	0x08010f91
 8010f68:	2301      	movs	r3, #1
 8010f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f6e:	e0d6      	b.n	801111e <UART_SetConfig+0x7ae>
 8010f70:	2304      	movs	r3, #4
 8010f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f76:	e0d2      	b.n	801111e <UART_SetConfig+0x7ae>
 8010f78:	2308      	movs	r3, #8
 8010f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f7e:	e0ce      	b.n	801111e <UART_SetConfig+0x7ae>
 8010f80:	2310      	movs	r3, #16
 8010f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f86:	e0ca      	b.n	801111e <UART_SetConfig+0x7ae>
 8010f88:	2320      	movs	r3, #32
 8010f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f8e:	e0c6      	b.n	801111e <UART_SetConfig+0x7ae>
 8010f90:	2340      	movs	r3, #64	@ 0x40
 8010f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f96:	e0c2      	b.n	801111e <UART_SetConfig+0x7ae>
 8010f98:	2380      	movs	r3, #128	@ 0x80
 8010f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f9e:	e0be      	b.n	801111e <UART_SetConfig+0x7ae>
 8010fa0:	40011400 	.word	0x40011400
 8010fa4:	58024400 	.word	0x58024400
 8010fa8:	40007800 	.word	0x40007800
 8010fac:	40007c00 	.word	0x40007c00
 8010fb0:	40011800 	.word	0x40011800
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	4aad      	ldr	r2, [pc, #692]	@ (8011270 <UART_SetConfig+0x900>)
 8010fba:	4293      	cmp	r3, r2
 8010fbc:	d176      	bne.n	80110ac <UART_SetConfig+0x73c>
 8010fbe:	4bad      	ldr	r3, [pc, #692]	@ (8011274 <UART_SetConfig+0x904>)
 8010fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010fc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010fc6:	2b28      	cmp	r3, #40	@ 0x28
 8010fc8:	d86c      	bhi.n	80110a4 <UART_SetConfig+0x734>
 8010fca:	a201      	add	r2, pc, #4	@ (adr r2, 8010fd0 <UART_SetConfig+0x660>)
 8010fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fd0:	08011075 	.word	0x08011075
 8010fd4:	080110a5 	.word	0x080110a5
 8010fd8:	080110a5 	.word	0x080110a5
 8010fdc:	080110a5 	.word	0x080110a5
 8010fe0:	080110a5 	.word	0x080110a5
 8010fe4:	080110a5 	.word	0x080110a5
 8010fe8:	080110a5 	.word	0x080110a5
 8010fec:	080110a5 	.word	0x080110a5
 8010ff0:	0801107d 	.word	0x0801107d
 8010ff4:	080110a5 	.word	0x080110a5
 8010ff8:	080110a5 	.word	0x080110a5
 8010ffc:	080110a5 	.word	0x080110a5
 8011000:	080110a5 	.word	0x080110a5
 8011004:	080110a5 	.word	0x080110a5
 8011008:	080110a5 	.word	0x080110a5
 801100c:	080110a5 	.word	0x080110a5
 8011010:	08011085 	.word	0x08011085
 8011014:	080110a5 	.word	0x080110a5
 8011018:	080110a5 	.word	0x080110a5
 801101c:	080110a5 	.word	0x080110a5
 8011020:	080110a5 	.word	0x080110a5
 8011024:	080110a5 	.word	0x080110a5
 8011028:	080110a5 	.word	0x080110a5
 801102c:	080110a5 	.word	0x080110a5
 8011030:	0801108d 	.word	0x0801108d
 8011034:	080110a5 	.word	0x080110a5
 8011038:	080110a5 	.word	0x080110a5
 801103c:	080110a5 	.word	0x080110a5
 8011040:	080110a5 	.word	0x080110a5
 8011044:	080110a5 	.word	0x080110a5
 8011048:	080110a5 	.word	0x080110a5
 801104c:	080110a5 	.word	0x080110a5
 8011050:	08011095 	.word	0x08011095
 8011054:	080110a5 	.word	0x080110a5
 8011058:	080110a5 	.word	0x080110a5
 801105c:	080110a5 	.word	0x080110a5
 8011060:	080110a5 	.word	0x080110a5
 8011064:	080110a5 	.word	0x080110a5
 8011068:	080110a5 	.word	0x080110a5
 801106c:	080110a5 	.word	0x080110a5
 8011070:	0801109d 	.word	0x0801109d
 8011074:	2301      	movs	r3, #1
 8011076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801107a:	e050      	b.n	801111e <UART_SetConfig+0x7ae>
 801107c:	2304      	movs	r3, #4
 801107e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011082:	e04c      	b.n	801111e <UART_SetConfig+0x7ae>
 8011084:	2308      	movs	r3, #8
 8011086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801108a:	e048      	b.n	801111e <UART_SetConfig+0x7ae>
 801108c:	2310      	movs	r3, #16
 801108e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011092:	e044      	b.n	801111e <UART_SetConfig+0x7ae>
 8011094:	2320      	movs	r3, #32
 8011096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801109a:	e040      	b.n	801111e <UART_SetConfig+0x7ae>
 801109c:	2340      	movs	r3, #64	@ 0x40
 801109e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110a2:	e03c      	b.n	801111e <UART_SetConfig+0x7ae>
 80110a4:	2380      	movs	r3, #128	@ 0x80
 80110a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110aa:	e038      	b.n	801111e <UART_SetConfig+0x7ae>
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	4a71      	ldr	r2, [pc, #452]	@ (8011278 <UART_SetConfig+0x908>)
 80110b2:	4293      	cmp	r3, r2
 80110b4:	d130      	bne.n	8011118 <UART_SetConfig+0x7a8>
 80110b6:	4b6f      	ldr	r3, [pc, #444]	@ (8011274 <UART_SetConfig+0x904>)
 80110b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80110ba:	f003 0307 	and.w	r3, r3, #7
 80110be:	2b05      	cmp	r3, #5
 80110c0:	d826      	bhi.n	8011110 <UART_SetConfig+0x7a0>
 80110c2:	a201      	add	r2, pc, #4	@ (adr r2, 80110c8 <UART_SetConfig+0x758>)
 80110c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110c8:	080110e1 	.word	0x080110e1
 80110cc:	080110e9 	.word	0x080110e9
 80110d0:	080110f1 	.word	0x080110f1
 80110d4:	080110f9 	.word	0x080110f9
 80110d8:	08011101 	.word	0x08011101
 80110dc:	08011109 	.word	0x08011109
 80110e0:	2302      	movs	r3, #2
 80110e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110e6:	e01a      	b.n	801111e <UART_SetConfig+0x7ae>
 80110e8:	2304      	movs	r3, #4
 80110ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110ee:	e016      	b.n	801111e <UART_SetConfig+0x7ae>
 80110f0:	2308      	movs	r3, #8
 80110f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110f6:	e012      	b.n	801111e <UART_SetConfig+0x7ae>
 80110f8:	2310      	movs	r3, #16
 80110fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110fe:	e00e      	b.n	801111e <UART_SetConfig+0x7ae>
 8011100:	2320      	movs	r3, #32
 8011102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011106:	e00a      	b.n	801111e <UART_SetConfig+0x7ae>
 8011108:	2340      	movs	r3, #64	@ 0x40
 801110a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801110e:	e006      	b.n	801111e <UART_SetConfig+0x7ae>
 8011110:	2380      	movs	r3, #128	@ 0x80
 8011112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011116:	e002      	b.n	801111e <UART_SetConfig+0x7ae>
 8011118:	2380      	movs	r3, #128	@ 0x80
 801111a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	4a55      	ldr	r2, [pc, #340]	@ (8011278 <UART_SetConfig+0x908>)
 8011124:	4293      	cmp	r3, r2
 8011126:	f040 80f8 	bne.w	801131a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801112a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801112e:	2b20      	cmp	r3, #32
 8011130:	dc46      	bgt.n	80111c0 <UART_SetConfig+0x850>
 8011132:	2b02      	cmp	r3, #2
 8011134:	db75      	blt.n	8011222 <UART_SetConfig+0x8b2>
 8011136:	3b02      	subs	r3, #2
 8011138:	2b1e      	cmp	r3, #30
 801113a:	d872      	bhi.n	8011222 <UART_SetConfig+0x8b2>
 801113c:	a201      	add	r2, pc, #4	@ (adr r2, 8011144 <UART_SetConfig+0x7d4>)
 801113e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011142:	bf00      	nop
 8011144:	080111c7 	.word	0x080111c7
 8011148:	08011223 	.word	0x08011223
 801114c:	080111cf 	.word	0x080111cf
 8011150:	08011223 	.word	0x08011223
 8011154:	08011223 	.word	0x08011223
 8011158:	08011223 	.word	0x08011223
 801115c:	080111df 	.word	0x080111df
 8011160:	08011223 	.word	0x08011223
 8011164:	08011223 	.word	0x08011223
 8011168:	08011223 	.word	0x08011223
 801116c:	08011223 	.word	0x08011223
 8011170:	08011223 	.word	0x08011223
 8011174:	08011223 	.word	0x08011223
 8011178:	08011223 	.word	0x08011223
 801117c:	080111ef 	.word	0x080111ef
 8011180:	08011223 	.word	0x08011223
 8011184:	08011223 	.word	0x08011223
 8011188:	08011223 	.word	0x08011223
 801118c:	08011223 	.word	0x08011223
 8011190:	08011223 	.word	0x08011223
 8011194:	08011223 	.word	0x08011223
 8011198:	08011223 	.word	0x08011223
 801119c:	08011223 	.word	0x08011223
 80111a0:	08011223 	.word	0x08011223
 80111a4:	08011223 	.word	0x08011223
 80111a8:	08011223 	.word	0x08011223
 80111ac:	08011223 	.word	0x08011223
 80111b0:	08011223 	.word	0x08011223
 80111b4:	08011223 	.word	0x08011223
 80111b8:	08011223 	.word	0x08011223
 80111bc:	08011215 	.word	0x08011215
 80111c0:	2b40      	cmp	r3, #64	@ 0x40
 80111c2:	d02a      	beq.n	801121a <UART_SetConfig+0x8aa>
 80111c4:	e02d      	b.n	8011222 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80111c6:	f7fc fe35 	bl	800de34 <HAL_RCCEx_GetD3PCLK1Freq>
 80111ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80111cc:	e02f      	b.n	801122e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80111ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fc fe44 	bl	800de60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80111d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111dc:	e027      	b.n	801122e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80111de:	f107 0318 	add.w	r3, r7, #24
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7fc ff90 	bl	800e108 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80111e8:	69fb      	ldr	r3, [r7, #28]
 80111ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111ec:	e01f      	b.n	801122e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80111ee:	4b21      	ldr	r3, [pc, #132]	@ (8011274 <UART_SetConfig+0x904>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	f003 0320 	and.w	r3, r3, #32
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d009      	beq.n	801120e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80111fa:	4b1e      	ldr	r3, [pc, #120]	@ (8011274 <UART_SetConfig+0x904>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	08db      	lsrs	r3, r3, #3
 8011200:	f003 0303 	and.w	r3, r3, #3
 8011204:	4a1d      	ldr	r2, [pc, #116]	@ (801127c <UART_SetConfig+0x90c>)
 8011206:	fa22 f303 	lsr.w	r3, r2, r3
 801120a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801120c:	e00f      	b.n	801122e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801120e:	4b1b      	ldr	r3, [pc, #108]	@ (801127c <UART_SetConfig+0x90c>)
 8011210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011212:	e00c      	b.n	801122e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011214:	4b1a      	ldr	r3, [pc, #104]	@ (8011280 <UART_SetConfig+0x910>)
 8011216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011218:	e009      	b.n	801122e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801121a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801121e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011220:	e005      	b.n	801122e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011222:	2300      	movs	r3, #0
 8011224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011226:	2301      	movs	r3, #1
 8011228:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801122c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801122e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011230:	2b00      	cmp	r3, #0
 8011232:	f000 81ee 	beq.w	8011612 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801123a:	4a12      	ldr	r2, [pc, #72]	@ (8011284 <UART_SetConfig+0x914>)
 801123c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011240:	461a      	mov	r2, r3
 8011242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011244:	fbb3 f3f2 	udiv	r3, r3, r2
 8011248:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	685a      	ldr	r2, [r3, #4]
 801124e:	4613      	mov	r3, r2
 8011250:	005b      	lsls	r3, r3, #1
 8011252:	4413      	add	r3, r2
 8011254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011256:	429a      	cmp	r2, r3
 8011258:	d305      	bcc.n	8011266 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011262:	429a      	cmp	r2, r3
 8011264:	d910      	bls.n	8011288 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011266:	2301      	movs	r3, #1
 8011268:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801126c:	e1d1      	b.n	8011612 <UART_SetConfig+0xca2>
 801126e:	bf00      	nop
 8011270:	40011c00 	.word	0x40011c00
 8011274:	58024400 	.word	0x58024400
 8011278:	58000c00 	.word	0x58000c00
 801127c:	03d09000 	.word	0x03d09000
 8011280:	003d0900 	.word	0x003d0900
 8011284:	0801c934 	.word	0x0801c934
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801128a:	2200      	movs	r2, #0
 801128c:	60bb      	str	r3, [r7, #8]
 801128e:	60fa      	str	r2, [r7, #12]
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011294:	4ac0      	ldr	r2, [pc, #768]	@ (8011598 <UART_SetConfig+0xc28>)
 8011296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801129a:	b29b      	uxth	r3, r3
 801129c:	2200      	movs	r2, #0
 801129e:	603b      	str	r3, [r7, #0]
 80112a0:	607a      	str	r2, [r7, #4]
 80112a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80112a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80112aa:	f7ef fa45 	bl	8000738 <__aeabi_uldivmod>
 80112ae:	4602      	mov	r2, r0
 80112b0:	460b      	mov	r3, r1
 80112b2:	4610      	mov	r0, r2
 80112b4:	4619      	mov	r1, r3
 80112b6:	f04f 0200 	mov.w	r2, #0
 80112ba:	f04f 0300 	mov.w	r3, #0
 80112be:	020b      	lsls	r3, r1, #8
 80112c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80112c4:	0202      	lsls	r2, r0, #8
 80112c6:	6979      	ldr	r1, [r7, #20]
 80112c8:	6849      	ldr	r1, [r1, #4]
 80112ca:	0849      	lsrs	r1, r1, #1
 80112cc:	2000      	movs	r0, #0
 80112ce:	460c      	mov	r4, r1
 80112d0:	4605      	mov	r5, r0
 80112d2:	eb12 0804 	adds.w	r8, r2, r4
 80112d6:	eb43 0905 	adc.w	r9, r3, r5
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	2200      	movs	r2, #0
 80112e0:	469a      	mov	sl, r3
 80112e2:	4693      	mov	fp, r2
 80112e4:	4652      	mov	r2, sl
 80112e6:	465b      	mov	r3, fp
 80112e8:	4640      	mov	r0, r8
 80112ea:	4649      	mov	r1, r9
 80112ec:	f7ef fa24 	bl	8000738 <__aeabi_uldivmod>
 80112f0:	4602      	mov	r2, r0
 80112f2:	460b      	mov	r3, r1
 80112f4:	4613      	mov	r3, r2
 80112f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80112f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80112fe:	d308      	bcc.n	8011312 <UART_SetConfig+0x9a2>
 8011300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011306:	d204      	bcs.n	8011312 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011308:	697b      	ldr	r3, [r7, #20]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801130e:	60da      	str	r2, [r3, #12]
 8011310:	e17f      	b.n	8011612 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011312:	2301      	movs	r3, #1
 8011314:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011318:	e17b      	b.n	8011612 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	69db      	ldr	r3, [r3, #28]
 801131e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011322:	f040 80bd 	bne.w	80114a0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011326:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801132a:	2b20      	cmp	r3, #32
 801132c:	dc48      	bgt.n	80113c0 <UART_SetConfig+0xa50>
 801132e:	2b00      	cmp	r3, #0
 8011330:	db7b      	blt.n	801142a <UART_SetConfig+0xaba>
 8011332:	2b20      	cmp	r3, #32
 8011334:	d879      	bhi.n	801142a <UART_SetConfig+0xaba>
 8011336:	a201      	add	r2, pc, #4	@ (adr r2, 801133c <UART_SetConfig+0x9cc>)
 8011338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801133c:	080113c7 	.word	0x080113c7
 8011340:	080113cf 	.word	0x080113cf
 8011344:	0801142b 	.word	0x0801142b
 8011348:	0801142b 	.word	0x0801142b
 801134c:	080113d7 	.word	0x080113d7
 8011350:	0801142b 	.word	0x0801142b
 8011354:	0801142b 	.word	0x0801142b
 8011358:	0801142b 	.word	0x0801142b
 801135c:	080113e7 	.word	0x080113e7
 8011360:	0801142b 	.word	0x0801142b
 8011364:	0801142b 	.word	0x0801142b
 8011368:	0801142b 	.word	0x0801142b
 801136c:	0801142b 	.word	0x0801142b
 8011370:	0801142b 	.word	0x0801142b
 8011374:	0801142b 	.word	0x0801142b
 8011378:	0801142b 	.word	0x0801142b
 801137c:	080113f7 	.word	0x080113f7
 8011380:	0801142b 	.word	0x0801142b
 8011384:	0801142b 	.word	0x0801142b
 8011388:	0801142b 	.word	0x0801142b
 801138c:	0801142b 	.word	0x0801142b
 8011390:	0801142b 	.word	0x0801142b
 8011394:	0801142b 	.word	0x0801142b
 8011398:	0801142b 	.word	0x0801142b
 801139c:	0801142b 	.word	0x0801142b
 80113a0:	0801142b 	.word	0x0801142b
 80113a4:	0801142b 	.word	0x0801142b
 80113a8:	0801142b 	.word	0x0801142b
 80113ac:	0801142b 	.word	0x0801142b
 80113b0:	0801142b 	.word	0x0801142b
 80113b4:	0801142b 	.word	0x0801142b
 80113b8:	0801142b 	.word	0x0801142b
 80113bc:	0801141d 	.word	0x0801141d
 80113c0:	2b40      	cmp	r3, #64	@ 0x40
 80113c2:	d02e      	beq.n	8011422 <UART_SetConfig+0xab2>
 80113c4:	e031      	b.n	801142a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80113c6:	f7fa fe97 	bl	800c0f8 <HAL_RCC_GetPCLK1Freq>
 80113ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80113cc:	e033      	b.n	8011436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80113ce:	f7fa fea9 	bl	800c124 <HAL_RCC_GetPCLK2Freq>
 80113d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80113d4:	e02f      	b.n	8011436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80113d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80113da:	4618      	mov	r0, r3
 80113dc:	f7fc fd40 	bl	800de60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80113e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113e4:	e027      	b.n	8011436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80113e6:	f107 0318 	add.w	r3, r7, #24
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7fc fe8c 	bl	800e108 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80113f0:	69fb      	ldr	r3, [r7, #28]
 80113f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113f4:	e01f      	b.n	8011436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80113f6:	4b69      	ldr	r3, [pc, #420]	@ (801159c <UART_SetConfig+0xc2c>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	f003 0320 	and.w	r3, r3, #32
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d009      	beq.n	8011416 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011402:	4b66      	ldr	r3, [pc, #408]	@ (801159c <UART_SetConfig+0xc2c>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	08db      	lsrs	r3, r3, #3
 8011408:	f003 0303 	and.w	r3, r3, #3
 801140c:	4a64      	ldr	r2, [pc, #400]	@ (80115a0 <UART_SetConfig+0xc30>)
 801140e:	fa22 f303 	lsr.w	r3, r2, r3
 8011412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011414:	e00f      	b.n	8011436 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011416:	4b62      	ldr	r3, [pc, #392]	@ (80115a0 <UART_SetConfig+0xc30>)
 8011418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801141a:	e00c      	b.n	8011436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801141c:	4b61      	ldr	r3, [pc, #388]	@ (80115a4 <UART_SetConfig+0xc34>)
 801141e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011420:	e009      	b.n	8011436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011428:	e005      	b.n	8011436 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801142a:	2300      	movs	r3, #0
 801142c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801142e:	2301      	movs	r3, #1
 8011430:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011438:	2b00      	cmp	r3, #0
 801143a:	f000 80ea 	beq.w	8011612 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011442:	4a55      	ldr	r2, [pc, #340]	@ (8011598 <UART_SetConfig+0xc28>)
 8011444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011448:	461a      	mov	r2, r3
 801144a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801144c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011450:	005a      	lsls	r2, r3, #1
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	685b      	ldr	r3, [r3, #4]
 8011456:	085b      	lsrs	r3, r3, #1
 8011458:	441a      	add	r2, r3
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	685b      	ldr	r3, [r3, #4]
 801145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011462:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011466:	2b0f      	cmp	r3, #15
 8011468:	d916      	bls.n	8011498 <UART_SetConfig+0xb28>
 801146a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801146c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011470:	d212      	bcs.n	8011498 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011474:	b29b      	uxth	r3, r3
 8011476:	f023 030f 	bic.w	r3, r3, #15
 801147a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801147c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801147e:	085b      	lsrs	r3, r3, #1
 8011480:	b29b      	uxth	r3, r3
 8011482:	f003 0307 	and.w	r3, r3, #7
 8011486:	b29a      	uxth	r2, r3
 8011488:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801148a:	4313      	orrs	r3, r2
 801148c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8011494:	60da      	str	r2, [r3, #12]
 8011496:	e0bc      	b.n	8011612 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011498:	2301      	movs	r3, #1
 801149a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801149e:	e0b8      	b.n	8011612 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80114a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80114a4:	2b20      	cmp	r3, #32
 80114a6:	dc4b      	bgt.n	8011540 <UART_SetConfig+0xbd0>
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	f2c0 8087 	blt.w	80115bc <UART_SetConfig+0xc4c>
 80114ae:	2b20      	cmp	r3, #32
 80114b0:	f200 8084 	bhi.w	80115bc <UART_SetConfig+0xc4c>
 80114b4:	a201      	add	r2, pc, #4	@ (adr r2, 80114bc <UART_SetConfig+0xb4c>)
 80114b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ba:	bf00      	nop
 80114bc:	08011547 	.word	0x08011547
 80114c0:	0801154f 	.word	0x0801154f
 80114c4:	080115bd 	.word	0x080115bd
 80114c8:	080115bd 	.word	0x080115bd
 80114cc:	08011557 	.word	0x08011557
 80114d0:	080115bd 	.word	0x080115bd
 80114d4:	080115bd 	.word	0x080115bd
 80114d8:	080115bd 	.word	0x080115bd
 80114dc:	08011567 	.word	0x08011567
 80114e0:	080115bd 	.word	0x080115bd
 80114e4:	080115bd 	.word	0x080115bd
 80114e8:	080115bd 	.word	0x080115bd
 80114ec:	080115bd 	.word	0x080115bd
 80114f0:	080115bd 	.word	0x080115bd
 80114f4:	080115bd 	.word	0x080115bd
 80114f8:	080115bd 	.word	0x080115bd
 80114fc:	08011577 	.word	0x08011577
 8011500:	080115bd 	.word	0x080115bd
 8011504:	080115bd 	.word	0x080115bd
 8011508:	080115bd 	.word	0x080115bd
 801150c:	080115bd 	.word	0x080115bd
 8011510:	080115bd 	.word	0x080115bd
 8011514:	080115bd 	.word	0x080115bd
 8011518:	080115bd 	.word	0x080115bd
 801151c:	080115bd 	.word	0x080115bd
 8011520:	080115bd 	.word	0x080115bd
 8011524:	080115bd 	.word	0x080115bd
 8011528:	080115bd 	.word	0x080115bd
 801152c:	080115bd 	.word	0x080115bd
 8011530:	080115bd 	.word	0x080115bd
 8011534:	080115bd 	.word	0x080115bd
 8011538:	080115bd 	.word	0x080115bd
 801153c:	080115af 	.word	0x080115af
 8011540:	2b40      	cmp	r3, #64	@ 0x40
 8011542:	d037      	beq.n	80115b4 <UART_SetConfig+0xc44>
 8011544:	e03a      	b.n	80115bc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011546:	f7fa fdd7 	bl	800c0f8 <HAL_RCC_GetPCLK1Freq>
 801154a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801154c:	e03c      	b.n	80115c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801154e:	f7fa fde9 	bl	800c124 <HAL_RCC_GetPCLK2Freq>
 8011552:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011554:	e038      	b.n	80115c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801155a:	4618      	mov	r0, r3
 801155c:	f7fc fc80 	bl	800de60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011564:	e030      	b.n	80115c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011566:	f107 0318 	add.w	r3, r7, #24
 801156a:	4618      	mov	r0, r3
 801156c:	f7fc fdcc 	bl	800e108 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011570:	69fb      	ldr	r3, [r7, #28]
 8011572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011574:	e028      	b.n	80115c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011576:	4b09      	ldr	r3, [pc, #36]	@ (801159c <UART_SetConfig+0xc2c>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	f003 0320 	and.w	r3, r3, #32
 801157e:	2b00      	cmp	r3, #0
 8011580:	d012      	beq.n	80115a8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011582:	4b06      	ldr	r3, [pc, #24]	@ (801159c <UART_SetConfig+0xc2c>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	08db      	lsrs	r3, r3, #3
 8011588:	f003 0303 	and.w	r3, r3, #3
 801158c:	4a04      	ldr	r2, [pc, #16]	@ (80115a0 <UART_SetConfig+0xc30>)
 801158e:	fa22 f303 	lsr.w	r3, r2, r3
 8011592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011594:	e018      	b.n	80115c8 <UART_SetConfig+0xc58>
 8011596:	bf00      	nop
 8011598:	0801c934 	.word	0x0801c934
 801159c:	58024400 	.word	0x58024400
 80115a0:	03d09000 	.word	0x03d09000
 80115a4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80115a8:	4b24      	ldr	r3, [pc, #144]	@ (801163c <UART_SetConfig+0xccc>)
 80115aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80115ac:	e00c      	b.n	80115c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80115ae:	4b24      	ldr	r3, [pc, #144]	@ (8011640 <UART_SetConfig+0xcd0>)
 80115b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80115b2:	e009      	b.n	80115c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80115b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80115b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80115ba:	e005      	b.n	80115c8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80115bc:	2300      	movs	r3, #0
 80115be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80115c0:	2301      	movs	r3, #1
 80115c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80115c6:	bf00      	nop
    }

    if (pclk != 0U)
 80115c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d021      	beq.n	8011612 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115d2:	4a1c      	ldr	r2, [pc, #112]	@ (8011644 <UART_SetConfig+0xcd4>)
 80115d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115d8:	461a      	mov	r2, r3
 80115da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80115e0:	697b      	ldr	r3, [r7, #20]
 80115e2:	685b      	ldr	r3, [r3, #4]
 80115e4:	085b      	lsrs	r3, r3, #1
 80115e6:	441a      	add	r2, r3
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80115f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80115f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115f4:	2b0f      	cmp	r3, #15
 80115f6:	d909      	bls.n	801160c <UART_SetConfig+0xc9c>
 80115f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80115fe:	d205      	bcs.n	801160c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011602:	b29a      	uxth	r2, r3
 8011604:	697b      	ldr	r3, [r7, #20]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	60da      	str	r2, [r3, #12]
 801160a:	e002      	b.n	8011612 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801160c:	2301      	movs	r3, #1
 801160e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	2201      	movs	r2, #1
 8011616:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	2201      	movs	r2, #1
 801161e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	2200      	movs	r2, #0
 8011626:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8011628:	697b      	ldr	r3, [r7, #20]
 801162a:	2200      	movs	r2, #0
 801162c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801162e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8011632:	4618      	mov	r0, r3
 8011634:	3748      	adds	r7, #72	@ 0x48
 8011636:	46bd      	mov	sp, r7
 8011638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801163c:	03d09000 	.word	0x03d09000
 8011640:	003d0900 	.word	0x003d0900
 8011644:	0801c934 	.word	0x0801c934

08011648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011648:	b480      	push	{r7}
 801164a:	b083      	sub	sp, #12
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011654:	f003 0308 	and.w	r3, r3, #8
 8011658:	2b00      	cmp	r3, #0
 801165a:	d00a      	beq.n	8011672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	430a      	orrs	r2, r1
 8011670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011676:	f003 0301 	and.w	r3, r3, #1
 801167a:	2b00      	cmp	r3, #0
 801167c:	d00a      	beq.n	8011694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	685b      	ldr	r3, [r3, #4]
 8011684:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	430a      	orrs	r2, r1
 8011692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011698:	f003 0302 	and.w	r3, r3, #2
 801169c:	2b00      	cmp	r3, #0
 801169e:	d00a      	beq.n	80116b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	685b      	ldr	r3, [r3, #4]
 80116a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	430a      	orrs	r2, r1
 80116b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116ba:	f003 0304 	and.w	r3, r3, #4
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d00a      	beq.n	80116d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	430a      	orrs	r2, r1
 80116d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116dc:	f003 0310 	and.w	r3, r3, #16
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d00a      	beq.n	80116fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	689b      	ldr	r3, [r3, #8]
 80116ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	430a      	orrs	r2, r1
 80116f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116fe:	f003 0320 	and.w	r3, r3, #32
 8011702:	2b00      	cmp	r3, #0
 8011704:	d00a      	beq.n	801171c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	689b      	ldr	r3, [r3, #8]
 801170c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	430a      	orrs	r2, r1
 801171a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011724:	2b00      	cmp	r3, #0
 8011726:	d01a      	beq.n	801175e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	685b      	ldr	r3, [r3, #4]
 801172e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	430a      	orrs	r2, r1
 801173c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011742:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011746:	d10a      	bne.n	801175e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	685b      	ldr	r3, [r3, #4]
 801174e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	430a      	orrs	r2, r1
 801175c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011766:	2b00      	cmp	r3, #0
 8011768:	d00a      	beq.n	8011780 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	685b      	ldr	r3, [r3, #4]
 8011770:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	430a      	orrs	r2, r1
 801177e:	605a      	str	r2, [r3, #4]
  }
}
 8011780:	bf00      	nop
 8011782:	370c      	adds	r7, #12
 8011784:	46bd      	mov	sp, r7
 8011786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178a:	4770      	bx	lr

0801178c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b098      	sub	sp, #96	@ 0x60
 8011790:	af02      	add	r7, sp, #8
 8011792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2200      	movs	r2, #0
 8011798:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801179c:	f7f2 fe84 	bl	80044a8 <HAL_GetTick>
 80117a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	f003 0308 	and.w	r3, r3, #8
 80117ac:	2b08      	cmp	r3, #8
 80117ae:	d12f      	bne.n	8011810 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80117b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80117b4:	9300      	str	r3, [sp, #0]
 80117b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80117b8:	2200      	movs	r2, #0
 80117ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f000 f88e 	bl	80118e0 <UART_WaitOnFlagUntilTimeout>
 80117c4:	4603      	mov	r3, r0
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d022      	beq.n	8011810 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117d2:	e853 3f00 	ldrex	r3, [r3]
 80117d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80117d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80117de:	653b      	str	r3, [r7, #80]	@ 0x50
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	461a      	mov	r2, r3
 80117e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80117ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80117ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80117f0:	e841 2300 	strex	r3, r2, [r1]
 80117f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80117f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d1e6      	bne.n	80117ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2220      	movs	r2, #32
 8011800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2200      	movs	r2, #0
 8011808:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801180c:	2303      	movs	r3, #3
 801180e:	e063      	b.n	80118d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	f003 0304 	and.w	r3, r3, #4
 801181a:	2b04      	cmp	r3, #4
 801181c:	d149      	bne.n	80118b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801181e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011822:	9300      	str	r3, [sp, #0]
 8011824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011826:	2200      	movs	r2, #0
 8011828:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f000 f857 	bl	80118e0 <UART_WaitOnFlagUntilTimeout>
 8011832:	4603      	mov	r3, r0
 8011834:	2b00      	cmp	r3, #0
 8011836:	d03c      	beq.n	80118b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011840:	e853 3f00 	ldrex	r3, [r3]
 8011844:	623b      	str	r3, [r7, #32]
   return(result);
 8011846:	6a3b      	ldr	r3, [r7, #32]
 8011848:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801184c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	461a      	mov	r2, r3
 8011854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011856:	633b      	str	r3, [r7, #48]	@ 0x30
 8011858:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801185a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801185c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801185e:	e841 2300 	strex	r3, r2, [r1]
 8011862:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011866:	2b00      	cmp	r3, #0
 8011868:	d1e6      	bne.n	8011838 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	3308      	adds	r3, #8
 8011870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	e853 3f00 	ldrex	r3, [r3]
 8011878:	60fb      	str	r3, [r7, #12]
   return(result);
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	f023 0301 	bic.w	r3, r3, #1
 8011880:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	3308      	adds	r3, #8
 8011888:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801188a:	61fa      	str	r2, [r7, #28]
 801188c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801188e:	69b9      	ldr	r1, [r7, #24]
 8011890:	69fa      	ldr	r2, [r7, #28]
 8011892:	e841 2300 	strex	r3, r2, [r1]
 8011896:	617b      	str	r3, [r7, #20]
   return(result);
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d1e5      	bne.n	801186a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2220      	movs	r2, #32
 80118a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2200      	movs	r2, #0
 80118aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80118ae:	2303      	movs	r3, #3
 80118b0:	e012      	b.n	80118d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	2220      	movs	r2, #32
 80118b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2220      	movs	r2, #32
 80118be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2200      	movs	r2, #0
 80118c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2200      	movs	r2, #0
 80118cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2200      	movs	r2, #0
 80118d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80118d6:	2300      	movs	r3, #0
}
 80118d8:	4618      	mov	r0, r3
 80118da:	3758      	adds	r7, #88	@ 0x58
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}

080118e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	60f8      	str	r0, [r7, #12]
 80118e8:	60b9      	str	r1, [r7, #8]
 80118ea:	603b      	str	r3, [r7, #0]
 80118ec:	4613      	mov	r3, r2
 80118ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80118f0:	e04f      	b.n	8011992 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80118f2:	69bb      	ldr	r3, [r7, #24]
 80118f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118f8:	d04b      	beq.n	8011992 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80118fa:	f7f2 fdd5 	bl	80044a8 <HAL_GetTick>
 80118fe:	4602      	mov	r2, r0
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	1ad3      	subs	r3, r2, r3
 8011904:	69ba      	ldr	r2, [r7, #24]
 8011906:	429a      	cmp	r2, r3
 8011908:	d302      	bcc.n	8011910 <UART_WaitOnFlagUntilTimeout+0x30>
 801190a:	69bb      	ldr	r3, [r7, #24]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d101      	bne.n	8011914 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011910:	2303      	movs	r3, #3
 8011912:	e04e      	b.n	80119b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	f003 0304 	and.w	r3, r3, #4
 801191e:	2b00      	cmp	r3, #0
 8011920:	d037      	beq.n	8011992 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	2b80      	cmp	r3, #128	@ 0x80
 8011926:	d034      	beq.n	8011992 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	2b40      	cmp	r3, #64	@ 0x40
 801192c:	d031      	beq.n	8011992 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	69db      	ldr	r3, [r3, #28]
 8011934:	f003 0308 	and.w	r3, r3, #8
 8011938:	2b08      	cmp	r3, #8
 801193a:	d110      	bne.n	801195e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	2208      	movs	r2, #8
 8011942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011944:	68f8      	ldr	r0, [r7, #12]
 8011946:	f000 f921 	bl	8011b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	2208      	movs	r2, #8
 801194e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	2200      	movs	r2, #0
 8011956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801195a:	2301      	movs	r3, #1
 801195c:	e029      	b.n	80119b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	69db      	ldr	r3, [r3, #28]
 8011964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801196c:	d111      	bne.n	8011992 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011976:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011978:	68f8      	ldr	r0, [r7, #12]
 801197a:	f000 f907 	bl	8011b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	2220      	movs	r2, #32
 8011982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	2200      	movs	r2, #0
 801198a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801198e:	2303      	movs	r3, #3
 8011990:	e00f      	b.n	80119b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	69da      	ldr	r2, [r3, #28]
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	4013      	ands	r3, r2
 801199c:	68ba      	ldr	r2, [r7, #8]
 801199e:	429a      	cmp	r2, r3
 80119a0:	bf0c      	ite	eq
 80119a2:	2301      	moveq	r3, #1
 80119a4:	2300      	movne	r3, #0
 80119a6:	b2db      	uxtb	r3, r3
 80119a8:	461a      	mov	r2, r3
 80119aa:	79fb      	ldrb	r3, [r7, #7]
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d0a0      	beq.n	80118f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80119b0:	2300      	movs	r3, #0
}
 80119b2:	4618      	mov	r0, r3
 80119b4:	3710      	adds	r7, #16
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}
	...

080119bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b096      	sub	sp, #88	@ 0x58
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	60f8      	str	r0, [r7, #12]
 80119c4:	60b9      	str	r1, [r7, #8]
 80119c6:	4613      	mov	r3, r2
 80119c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	68ba      	ldr	r2, [r7, #8]
 80119ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	88fa      	ldrh	r2, [r7, #6]
 80119d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	2200      	movs	r2, #0
 80119dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2222      	movs	r2, #34	@ 0x22
 80119e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d02d      	beq.n	8011a4e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80119f8:	4a40      	ldr	r2, [pc, #256]	@ (8011afc <UART_Start_Receive_DMA+0x140>)
 80119fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a02:	4a3f      	ldr	r2, [pc, #252]	@ (8011b00 <UART_Start_Receive_DMA+0x144>)
 8011a04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a0c:	4a3d      	ldr	r2, [pc, #244]	@ (8011b04 <UART_Start_Receive_DMA+0x148>)
 8011a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a16:	2200      	movs	r2, #0
 8011a18:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	3324      	adds	r3, #36	@ 0x24
 8011a26:	4619      	mov	r1, r3
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a2c:	461a      	mov	r2, r3
 8011a2e:	88fb      	ldrh	r3, [r7, #6]
 8011a30:	f7f5 fa40 	bl	8006eb4 <HAL_DMA_Start_IT>
 8011a34:	4603      	mov	r3, r0
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d009      	beq.n	8011a4e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	2210      	movs	r2, #16
 8011a3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	2220      	movs	r2, #32
 8011a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	e051      	b.n	8011af2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	691b      	ldr	r3, [r3, #16]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d018      	beq.n	8011a88 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a5e:	e853 3f00 	ldrex	r3, [r3]
 8011a62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011a6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	461a      	mov	r2, r3
 8011a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011a76:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a78:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011a7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011a7c:	e841 2300 	strex	r3, r2, [r1]
 8011a80:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8011a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d1e6      	bne.n	8011a56 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	3308      	adds	r3, #8
 8011a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a92:	e853 3f00 	ldrex	r3, [r3]
 8011a96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a9a:	f043 0301 	orr.w	r3, r3, #1
 8011a9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	3308      	adds	r3, #8
 8011aa6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011aa8:	637a      	str	r2, [r7, #52]	@ 0x34
 8011aaa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011aae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011ab0:	e841 2300 	strex	r3, r2, [r1]
 8011ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d1e5      	bne.n	8011a88 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	3308      	adds	r3, #8
 8011ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	e853 3f00 	ldrex	r3, [r3]
 8011aca:	613b      	str	r3, [r7, #16]
   return(result);
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	3308      	adds	r3, #8
 8011ada:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011adc:	623a      	str	r2, [r7, #32]
 8011ade:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ae0:	69f9      	ldr	r1, [r7, #28]
 8011ae2:	6a3a      	ldr	r2, [r7, #32]
 8011ae4:	e841 2300 	strex	r3, r2, [r1]
 8011ae8:	61bb      	str	r3, [r7, #24]
   return(result);
 8011aea:	69bb      	ldr	r3, [r7, #24]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d1e5      	bne.n	8011abc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8011af0:	2300      	movs	r3, #0
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3758      	adds	r7, #88	@ 0x58
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}
 8011afa:	bf00      	nop
 8011afc:	08011d0b 	.word	0x08011d0b
 8011b00:	08011e33 	.word	0x08011e33
 8011b04:	08011e71 	.word	0x08011e71

08011b08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011b08:	b480      	push	{r7}
 8011b0a:	b08f      	sub	sp, #60	@ 0x3c
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b16:	6a3b      	ldr	r3, [r7, #32]
 8011b18:	e853 3f00 	ldrex	r3, [r3]
 8011b1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8011b1e:	69fb      	ldr	r3, [r7, #28]
 8011b20:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	461a      	mov	r2, r3
 8011b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011b30:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011b34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b36:	e841 2300 	strex	r3, r2, [r1]
 8011b3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d1e6      	bne.n	8011b10 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	3308      	adds	r3, #8
 8011b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	e853 3f00 	ldrex	r3, [r3]
 8011b50:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011b58:	633b      	str	r3, [r7, #48]	@ 0x30
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	3308      	adds	r3, #8
 8011b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b62:	61ba      	str	r2, [r7, #24]
 8011b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b66:	6979      	ldr	r1, [r7, #20]
 8011b68:	69ba      	ldr	r2, [r7, #24]
 8011b6a:	e841 2300 	strex	r3, r2, [r1]
 8011b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d1e5      	bne.n	8011b42 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2220      	movs	r2, #32
 8011b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8011b7e:	bf00      	nop
 8011b80:	373c      	adds	r7, #60	@ 0x3c
 8011b82:	46bd      	mov	sp, r7
 8011b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b88:	4770      	bx	lr
	...

08011b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b095      	sub	sp, #84	@ 0x54
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b9c:	e853 3f00 	ldrex	r3, [r3]
 8011ba0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	461a      	mov	r2, r3
 8011bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8011bb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011bb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011bba:	e841 2300 	strex	r3, r2, [r1]
 8011bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d1e6      	bne.n	8011b94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	3308      	adds	r3, #8
 8011bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bce:	6a3b      	ldr	r3, [r7, #32]
 8011bd0:	e853 3f00 	ldrex	r3, [r3]
 8011bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8011bd6:	69fa      	ldr	r2, [r7, #28]
 8011bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8011c54 <UART_EndRxTransfer+0xc8>)
 8011bda:	4013      	ands	r3, r2
 8011bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	3308      	adds	r3, #8
 8011be4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011be6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011bec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011bee:	e841 2300 	strex	r3, r2, [r1]
 8011bf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d1e5      	bne.n	8011bc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011bfe:	2b01      	cmp	r3, #1
 8011c00:	d118      	bne.n	8011c34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	e853 3f00 	ldrex	r3, [r3]
 8011c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011c10:	68bb      	ldr	r3, [r7, #8]
 8011c12:	f023 0310 	bic.w	r3, r3, #16
 8011c16:	647b      	str	r3, [r7, #68]	@ 0x44
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	461a      	mov	r2, r3
 8011c1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c20:	61bb      	str	r3, [r7, #24]
 8011c22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c24:	6979      	ldr	r1, [r7, #20]
 8011c26:	69ba      	ldr	r2, [r7, #24]
 8011c28:	e841 2300 	strex	r3, r2, [r1]
 8011c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d1e6      	bne.n	8011c02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2220      	movs	r2, #32
 8011c38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	2200      	movs	r2, #0
 8011c46:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011c48:	bf00      	nop
 8011c4a:	3754      	adds	r7, #84	@ 0x54
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c52:	4770      	bx	lr
 8011c54:	effffffe 	.word	0xeffffffe

08011c58 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b090      	sub	sp, #64	@ 0x40
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c64:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	69db      	ldr	r3, [r3, #28]
 8011c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c6e:	d037      	beq.n	8011ce0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c72:	2200      	movs	r2, #0
 8011c74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	3308      	adds	r3, #8
 8011c7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c82:	e853 3f00 	ldrex	r3, [r3]
 8011c86:	623b      	str	r3, [r7, #32]
   return(result);
 8011c88:	6a3b      	ldr	r3, [r7, #32]
 8011c8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	3308      	adds	r3, #8
 8011c96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c98:	633a      	str	r2, [r7, #48]	@ 0x30
 8011c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ca0:	e841 2300 	strex	r3, r2, [r1]
 8011ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d1e5      	bne.n	8011c78 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	e853 3f00 	ldrex	r3, [r3]
 8011cb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8011cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cca:	61fb      	str	r3, [r7, #28]
 8011ccc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cce:	69b9      	ldr	r1, [r7, #24]
 8011cd0:	69fa      	ldr	r2, [r7, #28]
 8011cd2:	e841 2300 	strex	r3, r2, [r1]
 8011cd6:	617b      	str	r3, [r7, #20]
   return(result);
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d1e6      	bne.n	8011cac <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011cde:	e002      	b.n	8011ce6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011ce0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011ce2:	f7f0 ffad 	bl	8002c40 <HAL_UART_TxCpltCallback>
}
 8011ce6:	bf00      	nop
 8011ce8:	3740      	adds	r7, #64	@ 0x40
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}

08011cee <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011cee:	b580      	push	{r7, lr}
 8011cf0:	b084      	sub	sp, #16
 8011cf2:	af00      	add	r7, sp, #0
 8011cf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cfa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011cfc:	68f8      	ldr	r0, [r7, #12]
 8011cfe:	f7fe fe03 	bl	8010908 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d02:	bf00      	nop
 8011d04:	3710      	adds	r7, #16
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}

08011d0a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011d0a:	b580      	push	{r7, lr}
 8011d0c:	b09c      	sub	sp, #112	@ 0x70
 8011d0e:	af00      	add	r7, sp, #0
 8011d10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d16:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	69db      	ldr	r3, [r3, #28]
 8011d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011d20:	d071      	beq.n	8011e06 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8011d22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d24:	2200      	movs	r2, #0
 8011d26:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011d2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d32:	e853 3f00 	ldrex	r3, [r3]
 8011d36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011d3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011d3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011d40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	461a      	mov	r2, r3
 8011d46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011d48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011d4a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011d4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011d50:	e841 2300 	strex	r3, r2, [r1]
 8011d54:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d1e6      	bne.n	8011d2a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	3308      	adds	r3, #8
 8011d62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d66:	e853 3f00 	ldrex	r3, [r3]
 8011d6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d6e:	f023 0301 	bic.w	r3, r3, #1
 8011d72:	667b      	str	r3, [r7, #100]	@ 0x64
 8011d74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	3308      	adds	r3, #8
 8011d7a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011d7c:	647a      	str	r2, [r7, #68]	@ 0x44
 8011d7e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011d82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011d84:	e841 2300 	strex	r3, r2, [r1]
 8011d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d1e5      	bne.n	8011d5c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	3308      	adds	r3, #8
 8011d96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d9a:	e853 3f00 	ldrex	r3, [r3]
 8011d9e:	623b      	str	r3, [r7, #32]
   return(result);
 8011da0:	6a3b      	ldr	r3, [r7, #32]
 8011da2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011da6:	663b      	str	r3, [r7, #96]	@ 0x60
 8011da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	3308      	adds	r3, #8
 8011dae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011db0:	633a      	str	r2, [r7, #48]	@ 0x30
 8011db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011db4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011db8:	e841 2300 	strex	r3, r2, [r1]
 8011dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d1e5      	bne.n	8011d90 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011dc6:	2220      	movs	r2, #32
 8011dc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011dcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011dce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011dd0:	2b01      	cmp	r3, #1
 8011dd2:	d118      	bne.n	8011e06 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011dd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	e853 3f00 	ldrex	r3, [r3]
 8011de0:	60fb      	str	r3, [r7, #12]
   return(result);
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	f023 0310 	bic.w	r3, r3, #16
 8011de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011dea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	461a      	mov	r2, r3
 8011df0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011df2:	61fb      	str	r3, [r7, #28]
 8011df4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011df6:	69b9      	ldr	r1, [r7, #24]
 8011df8:	69fa      	ldr	r2, [r7, #28]
 8011dfa:	e841 2300 	strex	r3, r2, [r1]
 8011dfe:	617b      	str	r3, [r7, #20]
   return(result);
 8011e00:	697b      	ldr	r3, [r7, #20]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d1e6      	bne.n	8011dd4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e08:	2200      	movs	r2, #0
 8011e0a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e10:	2b01      	cmp	r3, #1
 8011e12:	d107      	bne.n	8011e24 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011e14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011e1a:	4619      	mov	r1, r3
 8011e1c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011e1e:	f7fe fd9b 	bl	8010958 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011e22:	e002      	b.n	8011e2a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8011e24:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011e26:	f7fe fd79 	bl	801091c <HAL_UART_RxCpltCallback>
}
 8011e2a:	bf00      	nop
 8011e2c:	3770      	adds	r7, #112	@ 0x70
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}

08011e32 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011e32:	b580      	push	{r7, lr}
 8011e34:	b084      	sub	sp, #16
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e3e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	2201      	movs	r2, #1
 8011e44:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	d109      	bne.n	8011e62 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011e54:	085b      	lsrs	r3, r3, #1
 8011e56:	b29b      	uxth	r3, r3
 8011e58:	4619      	mov	r1, r3
 8011e5a:	68f8      	ldr	r0, [r7, #12]
 8011e5c:	f7fe fd7c 	bl	8010958 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011e60:	e002      	b.n	8011e68 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8011e62:	68f8      	ldr	r0, [r7, #12]
 8011e64:	f7fe fd64 	bl	8010930 <HAL_UART_RxHalfCpltCallback>
}
 8011e68:	bf00      	nop
 8011e6a:	3710      	adds	r7, #16
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bd80      	pop	{r7, pc}

08011e70 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b086      	sub	sp, #24
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e7c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011e7e:	697b      	ldr	r3, [r7, #20]
 8011e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011e84:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011e8c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	689b      	ldr	r3, [r3, #8]
 8011e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011e98:	2b80      	cmp	r3, #128	@ 0x80
 8011e9a:	d109      	bne.n	8011eb0 <UART_DMAError+0x40>
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	2b21      	cmp	r3, #33	@ 0x21
 8011ea0:	d106      	bne.n	8011eb0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011ea2:	697b      	ldr	r3, [r7, #20]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8011eaa:	6978      	ldr	r0, [r7, #20]
 8011eac:	f7ff fe2c 	bl	8011b08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011eb0:	697b      	ldr	r3, [r7, #20]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	689b      	ldr	r3, [r3, #8]
 8011eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011eba:	2b40      	cmp	r3, #64	@ 0x40
 8011ebc:	d109      	bne.n	8011ed2 <UART_DMAError+0x62>
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	2b22      	cmp	r3, #34	@ 0x22
 8011ec2:	d106      	bne.n	8011ed2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011ec4:	697b      	ldr	r3, [r7, #20]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8011ecc:	6978      	ldr	r0, [r7, #20]
 8011ece:	f7ff fe5d 	bl	8011b8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011ed2:	697b      	ldr	r3, [r7, #20]
 8011ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011ed8:	f043 0210 	orr.w	r2, r3, #16
 8011edc:	697b      	ldr	r3, [r7, #20]
 8011ede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011ee2:	6978      	ldr	r0, [r7, #20]
 8011ee4:	f7fe fd2e 	bl	8010944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011ee8:	bf00      	nop
 8011eea:	3718      	adds	r7, #24
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}

08011ef0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b084      	sub	sp, #16
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011efc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	2200      	movs	r2, #0
 8011f02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011f06:	68f8      	ldr	r0, [r7, #12]
 8011f08:	f7fe fd1c 	bl	8010944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f0c:	bf00      	nop
 8011f0e:	3710      	adds	r7, #16
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}

08011f14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b088      	sub	sp, #32
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	e853 3f00 	ldrex	r3, [r3]
 8011f28:	60bb      	str	r3, [r7, #8]
   return(result);
 8011f2a:	68bb      	ldr	r3, [r7, #8]
 8011f2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011f30:	61fb      	str	r3, [r7, #28]
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	461a      	mov	r2, r3
 8011f38:	69fb      	ldr	r3, [r7, #28]
 8011f3a:	61bb      	str	r3, [r7, #24]
 8011f3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f3e:	6979      	ldr	r1, [r7, #20]
 8011f40:	69ba      	ldr	r2, [r7, #24]
 8011f42:	e841 2300 	strex	r3, r2, [r1]
 8011f46:	613b      	str	r3, [r7, #16]
   return(result);
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d1e6      	bne.n	8011f1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	2220      	movs	r2, #32
 8011f52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2200      	movs	r2, #0
 8011f5a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f7f0 fe6f 	bl	8002c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f62:	bf00      	nop
 8011f64:	3720      	adds	r7, #32
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd80      	pop	{r7, pc}

08011f6a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011f6a:	b480      	push	{r7}
 8011f6c:	b083      	sub	sp, #12
 8011f6e:	af00      	add	r7, sp, #0
 8011f70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011f72:	bf00      	nop
 8011f74:	370c      	adds	r7, #12
 8011f76:	46bd      	mov	sp, r7
 8011f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7c:	4770      	bx	lr

08011f7e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011f7e:	b480      	push	{r7}
 8011f80:	b083      	sub	sp, #12
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011f86:	bf00      	nop
 8011f88:	370c      	adds	r7, #12
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f90:	4770      	bx	lr

08011f92 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011f92:	b480      	push	{r7}
 8011f94:	b083      	sub	sp, #12
 8011f96:	af00      	add	r7, sp, #0
 8011f98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011f9a:	bf00      	nop
 8011f9c:	370c      	adds	r7, #12
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa4:	4770      	bx	lr

08011fa6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011fa6:	b480      	push	{r7}
 8011fa8:	b085      	sub	sp, #20
 8011faa:	af00      	add	r7, sp, #0
 8011fac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011fb4:	2b01      	cmp	r3, #1
 8011fb6:	d101      	bne.n	8011fbc <HAL_UARTEx_DisableFifoMode+0x16>
 8011fb8:	2302      	movs	r3, #2
 8011fba:	e027      	b.n	801200c <HAL_UARTEx_DisableFifoMode+0x66>
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2201      	movs	r2, #1
 8011fc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2224      	movs	r2, #36	@ 0x24
 8011fc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	681a      	ldr	r2, [r3, #0]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	f022 0201 	bic.w	r2, r2, #1
 8011fe2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011fea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	68fa      	ldr	r2, [r7, #12]
 8011ff8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	2220      	movs	r2, #32
 8011ffe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2200      	movs	r2, #0
 8012006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801200a:	2300      	movs	r3, #0
}
 801200c:	4618      	mov	r0, r3
 801200e:	3714      	adds	r7, #20
 8012010:	46bd      	mov	sp, r7
 8012012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012016:	4770      	bx	lr

08012018 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b084      	sub	sp, #16
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012028:	2b01      	cmp	r3, #1
 801202a:	d101      	bne.n	8012030 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801202c:	2302      	movs	r3, #2
 801202e:	e02d      	b.n	801208c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	2201      	movs	r2, #1
 8012034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2224      	movs	r2, #36	@ 0x24
 801203c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	681a      	ldr	r2, [r3, #0]
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	f022 0201 	bic.w	r2, r2, #1
 8012056:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	689b      	ldr	r3, [r3, #8]
 801205e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	683a      	ldr	r2, [r7, #0]
 8012068:	430a      	orrs	r2, r1
 801206a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f000 f84f 	bl	8012110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	68fa      	ldr	r2, [r7, #12]
 8012078:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2220      	movs	r2, #32
 801207e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	2200      	movs	r2, #0
 8012086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801208a:	2300      	movs	r3, #0
}
 801208c:	4618      	mov	r0, r3
 801208e:	3710      	adds	r7, #16
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}

08012094 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80120a4:	2b01      	cmp	r3, #1
 80120a6:	d101      	bne.n	80120ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80120a8:	2302      	movs	r3, #2
 80120aa:	e02d      	b.n	8012108 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2201      	movs	r2, #1
 80120b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2224      	movs	r2, #36	@ 0x24
 80120b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	681a      	ldr	r2, [r3, #0]
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	f022 0201 	bic.w	r2, r2, #1
 80120d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	689b      	ldr	r3, [r3, #8]
 80120da:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	683a      	ldr	r2, [r7, #0]
 80120e4:	430a      	orrs	r2, r1
 80120e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f000 f811 	bl	8012110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	68fa      	ldr	r2, [r7, #12]
 80120f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	2220      	movs	r2, #32
 80120fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	2200      	movs	r2, #0
 8012102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012106:	2300      	movs	r3, #0
}
 8012108:	4618      	mov	r0, r3
 801210a:	3710      	adds	r7, #16
 801210c:	46bd      	mov	sp, r7
 801210e:	bd80      	pop	{r7, pc}

08012110 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012110:	b480      	push	{r7}
 8012112:	b085      	sub	sp, #20
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801211c:	2b00      	cmp	r3, #0
 801211e:	d108      	bne.n	8012132 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2201      	movs	r2, #1
 8012124:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2201      	movs	r2, #1
 801212c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012130:	e031      	b.n	8012196 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012132:	2310      	movs	r3, #16
 8012134:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012136:	2310      	movs	r3, #16
 8012138:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	689b      	ldr	r3, [r3, #8]
 8012140:	0e5b      	lsrs	r3, r3, #25
 8012142:	b2db      	uxtb	r3, r3
 8012144:	f003 0307 	and.w	r3, r3, #7
 8012148:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	689b      	ldr	r3, [r3, #8]
 8012150:	0f5b      	lsrs	r3, r3, #29
 8012152:	b2db      	uxtb	r3, r3
 8012154:	f003 0307 	and.w	r3, r3, #7
 8012158:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801215a:	7bbb      	ldrb	r3, [r7, #14]
 801215c:	7b3a      	ldrb	r2, [r7, #12]
 801215e:	4911      	ldr	r1, [pc, #68]	@ (80121a4 <UARTEx_SetNbDataToProcess+0x94>)
 8012160:	5c8a      	ldrb	r2, [r1, r2]
 8012162:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012166:	7b3a      	ldrb	r2, [r7, #12]
 8012168:	490f      	ldr	r1, [pc, #60]	@ (80121a8 <UARTEx_SetNbDataToProcess+0x98>)
 801216a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801216c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012170:	b29a      	uxth	r2, r3
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012178:	7bfb      	ldrb	r3, [r7, #15]
 801217a:	7b7a      	ldrb	r2, [r7, #13]
 801217c:	4909      	ldr	r1, [pc, #36]	@ (80121a4 <UARTEx_SetNbDataToProcess+0x94>)
 801217e:	5c8a      	ldrb	r2, [r1, r2]
 8012180:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012184:	7b7a      	ldrb	r2, [r7, #13]
 8012186:	4908      	ldr	r1, [pc, #32]	@ (80121a8 <UARTEx_SetNbDataToProcess+0x98>)
 8012188:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801218a:	fb93 f3f2 	sdiv	r3, r3, r2
 801218e:	b29a      	uxth	r2, r3
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012196:	bf00      	nop
 8012198:	3714      	adds	r7, #20
 801219a:	46bd      	mov	sp, r7
 801219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a0:	4770      	bx	lr
 80121a2:	bf00      	nop
 80121a4:	0801c94c 	.word	0x0801c94c
 80121a8:	0801c954 	.word	0x0801c954

080121ac <VL53L0X_CheckAndLoadInterruptSettings>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev, uint8_t StartNotStopFlag) {
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b086      	sub	sp, #24
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
 80121b4:	460b      	mov	r3, r1
 80121b6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80121b8:	2300      	movs	r3, #0
 80121ba:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 80121c2:	75bb      	strb	r3, [r7, #22]

	if ((InterruptConfig ==
 80121c4:	7dbb      	ldrb	r3, [r7, #22]
 80121c6:	2b01      	cmp	r3, #1
 80121c8:	d005      	beq.n	80121d6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
	VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) || (InterruptConfig ==
 80121ca:	7dbb      	ldrb	r3, [r7, #22]
 80121cc:	2b02      	cmp	r3, #2
 80121ce:	d002      	beq.n	80121d6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
	VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) || (InterruptConfig ==
 80121d0:	7dbb      	ldrb	r3, [r7, #22]
 80121d2:	2b03      	cmp	r3, #3
 80121d4:	d147      	bne.n	8012266 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
	VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80121d6:	f107 030c 	add.w	r3, r7, #12
 80121da:	f107 0210 	add.w	r2, r7, #16
 80121de:	2101      	movs	r1, #1
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f000 f891 	bl	8012308 <VL53L0X_GetInterruptThresholds>
 80121e6:	4603      	mov	r3, r0
 80121e8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_DEVICEMODE_CONTINUOUS_RANGING, &ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255 * 65536) || (ThresholdHigh > 255 * 65536)) && (Status == VL53L0X_ERROR_NONE)) {
 80121ea:	693b      	ldr	r3, [r7, #16]
 80121ec:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 80121f0:	d803      	bhi.n	80121fa <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 80121f8:	d935      	bls.n	8012266 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
 80121fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d131      	bne.n	8012266 <VL53L0X_CheckAndLoadInterruptSettings+0xba>

			if (StartNotStopFlag != 0) {
 8012202:	78fb      	ldrb	r3, [r7, #3]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d006      	beq.n	8012216 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev, InterruptThresholdSettings);
 8012208:	491a      	ldr	r1, [pc, #104]	@ (8012274 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f000 f8b0 	bl	8012370 <VL53L0X_load_tuning_settings>
 8012210:	4603      	mov	r3, r0
 8012212:	75fb      	strb	r3, [r7, #23]
 8012214:	e027      	b.n	8012266 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			}
			else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8012216:	2204      	movs	r2, #4
 8012218:	21ff      	movs	r1, #255	@ 0xff
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f000 f9f8 	bl	8012610 <VL53L0X_WrByte>
 8012220:	4603      	mov	r3, r0
 8012222:	461a      	mov	r2, r3
 8012224:	7dfb      	ldrb	r3, [r7, #23]
 8012226:	4313      	orrs	r3, r2
 8012228:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 801222a:	2200      	movs	r2, #0
 801222c:	2170      	movs	r1, #112	@ 0x70
 801222e:	6878      	ldr	r0, [r7, #4]
 8012230:	f000 f9ee 	bl	8012610 <VL53L0X_WrByte>
 8012234:	4603      	mov	r3, r0
 8012236:	461a      	mov	r2, r3
 8012238:	7dfb      	ldrb	r3, [r7, #23]
 801223a:	4313      	orrs	r3, r2
 801223c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 801223e:	2200      	movs	r2, #0
 8012240:	21ff      	movs	r1, #255	@ 0xff
 8012242:	6878      	ldr	r0, [r7, #4]
 8012244:	f000 f9e4 	bl	8012610 <VL53L0X_WrByte>
 8012248:	4603      	mov	r3, r0
 801224a:	461a      	mov	r2, r3
 801224c:	7dfb      	ldrb	r3, [r7, #23]
 801224e:	4313      	orrs	r3, r2
 8012250:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8012252:	2200      	movs	r2, #0
 8012254:	2180      	movs	r1, #128	@ 0x80
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f000 f9da 	bl	8012610 <VL53L0X_WrByte>
 801225c:	4603      	mov	r3, r0
 801225e:	461a      	mov	r2, r3
 8012260:	7dfb      	ldrb	r3, [r7, #23]
 8012262:	4313      	orrs	r3, r2
 8012264:	75fb      	strb	r3, [r7, #23]

		}

	}

	return Status;
 8012266:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 801226a:	4618      	mov	r0, r3
 801226c:	3718      	adds	r7, #24
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}
 8012272:	bf00      	nop
 8012274:	24000020 	.word	0x24000020

08012278 <VL53L0X_StopMeasurement>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StopMeasurement(VL53L0X_DEV Dev) {
 8012278:	b580      	push	{r7, lr}
 801227a:	b084      	sub	sp, #16
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012280:	2300      	movs	r3, #0
 8012282:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8012284:	2200      	movs	r2, #0
 8012286:	2100      	movs	r1, #0
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f000 f9c1 	bl	8012610 <VL53L0X_WrByte>
 801228e:	4603      	mov	r3, r0
 8012290:	73fb      	strb	r3, [r7, #15]
	VL53L0X_REG_SYSRANGE_MODE_SINGLESHOT);

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8012292:	2201      	movs	r2, #1
 8012294:	21ff      	movs	r1, #255	@ 0xff
 8012296:	6878      	ldr	r0, [r7, #4]
 8012298:	f000 f9ba 	bl	8012610 <VL53L0X_WrByte>
 801229c:	4603      	mov	r3, r0
 801229e:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80122a0:	2200      	movs	r2, #0
 80122a2:	2100      	movs	r1, #0
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f000 f9b3 	bl	8012610 <VL53L0X_WrByte>
 80122aa:	4603      	mov	r3, r0
 80122ac:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0x91, 0x00);
 80122ae:	2200      	movs	r2, #0
 80122b0:	2191      	movs	r1, #145	@ 0x91
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f000 f9ac 	bl	8012610 <VL53L0X_WrByte>
 80122b8:	4603      	mov	r3, r0
 80122ba:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80122bc:	2201      	movs	r2, #1
 80122be:	2100      	movs	r1, #0
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f000 f9a5 	bl	8012610 <VL53L0X_WrByte>
 80122c6:	4603      	mov	r3, r0
 80122c8:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80122ca:	2200      	movs	r2, #0
 80122cc:	21ff      	movs	r1, #255	@ 0xff
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f000 f99e 	bl	8012610 <VL53L0X_WrByte>
 80122d4:	4603      	mov	r3, r0
 80122d6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 80122d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d103      	bne.n	80122e8 <VL53L0X_StopMeasurement+0x70>
		/* Set PAL State to Idle */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2203      	movs	r2, #3
 80122e4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	/* Check if need to apply interrupt settings */
	if (Status == VL53L0X_ERROR_NONE)
 80122e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d105      	bne.n	80122fc <VL53L0X_StopMeasurement+0x84>
		Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 0);
 80122f0:	2100      	movs	r1, #0
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f7ff ff5a 	bl	80121ac <VL53L0X_CheckAndLoadInterruptSettings>
 80122f8:	4603      	mov	r3, r0
 80122fa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80122fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012300:	4618      	mov	r0, r3
 8012302:	3710      	adds	r7, #16
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}

08012308 <VL53L0X_GetInterruptThresholds>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow, FixPoint1616_t *pThresholdHigh) {
 8012308:	b580      	push	{r7, lr}
 801230a:	b086      	sub	sp, #24
 801230c:	af00      	add	r7, sp, #0
 801230e:	60f8      	str	r0, [r7, #12]
 8012310:	607a      	str	r2, [r7, #4]
 8012312:	603b      	str	r3, [r7, #0]
 8012314:	460b      	mov	r3, r1
 8012316:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012318:	2300      	movs	r3, #0
 801231a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 801231c:	f107 0314 	add.w	r3, r7, #20
 8012320:	461a      	mov	r2, r3
 8012322:	210e      	movs	r1, #14
 8012324:	68f8      	ldr	r0, [r7, #12]
 8012326:	f000 f997 	bl	8012658 <VL53L0X_RdWord>
 801232a:	4603      	mov	r3, r0
 801232c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t) ((0x00fff & Threshold16) << 17);
 801232e:	8abb      	ldrh	r3, [r7, #20]
 8012330:	045a      	lsls	r2, r3, #17
 8012332:	4b0e      	ldr	r3, [pc, #56]	@ (801236c <VL53L0X_GetInterruptThresholds+0x64>)
 8012334:	4013      	ands	r3, r2
 8012336:	687a      	ldr	r2, [r7, #4]
 8012338:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 801233a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d10e      	bne.n	8012360 <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH, &Threshold16);
 8012342:	f107 0314 	add.w	r3, r7, #20
 8012346:	461a      	mov	r2, r3
 8012348:	210c      	movs	r1, #12
 801234a:	68f8      	ldr	r0, [r7, #12]
 801234c:	f000 f984 	bl	8012658 <VL53L0X_RdWord>
 8012350:	4603      	mov	r3, r0
 8012352:	75fb      	strb	r3, [r7, #23]
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh = (FixPoint1616_t) ((0x00fff & Threshold16) << 17);
 8012354:	8abb      	ldrh	r3, [r7, #20]
 8012356:	045a      	lsls	r2, r3, #17
 8012358:	4b04      	ldr	r3, [pc, #16]	@ (801236c <VL53L0X_GetInterruptThresholds+0x64>)
 801235a:	4013      	ands	r3, r2
 801235c:	683a      	ldr	r2, [r7, #0]
 801235e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8012360:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012364:	4618      	mov	r0, r3
 8012366:	3718      	adds	r7, #24
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}
 801236c:	1ffe0000 	.word	0x1ffe0000

08012370 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b088      	sub	sp, #32
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
 8012378:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801237a:	2300      	movs	r3, #0
 801237c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 801237e:	2300      	movs	r3, #0
 8012380:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8012382:	e0c6      	b.n	8012512 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	683a      	ldr	r2, [r7, #0]
 8012388:	4413      	add	r3, r2
 801238a:	781b      	ldrb	r3, [r3, #0]
 801238c:	74fb      	strb	r3, [r7, #19]
		Index++;
 801238e:	697b      	ldr	r3, [r7, #20]
 8012390:	3301      	adds	r3, #1
 8012392:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8012394:	7cfb      	ldrb	r3, [r7, #19]
 8012396:	2bff      	cmp	r3, #255	@ 0xff
 8012398:	f040 808d 	bne.w	80124b6 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 801239c:	697b      	ldr	r3, [r7, #20]
 801239e:	683a      	ldr	r2, [r7, #0]
 80123a0:	4413      	add	r3, r2
 80123a2:	781b      	ldrb	r3, [r3, #0]
 80123a4:	747b      	strb	r3, [r7, #17]
			Index++;
 80123a6:	697b      	ldr	r3, [r7, #20]
 80123a8:	3301      	adds	r3, #1
 80123aa:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80123ac:	7c7b      	ldrb	r3, [r7, #17]
 80123ae:	2b03      	cmp	r3, #3
 80123b0:	d87e      	bhi.n	80124b0 <VL53L0X_load_tuning_settings+0x140>
 80123b2:	a201      	add	r2, pc, #4	@ (adr r2, 80123b8 <VL53L0X_load_tuning_settings+0x48>)
 80123b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123b8:	080123c9 	.word	0x080123c9
 80123bc:	08012403 	.word	0x08012403
 80123c0:	0801243d 	.word	0x0801243d
 80123c4:	08012477 	.word	0x08012477
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80123c8:	697b      	ldr	r3, [r7, #20]
 80123ca:	683a      	ldr	r2, [r7, #0]
 80123cc:	4413      	add	r3, r2
 80123ce:	781b      	ldrb	r3, [r3, #0]
 80123d0:	743b      	strb	r3, [r7, #16]
				Index++;
 80123d2:	697b      	ldr	r3, [r7, #20]
 80123d4:	3301      	adds	r3, #1
 80123d6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	683a      	ldr	r2, [r7, #0]
 80123dc:	4413      	add	r3, r2
 80123de:	781b      	ldrb	r3, [r3, #0]
 80123e0:	73fb      	strb	r3, [r7, #15]
				Index++;
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	3301      	adds	r3, #1
 80123e6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80123e8:	7c3b      	ldrb	r3, [r7, #16]
 80123ea:	b29b      	uxth	r3, r3
 80123ec:	021b      	lsls	r3, r3, #8
 80123ee:	b29a      	uxth	r2, r3
 80123f0:	7bfb      	ldrb	r3, [r7, #15]
 80123f2:	b29b      	uxth	r3, r3
 80123f4:	4413      	add	r3, r2
 80123f6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	89ba      	ldrh	r2, [r7, #12]
 80123fc:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 8012400:	e087      	b.n	8012512 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	683a      	ldr	r2, [r7, #0]
 8012406:	4413      	add	r3, r2
 8012408:	781b      	ldrb	r3, [r3, #0]
 801240a:	743b      	strb	r3, [r7, #16]
				Index++;
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	3301      	adds	r3, #1
 8012410:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	683a      	ldr	r2, [r7, #0]
 8012416:	4413      	add	r3, r2
 8012418:	781b      	ldrb	r3, [r3, #0]
 801241a:	73fb      	strb	r3, [r7, #15]
				Index++;
 801241c:	697b      	ldr	r3, [r7, #20]
 801241e:	3301      	adds	r3, #1
 8012420:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8012422:	7c3b      	ldrb	r3, [r7, #16]
 8012424:	b29b      	uxth	r3, r3
 8012426:	021b      	lsls	r3, r3, #8
 8012428:	b29a      	uxth	r2, r3
 801242a:	7bfb      	ldrb	r3, [r7, #15]
 801242c:	b29b      	uxth	r3, r3
 801242e:	4413      	add	r3, r2
 8012430:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	89ba      	ldrh	r2, [r7, #12]
 8012436:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 801243a:	e06a      	b.n	8012512 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	683a      	ldr	r2, [r7, #0]
 8012440:	4413      	add	r3, r2
 8012442:	781b      	ldrb	r3, [r3, #0]
 8012444:	743b      	strb	r3, [r7, #16]
				Index++;
 8012446:	697b      	ldr	r3, [r7, #20]
 8012448:	3301      	adds	r3, #1
 801244a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	683a      	ldr	r2, [r7, #0]
 8012450:	4413      	add	r3, r2
 8012452:	781b      	ldrb	r3, [r3, #0]
 8012454:	73fb      	strb	r3, [r7, #15]
				Index++;
 8012456:	697b      	ldr	r3, [r7, #20]
 8012458:	3301      	adds	r3, #1
 801245a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 801245c:	7c3b      	ldrb	r3, [r7, #16]
 801245e:	b29b      	uxth	r3, r3
 8012460:	021b      	lsls	r3, r3, #8
 8012462:	b29a      	uxth	r2, r3
 8012464:	7bfb      	ldrb	r3, [r7, #15]
 8012466:	b29b      	uxth	r3, r3
 8012468:	4413      	add	r3, r2
 801246a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	89ba      	ldrh	r2, [r7, #12]
 8012470:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 8012474:	e04d      	b.n	8012512 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	683a      	ldr	r2, [r7, #0]
 801247a:	4413      	add	r3, r2
 801247c:	781b      	ldrb	r3, [r3, #0]
 801247e:	743b      	strb	r3, [r7, #16]
				Index++;
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	3301      	adds	r3, #1
 8012484:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8012486:	697b      	ldr	r3, [r7, #20]
 8012488:	683a      	ldr	r2, [r7, #0]
 801248a:	4413      	add	r3, r2
 801248c:	781b      	ldrb	r3, [r3, #0]
 801248e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	3301      	adds	r3, #1
 8012494:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8012496:	7c3b      	ldrb	r3, [r7, #16]
 8012498:	b29b      	uxth	r3, r3
 801249a:	021b      	lsls	r3, r3, #8
 801249c:	b29a      	uxth	r2, r3
 801249e:	7bfb      	ldrb	r3, [r7, #15]
 80124a0:	b29b      	uxth	r3, r3
 80124a2:	4413      	add	r3, r2
 80124a4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	89ba      	ldrh	r2, [r7, #12]
 80124aa:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
				break;
 80124ae:	e030      	b.n	8012512 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80124b0:	23fc      	movs	r3, #252	@ 0xfc
 80124b2:	77fb      	strb	r3, [r7, #31]
 80124b4:	e02d      	b.n	8012512 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80124b6:	7cfb      	ldrb	r3, [r7, #19]
 80124b8:	2b04      	cmp	r3, #4
 80124ba:	d828      	bhi.n	801250e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	683a      	ldr	r2, [r7, #0]
 80124c0:	4413      	add	r3, r2
 80124c2:	781b      	ldrb	r3, [r3, #0]
 80124c4:	74bb      	strb	r3, [r7, #18]
			Index++;
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	3301      	adds	r3, #1
 80124ca:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80124cc:	2300      	movs	r3, #0
 80124ce:	61bb      	str	r3, [r7, #24]
 80124d0:	e00f      	b.n	80124f2 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80124d2:	697b      	ldr	r3, [r7, #20]
 80124d4:	683a      	ldr	r2, [r7, #0]
 80124d6:	4413      	add	r3, r2
 80124d8:	7819      	ldrb	r1, [r3, #0]
 80124da:	f107 0208 	add.w	r2, r7, #8
 80124de:	69bb      	ldr	r3, [r7, #24]
 80124e0:	4413      	add	r3, r2
 80124e2:	460a      	mov	r2, r1
 80124e4:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80124e6:	697b      	ldr	r3, [r7, #20]
 80124e8:	3301      	adds	r3, #1
 80124ea:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80124ec:	69bb      	ldr	r3, [r7, #24]
 80124ee:	3301      	adds	r3, #1
 80124f0:	61bb      	str	r3, [r7, #24]
 80124f2:	7cfb      	ldrb	r3, [r7, #19]
 80124f4:	69ba      	ldr	r2, [r7, #24]
 80124f6:	429a      	cmp	r2, r3
 80124f8:	dbeb      	blt.n	80124d2 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80124fa:	7cfb      	ldrb	r3, [r7, #19]
 80124fc:	f107 0208 	add.w	r2, r7, #8
 8012500:	7cb9      	ldrb	r1, [r7, #18]
 8012502:	6878      	ldr	r0, [r7, #4]
 8012504:	f000 f854 	bl	80125b0 <VL53L0X_WriteMulti>
 8012508:	4603      	mov	r3, r0
 801250a:	77fb      	strb	r3, [r7, #31]
 801250c:	e001      	b.n	8012512 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 801250e:	23fc      	movs	r3, #252	@ 0xfc
 8012510:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8012512:	697b      	ldr	r3, [r7, #20]
 8012514:	683a      	ldr	r2, [r7, #0]
 8012516:	4413      	add	r3, r2
 8012518:	781b      	ldrb	r3, [r3, #0]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d004      	beq.n	8012528 <VL53L0X_load_tuning_settings+0x1b8>
 801251e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012522:	2b00      	cmp	r3, #0
 8012524:	f43f af2e 	beq.w	8012384 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8012528:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801252c:	4618      	mov	r0, r3
 801252e:	3720      	adds	r7, #32
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}

08012534 <_I2CWrite>:
#define  VL53L0X_OsDelay(...) (void)0
#endif

uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8012534:	b580      	push	{r7, lr}
 8012536:	b088      	sub	sp, #32
 8012538:	af02      	add	r7, sp, #8
 801253a:	60f8      	str	r0, [r7, #12]
 801253c:	60b9      	str	r1, [r7, #8]
 801253e:	607a      	str	r2, [r7, #4]
	int status;
	int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	330a      	adds	r3, #10
 8012544:	617b      	str	r3, [r7, #20]

	status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8012552:	4619      	mov	r1, r3
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	b29a      	uxth	r2, r3
 8012558:	697b      	ldr	r3, [r7, #20]
 801255a:	9300      	str	r3, [sp, #0]
 801255c:	4613      	mov	r3, r2
 801255e:	68ba      	ldr	r2, [r7, #8]
 8012560:	f7f7 fa26 	bl	80099b0 <HAL_I2C_Master_Transmit>
 8012564:	4603      	mov	r3, r0
 8012566:	613b      	str	r3, [r7, #16]
	if (status) {
		//VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
		//XNUCLEO6180XA1_I2C1_Init(&hi2c1);
	}
	return status;
 8012568:	693b      	ldr	r3, [r7, #16]
}
 801256a:	4618      	mov	r0, r3
 801256c:	3718      	adds	r7, #24
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}

08012572 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8012572:	b580      	push	{r7, lr}
 8012574:	b088      	sub	sp, #32
 8012576:	af02      	add	r7, sp, #8
 8012578:	60f8      	str	r0, [r7, #12]
 801257a:	60b9      	str	r1, [r7, #8]
 801257c:	607a      	str	r2, [r7, #4]
	int status;
	int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	330a      	adds	r3, #10
 8012582:	617b      	str	r3, [r7, #20]

	status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8012590:	4619      	mov	r1, r3
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	b29a      	uxth	r2, r3
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	9300      	str	r3, [sp, #0]
 801259a:	4613      	mov	r3, r2
 801259c:	68ba      	ldr	r2, [r7, #8]
 801259e:	f7f7 fb1f 	bl	8009be0 <HAL_I2C_Master_Receive>
 80125a2:	4603      	mov	r3, r0
 80125a4:	613b      	str	r3, [r7, #16]
	if (status) {
		//VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
		//XNUCLEO6180XA1_I2C1_Init(&hi2c1);
	}
	return status;
 80125a6:	693b      	ldr	r3, [r7, #16]
}
 80125a8:	4618      	mov	r0, r3
 80125aa:	3718      	adds	r7, #24
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}

080125b0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b086      	sub	sp, #24
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	60f8      	str	r0, [r7, #12]
 80125b8:	607a      	str	r2, [r7, #4]
 80125ba:	603b      	str	r3, [r7, #0]
 80125bc:	460b      	mov	r3, r1
 80125be:	72fb      	strb	r3, [r7, #11]
	int status_int;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80125c0:	2300      	movs	r3, #0
 80125c2:	75fb      	strb	r3, [r7, #23]
	if (count > sizeof(_I2CBuffer) - 1) {
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80125c8:	d902      	bls.n	80125d0 <VL53L0X_WriteMulti+0x20>
		return VL53L0X_ERROR_INVALID_PARAMS;
 80125ca:	f06f 0303 	mvn.w	r3, #3
 80125ce:	e016      	b.n	80125fe <VL53L0X_WriteMulti+0x4e>
	}
	_I2CBuffer[0] = index;
 80125d0:	4a0d      	ldr	r2, [pc, #52]	@ (8012608 <VL53L0X_WriteMulti+0x58>)
 80125d2:	7afb      	ldrb	r3, [r7, #11]
 80125d4:	7013      	strb	r3, [r2, #0]
	memcpy(&_I2CBuffer[1], pdata, count);
 80125d6:	683a      	ldr	r2, [r7, #0]
 80125d8:	6879      	ldr	r1, [r7, #4]
 80125da:	480c      	ldr	r0, [pc, #48]	@ (801260c <VL53L0X_WriteMulti+0x5c>)
 80125dc:	f008 fd97 	bl	801b10e <memcpy>
	VL53L0X_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	3301      	adds	r3, #1
 80125e4:	461a      	mov	r2, r3
 80125e6:	4908      	ldr	r1, [pc, #32]	@ (8012608 <VL53L0X_WriteMulti+0x58>)
 80125e8:	68f8      	ldr	r0, [r7, #12]
 80125ea:	f7ff ffa3 	bl	8012534 <_I2CWrite>
 80125ee:	6138      	str	r0, [r7, #16]
	if (status_int != 0) {
 80125f0:	693b      	ldr	r3, [r7, #16]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d001      	beq.n	80125fa <VL53L0X_WriteMulti+0x4a>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80125f6:	23ec      	movs	r3, #236	@ 0xec
 80125f8:	75fb      	strb	r3, [r7, #23]
	}
	VL53L0X_PutI2cBus();
	return Status;
 80125fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80125fe:	4618      	mov	r0, r3
 8012600:	3718      	adds	r7, #24
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}
 8012606:	bf00      	nop
 8012608:	24001120 	.word	0x24001120
 801260c:	24001121 	.word	0x24001121

08012610 <VL53L0X_WrByte>:
	done:
	VL53L0X_PutI2cBus();
	return Status;
}

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8012610:	b580      	push	{r7, lr}
 8012612:	b084      	sub	sp, #16
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	460b      	mov	r3, r1
 801261a:	70fb      	strb	r3, [r7, #3]
 801261c:	4613      	mov	r3, r2
 801261e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012620:	2300      	movs	r3, #0
 8012622:	73fb      	strb	r3, [r7, #15]
	int32_t status_int;

	_I2CBuffer[0] = index;
 8012624:	4a0b      	ldr	r2, [pc, #44]	@ (8012654 <VL53L0X_WrByte+0x44>)
 8012626:	78fb      	ldrb	r3, [r7, #3]
 8012628:	7013      	strb	r3, [r2, #0]
	_I2CBuffer[1] = data;
 801262a:	4a0a      	ldr	r2, [pc, #40]	@ (8012654 <VL53L0X_WrByte+0x44>)
 801262c:	78bb      	ldrb	r3, [r7, #2]
 801262e:	7053      	strb	r3, [r2, #1]

	VL53L0X_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8012630:	2202      	movs	r2, #2
 8012632:	4908      	ldr	r1, [pc, #32]	@ (8012654 <VL53L0X_WrByte+0x44>)
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f7ff ff7d 	bl	8012534 <_I2CWrite>
 801263a:	60b8      	str	r0, [r7, #8]
	if (status_int != 0) {
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d001      	beq.n	8012646 <VL53L0X_WrByte+0x36>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8012642:	23ec      	movs	r3, #236	@ 0xec
 8012644:	73fb      	strb	r3, [r7, #15]
	}
	VL53L0X_PutI2cBus();
	return Status;
 8012646:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801264a:	4618      	mov	r0, r3
 801264c:	3710      	adds	r7, #16
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}
 8012652:	bf00      	nop
 8012654:	24001120 	.word	0x24001120

08012658 <VL53L0X_RdWord>:
	done:
	VL53L0X_PutI2cBus();
	return Status;
}

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8012658:	b580      	push	{r7, lr}
 801265a:	b086      	sub	sp, #24
 801265c:	af00      	add	r7, sp, #0
 801265e:	60f8      	str	r0, [r7, #12]
 8012660:	460b      	mov	r3, r1
 8012662:	607a      	str	r2, [r7, #4]
 8012664:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012666:	2300      	movs	r3, #0
 8012668:	75fb      	strb	r3, [r7, #23]
	int32_t status_int;

	VL53L0X_GetI2cBus();
	status_int = _I2CWrite(Dev, &index, 1);
 801266a:	f107 030b 	add.w	r3, r7, #11
 801266e:	2201      	movs	r2, #1
 8012670:	4619      	mov	r1, r3
 8012672:	68f8      	ldr	r0, [r7, #12]
 8012674:	f7ff ff5e 	bl	8012534 <_I2CWrite>
 8012678:	6138      	str	r0, [r7, #16]

	if (status_int) {
 801267a:	693b      	ldr	r3, [r7, #16]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d002      	beq.n	8012686 <VL53L0X_RdWord+0x2e>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8012680:	23ec      	movs	r3, #236	@ 0xec
 8012682:	75fb      	strb	r3, [r7, #23]
		goto done;
 8012684:	e015      	b.n	80126b2 <VL53L0X_RdWord+0x5a>
	}
	status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8012686:	2202      	movs	r2, #2
 8012688:	490d      	ldr	r1, [pc, #52]	@ (80126c0 <VL53L0X_RdWord+0x68>)
 801268a:	68f8      	ldr	r0, [r7, #12]
 801268c:	f7ff ff71 	bl	8012572 <_I2CRead>
 8012690:	6138      	str	r0, [r7, #16]
	if (status_int != 0) {
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d002      	beq.n	801269e <VL53L0X_RdWord+0x46>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8012698:	23ec      	movs	r3, #236	@ 0xec
 801269a:	75fb      	strb	r3, [r7, #23]
		goto done;
 801269c:	e009      	b.n	80126b2 <VL53L0X_RdWord+0x5a>
	}

	*data = ((uint16_t) _I2CBuffer[0] << 8) + (uint16_t) _I2CBuffer[1];
 801269e:	4b08      	ldr	r3, [pc, #32]	@ (80126c0 <VL53L0X_RdWord+0x68>)
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	021b      	lsls	r3, r3, #8
 80126a4:	b29b      	uxth	r3, r3
 80126a6:	4a06      	ldr	r2, [pc, #24]	@ (80126c0 <VL53L0X_RdWord+0x68>)
 80126a8:	7852      	ldrb	r2, [r2, #1]
 80126aa:	4413      	add	r3, r2
 80126ac:	b29a      	uxth	r2, r3
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	801a      	strh	r2, [r3, #0]
	done:
	VL53L0X_PutI2cBus();
	return Status;
 80126b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3718      	adds	r7, #24
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
 80126be:	bf00      	nop
 80126c0:	24001120 	.word	0x24001120

080126c4 <_ZN20VL53_MeasurementDataC1Ev>:
    uint16_t signal_rate;        /*!< Signal rate (MCPS) */
    uint16_t ambient_rate;       /*!< Ambient rate (MCPS) */
    uint32_t measurement_time;   /*!< Measurement timestamp */
    bool is_valid;               /*!< Quick validity check */
    
    VL53_MeasurementData() : distance_mm(0), status(VL53_Status::NOT_INITIALIZED), 
 80126c4:	b480      	push	{r7}
 80126c6:	b083      	sub	sp, #12
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2200      	movs	r2, #0
 80126d0:	801a      	strh	r2, [r3, #0]
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	2206      	movs	r2, #6
 80126d6:	605a      	str	r2, [r3, #4]
                            signal_rate(0), ambient_rate(0), measurement_time(0), is_valid(false) {}
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2200      	movs	r2, #0
 80126dc:	811a      	strh	r2, [r3, #8]
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	2200      	movs	r2, #0
 80126e2:	815a      	strh	r2, [r3, #10]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	2200      	movs	r2, #0
 80126e8:	60da      	str	r2, [r3, #12]
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	2200      	movs	r2, #0
 80126ee:	741a      	strb	r2, [r3, #16]
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	4618      	mov	r0, r3
 80126f4:	370c      	adds	r7, #12
 80126f6:	46bd      	mov	sp, r7
 80126f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fc:	4770      	bx	lr
	...

08012700 <_ZN16VL53L0X_EnhancedC1EP12GPIO_TypeDefthP19__I2C_HandleTypeDefPKc>:
#include <cstdio>

extern I2C_HandleTypeDef hi2c1; // Default I2C handle

// Constructor
VL53L0X_Enhanced::VL53L0X_Enhanced(GPIO_TypeDef *port, uint16_t pin, uint8_t address, 
 8012700:	b590      	push	{r4, r7, lr}
 8012702:	b09d      	sub	sp, #116	@ 0x74
 8012704:	af00      	add	r7, sp, #0
 8012706:	60f8      	str	r0, [r7, #12]
 8012708:	60b9      	str	r1, [r7, #8]
 801270a:	4611      	mov	r1, r2
 801270c:	461a      	mov	r2, r3
 801270e:	460b      	mov	r3, r1
 8012710:	80fb      	strh	r3, [r7, #6]
 8012712:	4613      	mov	r3, r2
 8012714:	717b      	strb	r3, [r7, #5]
                                   I2C_HandleTypeDef *hi2c_handle, const char* id)
    : xshut_port(port), xshut_pin(pin), i2c_address(address), hi2c(hi2c_handle),
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	68ba      	ldr	r2, [r7, #8]
 801271a:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	88fa      	ldrh	r2, [r7, #6]
 8012722:	f8a3 2198 	strh.w	r2, [r3, #408]	@ 0x198
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	797a      	ldrb	r2, [r7, #5]
 801272a:	f883 219a 	strb.w	r2, [r3, #410]	@ 0x19a
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012734:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
      is_initialized(false), is_calibrated(false), is_continuous_mode(false),
      accuracy_mode(VL53_Accuracy::BETTER), timing_budget_us(26000), error_count(0)
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 801273e:	4618      	mov	r0, r3
 8012740:	f7ff ffc0 	bl	80126c4 <_ZN20VL53_MeasurementDataC1Ev>
      is_initialized(false), is_calibrated(false), is_continuous_mode(false),
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	2200      	movs	r2, #0
 8012748:	f883 21d0 	strb.w	r2, [r3, #464]	@ 0x1d0
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	2200      	movs	r2, #0
 8012750:	f883 21d1 	strb.w	r2, [r3, #465]	@ 0x1d1
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	2200      	movs	r2, #0
 8012758:	f883 21d2 	strb.w	r2, [r3, #466]	@ 0x1d2
      accuracy_mode(VL53_Accuracy::BETTER), timing_budget_us(26000), error_count(0)
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	2202      	movs	r2, #2
 8012760:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	f246 5290 	movw	r2, #26000	@ 0x6590
 801276a:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	2200      	movs	r2, #0
 8012772:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 801277c:	4618      	mov	r0, r3
 801277e:	f006 fff1 	bl	8019764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
    // Initialize device structure
    memset(&vl53l0x_device, 0, sizeof(VL53L0X_Dev_t));
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8012788:	2100      	movs	r1, #0
 801278a:	4618      	mov	r0, r3
 801278c:	f008 fbef 	bl	801af6e <memset>
    memset(&ranging_data, 0, sizeof(VL53L0X_RangingMeasurementData_t));
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8012796:	221c      	movs	r2, #28
 8012798:	2100      	movs	r1, #0
 801279a:	4618      	mov	r0, r3
 801279c:	f008 fbe7 	bl	801af6e <memset>
    
    vl53_dev = &vl53l0x_device;
 80127a0:	68fa      	ldr	r2, [r7, #12]
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    
    // Set sensor ID
    if (id != nullptr) {
 80127a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d01f      	beq.n	80127f0 <_ZN16VL53L0X_EnhancedC1EP12GPIO_TypeDefthP19__I2C_HandleTypeDefPKc+0xf0>
        sensor_id = std::string(id);
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	f503 74f0 	add.w	r4, r3, #480	@ 0x1e0
 80127b6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80127ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80127bc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80127c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80127c4:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80127c8:	4618      	mov	r0, r3
 80127ca:	f007 f825 	bl	8019818 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80127ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80127d2:	4619      	mov	r1, r3
 80127d4:	4620      	mov	r0, r4
 80127d6:	f006 ffd2 	bl	801977e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80127da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80127de:	4618      	mov	r0, r3
 80127e0:	f006 ffc7 	bl	8019772 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80127e4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80127e8:	4618      	mov	r0, r3
 80127ea:	f000 f895 	bl	8012918 <_ZNSt15__new_allocatorIcED1Ev>
 80127ee:	e026      	b.n	801283e <_ZN16VL53L0X_EnhancedC1EP12GPIO_TypeDefthP19__I2C_HandleTypeDefPKc+0x13e>
    } else {
        char temp_id[32];
        snprintf(temp_id, sizeof(temp_id), "VL53L0X_0x%02X", address);
 80127f0:	797b      	ldrb	r3, [r7, #5]
 80127f2:	f107 0010 	add.w	r0, r7, #16
 80127f6:	4a19      	ldr	r2, [pc, #100]	@ (801285c <_ZN16VL53L0X_EnhancedC1EP12GPIO_TypeDefthP19__I2C_HandleTypeDefPKc+0x15c>)
 80127f8:	2120      	movs	r1, #32
 80127fa:	f008 fb25 	bl	801ae48 <sniprintf>
        sensor_id = std::string(temp_id);
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	f503 74f0 	add.w	r4, r3, #480	@ 0x1e0
 8012804:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8012808:	66bb      	str	r3, [r7, #104]	@ 0x68
 801280a:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 801280e:	f107 0110 	add.w	r1, r7, #16
 8012812:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012816:	4618      	mov	r0, r3
 8012818:	f006 fffe 	bl	8019818 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 801281c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012820:	4619      	mov	r1, r3
 8012822:	4620      	mov	r0, r4
 8012824:	f006 ffab 	bl	801977e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8012828:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801282c:	4618      	mov	r0, r3
 801282e:	f006 ffa0 	bl	8019772 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012832:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8012836:	4618      	mov	r0, r3
 8012838:	f000 f86e 	bl	8012918 <_ZNSt15__new_allocatorIcED1Ev>
 801283c:	bf00      	nop
    }
    
    // Use provided I2C handle or default
    if (hi2c == nullptr) {
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8012844:	2b00      	cmp	r3, #0
 8012846:	d103      	bne.n	8012850 <_ZN16VL53L0X_EnhancedC1EP12GPIO_TypeDefthP19__I2C_HandleTypeDefPKc+0x150>
        hi2c = &hi2c1;
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	4a05      	ldr	r2, [pc, #20]	@ (8012860 <_ZN16VL53L0X_EnhancedC1EP12GPIO_TypeDefthP19__I2C_HandleTypeDefPKc+0x160>)
 801284c:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
    }
}
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	4618      	mov	r0, r3
 8012854:	3774      	adds	r7, #116	@ 0x74
 8012856:	46bd      	mov	sp, r7
 8012858:	bd90      	pop	{r4, r7, pc}
 801285a:	bf00      	nop
 801285c:	0801bdc0 	.word	0x0801bdc0
 8012860:	24000688 	.word	0x24000688

08012864 <_ZN16VL53L0X_EnhancedD1Ev>:

// Destructor
VL53L0X_Enhanced::~VL53L0X_Enhanced()
 8012864:	b580      	push	{r7, lr}
 8012866:	b082      	sub	sp, #8
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
{
    if (is_continuous_mode) {
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f893 31d2 	ldrb.w	r3, [r3, #466]	@ 0x1d2
 8012872:	2b00      	cmp	r3, #0
 8012874:	d002      	beq.n	801287c <_ZN16VL53L0X_EnhancedD1Ev+0x18>
        StopContinuous();
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f000 f80c 	bl	8012894 <_ZN16VL53L0X_Enhanced14StopContinuousEv>
    }
}
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8012882:	4618      	mov	r0, r3
 8012884:	f006 ff75 	bl	8019772 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	4618      	mov	r0, r3
 801288c:	3708      	adds	r7, #8
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}
	...

08012894 <_ZN16VL53L0X_Enhanced14StopContinuousEv>:
    return false;
}

// Stop continuous measurement mode
bool VL53L0X_Enhanced::StopContinuous()
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b084      	sub	sp, #16
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
    if (!is_initialized || !is_continuous_mode) {
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f893 31d0 	ldrb.w	r3, [r3, #464]	@ 0x1d0
 80128a2:	f083 0301 	eor.w	r3, r3, #1
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d107      	bne.n	80128bc <_ZN16VL53L0X_Enhanced14StopContinuousEv+0x28>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f893 31d2 	ldrb.w	r3, [r3, #466]	@ 0x1d2
 80128b2:	f083 0301 	eor.w	r3, r3, #1
 80128b6:	b2db      	uxtb	r3, r3
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d001      	beq.n	80128c0 <_ZN16VL53L0X_Enhanced14StopContinuousEv+0x2c>
        return false;
 80128bc:	2300      	movs	r3, #0
 80128be:	e024      	b.n	801290a <_ZN16VL53L0X_Enhanced14StopContinuousEv+0x76>
    }
    
    VL53L0X_Error status = VL53L0X_StopMeasurement(vl53_dev);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80128c6:	4618      	mov	r0, r3
 80128c8:	f7ff fcd6 	bl	8012278 <VL53L0X_StopMeasurement>
 80128cc:	4603      	mov	r3, r0
 80128ce:	73fb      	strb	r3, [r7, #15]
    
    if (status == VL53L0X_ERROR_NONE) {
 80128d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d110      	bne.n	80128fa <_ZN16VL53L0X_Enhanced14StopContinuousEv+0x66>
        is_continuous_mode = false;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2200      	movs	r2, #0
 80128dc:	f883 21d2 	strb.w	r2, [r3, #466]	@ 0x1d2
        printf("%s: Continuous mode stopped\\n", sensor_id.c_str());
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80128e6:	4618      	mov	r0, r3
 80128e8:	f006 ff78 	bl	80197dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80128ec:	4603      	mov	r3, r0
 80128ee:	4619      	mov	r1, r3
 80128f0:	4808      	ldr	r0, [pc, #32]	@ (8012914 <_ZN16VL53L0X_Enhanced14StopContinuousEv+0x80>)
 80128f2:	f008 fa97 	bl	801ae24 <iprintf>
        return true;
 80128f6:	2301      	movs	r3, #1
 80128f8:	e007      	b.n	801290a <_ZN16VL53L0X_Enhanced14StopContinuousEv+0x76>
    }
    
    error_count++;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8012900:	1c5a      	adds	r2, r3, #1
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
    return false;
 8012908:	2300      	movs	r3, #0
}
 801290a:	4618      	mov	r0, r3
 801290c:	3710      	adds	r7, #16
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}
 8012912:	bf00      	nop
 8012914:	0801be88 	.word	0x0801be88

08012918 <_ZNSt15__new_allocatorIcED1Ev>:
#if __cplusplus >= 201103L
      __new_allocator& operator=(const __new_allocator&) = default;
#endif

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012918:	b480      	push	{r7}
 801291a:	b083      	sub	sp, #12
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	4618      	mov	r0, r3
 8012924:	370c      	adds	r7, #12
 8012926:	46bd      	mov	sp, r7
 8012928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292c:	4770      	bx	lr
	...

08012930 <lifterSetup>:
bool achieve[2] = {0, 0};
int Lifter[2] = {0,1};
float wheel_sp = 0.0f;

// Function implementations
void lifterSetup() {
 8012930:	b580      	push	{r7, lr}
 8012932:	af00      	add	r7, sp, #0
    setup_step = 1; // Motors
 8012934:	4b0e      	ldr	r3, [pc, #56]	@ (8012970 <lifterSetup+0x40>)
 8012936:	2201      	movs	r2, #1
 8012938:	601a      	str	r2, [r3, #0]
    
    // Initialize motors first
    front_lifter.setup();
 801293a:	480e      	ldr	r0, [pc, #56]	@ (8012974 <lifterSetup+0x44>)
 801293c:	f000 fa49 	bl	8012dd2 <_ZN8DC_motor5setupEv>
    back_lifter.setup();
 8012940:	480d      	ldr	r0, [pc, #52]	@ (8012978 <lifterSetup+0x48>)
 8012942:	f000 fa46 	bl	8012dd2 <_ZN8DC_motor5setupEv>
    rightWheel.setup();
 8012946:	480d      	ldr	r0, [pc, #52]	@ (801297c <lifterSetup+0x4c>)
 8012948:	f000 fa43 	bl	8012dd2 <_ZN8DC_motor5setupEv>
    leftWheel.setup();
 801294c:	480c      	ldr	r0, [pc, #48]	@ (8012980 <lifterSetup+0x50>)
 801294e:	f000 fa40 	bl	8012dd2 <_ZN8DC_motor5setupEv>
    leftWheel.set_motor_parameter(64,100);
 8012952:	2164      	movs	r1, #100	@ 0x64
 8012954:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8012984 <lifterSetup+0x54>
 8012958:	4809      	ldr	r0, [pc, #36]	@ (8012980 <lifterSetup+0x50>)
 801295a:	f000 fa56 	bl	8012e0a <_ZN8DC_motor19set_motor_parameterEfi>
    rightWheel.set_motor_parameter(64,100);
 801295e:	2164      	movs	r1, #100	@ 0x64
 8012960:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8012984 <lifterSetup+0x54>
 8012964:	4805      	ldr	r0, [pc, #20]	@ (801297c <lifterSetup+0x4c>)
 8012966:	f000 fa50 	bl	8012e0a <_ZN8DC_motor19set_motor_parameterEfi>
//    if (front_sensor_status == 2) {
//        i2c_test_front = testI2CConnection(0x31) ? 1 : -1; // Verify at new address
//    }
//
//    setup_step = 8; // Complete
}
 801296a:	bf00      	nop
 801296c:	bd80      	pop	{r7, pc}
 801296e:	bf00      	nop
 8012970:	24001160 	.word	0x24001160
 8012974:	2400121c 	.word	0x2400121c
 8012978:	24001278 	.word	0x24001278
 801297c:	240011c0 	.word	0x240011c0
 8012980:	24001164 	.word	0x24001164
 8012984:	42800000 	.word	0x42800000

08012988 <_Z41__static_initialization_and_destruction_0v>:
    printf("I2C Tests - Back: %s, Front: %s\\n", 
           (i2c_test_back == 1) ? "OK" : "FAIL",
           (i2c_test_front == 1) ? "OK" : "FAIL");
    printf("Setup completed at step: %d\\n", setup_step);
    printf("================================\\n");
}
 8012988:	b580      	push	{r7, lr}
 801298a:	b084      	sub	sp, #16
 801298c:	af04      	add	r7, sp, #16
DC_motor leftWheel = {&htim3, GPIOD, GPIO_PIN_14, &htim15, TIM_CHANNEL_1, 4, 20, 1};
 801298e:	2301      	movs	r3, #1
 8012990:	9302      	str	r3, [sp, #8]
 8012992:	2300      	movs	r3, #0
 8012994:	9301      	str	r3, [sp, #4]
 8012996:	4b2b      	ldr	r3, [pc, #172]	@ (8012a44 <_Z41__static_initialization_and_destruction_0v+0xbc>)
 8012998:	9300      	str	r3, [sp, #0]
 801299a:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 801299e:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 80129a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80129a6:	4a28      	ldr	r2, [pc, #160]	@ (8012a48 <_Z41__static_initialization_and_destruction_0v+0xc0>)
 80129a8:	4928      	ldr	r1, [pc, #160]	@ (8012a4c <_Z41__static_initialization_and_destruction_0v+0xc4>)
 80129aa:	4829      	ldr	r0, [pc, #164]	@ (8012a50 <_Z41__static_initialization_and_destruction_0v+0xc8>)
 80129ac:	f7ee f88a 	bl	8000ac4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor rightWheel  = {&htim23, GPIOD, GPIO_PIN_11, &htim15, TIM_CHANNEL_2, 4, 20, 1};
 80129b0:	2301      	movs	r3, #1
 80129b2:	9302      	str	r3, [sp, #8]
 80129b4:	2304      	movs	r3, #4
 80129b6:	9301      	str	r3, [sp, #4]
 80129b8:	4b22      	ldr	r3, [pc, #136]	@ (8012a44 <_Z41__static_initialization_and_destruction_0v+0xbc>)
 80129ba:	9300      	str	r3, [sp, #0]
 80129bc:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 80129c0:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 80129c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80129c8:	4a1f      	ldr	r2, [pc, #124]	@ (8012a48 <_Z41__static_initialization_and_destruction_0v+0xc0>)
 80129ca:	4922      	ldr	r1, [pc, #136]	@ (8012a54 <_Z41__static_initialization_and_destruction_0v+0xcc>)
 80129cc:	4822      	ldr	r0, [pc, #136]	@ (8012a58 <_Z41__static_initialization_and_destruction_0v+0xd0>)
 80129ce:	f7ee f879 	bl	8000ac4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor front_lifter = {&htim8, GPIOD, GPIO_PIN_9, &htim16, TIM_CHANNEL_1, 4, 20, 1};
 80129d2:	2301      	movs	r3, #1
 80129d4:	9302      	str	r3, [sp, #8]
 80129d6:	2300      	movs	r3, #0
 80129d8:	9301      	str	r3, [sp, #4]
 80129da:	4b20      	ldr	r3, [pc, #128]	@ (8012a5c <_Z41__static_initialization_and_destruction_0v+0xd4>)
 80129dc:	9300      	str	r3, [sp, #0]
 80129de:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 80129e2:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 80129e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80129ea:	4a17      	ldr	r2, [pc, #92]	@ (8012a48 <_Z41__static_initialization_and_destruction_0v+0xc0>)
 80129ec:	491c      	ldr	r1, [pc, #112]	@ (8012a60 <_Z41__static_initialization_and_destruction_0v+0xd8>)
 80129ee:	481d      	ldr	r0, [pc, #116]	@ (8012a64 <_Z41__static_initialization_and_destruction_0v+0xdc>)
 80129f0:	f7ee f868 	bl	8000ac4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
DC_motor back_lifter = {&htim8, GPIOD, GPIO_PIN_10, &htim17, TIM_CHANNEL_1, 4, 20, 1};
 80129f4:	2301      	movs	r3, #1
 80129f6:	9302      	str	r3, [sp, #8]
 80129f8:	2300      	movs	r3, #0
 80129fa:	9301      	str	r3, [sp, #4]
 80129fc:	4b1a      	ldr	r3, [pc, #104]	@ (8012a68 <_Z41__static_initialization_and_destruction_0v+0xe0>)
 80129fe:	9300      	str	r3, [sp, #0]
 8012a00:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8012a04:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8012a08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012a0c:	4a0e      	ldr	r2, [pc, #56]	@ (8012a48 <_Z41__static_initialization_and_destruction_0v+0xc0>)
 8012a0e:	4914      	ldr	r1, [pc, #80]	@ (8012a60 <_Z41__static_initialization_and_destruction_0v+0xd8>)
 8012a10:	4816      	ldr	r0, [pc, #88]	@ (8012a6c <_Z41__static_initialization_and_destruction_0v+0xe4>)
 8012a12:	f7ee f857 	bl	8000ac4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mffb>
VL53L0X_Enhanced backSensor(GPIOG, GPIO_PIN_1, 0x30, &hi2c1, "Back_Lifter");   // Back sensor: XSHUT pin GPIO_PIN_1, I2C address 0x30
 8012a16:	4b16      	ldr	r3, [pc, #88]	@ (8012a70 <_Z41__static_initialization_and_destruction_0v+0xe8>)
 8012a18:	9301      	str	r3, [sp, #4]
 8012a1a:	4b16      	ldr	r3, [pc, #88]	@ (8012a74 <_Z41__static_initialization_and_destruction_0v+0xec>)
 8012a1c:	9300      	str	r3, [sp, #0]
 8012a1e:	2330      	movs	r3, #48	@ 0x30
 8012a20:	2202      	movs	r2, #2
 8012a22:	4915      	ldr	r1, [pc, #84]	@ (8012a78 <_Z41__static_initialization_and_destruction_0v+0xf0>)
 8012a24:	4815      	ldr	r0, [pc, #84]	@ (8012a7c <_Z41__static_initialization_and_destruction_0v+0xf4>)
 8012a26:	f7ff fe6b 	bl	8012700 <_ZN16VL53L0X_EnhancedC1EP12GPIO_TypeDefthP19__I2C_HandleTypeDefPKc>
VL53L0X_Enhanced frontSensor(GPIOG, GPIO_PIN_2, 0x31, &hi2c1, "Front_Lifter"); // Front sensor: XSHUT pin GPIO_PIN_2, I2C address 0x31
 8012a2a:	4b15      	ldr	r3, [pc, #84]	@ (8012a80 <_Z41__static_initialization_and_destruction_0v+0xf8>)
 8012a2c:	9301      	str	r3, [sp, #4]
 8012a2e:	4b11      	ldr	r3, [pc, #68]	@ (8012a74 <_Z41__static_initialization_and_destruction_0v+0xec>)
 8012a30:	9300      	str	r3, [sp, #0]
 8012a32:	2331      	movs	r3, #49	@ 0x31
 8012a34:	2204      	movs	r2, #4
 8012a36:	4910      	ldr	r1, [pc, #64]	@ (8012a78 <_Z41__static_initialization_and_destruction_0v+0xf0>)
 8012a38:	4812      	ldr	r0, [pc, #72]	@ (8012a84 <_Z41__static_initialization_and_destruction_0v+0xfc>)
 8012a3a:	f7ff fe61 	bl	8012700 <_ZN16VL53L0X_EnhancedC1EP12GPIO_TypeDefthP19__I2C_HandleTypeDefPKc>
}
 8012a3e:	bf00      	nop
 8012a40:	46bd      	mov	sp, r7
 8012a42:	bd80      	pop	{r7, pc}
 8012a44:	24000bdc 	.word	0x24000bdc
 8012a48:	58020c00 	.word	0x58020c00
 8012a4c:	24000930 	.word	0x24000930
 8012a50:	24001164 	.word	0x24001164
 8012a54:	24000cc0 	.word	0x24000cc0
 8012a58:	240011c0 	.word	0x240011c0
 8012a5c:	24000c28 	.word	0x24000c28
 8012a60:	24000aac 	.word	0x24000aac
 8012a64:	2400121c 	.word	0x2400121c
 8012a68:	24000c74 	.word	0x24000c74
 8012a6c:	24001278 	.word	0x24001278
 8012a70:	0801c674 	.word	0x0801c674
 8012a74:	24000688 	.word	0x24000688
 8012a78:	58021800 	.word	0x58021800
 8012a7c:	240012d4 	.word	0x240012d4
 8012a80:	0801c680 	.word	0x0801c680
 8012a84:	240014cc 	.word	0x240014cc

08012a88 <_Z41__static_initialization_and_destruction_1v>:
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	af00      	add	r7, sp, #0
VL53L0X_Enhanced frontSensor(GPIOG, GPIO_PIN_2, 0x31, &hi2c1, "Front_Lifter"); // Front sensor: XSHUT pin GPIO_PIN_2, I2C address 0x31
 8012a8c:	4803      	ldr	r0, [pc, #12]	@ (8012a9c <_Z41__static_initialization_and_destruction_1v+0x14>)
 8012a8e:	f7ff fee9 	bl	8012864 <_ZN16VL53L0X_EnhancedD1Ev>
VL53L0X_Enhanced backSensor(GPIOG, GPIO_PIN_1, 0x30, &hi2c1, "Back_Lifter");   // Back sensor: XSHUT pin GPIO_PIN_1, I2C address 0x30
 8012a92:	4803      	ldr	r0, [pc, #12]	@ (8012aa0 <_Z41__static_initialization_and_destruction_1v+0x18>)
 8012a94:	f7ff fee6 	bl	8012864 <_ZN16VL53L0X_EnhancedD1Ev>
}
 8012a98:	bf00      	nop
 8012a9a:	bd80      	pop	{r7, pc}
 8012a9c:	240014cc 	.word	0x240014cc
 8012aa0:	240012d4 	.word	0x240012d4

08012aa4 <_GLOBAL__sub_I_back_sensor_status>:
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	af00      	add	r7, sp, #0
 8012aa8:	f7ff ff6e 	bl	8012988 <_Z41__static_initialization_and_destruction_0v>
 8012aac:	bd80      	pop	{r7, pc}

08012aae <_GLOBAL__sub_D_back_sensor_status>:
 8012aae:	b580      	push	{r7, lr}
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	f7ff ffe9 	bl	8012a88 <_Z41__static_initialization_and_destruction_1v>
 8012ab6:	bd80      	pop	{r7, pc}

08012ab8 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8012ab8:	b480      	push	{r7}
 8012aba:	b083      	sub	sp, #12
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	ed87 0a01 	vstr	s0, [r7, #4]
 8012ac2:	edd7 7a01 	vldr	s15, [r7, #4]
 8012ac6:	eef0 7ae7 	vabs.f32	s15, s15
 8012aca:	eeb0 0a67 	vmov.f32	s0, s15
 8012ace:	370c      	adds	r7, #12
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad6:	4770      	bx	lr

08012ad8 <_ZN8DC_motor6PI_runEv>:
#include <cmath>




void DC_motor::PI_run(){
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b086      	sub	sp, #24
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
    float u = 0;
 8012ae0:	f04f 0300 	mov.w	r3, #0
 8012ae4:	617b      	str	r3, [r7, #20]
    int pul = 0;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	613b      	str	r3, [r7, #16]
    float bound = 1/ki;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	ed93 7a01 	vldr	s14, [r3, #4]
 8012af0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012af8:	edc7 7a03 	vstr	s15, [r7, #12]
    error = sp - speed;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	ed93 7a08 	vldr	s14, [r3, #32]
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	edd3 7a07 	vldr	s15, [r3, #28]
 8012b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	edc3 7a03 	vstr	s15, [r3, #12]
    integral += error*span;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	ed93 7a05 	vldr	s14, [r3, #20]
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	edd3 6a03 	vldr	s13, [r3, #12]
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8012b24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	edc3 7a05 	vstr	s15, [r3, #20]
    differential = error - pre_error;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	ed93 7a03 	vldr	s14, [r3, #12]
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	edd3 7a04 	vldr	s15, [r3, #16]
 8012b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	edc3 7a06 	vstr	s15, [r3, #24]

    if (integral > bound)integral = bound;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	edd3 7a05 	vldr	s15, [r3, #20]
 8012b4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8012b52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b5a:	d503      	bpl.n	8012b64 <_ZN8DC_motor6PI_runEv+0x8c>
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	68fa      	ldr	r2, [r7, #12]
 8012b60:	615a      	str	r2, [r3, #20]
 8012b62:	e012      	b.n	8012b8a <_ZN8DC_motor6PI_runEv+0xb2>
    else if (integral < -bound)integral = -bound;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	ed93 7a05 	vldr	s14, [r3, #20]
 8012b6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8012b6e:	eef1 7a67 	vneg.f32	s15, s15
 8012b72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b7a:	d506      	bpl.n	8012b8a <_ZN8DC_motor6PI_runEv+0xb2>
 8012b7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8012b80:	eef1 7a67 	vneg.f32	s15, s15
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	edc3 7a05 	vstr	s15, [r3, #20]
    u = kp*error + ki*integral + kd*differential;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	ed93 7a00 	vldr	s14, [r3]
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	edd3 7a03 	vldr	s15, [r3, #12]
 8012b96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	edd3 6a01 	vldr	s13, [r3, #4]
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	edd3 7a05 	vldr	s15, [r3, #20]
 8012ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	edd3 6a02 	vldr	s13, [r3, #8]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	edd3 7a06 	vldr	s15, [r3, #24]
 8012bba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012bc2:	edc7 7a05 	vstr	s15, [r7, #20]
    pre_error = error;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	68da      	ldr	r2, [r3, #12]
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	611a      	str	r2, [r3, #16]
    
    if (u > 1) u = 1;
 8012bce:	edd7 7a05 	vldr	s15, [r7, #20]
 8012bd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bde:	dd03      	ble.n	8012be8 <_ZN8DC_motor6PI_runEv+0x110>
 8012be0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8012be4:	617b      	str	r3, [r7, #20]
 8012be6:	e00a      	b.n	8012bfe <_ZN8DC_motor6PI_runEv+0x126>
    else if (u < -1) u = -1;
 8012be8:	edd7 7a05 	vldr	s15, [r7, #20]
 8012bec:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bf8:	d501      	bpl.n	8012bfe <_ZN8DC_motor6PI_runEv+0x126>
 8012bfa:	4b51      	ldr	r3, [pc, #324]	@ (8012d40 <_ZN8DC_motor6PI_runEv+0x268>)
 8012bfc:	617b      	str	r3, [r7, #20]
    pul = (int)(fabs(u)*arr);
 8012bfe:	ed97 0a05 	vldr	s0, [r7, #20]
 8012c02:	f7ff ff59 	bl	8012ab8 <_ZSt4fabsf>
 8012c06:	eeb0 7a40 	vmov.f32	s14, s0
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012c0e:	ee07 3a90 	vmov	s15, r3
 8012c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012c1e:	ee17 3a90 	vmov	r3, s15
 8012c22:	613b      	str	r3, [r7, #16]
    if(dir_pin == true){
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012c2a:	2b01      	cmp	r3, #1
 8012c2c:	d124      	bne.n	8012c78 <_ZN8DC_motor6PI_runEv+0x1a0>
       	if(u>0){
 8012c2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8012c32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c3a:	dd09      	ble.n	8012c50 <_ZN8DC_motor6PI_runEv+0x178>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012c46:	2200      	movs	r2, #0
 8012c48:	4619      	mov	r1, r3
 8012c4a:	f7f6 fde1 	bl	8009810 <HAL_GPIO_WritePin>
 8012c4e:	e03c      	b.n	8012cca <_ZN8DC_motor6PI_runEv+0x1f2>
       	    }else if (u<0){
 8012c50:	edd7 7a05 	vldr	s15, [r7, #20]
 8012c54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c5c:	d509      	bpl.n	8012c72 <_ZN8DC_motor6PI_runEv+0x19a>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012c68:	2201      	movs	r2, #1
 8012c6a:	4619      	mov	r1, r3
 8012c6c:	f7f6 fdd0 	bl	8009810 <HAL_GPIO_WritePin>
 8012c70:	e02b      	b.n	8012cca <_ZN8DC_motor6PI_runEv+0x1f2>
       	    }else{
       	        pul = 0;
 8012c72:	2300      	movs	r3, #0
 8012c74:	613b      	str	r3, [r7, #16]
 8012c76:	e028      	b.n	8012cca <_ZN8DC_motor6PI_runEv+0x1f2>
       	    }
       }else if(dir_pin == false){
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d123      	bne.n	8012cca <_ZN8DC_motor6PI_runEv+0x1f2>
       	if(u>0){
 8012c82:	edd7 7a05 	vldr	s15, [r7, #20]
 8012c86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c8e:	dd09      	ble.n	8012ca4 <_ZN8DC_motor6PI_runEv+0x1cc>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012c9a:	2201      	movs	r2, #1
 8012c9c:	4619      	mov	r1, r3
 8012c9e:	f7f6 fdb7 	bl	8009810 <HAL_GPIO_WritePin>
 8012ca2:	e012      	b.n	8012cca <_ZN8DC_motor6PI_runEv+0x1f2>
       	    }else if (u<0){
 8012ca4:	edd7 7a05 	vldr	s15, [r7, #20]
 8012ca8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cb0:	d509      	bpl.n	8012cc6 <_ZN8DC_motor6PI_runEv+0x1ee>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	4619      	mov	r1, r3
 8012cc0:	f7f6 fda6 	bl	8009810 <HAL_GPIO_WritePin>
 8012cc4:	e001      	b.n	8012cca <_ZN8DC_motor6PI_runEv+0x1f2>
       	    }else{
       	        pul = 0;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	613b      	str	r3, [r7, #16]
       	    }
       }
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d105      	bne.n	8012cde <_ZN8DC_motor6PI_runEv+0x206>
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	693a      	ldr	r2, [r7, #16]
 8012cda:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012cdc:	e02c      	b.n	8012d38 <_ZN8DC_motor6PI_runEv+0x260>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ce2:	2b04      	cmp	r3, #4
 8012ce4:	d105      	bne.n	8012cf2 <_ZN8DC_motor6PI_runEv+0x21a>
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	693a      	ldr	r2, [r7, #16]
 8012cee:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8012cf0:	e022      	b.n	8012d38 <_ZN8DC_motor6PI_runEv+0x260>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012cf6:	2b08      	cmp	r3, #8
 8012cf8:	d105      	bne.n	8012d06 <_ZN8DC_motor6PI_runEv+0x22e>
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	693a      	ldr	r2, [r7, #16]
 8012d02:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8012d04:	e018      	b.n	8012d38 <_ZN8DC_motor6PI_runEv+0x260>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d0a:	2b0c      	cmp	r3, #12
 8012d0c:	d105      	bne.n	8012d1a <_ZN8DC_motor6PI_runEv+0x242>
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	693a      	ldr	r2, [r7, #16]
 8012d16:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8012d18:	e00e      	b.n	8012d38 <_ZN8DC_motor6PI_runEv+0x260>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d1e:	2b10      	cmp	r3, #16
 8012d20:	d105      	bne.n	8012d2e <_ZN8DC_motor6PI_runEv+0x256>
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	693a      	ldr	r2, [r7, #16]
 8012d2a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8012d2c:	e004      	b.n	8012d38 <_ZN8DC_motor6PI_runEv+0x260>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	693a      	ldr	r2, [r7, #16]
 8012d36:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8012d38:	bf00      	nop
 8012d3a:	3718      	adds	r7, #24
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}
 8012d40:	bf800000 	.word	0xbf800000

08012d44 <_ZN8DC_motor8setspeedEf>:


void DC_motor::setspeed(float target_speed){
 8012d44:	b480      	push	{r7}
 8012d46:	b083      	sub	sp, #12
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
 8012d4c:	ed87 0a00 	vstr	s0, [r7]
    sp = target_speed;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	683a      	ldr	r2, [r7, #0]
 8012d54:	621a      	str	r2, [r3, #32]
}
 8012d56:	bf00      	nop
 8012d58:	370c      	adds	r7, #12
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d60:	4770      	bx	lr

08012d62 <_ZN8DC_motor11updateSpeedEi>:
void DC_motor::updateSpeed(int sign){
 8012d62:	b480      	push	{r7}
 8012d64:	b085      	sub	sp, #20
 8012d66:	af00      	add	r7, sp, #0
 8012d68:	6078      	str	r0, [r7, #4]
 8012d6a:	6039      	str	r1, [r7, #0]
    int16_t enc ;
	enc = __HAL_TIM_GetCounter(enc_htim);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d74:	81fb      	strh	r3, [r7, #14]
	speed = sign*(float)enc /(4*resolution*span*reduction_ratio);//RPS revolution per second
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	ee07 3a90 	vmov	s15, r3
 8012d7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012d80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012d84:	ee07 3a90 	vmov	s15, r3
 8012d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d8c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d94:	009b      	lsls	r3, r3, #2
 8012d96:	ee07 3a90 	vmov	s15, r3
 8012d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8012da4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8012dae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	edc3 7a07 	vstr	s15, [r3, #28]
    __HAL_TIM_SetCounter(enc_htim,0);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8012dc6:	bf00      	nop
 8012dc8:	3714      	adds	r7, #20
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd0:	4770      	bx	lr

08012dd2 <_ZN8DC_motor5setupEv>:
void DC_motor::setup(){
 8012dd2:	b580      	push	{r7, lr}
 8012dd4:	b082      	sub	sp, #8
 8012dd6:	af00      	add	r7, sp, #0
 8012dd8:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start_IT(PWM_htim, PWM_TIM_CHANNEL);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012de2:	4619      	mov	r1, r3
 8012de4:	4610      	mov	r0, r2
 8012de6:	f7fb fecf 	bl	800eb88 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_1);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012dee:	2100      	movs	r1, #0
 8012df0:	4618      	mov	r0, r3
 8012df2:	f7fc f8d7 	bl	800efa4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_2);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012dfa:	2104      	movs	r1, #4
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7fc f8d1 	bl	800efa4 <HAL_TIM_Encoder_Start>
}    
 8012e02:	bf00      	nop
 8012e04:	3708      	adds	r7, #8
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}

08012e0a <_ZN8DC_motor19set_motor_parameterEfi>:
void DC_motor::set_motor_parameter(float reduction_ratio,int resolution) {
 8012e0a:	b480      	push	{r7}
 8012e0c:	b085      	sub	sp, #20
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	60f8      	str	r0, [r7, #12]
 8012e12:	ed87 0a02 	vstr	s0, [r7, #8]
 8012e16:	6079      	str	r1, [r7, #4]
    this->reduction_ratio = reduction_ratio;
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	68ba      	ldr	r2, [r7, #8]
 8012e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    this->resolution = resolution;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	687a      	ldr	r2, [r7, #4]
 8012e22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8012e24:	bf00      	nop
 8012e26:	3714      	adds	r7, #20
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2e:	4770      	bx	lr

08012e30 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8012e30:	b480      	push	{r7}
 8012e32:	b083      	sub	sp, #12
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	601a      	str	r2, [r3, #0]
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	2200      	movs	r2, #0
 8012e42:	605a      	str	r2, [r3, #4]
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	4618      	mov	r0, r3
 8012e48:	370c      	adds	r7, #12
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e50:	4770      	bx	lr
	...

08012e54 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8012e54:	b480      	push	{r7}
 8012e56:	b083      	sub	sp, #12
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
 8012e5c:	4a04      	ldr	r2, [pc, #16]	@ (8012e70 <_ZN3ros3MsgC1Ev+0x1c>)
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	601a      	str	r2, [r3, #0]
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	4618      	mov	r0, r3
 8012e66:	370c      	adds	r7, #12
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6e:	4770      	bx	lr
 8012e70:	0801cac8 	.word	0x0801cac8

08012e74 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b082      	sub	sp, #8
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
      data()
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f7ff ffe8 	bl	8012e54 <_ZN3ros3MsgC1Ev>
 8012e84:	4a06      	ldr	r2, [pc, #24]	@ (8012ea0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	601a      	str	r2, [r3, #0]
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	3304      	adds	r3, #4
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f7ff ffce 	bl	8012e30 <_ZN3ros4TimeC1Ev>
    {
    }
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	4618      	mov	r0, r3
 8012e98:	3708      	adds	r7, #8
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd80      	pop	{r7, pc}
 8012e9e:	bf00      	nop
 8012ea0:	0801cab0 	.word	0x0801cab0

08012ea4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8012ea4:	b480      	push	{r7}
 8012ea6:	b085      	sub	sp, #20
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
 8012eac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8012eae:	2300      	movs	r3, #0
 8012eb0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	6859      	ldr	r1, [r3, #4]
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	683a      	ldr	r2, [r7, #0]
 8012eba:	4413      	add	r3, r2
 8012ebc:	b2ca      	uxtb	r2, r1
 8012ebe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	685b      	ldr	r3, [r3, #4]
 8012ec4:	0a19      	lsrs	r1, r3, #8
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	3301      	adds	r3, #1
 8012eca:	683a      	ldr	r2, [r7, #0]
 8012ecc:	4413      	add	r3, r2
 8012ece:	b2ca      	uxtb	r2, r1
 8012ed0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	685b      	ldr	r3, [r3, #4]
 8012ed6:	0c19      	lsrs	r1, r3, #16
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	3302      	adds	r3, #2
 8012edc:	683a      	ldr	r2, [r7, #0]
 8012ede:	4413      	add	r3, r2
 8012ee0:	b2ca      	uxtb	r2, r1
 8012ee2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	685b      	ldr	r3, [r3, #4]
 8012ee8:	0e19      	lsrs	r1, r3, #24
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	3303      	adds	r3, #3
 8012eee:	683a      	ldr	r2, [r7, #0]
 8012ef0:	4413      	add	r3, r2
 8012ef2:	b2ca      	uxtb	r2, r1
 8012ef4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	3304      	adds	r3, #4
 8012efa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	6899      	ldr	r1, [r3, #8]
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	683a      	ldr	r2, [r7, #0]
 8012f04:	4413      	add	r3, r2
 8012f06:	b2ca      	uxtb	r2, r1
 8012f08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	689b      	ldr	r3, [r3, #8]
 8012f0e:	0a19      	lsrs	r1, r3, #8
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	3301      	adds	r3, #1
 8012f14:	683a      	ldr	r2, [r7, #0]
 8012f16:	4413      	add	r3, r2
 8012f18:	b2ca      	uxtb	r2, r1
 8012f1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	689b      	ldr	r3, [r3, #8]
 8012f20:	0c19      	lsrs	r1, r3, #16
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	3302      	adds	r3, #2
 8012f26:	683a      	ldr	r2, [r7, #0]
 8012f28:	4413      	add	r3, r2
 8012f2a:	b2ca      	uxtb	r2, r1
 8012f2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	689b      	ldr	r3, [r3, #8]
 8012f32:	0e19      	lsrs	r1, r3, #24
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	3303      	adds	r3, #3
 8012f38:	683a      	ldr	r2, [r7, #0]
 8012f3a:	4413      	add	r3, r2
 8012f3c:	b2ca      	uxtb	r2, r1
 8012f3e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	3304      	adds	r3, #4
 8012f44:	60fb      	str	r3, [r7, #12]
      return offset;
 8012f46:	68fb      	ldr	r3, [r7, #12]
    }
 8012f48:	4618      	mov	r0, r3
 8012f4a:	3714      	adds	r7, #20
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f52:	4770      	bx	lr

08012f54 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8012f54:	b480      	push	{r7}
 8012f56:	b085      	sub	sp, #20
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	683a      	ldr	r2, [r7, #0]
 8012f66:	4413      	add	r3, r2
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	461a      	mov	r2, r3
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	685a      	ldr	r2, [r3, #4]
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	3301      	adds	r3, #1
 8012f78:	6839      	ldr	r1, [r7, #0]
 8012f7a:	440b      	add	r3, r1
 8012f7c:	781b      	ldrb	r3, [r3, #0]
 8012f7e:	021b      	lsls	r3, r3, #8
 8012f80:	431a      	orrs	r2, r3
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	685a      	ldr	r2, [r3, #4]
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	3302      	adds	r3, #2
 8012f8e:	6839      	ldr	r1, [r7, #0]
 8012f90:	440b      	add	r3, r1
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	041b      	lsls	r3, r3, #16
 8012f96:	431a      	orrs	r2, r3
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	685a      	ldr	r2, [r3, #4]
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	3303      	adds	r3, #3
 8012fa4:	6839      	ldr	r1, [r7, #0]
 8012fa6:	440b      	add	r3, r1
 8012fa8:	781b      	ldrb	r3, [r3, #0]
 8012faa:	061b      	lsls	r3, r3, #24
 8012fac:	431a      	orrs	r2, r3
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	3304      	adds	r3, #4
 8012fb6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	683a      	ldr	r2, [r7, #0]
 8012fbc:	4413      	add	r3, r2
 8012fbe:	781b      	ldrb	r3, [r3, #0]
 8012fc0:	461a      	mov	r2, r3
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	689a      	ldr	r2, [r3, #8]
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	3301      	adds	r3, #1
 8012fce:	6839      	ldr	r1, [r7, #0]
 8012fd0:	440b      	add	r3, r1
 8012fd2:	781b      	ldrb	r3, [r3, #0]
 8012fd4:	021b      	lsls	r3, r3, #8
 8012fd6:	431a      	orrs	r2, r3
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	689a      	ldr	r2, [r3, #8]
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	3302      	adds	r3, #2
 8012fe4:	6839      	ldr	r1, [r7, #0]
 8012fe6:	440b      	add	r3, r1
 8012fe8:	781b      	ldrb	r3, [r3, #0]
 8012fea:	041b      	lsls	r3, r3, #16
 8012fec:	431a      	orrs	r2, r3
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	689a      	ldr	r2, [r3, #8]
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	3303      	adds	r3, #3
 8012ffa:	6839      	ldr	r1, [r7, #0]
 8012ffc:	440b      	add	r3, r1
 8012ffe:	781b      	ldrb	r3, [r3, #0]
 8013000:	061b      	lsls	r3, r3, #24
 8013002:	431a      	orrs	r2, r3
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	3304      	adds	r3, #4
 801300c:	60fb      	str	r3, [r7, #12]
     return offset;
 801300e:	68fb      	ldr	r3, [r7, #12]
    }
 8013010:	4618      	mov	r0, r3
 8013012:	3714      	adds	r7, #20
 8013014:	46bd      	mov	sp, r7
 8013016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301a:	4770      	bx	lr

0801301c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 801301c:	b480      	push	{r7}
 801301e:	b083      	sub	sp, #12
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
 8013024:	4b03      	ldr	r3, [pc, #12]	@ (8013034 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8013026:	4618      	mov	r0, r3
 8013028:	370c      	adds	r7, #12
 801302a:	46bd      	mov	sp, r7
 801302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013030:	4770      	bx	lr
 8013032:	bf00      	nop
 8013034:	0801c690 	.word	0x0801c690

08013038 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8013038:	b480      	push	{r7}
 801303a:	b083      	sub	sp, #12
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
 8013040:	4b03      	ldr	r3, [pc, #12]	@ (8013050 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8013042:	4618      	mov	r0, r3
 8013044:	370c      	adds	r7, #12
 8013046:	46bd      	mov	sp, r7
 8013048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304c:	4770      	bx	lr
 801304e:	bf00      	nop
 8013050:	0801c6a0 	.word	0x0801c6a0

08013054 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8013054:	b580      	push	{r7, lr}
 8013056:	b082      	sub	sp, #8
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	4618      	mov	r0, r3
 8013060:	f7ff fef8 	bl	8012e54 <_ZN3ros3MsgC1Ev>
 8013064:	4a0b      	ldr	r2, [pc, #44]	@ (8013094 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	601a      	str	r2, [r3, #0]
      topic_id(0),
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2200      	movs	r2, #0
 801306e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	4a09      	ldr	r2, [pc, #36]	@ (8013098 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8013074:	609a      	str	r2, [r3, #8]
      message_type(""),
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	4a07      	ldr	r2, [pc, #28]	@ (8013098 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 801307a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	4a06      	ldr	r2, [pc, #24]	@ (8013098 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8013080:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	2200      	movs	r2, #0
 8013086:	615a      	str	r2, [r3, #20]
    {
    }
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	4618      	mov	r0, r3
 801308c:	3708      	adds	r7, #8
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}
 8013092:	bf00      	nop
 8013094:	0801ca98 	.word	0x0801ca98
 8013098:	0801c6c4 	.word	0x0801c6c4

0801309c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 801309c:	b580      	push	{r7, lr}
 801309e:	b088      	sub	sp, #32
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
 80130a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80130a6:	2300      	movs	r3, #0
 80130a8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	8899      	ldrh	r1, [r3, #4]
 80130ae:	69fb      	ldr	r3, [r7, #28]
 80130b0:	683a      	ldr	r2, [r7, #0]
 80130b2:	4413      	add	r3, r2
 80130b4:	b2ca      	uxtb	r2, r1
 80130b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	889b      	ldrh	r3, [r3, #4]
 80130bc:	0a1b      	lsrs	r3, r3, #8
 80130be:	b299      	uxth	r1, r3
 80130c0:	69fb      	ldr	r3, [r7, #28]
 80130c2:	3301      	adds	r3, #1
 80130c4:	683a      	ldr	r2, [r7, #0]
 80130c6:	4413      	add	r3, r2
 80130c8:	b2ca      	uxtb	r2, r1
 80130ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80130cc:	69fb      	ldr	r3, [r7, #28]
 80130ce:	3302      	adds	r3, #2
 80130d0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	689b      	ldr	r3, [r3, #8]
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7ed f96a 	bl	80003b0 <strlen>
 80130dc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80130de:	69fb      	ldr	r3, [r7, #28]
 80130e0:	683a      	ldr	r2, [r7, #0]
 80130e2:	4413      	add	r3, r2
 80130e4:	69b9      	ldr	r1, [r7, #24]
 80130e6:	4618      	mov	r0, r3
 80130e8:	f002 fd44 	bl	8015b74 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80130ec:	69fb      	ldr	r3, [r7, #28]
 80130ee:	3304      	adds	r3, #4
 80130f0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80130f2:	69fb      	ldr	r3, [r7, #28]
 80130f4:	683a      	ldr	r2, [r7, #0]
 80130f6:	18d0      	adds	r0, r2, r3
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	689b      	ldr	r3, [r3, #8]
 80130fc:	69ba      	ldr	r2, [r7, #24]
 80130fe:	4619      	mov	r1, r3
 8013100:	f008 f805 	bl	801b10e <memcpy>
      offset += length_topic_name;
 8013104:	69fa      	ldr	r2, [r7, #28]
 8013106:	69bb      	ldr	r3, [r7, #24]
 8013108:	4413      	add	r3, r2
 801310a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	68db      	ldr	r3, [r3, #12]
 8013110:	4618      	mov	r0, r3
 8013112:	f7ed f94d 	bl	80003b0 <strlen>
 8013116:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8013118:	69fb      	ldr	r3, [r7, #28]
 801311a:	683a      	ldr	r2, [r7, #0]
 801311c:	4413      	add	r3, r2
 801311e:	6979      	ldr	r1, [r7, #20]
 8013120:	4618      	mov	r0, r3
 8013122:	f002 fd27 	bl	8015b74 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8013126:	69fb      	ldr	r3, [r7, #28]
 8013128:	3304      	adds	r3, #4
 801312a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 801312c:	69fb      	ldr	r3, [r7, #28]
 801312e:	683a      	ldr	r2, [r7, #0]
 8013130:	18d0      	adds	r0, r2, r3
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	68db      	ldr	r3, [r3, #12]
 8013136:	697a      	ldr	r2, [r7, #20]
 8013138:	4619      	mov	r1, r3
 801313a:	f007 ffe8 	bl	801b10e <memcpy>
      offset += length_message_type;
 801313e:	69fa      	ldr	r2, [r7, #28]
 8013140:	697b      	ldr	r3, [r7, #20]
 8013142:	4413      	add	r3, r2
 8013144:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	691b      	ldr	r3, [r3, #16]
 801314a:	4618      	mov	r0, r3
 801314c:	f7ed f930 	bl	80003b0 <strlen>
 8013150:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8013152:	69fb      	ldr	r3, [r7, #28]
 8013154:	683a      	ldr	r2, [r7, #0]
 8013156:	4413      	add	r3, r2
 8013158:	6939      	ldr	r1, [r7, #16]
 801315a:	4618      	mov	r0, r3
 801315c:	f002 fd0a 	bl	8015b74 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8013160:	69fb      	ldr	r3, [r7, #28]
 8013162:	3304      	adds	r3, #4
 8013164:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8013166:	69fb      	ldr	r3, [r7, #28]
 8013168:	683a      	ldr	r2, [r7, #0]
 801316a:	18d0      	adds	r0, r2, r3
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	691b      	ldr	r3, [r3, #16]
 8013170:	693a      	ldr	r2, [r7, #16]
 8013172:	4619      	mov	r1, r3
 8013174:	f007 ffcb 	bl	801b10e <memcpy>
      offset += length_md5sum;
 8013178:	69fa      	ldr	r2, [r7, #28]
 801317a:	693b      	ldr	r3, [r7, #16]
 801317c:	4413      	add	r3, r2
 801317e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	695b      	ldr	r3, [r3, #20]
 8013184:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8013186:	68f9      	ldr	r1, [r7, #12]
 8013188:	69fb      	ldr	r3, [r7, #28]
 801318a:	683a      	ldr	r2, [r7, #0]
 801318c:	4413      	add	r3, r2
 801318e:	b2ca      	uxtb	r2, r1
 8013190:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	0a19      	lsrs	r1, r3, #8
 8013196:	69fb      	ldr	r3, [r7, #28]
 8013198:	3301      	adds	r3, #1
 801319a:	683a      	ldr	r2, [r7, #0]
 801319c:	4413      	add	r3, r2
 801319e:	b2ca      	uxtb	r2, r1
 80131a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	0c19      	lsrs	r1, r3, #16
 80131a6:	69fb      	ldr	r3, [r7, #28]
 80131a8:	3302      	adds	r3, #2
 80131aa:	683a      	ldr	r2, [r7, #0]
 80131ac:	4413      	add	r3, r2
 80131ae:	b2ca      	uxtb	r2, r1
 80131b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	0e19      	lsrs	r1, r3, #24
 80131b6:	69fb      	ldr	r3, [r7, #28]
 80131b8:	3303      	adds	r3, #3
 80131ba:	683a      	ldr	r2, [r7, #0]
 80131bc:	4413      	add	r3, r2
 80131be:	b2ca      	uxtb	r2, r1
 80131c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80131c2:	69fb      	ldr	r3, [r7, #28]
 80131c4:	3304      	adds	r3, #4
 80131c6:	61fb      	str	r3, [r7, #28]
      return offset;
 80131c8:	69fb      	ldr	r3, [r7, #28]
    }
 80131ca:	4618      	mov	r0, r3
 80131cc:	3720      	adds	r7, #32
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}

080131d2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80131d2:	b580      	push	{r7, lr}
 80131d4:	b08a      	sub	sp, #40	@ 0x28
 80131d6:	af00      	add	r7, sp, #0
 80131d8:	6078      	str	r0, [r7, #4]
 80131da:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80131dc:	2300      	movs	r3, #0
 80131de:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80131e0:	69bb      	ldr	r3, [r7, #24]
 80131e2:	683a      	ldr	r2, [r7, #0]
 80131e4:	4413      	add	r3, r2
 80131e6:	781b      	ldrb	r3, [r3, #0]
 80131e8:	461a      	mov	r2, r3
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	889b      	ldrh	r3, [r3, #4]
 80131f2:	b21a      	sxth	r2, r3
 80131f4:	69bb      	ldr	r3, [r7, #24]
 80131f6:	3301      	adds	r3, #1
 80131f8:	6839      	ldr	r1, [r7, #0]
 80131fa:	440b      	add	r3, r1
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	b21b      	sxth	r3, r3
 8013200:	021b      	lsls	r3, r3, #8
 8013202:	b21b      	sxth	r3, r3
 8013204:	4313      	orrs	r3, r2
 8013206:	b21b      	sxth	r3, r3
 8013208:	b29a      	uxth	r2, r3
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 801320e:	69bb      	ldr	r3, [r7, #24]
 8013210:	3302      	adds	r3, #2
 8013212:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8013214:	69bb      	ldr	r3, [r7, #24]
 8013216:	683a      	ldr	r2, [r7, #0]
 8013218:	441a      	add	r2, r3
 801321a:	f107 0314 	add.w	r3, r7, #20
 801321e:	4611      	mov	r1, r2
 8013220:	4618      	mov	r0, r3
 8013222:	f002 fcc6 	bl	8015bb2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8013226:	69bb      	ldr	r3, [r7, #24]
 8013228:	3304      	adds	r3, #4
 801322a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 801322c:	69bb      	ldr	r3, [r7, #24]
 801322e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013230:	e00b      	b.n	801324a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x78>
          inbuffer[k-1]=inbuffer[k];
 8013232:	683a      	ldr	r2, [r7, #0]
 8013234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013236:	441a      	add	r2, r3
 8013238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801323a:	3b01      	subs	r3, #1
 801323c:	6839      	ldr	r1, [r7, #0]
 801323e:	440b      	add	r3, r1
 8013240:	7812      	ldrb	r2, [r2, #0]
 8013242:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8013244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013246:	3301      	adds	r3, #1
 8013248:	627b      	str	r3, [r7, #36]	@ 0x24
 801324a:	69ba      	ldr	r2, [r7, #24]
 801324c:	697b      	ldr	r3, [r7, #20]
 801324e:	4413      	add	r3, r2
 8013250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013252:	429a      	cmp	r2, r3
 8013254:	d3ed      	bcc.n	8013232 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x60>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8013256:	69ba      	ldr	r2, [r7, #24]
 8013258:	697b      	ldr	r3, [r7, #20]
 801325a:	4413      	add	r3, r2
 801325c:	3b01      	subs	r3, #1
 801325e:	683a      	ldr	r2, [r7, #0]
 8013260:	4413      	add	r3, r2
 8013262:	2200      	movs	r2, #0
 8013264:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8013266:	69bb      	ldr	r3, [r7, #24]
 8013268:	3b01      	subs	r3, #1
 801326a:	683a      	ldr	r2, [r7, #0]
 801326c:	441a      	add	r2, r3
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8013272:	69ba      	ldr	r2, [r7, #24]
 8013274:	697b      	ldr	r3, [r7, #20]
 8013276:	4413      	add	r3, r2
 8013278:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 801327a:	69bb      	ldr	r3, [r7, #24]
 801327c:	683a      	ldr	r2, [r7, #0]
 801327e:	441a      	add	r2, r3
 8013280:	f107 0310 	add.w	r3, r7, #16
 8013284:	4611      	mov	r1, r2
 8013286:	4618      	mov	r0, r3
 8013288:	f002 fc93 	bl	8015bb2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 801328c:	69bb      	ldr	r3, [r7, #24]
 801328e:	3304      	adds	r3, #4
 8013290:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8013292:	69bb      	ldr	r3, [r7, #24]
 8013294:	623b      	str	r3, [r7, #32]
 8013296:	e00b      	b.n	80132b0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xde>
          inbuffer[k-1]=inbuffer[k];
 8013298:	683a      	ldr	r2, [r7, #0]
 801329a:	6a3b      	ldr	r3, [r7, #32]
 801329c:	441a      	add	r2, r3
 801329e:	6a3b      	ldr	r3, [r7, #32]
 80132a0:	3b01      	subs	r3, #1
 80132a2:	6839      	ldr	r1, [r7, #0]
 80132a4:	440b      	add	r3, r1
 80132a6:	7812      	ldrb	r2, [r2, #0]
 80132a8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80132aa:	6a3b      	ldr	r3, [r7, #32]
 80132ac:	3301      	adds	r3, #1
 80132ae:	623b      	str	r3, [r7, #32]
 80132b0:	69ba      	ldr	r2, [r7, #24]
 80132b2:	693b      	ldr	r3, [r7, #16]
 80132b4:	4413      	add	r3, r2
 80132b6:	6a3a      	ldr	r2, [r7, #32]
 80132b8:	429a      	cmp	r2, r3
 80132ba:	d3ed      	bcc.n	8013298 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc6>
      }
      inbuffer[offset+length_message_type-1]=0;
 80132bc:	69ba      	ldr	r2, [r7, #24]
 80132be:	693b      	ldr	r3, [r7, #16]
 80132c0:	4413      	add	r3, r2
 80132c2:	3b01      	subs	r3, #1
 80132c4:	683a      	ldr	r2, [r7, #0]
 80132c6:	4413      	add	r3, r2
 80132c8:	2200      	movs	r2, #0
 80132ca:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80132cc:	69bb      	ldr	r3, [r7, #24]
 80132ce:	3b01      	subs	r3, #1
 80132d0:	683a      	ldr	r2, [r7, #0]
 80132d2:	441a      	add	r2, r3
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80132d8:	69ba      	ldr	r2, [r7, #24]
 80132da:	693b      	ldr	r3, [r7, #16]
 80132dc:	4413      	add	r3, r2
 80132de:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80132e0:	69bb      	ldr	r3, [r7, #24]
 80132e2:	683a      	ldr	r2, [r7, #0]
 80132e4:	441a      	add	r2, r3
 80132e6:	f107 030c 	add.w	r3, r7, #12
 80132ea:	4611      	mov	r1, r2
 80132ec:	4618      	mov	r0, r3
 80132ee:	f002 fc60 	bl	8015bb2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80132f2:	69bb      	ldr	r3, [r7, #24]
 80132f4:	3304      	adds	r3, #4
 80132f6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80132f8:	69bb      	ldr	r3, [r7, #24]
 80132fa:	61fb      	str	r3, [r7, #28]
 80132fc:	e00b      	b.n	8013316 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x144>
          inbuffer[k-1]=inbuffer[k];
 80132fe:	683a      	ldr	r2, [r7, #0]
 8013300:	69fb      	ldr	r3, [r7, #28]
 8013302:	441a      	add	r2, r3
 8013304:	69fb      	ldr	r3, [r7, #28]
 8013306:	3b01      	subs	r3, #1
 8013308:	6839      	ldr	r1, [r7, #0]
 801330a:	440b      	add	r3, r1
 801330c:	7812      	ldrb	r2, [r2, #0]
 801330e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8013310:	69fb      	ldr	r3, [r7, #28]
 8013312:	3301      	adds	r3, #1
 8013314:	61fb      	str	r3, [r7, #28]
 8013316:	69ba      	ldr	r2, [r7, #24]
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	4413      	add	r3, r2
 801331c:	69fa      	ldr	r2, [r7, #28]
 801331e:	429a      	cmp	r2, r3
 8013320:	d3ed      	bcc.n	80132fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8013322:	69ba      	ldr	r2, [r7, #24]
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	4413      	add	r3, r2
 8013328:	3b01      	subs	r3, #1
 801332a:	683a      	ldr	r2, [r7, #0]
 801332c:	4413      	add	r3, r2
 801332e:	2200      	movs	r2, #0
 8013330:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8013332:	69bb      	ldr	r3, [r7, #24]
 8013334:	3b01      	subs	r3, #1
 8013336:	683a      	ldr	r2, [r7, #0]
 8013338:	441a      	add	r2, r3
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 801333e:	69ba      	ldr	r2, [r7, #24]
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	4413      	add	r3, r2
 8013344:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8013346:	2300      	movs	r3, #0
 8013348:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	69ba      	ldr	r2, [r7, #24]
 801334e:	6839      	ldr	r1, [r7, #0]
 8013350:	440a      	add	r2, r1
 8013352:	7812      	ldrb	r2, [r2, #0]
 8013354:	4313      	orrs	r3, r2
 8013356:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8013358:	68ba      	ldr	r2, [r7, #8]
 801335a:	69bb      	ldr	r3, [r7, #24]
 801335c:	3301      	adds	r3, #1
 801335e:	6839      	ldr	r1, [r7, #0]
 8013360:	440b      	add	r3, r1
 8013362:	781b      	ldrb	r3, [r3, #0]
 8013364:	021b      	lsls	r3, r3, #8
 8013366:	4313      	orrs	r3, r2
 8013368:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 801336a:	68ba      	ldr	r2, [r7, #8]
 801336c:	69bb      	ldr	r3, [r7, #24]
 801336e:	3302      	adds	r3, #2
 8013370:	6839      	ldr	r1, [r7, #0]
 8013372:	440b      	add	r3, r1
 8013374:	781b      	ldrb	r3, [r3, #0]
 8013376:	041b      	lsls	r3, r3, #16
 8013378:	4313      	orrs	r3, r2
 801337a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 801337c:	68ba      	ldr	r2, [r7, #8]
 801337e:	69bb      	ldr	r3, [r7, #24]
 8013380:	3303      	adds	r3, #3
 8013382:	6839      	ldr	r1, [r7, #0]
 8013384:	440b      	add	r3, r1
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	061b      	lsls	r3, r3, #24
 801338a:	4313      	orrs	r3, r2
 801338c:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 801338e:	68ba      	ldr	r2, [r7, #8]
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8013394:	69bb      	ldr	r3, [r7, #24]
 8013396:	3304      	adds	r3, #4
 8013398:	61bb      	str	r3, [r7, #24]
     return offset;
 801339a:	69bb      	ldr	r3, [r7, #24]
    }
 801339c:	4618      	mov	r0, r3
 801339e:	3728      	adds	r7, #40	@ 0x28
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bd80      	pop	{r7, pc}

080133a4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80133a4:	b480      	push	{r7}
 80133a6:	b083      	sub	sp, #12
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
 80133ac:	4b03      	ldr	r3, [pc, #12]	@ (80133bc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80133ae:	4618      	mov	r0, r3
 80133b0:	370c      	adds	r7, #12
 80133b2:	46bd      	mov	sp, r7
 80133b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b8:	4770      	bx	lr
 80133ba:	bf00      	nop
 80133bc:	0801c6c8 	.word	0x0801c6c8

080133c0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80133c0:	b480      	push	{r7}
 80133c2:	b083      	sub	sp, #12
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	4b03      	ldr	r3, [pc, #12]	@ (80133d8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80133ca:	4618      	mov	r0, r3
 80133cc:	370c      	adds	r7, #12
 80133ce:	46bd      	mov	sp, r7
 80133d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d4:	4770      	bx	lr
 80133d6:	bf00      	nop
 80133d8:	0801c6e4 	.word	0x0801c6e4

080133dc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80133dc:	b580      	push	{r7, lr}
 80133de:	b082      	sub	sp, #8
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	4618      	mov	r0, r3
 80133e8:	f7ff fd34 	bl	8012e54 <_ZN3ros3MsgC1Ev>
 80133ec:	4a06      	ldr	r2, [pc, #24]	@ (8013408 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	601a      	str	r2, [r3, #0]
      level(0),
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2200      	movs	r2, #0
 80133f6:	711a      	strb	r2, [r3, #4]
      msg("")
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	4a04      	ldr	r2, [pc, #16]	@ (801340c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80133fc:	609a      	str	r2, [r3, #8]
    {
    }
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	4618      	mov	r0, r3
 8013402:	3708      	adds	r7, #8
 8013404:	46bd      	mov	sp, r7
 8013406:	bd80      	pop	{r7, pc}
 8013408:	0801ca80 	.word	0x0801ca80
 801340c:	0801c6c4 	.word	0x0801c6c4

08013410 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8013410:	b580      	push	{r7, lr}
 8013412:	b084      	sub	sp, #16
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
 8013418:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 801341a:	2300      	movs	r3, #0
 801341c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	683a      	ldr	r2, [r7, #0]
 8013422:	4413      	add	r3, r2
 8013424:	687a      	ldr	r2, [r7, #4]
 8013426:	7912      	ldrb	r2, [r2, #4]
 8013428:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	3301      	adds	r3, #1
 801342e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	689b      	ldr	r3, [r3, #8]
 8013434:	4618      	mov	r0, r3
 8013436:	f7ec ffbb 	bl	80003b0 <strlen>
 801343a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	683a      	ldr	r2, [r7, #0]
 8013440:	4413      	add	r3, r2
 8013442:	68b9      	ldr	r1, [r7, #8]
 8013444:	4618      	mov	r0, r3
 8013446:	f002 fb95 	bl	8015b74 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	3304      	adds	r3, #4
 801344e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	683a      	ldr	r2, [r7, #0]
 8013454:	18d0      	adds	r0, r2, r3
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	689b      	ldr	r3, [r3, #8]
 801345a:	68ba      	ldr	r2, [r7, #8]
 801345c:	4619      	mov	r1, r3
 801345e:	f007 fe56 	bl	801b10e <memcpy>
      offset += length_msg;
 8013462:	68fa      	ldr	r2, [r7, #12]
 8013464:	68bb      	ldr	r3, [r7, #8]
 8013466:	4413      	add	r3, r2
 8013468:	60fb      	str	r3, [r7, #12]
      return offset;
 801346a:	68fb      	ldr	r3, [r7, #12]
    }
 801346c:	4618      	mov	r0, r3
 801346e:	3710      	adds	r7, #16
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}

08013474 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8013474:	b580      	push	{r7, lr}
 8013476:	b086      	sub	sp, #24
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
 801347c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 801347e:	2300      	movs	r3, #0
 8013480:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8013482:	693b      	ldr	r3, [r7, #16]
 8013484:	683a      	ldr	r2, [r7, #0]
 8013486:	4413      	add	r3, r2
 8013488:	781a      	ldrb	r2, [r3, #0]
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 801348e:	693b      	ldr	r3, [r7, #16]
 8013490:	3301      	adds	r3, #1
 8013492:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8013494:	693b      	ldr	r3, [r7, #16]
 8013496:	683a      	ldr	r2, [r7, #0]
 8013498:	441a      	add	r2, r3
 801349a:	f107 030c 	add.w	r3, r7, #12
 801349e:	4611      	mov	r1, r2
 80134a0:	4618      	mov	r0, r3
 80134a2:	f002 fb86 	bl	8015bb2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	3304      	adds	r3, #4
 80134aa:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80134ac:	693b      	ldr	r3, [r7, #16]
 80134ae:	617b      	str	r3, [r7, #20]
 80134b0:	e00b      	b.n	80134ca <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80134b2:	683a      	ldr	r2, [r7, #0]
 80134b4:	697b      	ldr	r3, [r7, #20]
 80134b6:	441a      	add	r2, r3
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	3b01      	subs	r3, #1
 80134bc:	6839      	ldr	r1, [r7, #0]
 80134be:	440b      	add	r3, r1
 80134c0:	7812      	ldrb	r2, [r2, #0]
 80134c2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80134c4:	697b      	ldr	r3, [r7, #20]
 80134c6:	3301      	adds	r3, #1
 80134c8:	617b      	str	r3, [r7, #20]
 80134ca:	693a      	ldr	r2, [r7, #16]
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	4413      	add	r3, r2
 80134d0:	697a      	ldr	r2, [r7, #20]
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d3ed      	bcc.n	80134b2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80134d6:	693a      	ldr	r2, [r7, #16]
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	4413      	add	r3, r2
 80134dc:	3b01      	subs	r3, #1
 80134de:	683a      	ldr	r2, [r7, #0]
 80134e0:	4413      	add	r3, r2
 80134e2:	2200      	movs	r2, #0
 80134e4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	3b01      	subs	r3, #1
 80134ea:	683a      	ldr	r2, [r7, #0]
 80134ec:	441a      	add	r2, r3
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80134f2:	693a      	ldr	r2, [r7, #16]
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	4413      	add	r3, r2
 80134f8:	613b      	str	r3, [r7, #16]
     return offset;
 80134fa:	693b      	ldr	r3, [r7, #16]
    }
 80134fc:	4618      	mov	r0, r3
 80134fe:	3718      	adds	r7, #24
 8013500:	46bd      	mov	sp, r7
 8013502:	bd80      	pop	{r7, pc}

08013504 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8013504:	b480      	push	{r7}
 8013506:	b083      	sub	sp, #12
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
 801350c:	4b03      	ldr	r3, [pc, #12]	@ (801351c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 801350e:	4618      	mov	r0, r3
 8013510:	370c      	adds	r7, #12
 8013512:	46bd      	mov	sp, r7
 8013514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013518:	4770      	bx	lr
 801351a:	bf00      	nop
 801351c:	0801c708 	.word	0x0801c708

08013520 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8013520:	b480      	push	{r7}
 8013522:	b083      	sub	sp, #12
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
 8013528:	4b03      	ldr	r3, [pc, #12]	@ (8013538 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 801352a:	4618      	mov	r0, r3
 801352c:	370c      	adds	r7, #12
 801352e:	46bd      	mov	sp, r7
 8013530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013534:	4770      	bx	lr
 8013536:	bf00      	nop
 8013538:	0801c71c 	.word	0x0801c71c

0801353c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 801353c:	b580      	push	{r7, lr}
 801353e:	b082      	sub	sp, #8
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	4618      	mov	r0, r3
 8013548:	f7ff fc84 	bl	8012e54 <_ZN3ros3MsgC1Ev>
 801354c:	4a0c      	ldr	r2, [pc, #48]	@ (8013580 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	2200      	movs	r2, #0
 8013556:	605a      	str	r2, [r3, #4]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2200      	movs	r2, #0
 801355c:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2200      	movs	r2, #0
 8013562:	611a      	str	r2, [r3, #16]
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2200      	movs	r2, #0
 8013568:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	2200      	movs	r2, #0
 801356e:	61da      	str	r2, [r3, #28]
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	2200      	movs	r2, #0
 8013574:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	4618      	mov	r0, r3
 801357a:	3708      	adds	r7, #8
 801357c:	46bd      	mov	sp, r7
 801357e:	bd80      	pop	{r7, pc}
 8013580:	0801ca68 	.word	0x0801ca68

08013584 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8013584:	b580      	push	{r7, lr}
 8013586:	b08a      	sub	sp, #40	@ 0x28
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
 801358c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 801358e:	2300      	movs	r3, #0
 8013590:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	6859      	ldr	r1, [r3, #4]
 8013596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013598:	683a      	ldr	r2, [r7, #0]
 801359a:	4413      	add	r3, r2
 801359c:	b2ca      	uxtb	r2, r1
 801359e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	685b      	ldr	r3, [r3, #4]
 80135a4:	0a19      	lsrs	r1, r3, #8
 80135a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135a8:	3301      	adds	r3, #1
 80135aa:	683a      	ldr	r2, [r7, #0]
 80135ac:	4413      	add	r3, r2
 80135ae:	b2ca      	uxtb	r2, r1
 80135b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	685b      	ldr	r3, [r3, #4]
 80135b6:	0c19      	lsrs	r1, r3, #16
 80135b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135ba:	3302      	adds	r3, #2
 80135bc:	683a      	ldr	r2, [r7, #0]
 80135be:	4413      	add	r3, r2
 80135c0:	b2ca      	uxtb	r2, r1
 80135c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	685b      	ldr	r3, [r3, #4]
 80135c8:	0e19      	lsrs	r1, r3, #24
 80135ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135cc:	3303      	adds	r3, #3
 80135ce:	683a      	ldr	r2, [r7, #0]
 80135d0:	4413      	add	r3, r2
 80135d2:	b2ca      	uxtb	r2, r1
 80135d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80135d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135d8:	3304      	adds	r3, #4
 80135da:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80135dc:	2300      	movs	r3, #0
 80135de:	623b      	str	r3, [r7, #32]
 80135e0:	e02a      	b.n	8013638 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	68da      	ldr	r2, [r3, #12]
 80135e6:	6a3b      	ldr	r3, [r7, #32]
 80135e8:	009b      	lsls	r3, r3, #2
 80135ea:	4413      	add	r3, r2
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80135f0:	6939      	ldr	r1, [r7, #16]
 80135f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135f4:	683a      	ldr	r2, [r7, #0]
 80135f6:	4413      	add	r3, r2
 80135f8:	b2ca      	uxtb	r2, r1
 80135fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80135fc:	693b      	ldr	r3, [r7, #16]
 80135fe:	0a19      	lsrs	r1, r3, #8
 8013600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013602:	3301      	adds	r3, #1
 8013604:	683a      	ldr	r2, [r7, #0]
 8013606:	4413      	add	r3, r2
 8013608:	b2ca      	uxtb	r2, r1
 801360a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	0c19      	lsrs	r1, r3, #16
 8013610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013612:	3302      	adds	r3, #2
 8013614:	683a      	ldr	r2, [r7, #0]
 8013616:	4413      	add	r3, r2
 8013618:	b2ca      	uxtb	r2, r1
 801361a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 801361c:	693b      	ldr	r3, [r7, #16]
 801361e:	0e19      	lsrs	r1, r3, #24
 8013620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013622:	3303      	adds	r3, #3
 8013624:	683a      	ldr	r2, [r7, #0]
 8013626:	4413      	add	r3, r2
 8013628:	b2ca      	uxtb	r2, r1
 801362a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 801362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801362e:	3304      	adds	r3, #4
 8013630:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8013632:	6a3b      	ldr	r3, [r7, #32]
 8013634:	3301      	adds	r3, #1
 8013636:	623b      	str	r3, [r7, #32]
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	685b      	ldr	r3, [r3, #4]
 801363c:	6a3a      	ldr	r2, [r7, #32]
 801363e:	429a      	cmp	r2, r3
 8013640:	d3cf      	bcc.n	80135e2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6919      	ldr	r1, [r3, #16]
 8013646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013648:	683a      	ldr	r2, [r7, #0]
 801364a:	4413      	add	r3, r2
 801364c:	b2ca      	uxtb	r2, r1
 801364e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	691b      	ldr	r3, [r3, #16]
 8013654:	0a19      	lsrs	r1, r3, #8
 8013656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013658:	3301      	adds	r3, #1
 801365a:	683a      	ldr	r2, [r7, #0]
 801365c:	4413      	add	r3, r2
 801365e:	b2ca      	uxtb	r2, r1
 8013660:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	691b      	ldr	r3, [r3, #16]
 8013666:	0c19      	lsrs	r1, r3, #16
 8013668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801366a:	3302      	adds	r3, #2
 801366c:	683a      	ldr	r2, [r7, #0]
 801366e:	4413      	add	r3, r2
 8013670:	b2ca      	uxtb	r2, r1
 8013672:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	691b      	ldr	r3, [r3, #16]
 8013678:	0e19      	lsrs	r1, r3, #24
 801367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801367c:	3303      	adds	r3, #3
 801367e:	683a      	ldr	r2, [r7, #0]
 8013680:	4413      	add	r3, r2
 8013682:	b2ca      	uxtb	r2, r1
 8013684:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8013686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013688:	3304      	adds	r3, #4
 801368a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 801368c:	2300      	movs	r3, #0
 801368e:	61fb      	str	r3, [r7, #28]
 8013690:	e02a      	b.n	80136e8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	699a      	ldr	r2, [r3, #24]
 8013696:	69fb      	ldr	r3, [r7, #28]
 8013698:	009b      	lsls	r3, r3, #2
 801369a:	4413      	add	r3, r2
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80136a0:	68f9      	ldr	r1, [r7, #12]
 80136a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136a4:	683a      	ldr	r2, [r7, #0]
 80136a6:	4413      	add	r3, r2
 80136a8:	b2ca      	uxtb	r2, r1
 80136aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	0a19      	lsrs	r1, r3, #8
 80136b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136b2:	3301      	adds	r3, #1
 80136b4:	683a      	ldr	r2, [r7, #0]
 80136b6:	4413      	add	r3, r2
 80136b8:	b2ca      	uxtb	r2, r1
 80136ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	0c19      	lsrs	r1, r3, #16
 80136c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136c2:	3302      	adds	r3, #2
 80136c4:	683a      	ldr	r2, [r7, #0]
 80136c6:	4413      	add	r3, r2
 80136c8:	b2ca      	uxtb	r2, r1
 80136ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	0e19      	lsrs	r1, r3, #24
 80136d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136d2:	3303      	adds	r3, #3
 80136d4:	683a      	ldr	r2, [r7, #0]
 80136d6:	4413      	add	r3, r2
 80136d8:	b2ca      	uxtb	r2, r1
 80136da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80136dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136de:	3304      	adds	r3, #4
 80136e0:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80136e2:	69fb      	ldr	r3, [r7, #28]
 80136e4:	3301      	adds	r3, #1
 80136e6:	61fb      	str	r3, [r7, #28]
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	691b      	ldr	r3, [r3, #16]
 80136ec:	69fa      	ldr	r2, [r7, #28]
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d3cf      	bcc.n	8013692 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	69d9      	ldr	r1, [r3, #28]
 80136f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136f8:	683a      	ldr	r2, [r7, #0]
 80136fa:	4413      	add	r3, r2
 80136fc:	b2ca      	uxtb	r2, r1
 80136fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	69db      	ldr	r3, [r3, #28]
 8013704:	0a19      	lsrs	r1, r3, #8
 8013706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013708:	3301      	adds	r3, #1
 801370a:	683a      	ldr	r2, [r7, #0]
 801370c:	4413      	add	r3, r2
 801370e:	b2ca      	uxtb	r2, r1
 8013710:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	69db      	ldr	r3, [r3, #28]
 8013716:	0c19      	lsrs	r1, r3, #16
 8013718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801371a:	3302      	adds	r3, #2
 801371c:	683a      	ldr	r2, [r7, #0]
 801371e:	4413      	add	r3, r2
 8013720:	b2ca      	uxtb	r2, r1
 8013722:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	69db      	ldr	r3, [r3, #28]
 8013728:	0e19      	lsrs	r1, r3, #24
 801372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801372c:	3303      	adds	r3, #3
 801372e:	683a      	ldr	r2, [r7, #0]
 8013730:	4413      	add	r3, r2
 8013732:	b2ca      	uxtb	r2, r1
 8013734:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8013736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013738:	3304      	adds	r3, #4
 801373a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 801373c:	2300      	movs	r3, #0
 801373e:	61bb      	str	r3, [r7, #24]
 8013740:	e027      	b.n	8013792 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013746:	69bb      	ldr	r3, [r7, #24]
 8013748:	009b      	lsls	r3, r3, #2
 801374a:	4413      	add	r3, r2
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	4618      	mov	r0, r3
 8013750:	f7ec fe2e 	bl	80003b0 <strlen>
 8013754:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8013756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013758:	683a      	ldr	r2, [r7, #0]
 801375a:	4413      	add	r3, r2
 801375c:	6979      	ldr	r1, [r7, #20]
 801375e:	4618      	mov	r0, r3
 8013760:	f002 fa08 	bl	8015b74 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8013764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013766:	3304      	adds	r3, #4
 8013768:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 801376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801376c:	683a      	ldr	r2, [r7, #0]
 801376e:	18d0      	adds	r0, r2, r3
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013774:	69bb      	ldr	r3, [r7, #24]
 8013776:	009b      	lsls	r3, r3, #2
 8013778:	4413      	add	r3, r2
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	697a      	ldr	r2, [r7, #20]
 801377e:	4619      	mov	r1, r3
 8013780:	f007 fcc5 	bl	801b10e <memcpy>
      offset += length_stringsi;
 8013784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013786:	697b      	ldr	r3, [r7, #20]
 8013788:	4413      	add	r3, r2
 801378a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 801378c:	69bb      	ldr	r3, [r7, #24]
 801378e:	3301      	adds	r3, #1
 8013790:	61bb      	str	r3, [r7, #24]
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	69db      	ldr	r3, [r3, #28]
 8013796:	69ba      	ldr	r2, [r7, #24]
 8013798:	429a      	cmp	r2, r3
 801379a:	d3d2      	bcc.n	8013742 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 801379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801379e:	4618      	mov	r0, r3
 80137a0:	3728      	adds	r7, #40	@ 0x28
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bd80      	pop	{r7, pc}

080137a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80137a6:	b580      	push	{r7, lr}
 80137a8:	b08e      	sub	sp, #56	@ 0x38
 80137aa:	af00      	add	r7, sp, #0
 80137ac:	6078      	str	r0, [r7, #4]
 80137ae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80137b0:	2300      	movs	r3, #0
 80137b2:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80137b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137b6:	683a      	ldr	r2, [r7, #0]
 80137b8:	4413      	add	r3, r2
 80137ba:	781b      	ldrb	r3, [r3, #0]
 80137bc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80137be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137c0:	3301      	adds	r3, #1
 80137c2:	683a      	ldr	r2, [r7, #0]
 80137c4:	4413      	add	r3, r2
 80137c6:	781b      	ldrb	r3, [r3, #0]
 80137c8:	021b      	lsls	r3, r3, #8
 80137ca:	6a3a      	ldr	r2, [r7, #32]
 80137cc:	4313      	orrs	r3, r2
 80137ce:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80137d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137d2:	3302      	adds	r3, #2
 80137d4:	683a      	ldr	r2, [r7, #0]
 80137d6:	4413      	add	r3, r2
 80137d8:	781b      	ldrb	r3, [r3, #0]
 80137da:	041b      	lsls	r3, r3, #16
 80137dc:	6a3a      	ldr	r2, [r7, #32]
 80137de:	4313      	orrs	r3, r2
 80137e0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80137e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137e4:	3303      	adds	r3, #3
 80137e6:	683a      	ldr	r2, [r7, #0]
 80137e8:	4413      	add	r3, r2
 80137ea:	781b      	ldrb	r3, [r3, #0]
 80137ec:	061b      	lsls	r3, r3, #24
 80137ee:	6a3a      	ldr	r2, [r7, #32]
 80137f0:	4313      	orrs	r3, r2
 80137f2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80137f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137f6:	3304      	adds	r3, #4
 80137f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	685b      	ldr	r3, [r3, #4]
 80137fe:	6a3a      	ldr	r2, [r7, #32]
 8013800:	429a      	cmp	r2, r3
 8013802:	d90a      	bls.n	801381a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	68da      	ldr	r2, [r3, #12]
 8013808:	6a3b      	ldr	r3, [r7, #32]
 801380a:	009b      	lsls	r3, r3, #2
 801380c:	4619      	mov	r1, r3
 801380e:	4610      	mov	r0, r2
 8013810:	f007 fa10 	bl	801ac34 <realloc>
 8013814:	4602      	mov	r2, r0
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	6a3a      	ldr	r2, [r7, #32]
 801381e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8013820:	2300      	movs	r3, #0
 8013822:	633b      	str	r3, [r7, #48]	@ 0x30
 8013824:	e035      	b.n	8013892 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8013826:	2300      	movs	r3, #0
 8013828:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 801382a:	697b      	ldr	r3, [r7, #20]
 801382c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801382e:	6839      	ldr	r1, [r7, #0]
 8013830:	440a      	add	r2, r1
 8013832:	7812      	ldrb	r2, [r2, #0]
 8013834:	4313      	orrs	r3, r2
 8013836:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8013838:	697a      	ldr	r2, [r7, #20]
 801383a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801383c:	3301      	adds	r3, #1
 801383e:	6839      	ldr	r1, [r7, #0]
 8013840:	440b      	add	r3, r1
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	021b      	lsls	r3, r3, #8
 8013846:	4313      	orrs	r3, r2
 8013848:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 801384a:	697a      	ldr	r2, [r7, #20]
 801384c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801384e:	3302      	adds	r3, #2
 8013850:	6839      	ldr	r1, [r7, #0]
 8013852:	440b      	add	r3, r1
 8013854:	781b      	ldrb	r3, [r3, #0]
 8013856:	041b      	lsls	r3, r3, #16
 8013858:	4313      	orrs	r3, r2
 801385a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 801385c:	697a      	ldr	r2, [r7, #20]
 801385e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013860:	3303      	adds	r3, #3
 8013862:	6839      	ldr	r1, [r7, #0]
 8013864:	440b      	add	r3, r1
 8013866:	781b      	ldrb	r3, [r3, #0]
 8013868:	061b      	lsls	r3, r3, #24
 801386a:	4313      	orrs	r3, r2
 801386c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 801386e:	697a      	ldr	r2, [r7, #20]
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8013874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013876:	3304      	adds	r3, #4
 8013878:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	68da      	ldr	r2, [r3, #12]
 801387e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013880:	009b      	lsls	r3, r3, #2
 8013882:	4413      	add	r3, r2
 8013884:	687a      	ldr	r2, [r7, #4]
 8013886:	3208      	adds	r2, #8
 8013888:	6812      	ldr	r2, [r2, #0]
 801388a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 801388c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801388e:	3301      	adds	r3, #1
 8013890:	633b      	str	r3, [r7, #48]	@ 0x30
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	685b      	ldr	r3, [r3, #4]
 8013896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013898:	429a      	cmp	r2, r3
 801389a:	d3c4      	bcc.n	8013826 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 801389c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801389e:	683a      	ldr	r2, [r7, #0]
 80138a0:	4413      	add	r3, r2
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80138a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138a8:	3301      	adds	r3, #1
 80138aa:	683a      	ldr	r2, [r7, #0]
 80138ac:	4413      	add	r3, r2
 80138ae:	781b      	ldrb	r3, [r3, #0]
 80138b0:	021b      	lsls	r3, r3, #8
 80138b2:	69fa      	ldr	r2, [r7, #28]
 80138b4:	4313      	orrs	r3, r2
 80138b6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80138b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138ba:	3302      	adds	r3, #2
 80138bc:	683a      	ldr	r2, [r7, #0]
 80138be:	4413      	add	r3, r2
 80138c0:	781b      	ldrb	r3, [r3, #0]
 80138c2:	041b      	lsls	r3, r3, #16
 80138c4:	69fa      	ldr	r2, [r7, #28]
 80138c6:	4313      	orrs	r3, r2
 80138c8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80138ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138cc:	3303      	adds	r3, #3
 80138ce:	683a      	ldr	r2, [r7, #0]
 80138d0:	4413      	add	r3, r2
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	061b      	lsls	r3, r3, #24
 80138d6:	69fa      	ldr	r2, [r7, #28]
 80138d8:	4313      	orrs	r3, r2
 80138da:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80138dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138de:	3304      	adds	r3, #4
 80138e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	691b      	ldr	r3, [r3, #16]
 80138e6:	69fa      	ldr	r2, [r7, #28]
 80138e8:	429a      	cmp	r2, r3
 80138ea:	d90a      	bls.n	8013902 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	699a      	ldr	r2, [r3, #24]
 80138f0:	69fb      	ldr	r3, [r7, #28]
 80138f2:	009b      	lsls	r3, r3, #2
 80138f4:	4619      	mov	r1, r3
 80138f6:	4610      	mov	r0, r2
 80138f8:	f007 f99c 	bl	801ac34 <realloc>
 80138fc:	4602      	mov	r2, r0
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	69fa      	ldr	r2, [r7, #28]
 8013906:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8013908:	2300      	movs	r3, #0
 801390a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801390c:	e035      	b.n	801397a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 801390e:	2300      	movs	r3, #0
 8013910:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013916:	6839      	ldr	r1, [r7, #0]
 8013918:	440a      	add	r2, r1
 801391a:	7812      	ldrb	r2, [r2, #0]
 801391c:	4313      	orrs	r3, r2
 801391e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8013920:	693a      	ldr	r2, [r7, #16]
 8013922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013924:	3301      	adds	r3, #1
 8013926:	6839      	ldr	r1, [r7, #0]
 8013928:	440b      	add	r3, r1
 801392a:	781b      	ldrb	r3, [r3, #0]
 801392c:	021b      	lsls	r3, r3, #8
 801392e:	4313      	orrs	r3, r2
 8013930:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8013932:	693a      	ldr	r2, [r7, #16]
 8013934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013936:	3302      	adds	r3, #2
 8013938:	6839      	ldr	r1, [r7, #0]
 801393a:	440b      	add	r3, r1
 801393c:	781b      	ldrb	r3, [r3, #0]
 801393e:	041b      	lsls	r3, r3, #16
 8013940:	4313      	orrs	r3, r2
 8013942:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8013944:	693a      	ldr	r2, [r7, #16]
 8013946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013948:	3303      	adds	r3, #3
 801394a:	6839      	ldr	r1, [r7, #0]
 801394c:	440b      	add	r3, r1
 801394e:	781b      	ldrb	r3, [r3, #0]
 8013950:	061b      	lsls	r3, r3, #24
 8013952:	4313      	orrs	r3, r2
 8013954:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8013956:	693a      	ldr	r2, [r7, #16]
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 801395c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801395e:	3304      	adds	r3, #4
 8013960:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	699a      	ldr	r2, [r3, #24]
 8013966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013968:	009b      	lsls	r3, r3, #2
 801396a:	4413      	add	r3, r2
 801396c:	687a      	ldr	r2, [r7, #4]
 801396e:	3214      	adds	r2, #20
 8013970:	6812      	ldr	r2, [r2, #0]
 8013972:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8013974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013976:	3301      	adds	r3, #1
 8013978:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	691b      	ldr	r3, [r3, #16]
 801397e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013980:	429a      	cmp	r2, r3
 8013982:	d3c4      	bcc.n	801390e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8013984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013986:	683a      	ldr	r2, [r7, #0]
 8013988:	4413      	add	r3, r2
 801398a:	781b      	ldrb	r3, [r3, #0]
 801398c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 801398e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013990:	3301      	adds	r3, #1
 8013992:	683a      	ldr	r2, [r7, #0]
 8013994:	4413      	add	r3, r2
 8013996:	781b      	ldrb	r3, [r3, #0]
 8013998:	021b      	lsls	r3, r3, #8
 801399a:	69ba      	ldr	r2, [r7, #24]
 801399c:	4313      	orrs	r3, r2
 801399e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80139a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139a2:	3302      	adds	r3, #2
 80139a4:	683a      	ldr	r2, [r7, #0]
 80139a6:	4413      	add	r3, r2
 80139a8:	781b      	ldrb	r3, [r3, #0]
 80139aa:	041b      	lsls	r3, r3, #16
 80139ac:	69ba      	ldr	r2, [r7, #24]
 80139ae:	4313      	orrs	r3, r2
 80139b0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80139b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139b4:	3303      	adds	r3, #3
 80139b6:	683a      	ldr	r2, [r7, #0]
 80139b8:	4413      	add	r3, r2
 80139ba:	781b      	ldrb	r3, [r3, #0]
 80139bc:	061b      	lsls	r3, r3, #24
 80139be:	69ba      	ldr	r2, [r7, #24]
 80139c0:	4313      	orrs	r3, r2
 80139c2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80139c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139c6:	3304      	adds	r3, #4
 80139c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	69db      	ldr	r3, [r3, #28]
 80139ce:	69ba      	ldr	r2, [r7, #24]
 80139d0:	429a      	cmp	r2, r3
 80139d2:	d90a      	bls.n	80139ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80139d8:	69bb      	ldr	r3, [r7, #24]
 80139da:	009b      	lsls	r3, r3, #2
 80139dc:	4619      	mov	r1, r3
 80139de:	4610      	mov	r0, r2
 80139e0:	f007 f928 	bl	801ac34 <realloc>
 80139e4:	4602      	mov	r2, r0
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	69ba      	ldr	r2, [r7, #24]
 80139ee:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80139f0:	2300      	movs	r3, #0
 80139f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80139f4:	e03e      	b.n	8013a74 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80139f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139f8:	683a      	ldr	r2, [r7, #0]
 80139fa:	441a      	add	r2, r3
 80139fc:	f107 030c 	add.w	r3, r7, #12
 8013a00:	4611      	mov	r1, r2
 8013a02:	4618      	mov	r0, r3
 8013a04:	f002 f8d5 	bl	8015bb2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8013a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a0a:	3304      	adds	r3, #4
 8013a0c:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8013a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a12:	e00b      	b.n	8013a2c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8013a14:	683a      	ldr	r2, [r7, #0]
 8013a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a18:	441a      	add	r2, r3
 8013a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a1c:	3b01      	subs	r3, #1
 8013a1e:	6839      	ldr	r1, [r7, #0]
 8013a20:	440b      	add	r3, r1
 8013a22:	7812      	ldrb	r2, [r2, #0]
 8013a24:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8013a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a28:	3301      	adds	r3, #1
 8013a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	4413      	add	r3, r2
 8013a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d3ed      	bcc.n	8013a14 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8013a38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	4413      	add	r3, r2
 8013a3e:	3b01      	subs	r3, #1
 8013a40:	683a      	ldr	r2, [r7, #0]
 8013a42:	4413      	add	r3, r2
 8013a44:	2200      	movs	r2, #0
 8013a46:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8013a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a4a:	3b01      	subs	r3, #1
 8013a4c:	683a      	ldr	r2, [r7, #0]
 8013a4e:	441a      	add	r2, r3
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8013a54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	4413      	add	r3, r2
 8013a5a:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a62:	009b      	lsls	r3, r3, #2
 8013a64:	4413      	add	r3, r2
 8013a66:	687a      	ldr	r2, [r7, #4]
 8013a68:	3220      	adds	r2, #32
 8013a6a:	6812      	ldr	r2, [r2, #0]
 8013a6c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8013a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a70:	3301      	adds	r3, #1
 8013a72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	69db      	ldr	r3, [r3, #28]
 8013a78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a7a:	429a      	cmp	r2, r3
 8013a7c:	d3bb      	bcc.n	80139f6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8013a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8013a80:	4618      	mov	r0, r3
 8013a82:	3738      	adds	r7, #56	@ 0x38
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}

08013a88 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8013a88:	b480      	push	{r7}
 8013a8a:	b083      	sub	sp, #12
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
 8013a90:	4b03      	ldr	r3, [pc, #12]	@ (8013aa0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8013a92:	4618      	mov	r0, r3
 8013a94:	370c      	adds	r7, #12
 8013a96:	46bd      	mov	sp, r7
 8013a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9c:	4770      	bx	lr
 8013a9e:	bf00      	nop
 8013aa0:	0801c95c 	.word	0x0801c95c

08013aa4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8013aa4:	b480      	push	{r7}
 8013aa6:	b083      	sub	sp, #12
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
 8013aac:	4b03      	ldr	r3, [pc, #12]	@ (8013abc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8013aae:	4618      	mov	r0, r3
 8013ab0:	370c      	adds	r7, #12
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab8:	4770      	bx	lr
 8013aba:	bf00      	nop
 8013abc:	0801c740 	.word	0x0801c740

08013ac0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8013ac0:	b480      	push	{r7}
 8013ac2:	b085      	sub	sp, #20
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	60f8      	str	r0, [r7, #12]
 8013ac8:	60b9      	str	r1, [r7, #8]
 8013aca:	607a      	str	r2, [r7, #4]
 8013acc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	68ba      	ldr	r2, [r7, #8]
 8013ad2:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	687a      	ldr	r2, [r7, #4]
 8013ad8:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	683a      	ldr	r2, [r7, #0]
 8013ade:	611a      	str	r2, [r3, #16]
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	3714      	adds	r7, #20
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aec:	4770      	bx	lr

08013aee <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8013aee:	b580      	push	{r7, lr}
 8013af0:	b082      	sub	sp, #8
 8013af2:	af00      	add	r7, sp, #0
 8013af4:	6078      	str	r0, [r7, #4]
 8013af6:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	68d8      	ldr	r0, [r3, #12]
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	68db      	ldr	r3, [r3, #12]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	687a      	ldr	r2, [r7, #4]
 8013b06:	6891      	ldr	r1, [r2, #8]
 8013b08:	683a      	ldr	r2, [r7, #0]
 8013b0a:	4798      	blx	r3
 8013b0c:	4603      	mov	r3, r0
  };
 8013b0e:	4618      	mov	r0, r3
 8013b10:	3708      	adds	r7, #8
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}

08013b16 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8013b16:	b480      	push	{r7}
 8013b18:	b083      	sub	sp, #12
 8013b1a:	af00      	add	r7, sp, #0
 8013b1c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	691b      	ldr	r3, [r3, #16]
  }
 8013b22:	4618      	mov	r0, r3
 8013b24:	370c      	adds	r7, #12
 8013b26:	46bd      	mov	sp, r7
 8013b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2c:	4770      	bx	lr
	...

08013b30 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 4096;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8013b30:	b480      	push	{r7}
 8013b32:	b083      	sub	sp, #12
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	4a4b      	ldr	r2, [pc, #300]	@ (8013c70 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8013b44:	4293      	cmp	r3, r2
 8013b46:	d077      	beq.n	8013c38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	4a48      	ldr	r2, [pc, #288]	@ (8013c74 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8013b54:	4293      	cmp	r3, r2
 8013b56:	d06f      	beq.n	8013c38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	4a45      	ldr	r2, [pc, #276]	@ (8013c78 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8013b64:	4293      	cmp	r3, r2
 8013b66:	d067      	beq.n	8013c38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	4a42      	ldr	r2, [pc, #264]	@ (8013c7c <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8013b74:	4293      	cmp	r3, r2
 8013b76:	d05f      	beq.n	8013c38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	4a3f      	ldr	r2, [pc, #252]	@ (8013c80 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8013b84:	4293      	cmp	r3, r2
 8013b86:	d057      	beq.n	8013c38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	4a3c      	ldr	r2, [pc, #240]	@ (8013c84 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8013b94:	4293      	cmp	r3, r2
 8013b96:	d04f      	beq.n	8013c38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	4a39      	ldr	r2, [pc, #228]	@ (8013c88 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8013ba4:	4293      	cmp	r3, r2
 8013ba6:	d047      	beq.n	8013c38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	4a36      	ldr	r2, [pc, #216]	@ (8013c8c <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8013bb4:	4293      	cmp	r3, r2
 8013bb6:	d03f      	beq.n	8013c38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	4a33      	ldr	r2, [pc, #204]	@ (8013c90 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8013bc4:	4293      	cmp	r3, r2
 8013bc6:	d037      	beq.n	8013c38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	4a30      	ldr	r2, [pc, #192]	@ (8013c94 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8013bd4:	4293      	cmp	r3, r2
 8013bd6:	d02f      	beq.n	8013c38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	4a2d      	ldr	r2, [pc, #180]	@ (8013c98 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8013be4:	4293      	cmp	r3, r2
 8013be6:	d027      	beq.n	8013c38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	4a2a      	ldr	r2, [pc, #168]	@ (8013c9c <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8013bf4:	4293      	cmp	r3, r2
 8013bf6:	d01f      	beq.n	8013c38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	4a27      	ldr	r2, [pc, #156]	@ (8013ca0 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8013c04:	4293      	cmp	r3, r2
 8013c06:	d017      	beq.n	8013c38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	4a24      	ldr	r2, [pc, #144]	@ (8013ca4 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8013c14:	4293      	cmp	r3, r2
 8013c16:	d00f      	beq.n	8013c38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	4a21      	ldr	r2, [pc, #132]	@ (8013ca8 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8013c24:	4293      	cmp	r3, r2
 8013c26:	d007      	beq.n	8013c38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	4a1e      	ldr	r2, [pc, #120]	@ (8013cac <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8013c34:	4293      	cmp	r3, r2
 8013c36:	d10a      	bne.n	8013c4e <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	685b      	ldr	r3, [r3, #4]
 8013c44:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8013c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013c4c:	e009      	b.n	8013c62 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	685b      	ldr	r3, [r3, #4]
 8013c5a:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8013c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013c62:	4618      	mov	r0, r3
 8013c64:	370c      	adds	r7, #12
 8013c66:	46bd      	mov	sp, r7
 8013c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6c:	4770      	bx	lr
 8013c6e:	bf00      	nop
 8013c70:	40020010 	.word	0x40020010
 8013c74:	40020028 	.word	0x40020028
 8013c78:	40020040 	.word	0x40020040
 8013c7c:	40020058 	.word	0x40020058
 8013c80:	40020070 	.word	0x40020070
 8013c84:	40020088 	.word	0x40020088
 8013c88:	400200a0 	.word	0x400200a0
 8013c8c:	400200b8 	.word	0x400200b8
 8013c90:	40020410 	.word	0x40020410
 8013c94:	40020428 	.word	0x40020428
 8013c98:	40020440 	.word	0x40020440
 8013c9c:	40020458 	.word	0x40020458
 8013ca0:	40020470 	.word	0x40020470
 8013ca4:	40020488 	.word	0x40020488
 8013ca8:	400204a0 	.word	0x400204a0
 8013cac:	400204b8 	.word	0x400204b8

08013cb0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 4096;
    uint8_t tbuf[tbuflen];
    uint16_t twind, tfind;

  public:
    STM32Hardware():
 8013cb0:	b480      	push	{r7}
 8013cb2:	b083      	sub	sp, #12
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	4a0c      	ldr	r2, [pc, #48]	@ (8013cec <_ZN13STM32HardwareC1Ev+0x3c>)
 8013cbc:	601a      	str	r2, [r3, #0]
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013cc4:	461a      	mov	r2, r3
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	6053      	str	r3, [r2, #4]
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	811a      	strh	r2, [r3, #8]
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013cda:	2200      	movs	r2, #0
 8013cdc:	815a      	strh	r2, [r3, #10]
    }
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	370c      	adds	r7, #12
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cea:	4770      	bx	lr
 8013cec:	24000e80 	.word	0x24000e80

08013cf0 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f000 f804 	bl	8013d06 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8013cfe:	bf00      	nop
 8013d00:	3708      	adds	r7, #8
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}

08013d06 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8013d06:	b580      	push	{r7, lr}
 8013d08:	b082      	sub	sp, #8
 8013d0a:	af00      	add	r7, sp, #0
 8013d0c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	6818      	ldr	r0, [r3, #0]
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	3304      	adds	r3, #4
 8013d16:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8013d1a:	4619      	mov	r1, r3
 8013d1c:	f7fc f9d2 	bl	80100c4 <HAL_UART_Receive_DMA>
    }
 8013d20:	bf00      	nop
 8013d22:	3708      	adds	r7, #8
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <_ZN13STM32Hardware4readEv>:

    int read(){
 8013d28:	b590      	push	{r4, r7, lr}
 8013d2a:	b085      	sub	sp, #20
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8013d30:	f04f 33ff 	mov.w	r3, #4294967295
 8013d34:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013d3c:	685c      	ldr	r4, [r3, #4]
 8013d3e:	6878      	ldr	r0, [r7, #4]
 8013d40:	f7ff fef6 	bl	8013b30 <_ZN13STM32Hardware10getRdmaIndEv>
 8013d44:	4603      	mov	r3, r0
 8013d46:	429c      	cmp	r4, r3
 8013d48:	bf14      	ite	ne
 8013d4a:	2301      	movne	r3, #1
 8013d4c:	2300      	moveq	r3, #0
 8013d4e:	b2db      	uxtb	r3, r3
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d016      	beq.n	8013d82 <_ZN13STM32Hardware4readEv+0x5a>
        c = rbuf[rind++];
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013d5a:	685b      	ldr	r3, [r3, #4]
 8013d5c:	1c5a      	adds	r2, r3, #1
 8013d5e:	6879      	ldr	r1, [r7, #4]
 8013d60:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8013d64:	604a      	str	r2, [r1, #4]
 8013d66:	687a      	ldr	r2, [r7, #4]
 8013d68:	4413      	add	r3, r2
 8013d6a:	791b      	ldrb	r3, [r3, #4]
 8013d6c:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013d74:	685b      	ldr	r3, [r3, #4]
 8013d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013d7a:	687a      	ldr	r2, [r7, #4]
 8013d7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013d80:	6053      	str	r3, [r2, #4]
      }
      return c;
 8013d82:	68fb      	ldr	r3, [r7, #12]
    }
 8013d84:	4618      	mov	r0, r3
 8013d86:	3714      	adds	r7, #20
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd90      	pop	{r4, r7, pc}

08013d8c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b084      	sub	sp, #16
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013d9c:	2b20      	cmp	r3, #32
 8013d9e:	d108      	bne.n	8013db2 <_ZN13STM32Hardware5flushEv+0x26>
 8013da0:	4b2d      	ldr	r3, [pc, #180]	@ (8013e58 <_ZN13STM32Hardware5flushEv+0xcc>)
 8013da2:	781b      	ldrb	r3, [r3, #0]
 8013da4:	f083 0301 	eor.w	r3, r3, #1
 8013da8:	b2db      	uxtb	r3, r3
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d001      	beq.n	8013db2 <_ZN13STM32Hardware5flushEv+0x26>
 8013dae:	2301      	movs	r3, #1
 8013db0:	e000      	b.n	8013db4 <_ZN13STM32Hardware5flushEv+0x28>
 8013db2:	2300      	movs	r3, #0
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d04a      	beq.n	8013e4e <_ZN13STM32Hardware5flushEv+0xc2>
        mutex = true;
 8013db8:	4b27      	ldr	r3, [pc, #156]	@ (8013e58 <_ZN13STM32Hardware5flushEv+0xcc>)
 8013dba:	2201      	movs	r2, #1
 8013dbc:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013dc4:	891a      	ldrh	r2, [r3, #8]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013dcc:	895b      	ldrh	r3, [r3, #10]
 8013dce:	429a      	cmp	r2, r3
 8013dd0:	d03a      	beq.n	8013e48 <_ZN13STM32Hardware5flushEv+0xbc>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013dd8:	895a      	ldrh	r2, [r3, #10]
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013de0:	891b      	ldrh	r3, [r3, #8]
 8013de2:	429a      	cmp	r2, r3
 8013de4:	d20a      	bcs.n	8013dfc <_ZN13STM32Hardware5flushEv+0x70>
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013dec:	891a      	ldrh	r2, [r3, #8]
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013df4:	895b      	ldrh	r3, [r3, #10]
 8013df6:	1ad3      	subs	r3, r2, r3
 8013df8:	b29b      	uxth	r3, r3
 8013dfa:	e006      	b.n	8013e0a <_ZN13STM32Hardware5flushEv+0x7e>
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013e02:	895b      	ldrh	r3, [r3, #10]
 8013e04:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8013e08:	b29b      	uxth	r3, r3
 8013e0a:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	6818      	ldr	r0, [r3, #0]
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013e16:	895b      	ldrh	r3, [r3, #10]
 8013e18:	461a      	mov	r2, r3
 8013e1a:	f241 0308 	movw	r3, #4104	@ 0x1008
 8013e1e:	4413      	add	r3, r2
 8013e20:	687a      	ldr	r2, [r7, #4]
 8013e22:	4413      	add	r3, r2
 8013e24:	89fa      	ldrh	r2, [r7, #14]
 8013e26:	4619      	mov	r1, r3
 8013e28:	f7fc f8cc 	bl	800ffc4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013e32:	895a      	ldrh	r2, [r3, #10]
 8013e34:	89fb      	ldrh	r3, [r7, #14]
 8013e36:	4413      	add	r3, r2
 8013e38:	b29b      	uxth	r3, r3
 8013e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013e3e:	b29a      	uxth	r2, r3
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013e46:	815a      	strh	r2, [r3, #10]
        }
        mutex = false;
 8013e48:	4b03      	ldr	r3, [pc, #12]	@ (8013e58 <_ZN13STM32Hardware5flushEv+0xcc>)
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	701a      	strb	r2, [r3, #0]
      }
    }
 8013e4e:	bf00      	nop
 8013e50:	3710      	adds	r7, #16
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}
 8013e56:	bf00      	nop
 8013e58:	240016c4 	.word	0x240016c4

08013e5c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b086      	sub	sp, #24
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	60f8      	str	r0, [r7, #12]
 8013e64:	60b9      	str	r1, [r7, #8]
 8013e66:	607a      	str	r2, [r7, #4]
      int n = length;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8013e6c:	697b      	ldr	r3, [r7, #20]
 8013e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013e72:	bfa8      	it	ge
 8013e74:	f44f 5380 	movge.w	r3, #4096	@ 0x1000
 8013e78:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013e80:	891b      	ldrh	r3, [r3, #8]
 8013e82:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8013e86:	697a      	ldr	r2, [r7, #20]
 8013e88:	4293      	cmp	r3, r2
 8013e8a:	bfa8      	it	ge
 8013e8c:	4613      	movge	r3, r2
 8013e8e:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013e96:	891b      	ldrh	r3, [r3, #8]
 8013e98:	461a      	mov	r2, r3
 8013e9a:	f241 0308 	movw	r3, #4104	@ 0x1008
 8013e9e:	4413      	add	r3, r2
 8013ea0:	68fa      	ldr	r2, [r7, #12]
 8013ea2:	4413      	add	r3, r2
 8013ea4:	693a      	ldr	r2, [r7, #16]
 8013ea6:	68b9      	ldr	r1, [r7, #8]
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f007 f930 	bl	801b10e <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013eb4:	891a      	ldrh	r2, [r3, #8]
 8013eb6:	697b      	ldr	r3, [r7, #20]
 8013eb8:	b29b      	uxth	r3, r3
 8013eba:	4413      	add	r3, r2
 8013ebc:	b29b      	uxth	r3, r3
 8013ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013ec2:	b29a      	uxth	r2, r3
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8013eca:	811a      	strh	r2, [r3, #8]

      if(n != n_tail){
 8013ecc:	697a      	ldr	r2, [r7, #20]
 8013ece:	693b      	ldr	r3, [r7, #16]
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d00d      	beq.n	8013ef0 <_ZN13STM32Hardware5writeEPhi+0x94>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8013ed4:	68fa      	ldr	r2, [r7, #12]
 8013ed6:	f241 0308 	movw	r3, #4104	@ 0x1008
 8013eda:	4413      	add	r3, r2
 8013edc:	693a      	ldr	r2, [r7, #16]
 8013ede:	68b9      	ldr	r1, [r7, #8]
 8013ee0:	1888      	adds	r0, r1, r2
 8013ee2:	6979      	ldr	r1, [r7, #20]
 8013ee4:	693a      	ldr	r2, [r7, #16]
 8013ee6:	1a8a      	subs	r2, r1, r2
 8013ee8:	4601      	mov	r1, r0
 8013eea:	4618      	mov	r0, r3
 8013eec:	f007 f90f 	bl	801b10e <memcpy>
      }

      flush();
 8013ef0:	68f8      	ldr	r0, [r7, #12]
 8013ef2:	f7ff ff4b 	bl	8013d8c <_ZN13STM32Hardware5flushEv>
    }
 8013ef6:	bf00      	nop
 8013ef8:	3718      	adds	r7, #24
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd80      	pop	{r7, pc}

08013efe <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8013efe:	b580      	push	{r7, lr}
 8013f00:	b082      	sub	sp, #8
 8013f02:	af00      	add	r7, sp, #0
 8013f04:	6078      	str	r0, [r7, #4]
 8013f06:	f7f0 facf 	bl	80044a8 <HAL_GetTick>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3708      	adds	r7, #8
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}

08013f14 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b082      	sub	sp, #8
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7fe ff98 	bl	8012e54 <_ZN3ros3MsgC1Ev>
 8013f24:	4a0e      	ldr	r2, [pc, #56]	@ (8013f60 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	601a      	str	r2, [r3, #0]
      x(0),
 8013f2a:	6879      	ldr	r1, [r7, #4]
 8013f2c:	f04f 0200 	mov.w	r2, #0
 8013f30:	f04f 0300 	mov.w	r3, #0
 8013f34:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8013f38:	6879      	ldr	r1, [r7, #4]
 8013f3a:	f04f 0200 	mov.w	r2, #0
 8013f3e:	f04f 0300 	mov.w	r3, #0
 8013f42:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 8013f46:	6879      	ldr	r1, [r7, #4]
 8013f48:	f04f 0200 	mov.w	r2, #0
 8013f4c:	f04f 0300 	mov.w	r3, #0
 8013f50:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	4618      	mov	r0, r3
 8013f58:	3708      	adds	r7, #8
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	bd80      	pop	{r7, pc}
 8013f5e:	bf00      	nop
 8013f60:	0801ca24 	.word	0x0801ca24

08013f64 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8013f64:	b480      	push	{r7}
 8013f66:	b08b      	sub	sp, #44	@ 0x2c
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
 8013f6c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013f78:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8013f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013f80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013f82:	6838      	ldr	r0, [r7, #0]
 8013f84:	4401      	add	r1, r0
 8013f86:	b2d3      	uxtb	r3, r2
 8013f88:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8013f8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8013f8e:	f04f 0200 	mov.w	r2, #0
 8013f92:	f04f 0300 	mov.w	r3, #0
 8013f96:	0a02      	lsrs	r2, r0, #8
 8013f98:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8013f9c:	0a0b      	lsrs	r3, r1, #8
 8013f9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013fa0:	3101      	adds	r1, #1
 8013fa2:	6838      	ldr	r0, [r7, #0]
 8013fa4:	4401      	add	r1, r0
 8013fa6:	b2d3      	uxtb	r3, r2
 8013fa8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8013faa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8013fae:	f04f 0200 	mov.w	r2, #0
 8013fb2:	f04f 0300 	mov.w	r3, #0
 8013fb6:	0c02      	lsrs	r2, r0, #16
 8013fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8013fbc:	0c0b      	lsrs	r3, r1, #16
 8013fbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013fc0:	3102      	adds	r1, #2
 8013fc2:	6838      	ldr	r0, [r7, #0]
 8013fc4:	4401      	add	r1, r0
 8013fc6:	b2d3      	uxtb	r3, r2
 8013fc8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8013fca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8013fce:	f04f 0200 	mov.w	r2, #0
 8013fd2:	f04f 0300 	mov.w	r3, #0
 8013fd6:	0e02      	lsrs	r2, r0, #24
 8013fd8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8013fdc:	0e0b      	lsrs	r3, r1, #24
 8013fde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013fe0:	3103      	adds	r1, #3
 8013fe2:	6838      	ldr	r0, [r7, #0]
 8013fe4:	4401      	add	r1, r0
 8013fe6:	b2d3      	uxtb	r3, r2
 8013fe8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8013fea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8013fee:	f04f 0200 	mov.w	r2, #0
 8013ff2:	f04f 0300 	mov.w	r3, #0
 8013ff6:	000a      	movs	r2, r1
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013ffc:	3104      	adds	r1, #4
 8013ffe:	6838      	ldr	r0, [r7, #0]
 8014000:	4401      	add	r1, r0
 8014002:	b2d3      	uxtb	r3, r2
 8014004:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8014006:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801400a:	f04f 0200 	mov.w	r2, #0
 801400e:	f04f 0300 	mov.w	r3, #0
 8014012:	0a0a      	lsrs	r2, r1, #8
 8014014:	2300      	movs	r3, #0
 8014016:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014018:	3105      	adds	r1, #5
 801401a:	6838      	ldr	r0, [r7, #0]
 801401c:	4401      	add	r1, r0
 801401e:	b2d3      	uxtb	r3, r2
 8014020:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8014022:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8014026:	f04f 0200 	mov.w	r2, #0
 801402a:	f04f 0300 	mov.w	r3, #0
 801402e:	0c0a      	lsrs	r2, r1, #16
 8014030:	2300      	movs	r3, #0
 8014032:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014034:	3106      	adds	r1, #6
 8014036:	6838      	ldr	r0, [r7, #0]
 8014038:	4401      	add	r1, r0
 801403a:	b2d3      	uxtb	r3, r2
 801403c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 801403e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8014042:	f04f 0200 	mov.w	r2, #0
 8014046:	f04f 0300 	mov.w	r3, #0
 801404a:	0e0a      	lsrs	r2, r1, #24
 801404c:	2300      	movs	r3, #0
 801404e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014050:	3107      	adds	r1, #7
 8014052:	6838      	ldr	r0, [r7, #0]
 8014054:	4401      	add	r1, r0
 8014056:	b2d3      	uxtb	r3, r2
 8014058:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 801405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801405c:	3308      	adds	r3, #8
 801405e:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014066:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 801406a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801406e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014070:	6838      	ldr	r0, [r7, #0]
 8014072:	4401      	add	r1, r0
 8014074:	b2d3      	uxtb	r3, r2
 8014076:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8014078:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801407c:	f04f 0200 	mov.w	r2, #0
 8014080:	f04f 0300 	mov.w	r3, #0
 8014084:	0a02      	lsrs	r2, r0, #8
 8014086:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801408a:	0a0b      	lsrs	r3, r1, #8
 801408c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801408e:	3101      	adds	r1, #1
 8014090:	6838      	ldr	r0, [r7, #0]
 8014092:	4401      	add	r1, r0
 8014094:	b2d3      	uxtb	r3, r2
 8014096:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8014098:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801409c:	f04f 0200 	mov.w	r2, #0
 80140a0:	f04f 0300 	mov.w	r3, #0
 80140a4:	0c02      	lsrs	r2, r0, #16
 80140a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80140aa:	0c0b      	lsrs	r3, r1, #16
 80140ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80140ae:	3102      	adds	r1, #2
 80140b0:	6838      	ldr	r0, [r7, #0]
 80140b2:	4401      	add	r1, r0
 80140b4:	b2d3      	uxtb	r3, r2
 80140b6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80140b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80140bc:	f04f 0200 	mov.w	r2, #0
 80140c0:	f04f 0300 	mov.w	r3, #0
 80140c4:	0e02      	lsrs	r2, r0, #24
 80140c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80140ca:	0e0b      	lsrs	r3, r1, #24
 80140cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80140ce:	3103      	adds	r1, #3
 80140d0:	6838      	ldr	r0, [r7, #0]
 80140d2:	4401      	add	r1, r0
 80140d4:	b2d3      	uxtb	r3, r2
 80140d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80140d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80140dc:	f04f 0200 	mov.w	r2, #0
 80140e0:	f04f 0300 	mov.w	r3, #0
 80140e4:	000a      	movs	r2, r1
 80140e6:	2300      	movs	r3, #0
 80140e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80140ea:	3104      	adds	r1, #4
 80140ec:	6838      	ldr	r0, [r7, #0]
 80140ee:	4401      	add	r1, r0
 80140f0:	b2d3      	uxtb	r3, r2
 80140f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80140f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80140f8:	f04f 0200 	mov.w	r2, #0
 80140fc:	f04f 0300 	mov.w	r3, #0
 8014100:	0a0a      	lsrs	r2, r1, #8
 8014102:	2300      	movs	r3, #0
 8014104:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014106:	3105      	adds	r1, #5
 8014108:	6838      	ldr	r0, [r7, #0]
 801410a:	4401      	add	r1, r0
 801410c:	b2d3      	uxtb	r3, r2
 801410e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8014110:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014114:	f04f 0200 	mov.w	r2, #0
 8014118:	f04f 0300 	mov.w	r3, #0
 801411c:	0c0a      	lsrs	r2, r1, #16
 801411e:	2300      	movs	r3, #0
 8014120:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014122:	3106      	adds	r1, #6
 8014124:	6838      	ldr	r0, [r7, #0]
 8014126:	4401      	add	r1, r0
 8014128:	b2d3      	uxtb	r3, r2
 801412a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 801412c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014130:	f04f 0200 	mov.w	r2, #0
 8014134:	f04f 0300 	mov.w	r3, #0
 8014138:	0e0a      	lsrs	r2, r1, #24
 801413a:	2300      	movs	r3, #0
 801413c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801413e:	3107      	adds	r1, #7
 8014140:	6838      	ldr	r0, [r7, #0]
 8014142:	4401      	add	r1, r0
 8014144:	b2d3      	uxtb	r3, r2
 8014146:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8014148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801414a:	3308      	adds	r3, #8
 801414c:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8014154:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8014158:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801415c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801415e:	6838      	ldr	r0, [r7, #0]
 8014160:	4401      	add	r1, r0
 8014162:	b2d3      	uxtb	r3, r2
 8014164:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8014166:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801416a:	f04f 0200 	mov.w	r2, #0
 801416e:	f04f 0300 	mov.w	r3, #0
 8014172:	0a02      	lsrs	r2, r0, #8
 8014174:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8014178:	0a0b      	lsrs	r3, r1, #8
 801417a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801417c:	3101      	adds	r1, #1
 801417e:	6838      	ldr	r0, [r7, #0]
 8014180:	4401      	add	r1, r0
 8014182:	b2d3      	uxtb	r3, r2
 8014184:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8014186:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801418a:	f04f 0200 	mov.w	r2, #0
 801418e:	f04f 0300 	mov.w	r3, #0
 8014192:	0c02      	lsrs	r2, r0, #16
 8014194:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8014198:	0c0b      	lsrs	r3, r1, #16
 801419a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801419c:	3102      	adds	r1, #2
 801419e:	6838      	ldr	r0, [r7, #0]
 80141a0:	4401      	add	r1, r0
 80141a2:	b2d3      	uxtb	r3, r2
 80141a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80141a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80141aa:	f04f 0200 	mov.w	r2, #0
 80141ae:	f04f 0300 	mov.w	r3, #0
 80141b2:	0e02      	lsrs	r2, r0, #24
 80141b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80141b8:	0e0b      	lsrs	r3, r1, #24
 80141ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80141bc:	3103      	adds	r1, #3
 80141be:	6838      	ldr	r0, [r7, #0]
 80141c0:	4401      	add	r1, r0
 80141c2:	b2d3      	uxtb	r3, r2
 80141c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80141c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80141ca:	f04f 0200 	mov.w	r2, #0
 80141ce:	f04f 0300 	mov.w	r3, #0
 80141d2:	000a      	movs	r2, r1
 80141d4:	2300      	movs	r3, #0
 80141d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80141d8:	3104      	adds	r1, #4
 80141da:	6838      	ldr	r0, [r7, #0]
 80141dc:	4401      	add	r1, r0
 80141de:	b2d3      	uxtb	r3, r2
 80141e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80141e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80141e6:	f04f 0200 	mov.w	r2, #0
 80141ea:	f04f 0300 	mov.w	r3, #0
 80141ee:	0a0a      	lsrs	r2, r1, #8
 80141f0:	2300      	movs	r3, #0
 80141f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80141f4:	3105      	adds	r1, #5
 80141f6:	6838      	ldr	r0, [r7, #0]
 80141f8:	4401      	add	r1, r0
 80141fa:	b2d3      	uxtb	r3, r2
 80141fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80141fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014202:	f04f 0200 	mov.w	r2, #0
 8014206:	f04f 0300 	mov.w	r3, #0
 801420a:	0c0a      	lsrs	r2, r1, #16
 801420c:	2300      	movs	r3, #0
 801420e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014210:	3106      	adds	r1, #6
 8014212:	6838      	ldr	r0, [r7, #0]
 8014214:	4401      	add	r1, r0
 8014216:	b2d3      	uxtb	r3, r2
 8014218:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 801421a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801421e:	f04f 0200 	mov.w	r2, #0
 8014222:	f04f 0300 	mov.w	r3, #0
 8014226:	0e0a      	lsrs	r2, r1, #24
 8014228:	2300      	movs	r3, #0
 801422a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801422c:	3107      	adds	r1, #7
 801422e:	6838      	ldr	r0, [r7, #0]
 8014230:	4401      	add	r1, r0
 8014232:	b2d3      	uxtb	r3, r2
 8014234:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8014236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014238:	3308      	adds	r3, #8
 801423a:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 801423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801423e:	4618      	mov	r0, r3
 8014240:	372c      	adds	r7, #44	@ 0x2c
 8014242:	46bd      	mov	sp, r7
 8014244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014248:	4770      	bx	lr

0801424a <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 801424a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801424e:	b0eb      	sub	sp, #428	@ 0x1ac
 8014250:	af00      	add	r7, sp, #0
 8014252:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8014256:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 801425a:	2300      	movs	r3, #0
 801425c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8014260:	f04f 0200 	mov.w	r2, #0
 8014264:	f04f 0300 	mov.w	r3, #0
 8014268:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 801426c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8014270:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8014274:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014278:	4413      	add	r3, r2
 801427a:	781b      	ldrb	r3, [r3, #0]
 801427c:	b2db      	uxtb	r3, r3
 801427e:	2200      	movs	r2, #0
 8014280:	461c      	mov	r4, r3
 8014282:	4615      	mov	r5, r2
 8014284:	ea40 0804 	orr.w	r8, r0, r4
 8014288:	ea41 0905 	orr.w	r9, r1, r5
 801428c:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8014290:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8014294:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014298:	1c5a      	adds	r2, r3, #1
 801429a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801429e:	4413      	add	r3, r2
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	b2db      	uxtb	r3, r3
 80142a4:	2200      	movs	r2, #0
 80142a6:	469a      	mov	sl, r3
 80142a8:	4693      	mov	fp, r2
 80142aa:	f04f 0200 	mov.w	r2, #0
 80142ae:	f04f 0300 	mov.w	r3, #0
 80142b2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80142b6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80142ba:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80142be:	ea40 0402 	orr.w	r4, r0, r2
 80142c2:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 80142c6:	430b      	orrs	r3, r1
 80142c8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80142cc:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 80142d0:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80142d4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80142d8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80142dc:	1c9a      	adds	r2, r3, #2
 80142de:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80142e2:	4413      	add	r3, r2
 80142e4:	781b      	ldrb	r3, [r3, #0]
 80142e6:	b2db      	uxtb	r3, r3
 80142e8:	2200      	movs	r2, #0
 80142ea:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80142ee:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 80142f2:	f04f 0200 	mov.w	r2, #0
 80142f6:	f04f 0300 	mov.w	r3, #0
 80142fa:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 80142fe:	464c      	mov	r4, r9
 8014300:	0423      	lsls	r3, r4, #16
 8014302:	4644      	mov	r4, r8
 8014304:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8014308:	4644      	mov	r4, r8
 801430a:	0422      	lsls	r2, r4, #16
 801430c:	ea40 0402 	orr.w	r4, r0, r2
 8014310:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8014314:	430b      	orrs	r3, r1
 8014316:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 801431a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 801431e:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8014322:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8014326:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801432a:	1cda      	adds	r2, r3, #3
 801432c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014330:	4413      	add	r3, r2
 8014332:	781b      	ldrb	r3, [r3, #0]
 8014334:	b2db      	uxtb	r3, r3
 8014336:	2200      	movs	r2, #0
 8014338:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 801433c:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8014340:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8014344:	4623      	mov	r3, r4
 8014346:	0a1b      	lsrs	r3, r3, #8
 8014348:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 801434c:	4623      	mov	r3, r4
 801434e:	061b      	lsls	r3, r3, #24
 8014350:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8014354:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8014358:	4623      	mov	r3, r4
 801435a:	4303      	orrs	r3, r0
 801435c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8014360:	462b      	mov	r3, r5
 8014362:	430b      	orrs	r3, r1
 8014364:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8014368:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 801436c:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8014370:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8014374:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014378:	1d1a      	adds	r2, r3, #4
 801437a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801437e:	4413      	add	r3, r2
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	b2db      	uxtb	r3, r3
 8014384:	2200      	movs	r2, #0
 8014386:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 801438a:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 801438e:	f04f 0200 	mov.w	r2, #0
 8014392:	f04f 0300 	mov.w	r3, #0
 8014396:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 801439a:	0023      	movs	r3, r4
 801439c:	2200      	movs	r2, #0
 801439e:	ea40 0402 	orr.w	r4, r0, r2
 80143a2:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 80143a6:	430b      	orrs	r3, r1
 80143a8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80143ac:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 80143b0:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80143b4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80143b8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80143bc:	1d5a      	adds	r2, r3, #5
 80143be:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80143c2:	4413      	add	r3, r2
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	b2db      	uxtb	r3, r3
 80143c8:	2200      	movs	r2, #0
 80143ca:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80143ce:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80143d2:	f04f 0200 	mov.w	r2, #0
 80143d6:	f04f 0300 	mov.w	r3, #0
 80143da:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 80143de:	0223      	lsls	r3, r4, #8
 80143e0:	2200      	movs	r2, #0
 80143e2:	ea40 0402 	orr.w	r4, r0, r2
 80143e6:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 80143ea:	430b      	orrs	r3, r1
 80143ec:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80143f0:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 80143f4:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80143f8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80143fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014400:	1d9a      	adds	r2, r3, #6
 8014402:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014406:	4413      	add	r3, r2
 8014408:	781b      	ldrb	r3, [r3, #0]
 801440a:	b2db      	uxtb	r3, r3
 801440c:	2200      	movs	r2, #0
 801440e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8014412:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8014416:	f04f 0200 	mov.w	r2, #0
 801441a:	f04f 0300 	mov.w	r3, #0
 801441e:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8014422:	0423      	lsls	r3, r4, #16
 8014424:	2200      	movs	r2, #0
 8014426:	ea40 0402 	orr.w	r4, r0, r2
 801442a:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 801442e:	430b      	orrs	r3, r1
 8014430:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8014434:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8014438:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 801443c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8014440:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014444:	1dda      	adds	r2, r3, #7
 8014446:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801444a:	4413      	add	r3, r2
 801444c:	781b      	ldrb	r3, [r3, #0]
 801444e:	b2db      	uxtb	r3, r3
 8014450:	2200      	movs	r2, #0
 8014452:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8014456:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 801445a:	f04f 0200 	mov.w	r2, #0
 801445e:	f04f 0300 	mov.w	r3, #0
 8014462:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8014466:	0623      	lsls	r3, r4, #24
 8014468:	2200      	movs	r2, #0
 801446a:	ea40 0402 	orr.w	r4, r0, r2
 801446e:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8014472:	430b      	orrs	r3, r1
 8014474:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8014478:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 801447c:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 8014480:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8014484:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8014488:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 801448c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014490:	3308      	adds	r3, #8
 8014492:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8014496:	f04f 0200 	mov.w	r2, #0
 801449a:	f04f 0300 	mov.w	r3, #0
 801449e:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80144a2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80144a6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80144aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80144ae:	4413      	add	r3, r2
 80144b0:	781b      	ldrb	r3, [r3, #0]
 80144b2:	b2db      	uxtb	r3, r3
 80144b4:	2200      	movs	r2, #0
 80144b6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80144ba:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80144be:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80144c2:	4623      	mov	r3, r4
 80144c4:	4303      	orrs	r3, r0
 80144c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80144ca:	462b      	mov	r3, r5
 80144cc:	430b      	orrs	r3, r1
 80144ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80144d2:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 80144d6:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80144da:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80144de:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80144e2:	1c5a      	adds	r2, r3, #1
 80144e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80144e8:	4413      	add	r3, r2
 80144ea:	781b      	ldrb	r3, [r3, #0]
 80144ec:	b2db      	uxtb	r3, r3
 80144ee:	2200      	movs	r2, #0
 80144f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80144f4:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80144f8:	f04f 0200 	mov.w	r2, #0
 80144fc:	f04f 0300 	mov.w	r3, #0
 8014500:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8014504:	464c      	mov	r4, r9
 8014506:	0223      	lsls	r3, r4, #8
 8014508:	4644      	mov	r4, r8
 801450a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 801450e:	4644      	mov	r4, r8
 8014510:	0222      	lsls	r2, r4, #8
 8014512:	ea40 0402 	orr.w	r4, r0, r2
 8014516:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 801451a:	430b      	orrs	r3, r1
 801451c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8014520:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8014524:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8014528:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 801452c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014530:	1c9a      	adds	r2, r3, #2
 8014532:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014536:	4413      	add	r3, r2
 8014538:	781b      	ldrb	r3, [r3, #0]
 801453a:	b2db      	uxtb	r3, r3
 801453c:	2200      	movs	r2, #0
 801453e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8014542:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8014546:	f04f 0200 	mov.w	r2, #0
 801454a:	f04f 0300 	mov.w	r3, #0
 801454e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8014552:	464c      	mov	r4, r9
 8014554:	0423      	lsls	r3, r4, #16
 8014556:	4644      	mov	r4, r8
 8014558:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 801455c:	4644      	mov	r4, r8
 801455e:	0422      	lsls	r2, r4, #16
 8014560:	ea40 0402 	orr.w	r4, r0, r2
 8014564:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8014568:	430b      	orrs	r3, r1
 801456a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801456e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8014572:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8014576:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 801457a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801457e:	1cda      	adds	r2, r3, #3
 8014580:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014584:	4413      	add	r3, r2
 8014586:	781b      	ldrb	r3, [r3, #0]
 8014588:	b2db      	uxtb	r3, r3
 801458a:	2200      	movs	r2, #0
 801458c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8014590:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8014594:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8014598:	4623      	mov	r3, r4
 801459a:	0a1b      	lsrs	r3, r3, #8
 801459c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80145a0:	4623      	mov	r3, r4
 80145a2:	061b      	lsls	r3, r3, #24
 80145a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80145a8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80145ac:	4623      	mov	r3, r4
 80145ae:	4303      	orrs	r3, r0
 80145b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80145b4:	462b      	mov	r3, r5
 80145b6:	430b      	orrs	r3, r1
 80145b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80145bc:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 80145c0:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80145c4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80145c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80145cc:	1d1a      	adds	r2, r3, #4
 80145ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80145d2:	4413      	add	r3, r2
 80145d4:	781b      	ldrb	r3, [r3, #0]
 80145d6:	b2db      	uxtb	r3, r3
 80145d8:	2200      	movs	r2, #0
 80145da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80145de:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80145e2:	f04f 0200 	mov.w	r2, #0
 80145e6:	f04f 0300 	mov.w	r3, #0
 80145ea:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 80145ee:	0023      	movs	r3, r4
 80145f0:	2200      	movs	r2, #0
 80145f2:	ea40 0402 	orr.w	r4, r0, r2
 80145f6:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 80145fa:	430b      	orrs	r3, r1
 80145fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8014600:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8014604:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8014608:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 801460c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014610:	1d5a      	adds	r2, r3, #5
 8014612:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014616:	4413      	add	r3, r2
 8014618:	781b      	ldrb	r3, [r3, #0]
 801461a:	b2db      	uxtb	r3, r3
 801461c:	2200      	movs	r2, #0
 801461e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014622:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8014626:	f04f 0200 	mov.w	r2, #0
 801462a:	f04f 0300 	mov.w	r3, #0
 801462e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8014632:	0223      	lsls	r3, r4, #8
 8014634:	2200      	movs	r2, #0
 8014636:	ea40 0402 	orr.w	r4, r0, r2
 801463a:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 801463e:	430b      	orrs	r3, r1
 8014640:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8014644:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8014648:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 801464c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8014650:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014654:	1d9a      	adds	r2, r3, #6
 8014656:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801465a:	4413      	add	r3, r2
 801465c:	781b      	ldrb	r3, [r3, #0]
 801465e:	b2db      	uxtb	r3, r3
 8014660:	2200      	movs	r2, #0
 8014662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8014666:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801466a:	f04f 0200 	mov.w	r2, #0
 801466e:	f04f 0300 	mov.w	r3, #0
 8014672:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8014676:	0423      	lsls	r3, r4, #16
 8014678:	2200      	movs	r2, #0
 801467a:	ea40 0402 	orr.w	r4, r0, r2
 801467e:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8014682:	430b      	orrs	r3, r1
 8014684:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014688:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 801468c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8014690:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8014694:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014698:	1dda      	adds	r2, r3, #7
 801469a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801469e:	4413      	add	r3, r2
 80146a0:	781b      	ldrb	r3, [r3, #0]
 80146a2:	b2db      	uxtb	r3, r3
 80146a4:	2200      	movs	r2, #0
 80146a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80146aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80146ae:	f04f 0200 	mov.w	r2, #0
 80146b2:	f04f 0300 	mov.w	r3, #0
 80146b6:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 80146ba:	0623      	lsls	r3, r4, #24
 80146bc:	2200      	movs	r2, #0
 80146be:	ea40 0402 	orr.w	r4, r0, r2
 80146c2:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 80146c6:	430b      	orrs	r3, r1
 80146c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80146cc:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 80146d0:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 80146d4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80146d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80146dc:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80146e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80146e4:	3308      	adds	r3, #8
 80146e6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80146ea:	f04f 0200 	mov.w	r2, #0
 80146ee:	f04f 0300 	mov.w	r3, #0
 80146f2:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80146f6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80146fa:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80146fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014702:	4413      	add	r3, r2
 8014704:	781b      	ldrb	r3, [r3, #0]
 8014706:	b2db      	uxtb	r3, r3
 8014708:	2200      	movs	r2, #0
 801470a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801470e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8014712:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8014716:	4623      	mov	r3, r4
 8014718:	4303      	orrs	r3, r0
 801471a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801471c:	462b      	mov	r3, r5
 801471e:	430b      	orrs	r3, r1
 8014720:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014722:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8014726:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 801472a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 801472e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014732:	1c5a      	adds	r2, r3, #1
 8014734:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014738:	4413      	add	r3, r2
 801473a:	781b      	ldrb	r3, [r3, #0]
 801473c:	b2db      	uxtb	r3, r3
 801473e:	2200      	movs	r2, #0
 8014740:	673b      	str	r3, [r7, #112]	@ 0x70
 8014742:	677a      	str	r2, [r7, #116]	@ 0x74
 8014744:	f04f 0200 	mov.w	r2, #0
 8014748:	f04f 0300 	mov.w	r3, #0
 801474c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8014750:	464c      	mov	r4, r9
 8014752:	0223      	lsls	r3, r4, #8
 8014754:	4644      	mov	r4, r8
 8014756:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 801475a:	4644      	mov	r4, r8
 801475c:	0222      	lsls	r2, r4, #8
 801475e:	ea40 0402 	orr.w	r4, r0, r2
 8014762:	66bc      	str	r4, [r7, #104]	@ 0x68
 8014764:	430b      	orrs	r3, r1
 8014766:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014768:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 801476c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8014770:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8014774:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014778:	1c9a      	adds	r2, r3, #2
 801477a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801477e:	4413      	add	r3, r2
 8014780:	781b      	ldrb	r3, [r3, #0]
 8014782:	b2db      	uxtb	r3, r3
 8014784:	2200      	movs	r2, #0
 8014786:	663b      	str	r3, [r7, #96]	@ 0x60
 8014788:	667a      	str	r2, [r7, #100]	@ 0x64
 801478a:	f04f 0200 	mov.w	r2, #0
 801478e:	f04f 0300 	mov.w	r3, #0
 8014792:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8014796:	464c      	mov	r4, r9
 8014798:	0423      	lsls	r3, r4, #16
 801479a:	4644      	mov	r4, r8
 801479c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80147a0:	4644      	mov	r4, r8
 80147a2:	0422      	lsls	r2, r4, #16
 80147a4:	ea40 0402 	orr.w	r4, r0, r2
 80147a8:	65bc      	str	r4, [r7, #88]	@ 0x58
 80147aa:	430b      	orrs	r3, r1
 80147ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80147ae:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80147b2:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80147b6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80147ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80147be:	1cda      	adds	r2, r3, #3
 80147c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80147c4:	4413      	add	r3, r2
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	b2db      	uxtb	r3, r3
 80147ca:	2200      	movs	r2, #0
 80147cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80147ce:	657a      	str	r2, [r7, #84]	@ 0x54
 80147d0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80147d4:	4623      	mov	r3, r4
 80147d6:	0a1b      	lsrs	r3, r3, #8
 80147d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80147da:	4623      	mov	r3, r4
 80147dc:	061b      	lsls	r3, r3, #24
 80147de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80147e0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80147e4:	4623      	mov	r3, r4
 80147e6:	4303      	orrs	r3, r0
 80147e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80147ea:	462b      	mov	r3, r5
 80147ec:	430b      	orrs	r3, r1
 80147ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80147f0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80147f4:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80147f8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80147fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014800:	1d1a      	adds	r2, r3, #4
 8014802:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014806:	4413      	add	r3, r2
 8014808:	781b      	ldrb	r3, [r3, #0]
 801480a:	b2db      	uxtb	r3, r3
 801480c:	2200      	movs	r2, #0
 801480e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014810:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8014812:	f04f 0200 	mov.w	r2, #0
 8014816:	f04f 0300 	mov.w	r3, #0
 801481a:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801481c:	0023      	movs	r3, r4
 801481e:	2200      	movs	r2, #0
 8014820:	ea40 0402 	orr.w	r4, r0, r2
 8014824:	633c      	str	r4, [r7, #48]	@ 0x30
 8014826:	430b      	orrs	r3, r1
 8014828:	637b      	str	r3, [r7, #52]	@ 0x34
 801482a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 801482e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8014832:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8014836:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801483a:	1d5a      	adds	r2, r3, #5
 801483c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014840:	4413      	add	r3, r2
 8014842:	781b      	ldrb	r3, [r3, #0]
 8014844:	b2db      	uxtb	r3, r3
 8014846:	2200      	movs	r2, #0
 8014848:	62bb      	str	r3, [r7, #40]	@ 0x28
 801484a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801484c:	f04f 0200 	mov.w	r2, #0
 8014850:	f04f 0300 	mov.w	r3, #0
 8014854:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8014856:	0223      	lsls	r3, r4, #8
 8014858:	2200      	movs	r2, #0
 801485a:	ea40 0402 	orr.w	r4, r0, r2
 801485e:	623c      	str	r4, [r7, #32]
 8014860:	430b      	orrs	r3, r1
 8014862:	627b      	str	r3, [r7, #36]	@ 0x24
 8014864:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8014868:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 801486c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8014870:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014874:	3306      	adds	r3, #6
 8014876:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 801487a:	4413      	add	r3, r2
 801487c:	781b      	ldrb	r3, [r3, #0]
 801487e:	b2db      	uxtb	r3, r3
 8014880:	2200      	movs	r2, #0
 8014882:	61bb      	str	r3, [r7, #24]
 8014884:	61fa      	str	r2, [r7, #28]
 8014886:	f04f 0200 	mov.w	r2, #0
 801488a:	f04f 0300 	mov.w	r3, #0
 801488e:	69bc      	ldr	r4, [r7, #24]
 8014890:	0423      	lsls	r3, r4, #16
 8014892:	2200      	movs	r2, #0
 8014894:	ea40 0402 	orr.w	r4, r0, r2
 8014898:	613c      	str	r4, [r7, #16]
 801489a:	430b      	orrs	r3, r1
 801489c:	617b      	str	r3, [r7, #20]
 801489e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80148a2:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80148a6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80148aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80148ae:	3307      	adds	r3, #7
 80148b0:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 80148b4:	4413      	add	r3, r2
 80148b6:	781b      	ldrb	r3, [r3, #0]
 80148b8:	b2db      	uxtb	r3, r3
 80148ba:	2200      	movs	r2, #0
 80148bc:	60bb      	str	r3, [r7, #8]
 80148be:	60fa      	str	r2, [r7, #12]
 80148c0:	f04f 0200 	mov.w	r2, #0
 80148c4:	f04f 0300 	mov.w	r3, #0
 80148c8:	68bc      	ldr	r4, [r7, #8]
 80148ca:	0623      	lsls	r3, r4, #24
 80148cc:	2200      	movs	r2, #0
 80148ce:	ea40 0402 	orr.w	r4, r0, r2
 80148d2:	603c      	str	r4, [r7, #0]
 80148d4:	430b      	orrs	r3, r1
 80148d6:	607b      	str	r3, [r7, #4]
 80148d8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80148dc:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 80148e0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 80148e4:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 80148e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80148ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80148f0:	3308      	adds	r3, #8
 80148f2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 80148f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 80148fa:	4618      	mov	r0, r3
 80148fc:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 8014900:	46bd      	mov	sp, r7
 8014902:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8014906:	4770      	bx	lr

08014908 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8014908:	b480      	push	{r7}
 801490a:	b083      	sub	sp, #12
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
 8014910:	4b03      	ldr	r3, [pc, #12]	@ (8014920 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8014912:	4618      	mov	r0, r3
 8014914:	370c      	adds	r7, #12
 8014916:	46bd      	mov	sp, r7
 8014918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491c:	4770      	bx	lr
 801491e:	bf00      	nop
 8014920:	0801c764 	.word	0x0801c764

08014924 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8014924:	b480      	push	{r7}
 8014926:	b083      	sub	sp, #12
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
 801492c:	4b03      	ldr	r3, [pc, #12]	@ (801493c <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 801492e:	4618      	mov	r0, r3
 8014930:	370c      	adds	r7, #12
 8014932:	46bd      	mov	sp, r7
 8014934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014938:	4770      	bx	lr
 801493a:	bf00      	nop
 801493c:	0801c778 	.word	0x0801c778

08014940 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	4618      	mov	r0, r3
 801494c:	f7fe fa82 	bl	8012e54 <_ZN3ros3MsgC1Ev>
 8014950:	4a11      	ldr	r2, [pc, #68]	@ (8014998 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	601a      	str	r2, [r3, #0]
      x(0),
 8014956:	6879      	ldr	r1, [r7, #4]
 8014958:	f04f 0200 	mov.w	r2, #0
 801495c:	f04f 0300 	mov.w	r3, #0
 8014960:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8014964:	6879      	ldr	r1, [r7, #4]
 8014966:	f04f 0200 	mov.w	r2, #0
 801496a:	f04f 0300 	mov.w	r3, #0
 801496e:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0),
 8014972:	6879      	ldr	r1, [r7, #4]
 8014974:	f04f 0200 	mov.w	r2, #0
 8014978:	f04f 0300 	mov.w	r3, #0
 801497c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      w(0)
 8014980:	6879      	ldr	r1, [r7, #4]
 8014982:	f04f 0200 	mov.w	r2, #0
 8014986:	f04f 0300 	mov.w	r3, #0
 801498a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	4618      	mov	r0, r3
 8014992:	3708      	adds	r7, #8
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}
 8014998:	0801ca0c 	.word	0x0801ca0c

0801499c <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 801499c:	b480      	push	{r7}
 801499e:	b08d      	sub	sp, #52	@ 0x34
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
 80149a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80149a6:	2300      	movs	r3, #0
 80149a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80149b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80149b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80149b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80149ba:	6838      	ldr	r0, [r7, #0]
 80149bc:	4401      	add	r1, r0
 80149be:	b2d3      	uxtb	r3, r2
 80149c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80149c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80149c6:	f04f 0200 	mov.w	r2, #0
 80149ca:	f04f 0300 	mov.w	r3, #0
 80149ce:	0a02      	lsrs	r2, r0, #8
 80149d0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80149d4:	0a0b      	lsrs	r3, r1, #8
 80149d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80149d8:	3101      	adds	r1, #1
 80149da:	6838      	ldr	r0, [r7, #0]
 80149dc:	4401      	add	r1, r0
 80149de:	b2d3      	uxtb	r3, r2
 80149e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80149e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80149e6:	f04f 0200 	mov.w	r2, #0
 80149ea:	f04f 0300 	mov.w	r3, #0
 80149ee:	0c02      	lsrs	r2, r0, #16
 80149f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80149f4:	0c0b      	lsrs	r3, r1, #16
 80149f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80149f8:	3102      	adds	r1, #2
 80149fa:	6838      	ldr	r0, [r7, #0]
 80149fc:	4401      	add	r1, r0
 80149fe:	b2d3      	uxtb	r3, r2
 8014a00:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8014a02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8014a06:	f04f 0200 	mov.w	r2, #0
 8014a0a:	f04f 0300 	mov.w	r3, #0
 8014a0e:	0e02      	lsrs	r2, r0, #24
 8014a10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8014a14:	0e0b      	lsrs	r3, r1, #24
 8014a16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014a18:	3103      	adds	r1, #3
 8014a1a:	6838      	ldr	r0, [r7, #0]
 8014a1c:	4401      	add	r1, r0
 8014a1e:	b2d3      	uxtb	r3, r2
 8014a20:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8014a22:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8014a26:	f04f 0200 	mov.w	r2, #0
 8014a2a:	f04f 0300 	mov.w	r3, #0
 8014a2e:	000a      	movs	r2, r1
 8014a30:	2300      	movs	r3, #0
 8014a32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014a34:	3104      	adds	r1, #4
 8014a36:	6838      	ldr	r0, [r7, #0]
 8014a38:	4401      	add	r1, r0
 8014a3a:	b2d3      	uxtb	r3, r2
 8014a3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8014a3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8014a42:	f04f 0200 	mov.w	r2, #0
 8014a46:	f04f 0300 	mov.w	r3, #0
 8014a4a:	0a0a      	lsrs	r2, r1, #8
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014a50:	3105      	adds	r1, #5
 8014a52:	6838      	ldr	r0, [r7, #0]
 8014a54:	4401      	add	r1, r0
 8014a56:	b2d3      	uxtb	r3, r2
 8014a58:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8014a5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8014a5e:	f04f 0200 	mov.w	r2, #0
 8014a62:	f04f 0300 	mov.w	r3, #0
 8014a66:	0c0a      	lsrs	r2, r1, #16
 8014a68:	2300      	movs	r3, #0
 8014a6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014a6c:	3106      	adds	r1, #6
 8014a6e:	6838      	ldr	r0, [r7, #0]
 8014a70:	4401      	add	r1, r0
 8014a72:	b2d3      	uxtb	r3, r2
 8014a74:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8014a76:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8014a7a:	f04f 0200 	mov.w	r2, #0
 8014a7e:	f04f 0300 	mov.w	r3, #0
 8014a82:	0e0a      	lsrs	r2, r1, #24
 8014a84:	2300      	movs	r3, #0
 8014a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014a88:	3107      	adds	r1, #7
 8014a8a:	6838      	ldr	r0, [r7, #0]
 8014a8c:	4401      	add	r1, r0
 8014a8e:	b2d3      	uxtb	r3, r2
 8014a90:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8014a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a94:	3308      	adds	r3, #8
 8014a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014a9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8014aa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014aa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014aa8:	6838      	ldr	r0, [r7, #0]
 8014aaa:	4401      	add	r1, r0
 8014aac:	b2d3      	uxtb	r3, r2
 8014aae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8014ab0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8014ab4:	f04f 0200 	mov.w	r2, #0
 8014ab8:	f04f 0300 	mov.w	r3, #0
 8014abc:	0a02      	lsrs	r2, r0, #8
 8014abe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8014ac2:	0a0b      	lsrs	r3, r1, #8
 8014ac4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014ac6:	3101      	adds	r1, #1
 8014ac8:	6838      	ldr	r0, [r7, #0]
 8014aca:	4401      	add	r1, r0
 8014acc:	b2d3      	uxtb	r3, r2
 8014ace:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8014ad0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8014ad4:	f04f 0200 	mov.w	r2, #0
 8014ad8:	f04f 0300 	mov.w	r3, #0
 8014adc:	0c02      	lsrs	r2, r0, #16
 8014ade:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8014ae2:	0c0b      	lsrs	r3, r1, #16
 8014ae4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014ae6:	3102      	adds	r1, #2
 8014ae8:	6838      	ldr	r0, [r7, #0]
 8014aea:	4401      	add	r1, r0
 8014aec:	b2d3      	uxtb	r3, r2
 8014aee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8014af0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8014af4:	f04f 0200 	mov.w	r2, #0
 8014af8:	f04f 0300 	mov.w	r3, #0
 8014afc:	0e02      	lsrs	r2, r0, #24
 8014afe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8014b02:	0e0b      	lsrs	r3, r1, #24
 8014b04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014b06:	3103      	adds	r1, #3
 8014b08:	6838      	ldr	r0, [r7, #0]
 8014b0a:	4401      	add	r1, r0
 8014b0c:	b2d3      	uxtb	r3, r2
 8014b0e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8014b10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8014b14:	f04f 0200 	mov.w	r2, #0
 8014b18:	f04f 0300 	mov.w	r3, #0
 8014b1c:	000a      	movs	r2, r1
 8014b1e:	2300      	movs	r3, #0
 8014b20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014b22:	3104      	adds	r1, #4
 8014b24:	6838      	ldr	r0, [r7, #0]
 8014b26:	4401      	add	r1, r0
 8014b28:	b2d3      	uxtb	r3, r2
 8014b2a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8014b2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8014b30:	f04f 0200 	mov.w	r2, #0
 8014b34:	f04f 0300 	mov.w	r3, #0
 8014b38:	0a0a      	lsrs	r2, r1, #8
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014b3e:	3105      	adds	r1, #5
 8014b40:	6838      	ldr	r0, [r7, #0]
 8014b42:	4401      	add	r1, r0
 8014b44:	b2d3      	uxtb	r3, r2
 8014b46:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8014b48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8014b4c:	f04f 0200 	mov.w	r2, #0
 8014b50:	f04f 0300 	mov.w	r3, #0
 8014b54:	0c0a      	lsrs	r2, r1, #16
 8014b56:	2300      	movs	r3, #0
 8014b58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014b5a:	3106      	adds	r1, #6
 8014b5c:	6838      	ldr	r0, [r7, #0]
 8014b5e:	4401      	add	r1, r0
 8014b60:	b2d3      	uxtb	r3, r2
 8014b62:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8014b64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8014b68:	f04f 0200 	mov.w	r2, #0
 8014b6c:	f04f 0300 	mov.w	r3, #0
 8014b70:	0e0a      	lsrs	r2, r1, #24
 8014b72:	2300      	movs	r3, #0
 8014b74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014b76:	3107      	adds	r1, #7
 8014b78:	6838      	ldr	r0, [r7, #0]
 8014b7a:	4401      	add	r1, r0
 8014b7c:	b2d3      	uxtb	r3, r2
 8014b7e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8014b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b82:	3308      	adds	r3, #8
 8014b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8014b8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8014b90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014b94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014b96:	6838      	ldr	r0, [r7, #0]
 8014b98:	4401      	add	r1, r0
 8014b9a:	b2d3      	uxtb	r3, r2
 8014b9c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8014b9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014ba2:	f04f 0200 	mov.w	r2, #0
 8014ba6:	f04f 0300 	mov.w	r3, #0
 8014baa:	0a02      	lsrs	r2, r0, #8
 8014bac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8014bb0:	0a0b      	lsrs	r3, r1, #8
 8014bb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014bb4:	3101      	adds	r1, #1
 8014bb6:	6838      	ldr	r0, [r7, #0]
 8014bb8:	4401      	add	r1, r0
 8014bba:	b2d3      	uxtb	r3, r2
 8014bbc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8014bbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014bc2:	f04f 0200 	mov.w	r2, #0
 8014bc6:	f04f 0300 	mov.w	r3, #0
 8014bca:	0c02      	lsrs	r2, r0, #16
 8014bcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8014bd0:	0c0b      	lsrs	r3, r1, #16
 8014bd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014bd4:	3102      	adds	r1, #2
 8014bd6:	6838      	ldr	r0, [r7, #0]
 8014bd8:	4401      	add	r1, r0
 8014bda:	b2d3      	uxtb	r3, r2
 8014bdc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8014bde:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014be2:	f04f 0200 	mov.w	r2, #0
 8014be6:	f04f 0300 	mov.w	r3, #0
 8014bea:	0e02      	lsrs	r2, r0, #24
 8014bec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8014bf0:	0e0b      	lsrs	r3, r1, #24
 8014bf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014bf4:	3103      	adds	r1, #3
 8014bf6:	6838      	ldr	r0, [r7, #0]
 8014bf8:	4401      	add	r1, r0
 8014bfa:	b2d3      	uxtb	r3, r2
 8014bfc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8014bfe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014c02:	f04f 0200 	mov.w	r2, #0
 8014c06:	f04f 0300 	mov.w	r3, #0
 8014c0a:	000a      	movs	r2, r1
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014c10:	3104      	adds	r1, #4
 8014c12:	6838      	ldr	r0, [r7, #0]
 8014c14:	4401      	add	r1, r0
 8014c16:	b2d3      	uxtb	r3, r2
 8014c18:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8014c1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014c1e:	f04f 0200 	mov.w	r2, #0
 8014c22:	f04f 0300 	mov.w	r3, #0
 8014c26:	0a0a      	lsrs	r2, r1, #8
 8014c28:	2300      	movs	r3, #0
 8014c2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014c2c:	3105      	adds	r1, #5
 8014c2e:	6838      	ldr	r0, [r7, #0]
 8014c30:	4401      	add	r1, r0
 8014c32:	b2d3      	uxtb	r3, r2
 8014c34:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8014c36:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014c3a:	f04f 0200 	mov.w	r2, #0
 8014c3e:	f04f 0300 	mov.w	r3, #0
 8014c42:	0c0a      	lsrs	r2, r1, #16
 8014c44:	2300      	movs	r3, #0
 8014c46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014c48:	3106      	adds	r1, #6
 8014c4a:	6838      	ldr	r0, [r7, #0]
 8014c4c:	4401      	add	r1, r0
 8014c4e:	b2d3      	uxtb	r3, r2
 8014c50:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8014c52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014c56:	f04f 0200 	mov.w	r2, #0
 8014c5a:	f04f 0300 	mov.w	r3, #0
 8014c5e:	0e0a      	lsrs	r2, r1, #24
 8014c60:	2300      	movs	r3, #0
 8014c62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014c64:	3107      	adds	r1, #7
 8014c66:	6838      	ldr	r0, [r7, #0]
 8014c68:	4401      	add	r1, r0
 8014c6a:	b2d3      	uxtb	r3, r2
 8014c6c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8014c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c70:	3308      	adds	r3, #8
 8014c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014c7a:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8014c7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014c82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014c84:	6838      	ldr	r0, [r7, #0]
 8014c86:	4401      	add	r1, r0
 8014c88:	b2d3      	uxtb	r3, r2
 8014c8a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8014c8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014c90:	f04f 0200 	mov.w	r2, #0
 8014c94:	f04f 0300 	mov.w	r3, #0
 8014c98:	0a02      	lsrs	r2, r0, #8
 8014c9a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8014c9e:	0a0b      	lsrs	r3, r1, #8
 8014ca0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014ca2:	3101      	adds	r1, #1
 8014ca4:	6838      	ldr	r0, [r7, #0]
 8014ca6:	4401      	add	r1, r0
 8014ca8:	b2d3      	uxtb	r3, r2
 8014caa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8014cac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014cb0:	f04f 0200 	mov.w	r2, #0
 8014cb4:	f04f 0300 	mov.w	r3, #0
 8014cb8:	0c02      	lsrs	r2, r0, #16
 8014cba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8014cbe:	0c0b      	lsrs	r3, r1, #16
 8014cc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014cc2:	3102      	adds	r1, #2
 8014cc4:	6838      	ldr	r0, [r7, #0]
 8014cc6:	4401      	add	r1, r0
 8014cc8:	b2d3      	uxtb	r3, r2
 8014cca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8014ccc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014cd0:	f04f 0200 	mov.w	r2, #0
 8014cd4:	f04f 0300 	mov.w	r3, #0
 8014cd8:	0e02      	lsrs	r2, r0, #24
 8014cda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8014cde:	0e0b      	lsrs	r3, r1, #24
 8014ce0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014ce2:	3103      	adds	r1, #3
 8014ce4:	6838      	ldr	r0, [r7, #0]
 8014ce6:	4401      	add	r1, r0
 8014ce8:	b2d3      	uxtb	r3, r2
 8014cea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8014cec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014cf0:	f04f 0200 	mov.w	r2, #0
 8014cf4:	f04f 0300 	mov.w	r3, #0
 8014cf8:	000a      	movs	r2, r1
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014cfe:	3104      	adds	r1, #4
 8014d00:	6838      	ldr	r0, [r7, #0]
 8014d02:	4401      	add	r1, r0
 8014d04:	b2d3      	uxtb	r3, r2
 8014d06:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8014d08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014d0c:	f04f 0200 	mov.w	r2, #0
 8014d10:	f04f 0300 	mov.w	r3, #0
 8014d14:	0a0a      	lsrs	r2, r1, #8
 8014d16:	2300      	movs	r3, #0
 8014d18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014d1a:	3105      	adds	r1, #5
 8014d1c:	6838      	ldr	r0, [r7, #0]
 8014d1e:	4401      	add	r1, r0
 8014d20:	b2d3      	uxtb	r3, r2
 8014d22:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8014d24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014d28:	f04f 0200 	mov.w	r2, #0
 8014d2c:	f04f 0300 	mov.w	r3, #0
 8014d30:	0c0a      	lsrs	r2, r1, #16
 8014d32:	2300      	movs	r3, #0
 8014d34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014d36:	3106      	adds	r1, #6
 8014d38:	6838      	ldr	r0, [r7, #0]
 8014d3a:	4401      	add	r1, r0
 8014d3c:	b2d3      	uxtb	r3, r2
 8014d3e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8014d40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014d44:	f04f 0200 	mov.w	r2, #0
 8014d48:	f04f 0300 	mov.w	r3, #0
 8014d4c:	0e0a      	lsrs	r2, r1, #24
 8014d4e:	2300      	movs	r3, #0
 8014d50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014d52:	3107      	adds	r1, #7
 8014d54:	6838      	ldr	r0, [r7, #0]
 8014d56:	4401      	add	r1, r0
 8014d58:	b2d3      	uxtb	r3, r2
 8014d5a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8014d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d5e:	3308      	adds	r3, #8
 8014d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      return offset;
 8014d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8014d64:	4618      	mov	r0, r3
 8014d66:	3734      	adds	r7, #52	@ 0x34
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6e:	4770      	bx	lr

08014d70 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8014d70:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8014d74:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
 8014d7e:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
    {
      int offset = 0;
 8014d82:	2300      	movs	r3, #0
 8014d84:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8014d88:	f04f 0200 	mov.w	r2, #0
 8014d8c:	f04f 0300 	mov.w	r3, #0
 8014d90:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8014d94:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8014d98:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8014d9c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8014da0:	4413      	add	r3, r2
 8014da2:	781b      	ldrb	r3, [r3, #0]
 8014da4:	b2db      	uxtb	r3, r3
 8014da6:	2200      	movs	r2, #0
 8014da8:	461c      	mov	r4, r3
 8014daa:	4615      	mov	r5, r2
 8014dac:	ea40 0804 	orr.w	r8, r0, r4
 8014db0:	ea41 0905 	orr.w	r9, r1, r5
 8014db4:	e9c7 898a 	strd	r8, r9, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8014db8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8014dbc:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8014dc0:	1c5a      	adds	r2, r3, #1
 8014dc2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8014dc6:	4413      	add	r3, r2
 8014dc8:	781b      	ldrb	r3, [r3, #0]
 8014dca:	b2db      	uxtb	r3, r3
 8014dcc:	2200      	movs	r2, #0
 8014dce:	469a      	mov	sl, r3
 8014dd0:	4693      	mov	fp, r2
 8014dd2:	f04f 0200 	mov.w	r2, #0
 8014dd6:	f04f 0300 	mov.w	r3, #0
 8014dda:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8014dde:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8014de2:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8014de6:	ea40 0402 	orr.w	r4, r0, r2
 8014dea:	f8c7 4200 	str.w	r4, [r7, #512]	@ 0x200
 8014dee:	430b      	orrs	r3, r1
 8014df0:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8014df4:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	@ 0x200
 8014df8:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8014dfc:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8014e00:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8014e04:	1c9a      	adds	r2, r3, #2
 8014e06:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8014e0a:	4413      	add	r3, r2
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	b2db      	uxtb	r3, r3
 8014e10:	2200      	movs	r2, #0
 8014e12:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8014e16:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8014e1a:	f04f 0200 	mov.w	r2, #0
 8014e1e:	f04f 0300 	mov.w	r3, #0
 8014e22:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 8014e26:	464c      	mov	r4, r9
 8014e28:	0423      	lsls	r3, r4, #16
 8014e2a:	4644      	mov	r4, r8
 8014e2c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8014e30:	4644      	mov	r4, r8
 8014e32:	0422      	lsls	r2, r4, #16
 8014e34:	ea40 0402 	orr.w	r4, r0, r2
 8014e38:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 8014e3c:	430b      	orrs	r3, r1
 8014e3e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8014e42:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	@ 0x1f0
 8014e46:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8014e4a:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8014e4e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8014e52:	1cda      	adds	r2, r3, #3
 8014e54:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8014e58:	4413      	add	r3, r2
 8014e5a:	781b      	ldrb	r3, [r3, #0]
 8014e5c:	b2db      	uxtb	r3, r3
 8014e5e:	2200      	movs	r2, #0
 8014e60:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8014e64:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 8014e68:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 8014e6c:	4623      	mov	r3, r4
 8014e6e:	0a1b      	lsrs	r3, r3, #8
 8014e70:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8014e74:	4623      	mov	r3, r4
 8014e76:	061b      	lsls	r3, r3, #24
 8014e78:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8014e7c:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	@ 0x1e0
 8014e80:	4623      	mov	r3, r4
 8014e82:	4303      	orrs	r3, r0
 8014e84:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8014e88:	462b      	mov	r3, r5
 8014e8a:	430b      	orrs	r3, r1
 8014e8c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8014e90:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	@ 0x1d8
 8014e94:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8014e98:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8014e9c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8014ea0:	1d1a      	adds	r2, r3, #4
 8014ea2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8014ea6:	4413      	add	r3, r2
 8014ea8:	781b      	ldrb	r3, [r3, #0]
 8014eaa:	b2db      	uxtb	r3, r3
 8014eac:	2200      	movs	r2, #0
 8014eae:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8014eb2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8014eb6:	f04f 0200 	mov.w	r2, #0
 8014eba:	f04f 0300 	mov.w	r3, #0
 8014ebe:	f8d7 41d0 	ldr.w	r4, [r7, #464]	@ 0x1d0
 8014ec2:	0023      	movs	r3, r4
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	ea40 0402 	orr.w	r4, r0, r2
 8014eca:	f8c7 41c8 	str.w	r4, [r7, #456]	@ 0x1c8
 8014ece:	430b      	orrs	r3, r1
 8014ed0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8014ed4:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	@ 0x1c8
 8014ed8:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8014edc:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8014ee0:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8014ee4:	1d5a      	adds	r2, r3, #5
 8014ee6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8014eea:	4413      	add	r3, r2
 8014eec:	781b      	ldrb	r3, [r3, #0]
 8014eee:	b2db      	uxtb	r3, r3
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8014ef6:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8014efa:	f04f 0200 	mov.w	r2, #0
 8014efe:	f04f 0300 	mov.w	r3, #0
 8014f02:	f8d7 41c0 	ldr.w	r4, [r7, #448]	@ 0x1c0
 8014f06:	0223      	lsls	r3, r4, #8
 8014f08:	2200      	movs	r2, #0
 8014f0a:	ea40 0402 	orr.w	r4, r0, r2
 8014f0e:	f8c7 41b8 	str.w	r4, [r7, #440]	@ 0x1b8
 8014f12:	430b      	orrs	r3, r1
 8014f14:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8014f18:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 8014f1c:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8014f20:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8014f24:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8014f28:	1d9a      	adds	r2, r3, #6
 8014f2a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8014f2e:	4413      	add	r3, r2
 8014f30:	781b      	ldrb	r3, [r3, #0]
 8014f32:	b2db      	uxtb	r3, r3
 8014f34:	2200      	movs	r2, #0
 8014f36:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8014f3a:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8014f3e:	f04f 0200 	mov.w	r2, #0
 8014f42:	f04f 0300 	mov.w	r3, #0
 8014f46:	f8d7 41b0 	ldr.w	r4, [r7, #432]	@ 0x1b0
 8014f4a:	0423      	lsls	r3, r4, #16
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	ea40 0402 	orr.w	r4, r0, r2
 8014f52:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 8014f56:	430b      	orrs	r3, r1
 8014f58:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8014f5c:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	@ 0x1a8
 8014f60:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8014f64:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8014f68:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8014f6c:	1dda      	adds	r2, r3, #7
 8014f6e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8014f72:	4413      	add	r3, r2
 8014f74:	781b      	ldrb	r3, [r3, #0]
 8014f76:	b2db      	uxtb	r3, r3
 8014f78:	2200      	movs	r2, #0
 8014f7a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8014f7e:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8014f82:	f04f 0200 	mov.w	r2, #0
 8014f86:	f04f 0300 	mov.w	r3, #0
 8014f8a:	f8d7 41a0 	ldr.w	r4, [r7, #416]	@ 0x1a0
 8014f8e:	0623      	lsls	r3, r4, #24
 8014f90:	2200      	movs	r2, #0
 8014f92:	ea40 0402 	orr.w	r4, r0, r2
 8014f96:	f8c7 4198 	str.w	r4, [r7, #408]	@ 0x198
 8014f9a:	430b      	orrs	r3, r1
 8014f9c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8014fa0:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 8014fa4:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      this->x = u_x.real;
 8014fa8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8014fac:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8014fb0:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8014fb4:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8014fb8:	3308      	adds	r3, #8
 8014fba:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8014fbe:	f04f 0200 	mov.w	r2, #0
 8014fc2:	f04f 0300 	mov.w	r3, #0
 8014fc6:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8014fca:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8014fce:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8014fd2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8014fd6:	4413      	add	r3, r2
 8014fd8:	781b      	ldrb	r3, [r3, #0]
 8014fda:	b2db      	uxtb	r3, r3
 8014fdc:	2200      	movs	r2, #0
 8014fde:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8014fe2:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8014fe6:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	@ 0x190
 8014fea:	4623      	mov	r3, r4
 8014fec:	4303      	orrs	r3, r0
 8014fee:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8014ff2:	462b      	mov	r3, r5
 8014ff4:	430b      	orrs	r3, r1
 8014ff6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8014ffa:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 8014ffe:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8015002:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8015006:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 801500a:	1c5a      	adds	r2, r3, #1
 801500c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8015010:	4413      	add	r3, r2
 8015012:	781b      	ldrb	r3, [r3, #0]
 8015014:	b2db      	uxtb	r3, r3
 8015016:	2200      	movs	r2, #0
 8015018:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 801501c:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8015020:	f04f 0200 	mov.w	r2, #0
 8015024:	f04f 0300 	mov.w	r3, #0
 8015028:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 801502c:	464c      	mov	r4, r9
 801502e:	0223      	lsls	r3, r4, #8
 8015030:	4644      	mov	r4, r8
 8015032:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8015036:	4644      	mov	r4, r8
 8015038:	0222      	lsls	r2, r4, #8
 801503a:	ea40 0402 	orr.w	r4, r0, r2
 801503e:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8015042:	430b      	orrs	r3, r1
 8015044:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8015048:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 801504c:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8015050:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8015054:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8015058:	1c9a      	adds	r2, r3, #2
 801505a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801505e:	4413      	add	r3, r2
 8015060:	781b      	ldrb	r3, [r3, #0]
 8015062:	b2db      	uxtb	r3, r3
 8015064:	2200      	movs	r2, #0
 8015066:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 801506a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 801506e:	f04f 0200 	mov.w	r2, #0
 8015072:	f04f 0300 	mov.w	r3, #0
 8015076:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 801507a:	464c      	mov	r4, r9
 801507c:	0423      	lsls	r3, r4, #16
 801507e:	4644      	mov	r4, r8
 8015080:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8015084:	4644      	mov	r4, r8
 8015086:	0422      	lsls	r2, r4, #16
 8015088:	ea40 0402 	orr.w	r4, r0, r2
 801508c:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8015090:	430b      	orrs	r3, r1
 8015092:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8015096:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 801509a:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 801509e:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80150a2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80150a6:	1cda      	adds	r2, r3, #3
 80150a8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80150ac:	4413      	add	r3, r2
 80150ae:	781b      	ldrb	r3, [r3, #0]
 80150b0:	b2db      	uxtb	r3, r3
 80150b2:	2200      	movs	r2, #0
 80150b4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80150b8:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80150bc:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 80150c0:	4623      	mov	r3, r4
 80150c2:	0a1b      	lsrs	r3, r3, #8
 80150c4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80150c8:	4623      	mov	r3, r4
 80150ca:	061b      	lsls	r3, r3, #24
 80150cc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80150d0:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 80150d4:	4623      	mov	r3, r4
 80150d6:	4303      	orrs	r3, r0
 80150d8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80150dc:	462b      	mov	r3, r5
 80150de:	430b      	orrs	r3, r1
 80150e0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80150e4:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 80150e8:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80150ec:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80150f0:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80150f4:	1d1a      	adds	r2, r3, #4
 80150f6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80150fa:	4413      	add	r3, r2
 80150fc:	781b      	ldrb	r3, [r3, #0]
 80150fe:	b2db      	uxtb	r3, r3
 8015100:	2200      	movs	r2, #0
 8015102:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8015106:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 801510a:	f04f 0200 	mov.w	r2, #0
 801510e:	f04f 0300 	mov.w	r3, #0
 8015112:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8015116:	0023      	movs	r3, r4
 8015118:	2200      	movs	r2, #0
 801511a:	ea40 0402 	orr.w	r4, r0, r2
 801511e:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8015122:	430b      	orrs	r3, r1
 8015124:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8015128:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 801512c:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8015130:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8015134:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8015138:	1d5a      	adds	r2, r3, #5
 801513a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801513e:	4413      	add	r3, r2
 8015140:	781b      	ldrb	r3, [r3, #0]
 8015142:	b2db      	uxtb	r3, r3
 8015144:	2200      	movs	r2, #0
 8015146:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 801514a:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 801514e:	f04f 0200 	mov.w	r2, #0
 8015152:	f04f 0300 	mov.w	r3, #0
 8015156:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 801515a:	0223      	lsls	r3, r4, #8
 801515c:	2200      	movs	r2, #0
 801515e:	ea40 0402 	orr.w	r4, r0, r2
 8015162:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8015166:	430b      	orrs	r3, r1
 8015168:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801516c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8015170:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8015174:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8015178:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 801517c:	1d9a      	adds	r2, r3, #6
 801517e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8015182:	4413      	add	r3, r2
 8015184:	781b      	ldrb	r3, [r3, #0]
 8015186:	b2db      	uxtb	r3, r3
 8015188:	2200      	movs	r2, #0
 801518a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 801518e:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8015192:	f04f 0200 	mov.w	r2, #0
 8015196:	f04f 0300 	mov.w	r3, #0
 801519a:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 801519e:	0423      	lsls	r3, r4, #16
 80151a0:	2200      	movs	r2, #0
 80151a2:	ea40 0402 	orr.w	r4, r0, r2
 80151a6:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 80151aa:	430b      	orrs	r3, r1
 80151ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80151b0:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 80151b4:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80151b8:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80151bc:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80151c0:	1dda      	adds	r2, r3, #7
 80151c2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80151c6:	4413      	add	r3, r2
 80151c8:	781b      	ldrb	r3, [r3, #0]
 80151ca:	b2db      	uxtb	r3, r3
 80151cc:	2200      	movs	r2, #0
 80151ce:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80151d2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80151d6:	f04f 0200 	mov.w	r2, #0
 80151da:	f04f 0300 	mov.w	r3, #0
 80151de:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 80151e2:	0623      	lsls	r3, r4, #24
 80151e4:	2200      	movs	r2, #0
 80151e6:	ea40 0402 	orr.w	r4, r0, r2
 80151ea:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 80151ee:	430b      	orrs	r3, r1
 80151f0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80151f4:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 80151f8:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      this->y = u_y.real;
 80151fc:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8015200:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8015204:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8015208:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 801520c:	3308      	adds	r3, #8
 801520e:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8015212:	f04f 0200 	mov.w	r2, #0
 8015216:	f04f 0300 	mov.w	r3, #0
 801521a:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 801521e:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8015222:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8015226:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801522a:	4413      	add	r3, r2
 801522c:	781b      	ldrb	r3, [r3, #0]
 801522e:	b2db      	uxtb	r3, r3
 8015230:	2200      	movs	r2, #0
 8015232:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8015236:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 801523a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 801523e:	4623      	mov	r3, r4
 8015240:	4303      	orrs	r3, r0
 8015242:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8015246:	462b      	mov	r3, r5
 8015248:	430b      	orrs	r3, r1
 801524a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801524e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8015252:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8015256:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 801525a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 801525e:	1c5a      	adds	r2, r3, #1
 8015260:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8015264:	4413      	add	r3, r2
 8015266:	781b      	ldrb	r3, [r3, #0]
 8015268:	b2db      	uxtb	r3, r3
 801526a:	2200      	movs	r2, #0
 801526c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8015270:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8015274:	f04f 0200 	mov.w	r2, #0
 8015278:	f04f 0300 	mov.w	r3, #0
 801527c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8015280:	464c      	mov	r4, r9
 8015282:	0223      	lsls	r3, r4, #8
 8015284:	4644      	mov	r4, r8
 8015286:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 801528a:	4644      	mov	r4, r8
 801528c:	0222      	lsls	r2, r4, #8
 801528e:	ea40 0402 	orr.w	r4, r0, r2
 8015292:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8015296:	430b      	orrs	r3, r1
 8015298:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801529c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 80152a0:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80152a4:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80152a8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80152ac:	1c9a      	adds	r2, r3, #2
 80152ae:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80152b2:	4413      	add	r3, r2
 80152b4:	781b      	ldrb	r3, [r3, #0]
 80152b6:	b2db      	uxtb	r3, r3
 80152b8:	2200      	movs	r2, #0
 80152ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80152be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80152c2:	f04f 0200 	mov.w	r2, #0
 80152c6:	f04f 0300 	mov.w	r3, #0
 80152ca:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80152ce:	464c      	mov	r4, r9
 80152d0:	0423      	lsls	r3, r4, #16
 80152d2:	4644      	mov	r4, r8
 80152d4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80152d8:	4644      	mov	r4, r8
 80152da:	0422      	lsls	r2, r4, #16
 80152dc:	ea40 0402 	orr.w	r4, r0, r2
 80152e0:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 80152e4:	430b      	orrs	r3, r1
 80152e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80152ea:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80152ee:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80152f2:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80152f6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80152fa:	1cda      	adds	r2, r3, #3
 80152fc:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8015300:	4413      	add	r3, r2
 8015302:	781b      	ldrb	r3, [r3, #0]
 8015304:	b2db      	uxtb	r3, r3
 8015306:	2200      	movs	r2, #0
 8015308:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801530c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8015310:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8015314:	4623      	mov	r3, r4
 8015316:	0a1b      	lsrs	r3, r3, #8
 8015318:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801531c:	4623      	mov	r3, r4
 801531e:	061b      	lsls	r3, r3, #24
 8015320:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8015324:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8015328:	4623      	mov	r3, r4
 801532a:	4303      	orrs	r3, r0
 801532c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8015330:	462b      	mov	r3, r5
 8015332:	430b      	orrs	r3, r1
 8015334:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8015338:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 801533c:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8015340:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8015344:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8015348:	1d1a      	adds	r2, r3, #4
 801534a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801534e:	4413      	add	r3, r2
 8015350:	781b      	ldrb	r3, [r3, #0]
 8015352:	b2db      	uxtb	r3, r3
 8015354:	2200      	movs	r2, #0
 8015356:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801535a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 801535e:	f04f 0200 	mov.w	r2, #0
 8015362:	f04f 0300 	mov.w	r3, #0
 8015366:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 801536a:	0023      	movs	r3, r4
 801536c:	2200      	movs	r2, #0
 801536e:	ea40 0402 	orr.w	r4, r0, r2
 8015372:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8015376:	430b      	orrs	r3, r1
 8015378:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801537c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8015380:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8015384:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8015388:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 801538c:	1d5a      	adds	r2, r3, #5
 801538e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8015392:	4413      	add	r3, r2
 8015394:	781b      	ldrb	r3, [r3, #0]
 8015396:	b2db      	uxtb	r3, r3
 8015398:	2200      	movs	r2, #0
 801539a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801539e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80153a2:	f04f 0200 	mov.w	r2, #0
 80153a6:	f04f 0300 	mov.w	r3, #0
 80153aa:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 80153ae:	0223      	lsls	r3, r4, #8
 80153b0:	2200      	movs	r2, #0
 80153b2:	ea40 0402 	orr.w	r4, r0, r2
 80153b6:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 80153ba:	430b      	orrs	r3, r1
 80153bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80153c0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 80153c4:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80153c8:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80153cc:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80153d0:	1d9a      	adds	r2, r3, #6
 80153d2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80153d6:	4413      	add	r3, r2
 80153d8:	781b      	ldrb	r3, [r3, #0]
 80153da:	b2db      	uxtb	r3, r3
 80153dc:	2200      	movs	r2, #0
 80153de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80153e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80153e6:	f04f 0200 	mov.w	r2, #0
 80153ea:	f04f 0300 	mov.w	r3, #0
 80153ee:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80153f2:	0423      	lsls	r3, r4, #16
 80153f4:	2200      	movs	r2, #0
 80153f6:	ea40 0402 	orr.w	r4, r0, r2
 80153fa:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 80153fe:	430b      	orrs	r3, r1
 8015400:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015404:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8015408:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 801540c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8015410:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8015414:	1dda      	adds	r2, r3, #7
 8015416:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801541a:	4413      	add	r3, r2
 801541c:	781b      	ldrb	r3, [r3, #0]
 801541e:	b2db      	uxtb	r3, r3
 8015420:	2200      	movs	r2, #0
 8015422:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8015426:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801542a:	f04f 0200 	mov.w	r2, #0
 801542e:	f04f 0300 	mov.w	r3, #0
 8015432:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8015436:	0623      	lsls	r3, r4, #24
 8015438:	2200      	movs	r2, #0
 801543a:	ea40 0402 	orr.w	r4, r0, r2
 801543e:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8015442:	430b      	orrs	r3, r1
 8015444:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015448:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 801544c:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      this->z = u_z.real;
 8015450:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8015454:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8015458:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 801545c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8015460:	3308      	adds	r3, #8
 8015462:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8015466:	f04f 0200 	mov.w	r2, #0
 801546a:	f04f 0300 	mov.w	r3, #0
 801546e:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8015472:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8015476:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 801547a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801547e:	4413      	add	r3, r2
 8015480:	781b      	ldrb	r3, [r3, #0]
 8015482:	b2db      	uxtb	r3, r3
 8015484:	2200      	movs	r2, #0
 8015486:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801548a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801548e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8015492:	4623      	mov	r3, r4
 8015494:	4303      	orrs	r3, r0
 8015496:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015498:	462b      	mov	r3, r5
 801549a:	430b      	orrs	r3, r1
 801549c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801549e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80154a2:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80154a6:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80154aa:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80154ae:	1c5a      	adds	r2, r3, #1
 80154b0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80154b4:	4413      	add	r3, r2
 80154b6:	781b      	ldrb	r3, [r3, #0]
 80154b8:	b2db      	uxtb	r3, r3
 80154ba:	2200      	movs	r2, #0
 80154bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80154be:	677a      	str	r2, [r7, #116]	@ 0x74
 80154c0:	f04f 0200 	mov.w	r2, #0
 80154c4:	f04f 0300 	mov.w	r3, #0
 80154c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80154cc:	464c      	mov	r4, r9
 80154ce:	0223      	lsls	r3, r4, #8
 80154d0:	4644      	mov	r4, r8
 80154d2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80154d6:	4644      	mov	r4, r8
 80154d8:	0222      	lsls	r2, r4, #8
 80154da:	ea40 0402 	orr.w	r4, r0, r2
 80154de:	66bc      	str	r4, [r7, #104]	@ 0x68
 80154e0:	430b      	orrs	r3, r1
 80154e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80154e4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80154e8:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80154ec:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80154f0:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80154f4:	1c9a      	adds	r2, r3, #2
 80154f6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80154fa:	4413      	add	r3, r2
 80154fc:	781b      	ldrb	r3, [r3, #0]
 80154fe:	b2db      	uxtb	r3, r3
 8015500:	2200      	movs	r2, #0
 8015502:	663b      	str	r3, [r7, #96]	@ 0x60
 8015504:	667a      	str	r2, [r7, #100]	@ 0x64
 8015506:	f04f 0200 	mov.w	r2, #0
 801550a:	f04f 0300 	mov.w	r3, #0
 801550e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8015512:	464c      	mov	r4, r9
 8015514:	0423      	lsls	r3, r4, #16
 8015516:	4644      	mov	r4, r8
 8015518:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 801551c:	4644      	mov	r4, r8
 801551e:	0422      	lsls	r2, r4, #16
 8015520:	ea40 0402 	orr.w	r4, r0, r2
 8015524:	65bc      	str	r4, [r7, #88]	@ 0x58
 8015526:	430b      	orrs	r3, r1
 8015528:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801552a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 801552e:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8015532:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8015536:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 801553a:	1cda      	adds	r2, r3, #3
 801553c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8015540:	4413      	add	r3, r2
 8015542:	781b      	ldrb	r3, [r3, #0]
 8015544:	b2db      	uxtb	r3, r3
 8015546:	2200      	movs	r2, #0
 8015548:	653b      	str	r3, [r7, #80]	@ 0x50
 801554a:	657a      	str	r2, [r7, #84]	@ 0x54
 801554c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8015550:	4623      	mov	r3, r4
 8015552:	0a1b      	lsrs	r3, r3, #8
 8015554:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015556:	4623      	mov	r3, r4
 8015558:	061b      	lsls	r3, r3, #24
 801555a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801555c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8015560:	4623      	mov	r3, r4
 8015562:	4303      	orrs	r3, r0
 8015564:	643b      	str	r3, [r7, #64]	@ 0x40
 8015566:	462b      	mov	r3, r5
 8015568:	430b      	orrs	r3, r1
 801556a:	647b      	str	r3, [r7, #68]	@ 0x44
 801556c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8015570:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8015574:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8015578:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 801557c:	1d1a      	adds	r2, r3, #4
 801557e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8015582:	4413      	add	r3, r2
 8015584:	781b      	ldrb	r3, [r3, #0]
 8015586:	b2db      	uxtb	r3, r3
 8015588:	2200      	movs	r2, #0
 801558a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801558c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801558e:	f04f 0200 	mov.w	r2, #0
 8015592:	f04f 0300 	mov.w	r3, #0
 8015596:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8015598:	0023      	movs	r3, r4
 801559a:	2200      	movs	r2, #0
 801559c:	ea40 0402 	orr.w	r4, r0, r2
 80155a0:	633c      	str	r4, [r7, #48]	@ 0x30
 80155a2:	430b      	orrs	r3, r1
 80155a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80155a6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80155aa:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80155ae:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80155b2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80155b6:	1d5a      	adds	r2, r3, #5
 80155b8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80155bc:	4413      	add	r3, r2
 80155be:	781b      	ldrb	r3, [r3, #0]
 80155c0:	b2db      	uxtb	r3, r3
 80155c2:	2200      	movs	r2, #0
 80155c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80155c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80155c8:	f04f 0200 	mov.w	r2, #0
 80155cc:	f04f 0300 	mov.w	r3, #0
 80155d0:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80155d2:	0223      	lsls	r3, r4, #8
 80155d4:	2200      	movs	r2, #0
 80155d6:	ea40 0402 	orr.w	r4, r0, r2
 80155da:	623c      	str	r4, [r7, #32]
 80155dc:	430b      	orrs	r3, r1
 80155de:	627b      	str	r3, [r7, #36]	@ 0x24
 80155e0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80155e4:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80155e8:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80155ec:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80155f0:	3306      	adds	r3, #6
 80155f2:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80155f6:	4413      	add	r3, r2
 80155f8:	781b      	ldrb	r3, [r3, #0]
 80155fa:	b2db      	uxtb	r3, r3
 80155fc:	2200      	movs	r2, #0
 80155fe:	61bb      	str	r3, [r7, #24]
 8015600:	61fa      	str	r2, [r7, #28]
 8015602:	f04f 0200 	mov.w	r2, #0
 8015606:	f04f 0300 	mov.w	r3, #0
 801560a:	69bc      	ldr	r4, [r7, #24]
 801560c:	0423      	lsls	r3, r4, #16
 801560e:	2200      	movs	r2, #0
 8015610:	ea40 0402 	orr.w	r4, r0, r2
 8015614:	613c      	str	r4, [r7, #16]
 8015616:	430b      	orrs	r3, r1
 8015618:	617b      	str	r3, [r7, #20]
 801561a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801561e:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8015622:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8015626:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 801562a:	3307      	adds	r3, #7
 801562c:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8015630:	4413      	add	r3, r2
 8015632:	781b      	ldrb	r3, [r3, #0]
 8015634:	b2db      	uxtb	r3, r3
 8015636:	2200      	movs	r2, #0
 8015638:	60bb      	str	r3, [r7, #8]
 801563a:	60fa      	str	r2, [r7, #12]
 801563c:	f04f 0200 	mov.w	r2, #0
 8015640:	f04f 0300 	mov.w	r3, #0
 8015644:	68bc      	ldr	r4, [r7, #8]
 8015646:	0623      	lsls	r3, r4, #24
 8015648:	2200      	movs	r2, #0
 801564a:	ea40 0402 	orr.w	r4, r0, r2
 801564e:	603c      	str	r4, [r7, #0]
 8015650:	430b      	orrs	r3, r1
 8015652:	607b      	str	r3, [r7, #4]
 8015654:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015658:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      this->w = u_w.real;
 801565c:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8015660:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 8015664:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 8015668:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 801566c:	3308      	adds	r3, #8
 801566e:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
     return offset;
 8015672:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
    }
 8015676:	4618      	mov	r0, r3
 8015678:	f507 770f 	add.w	r7, r7, #572	@ 0x23c
 801567c:	46bd      	mov	sp, r7
 801567e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8015682:	4770      	bx	lr

08015684 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8015684:	b480      	push	{r7}
 8015686:	b083      	sub	sp, #12
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
 801568c:	4b03      	ldr	r3, [pc, #12]	@ (801569c <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 801568e:	4618      	mov	r0, r3
 8015690:	370c      	adds	r7, #12
 8015692:	46bd      	mov	sp, r7
 8015694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015698:	4770      	bx	lr
 801569a:	bf00      	nop
 801569c:	0801c79c 	.word	0x0801c79c

080156a0 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 80156a0:	b480      	push	{r7}
 80156a2:	b083      	sub	sp, #12
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
 80156a8:	4b03      	ldr	r3, [pc, #12]	@ (80156b8 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 80156aa:	4618      	mov	r0, r3
 80156ac:	370c      	adds	r7, #12
 80156ae:	46bd      	mov	sp, r7
 80156b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b4:	4770      	bx	lr
 80156b6:	bf00      	nop
 80156b8:	0801c7b8 	.word	0x0801c7b8

080156bc <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 80156bc:	b580      	push	{r7, lr}
 80156be:	b082      	sub	sp, #8
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	4618      	mov	r0, r3
 80156c8:	f7fd fbc4 	bl	8012e54 <_ZN3ros3MsgC1Ev>
 80156cc:	4a08      	ldr	r2, [pc, #32]	@ (80156f0 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	601a      	str	r2, [r3, #0]
      position(),
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	3308      	adds	r3, #8
 80156d6:	4618      	mov	r0, r3
 80156d8:	f7fe fc1c 	bl	8013f14 <_ZN13geometry_msgs5PointC1Ev>
      orientation()
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	3328      	adds	r3, #40	@ 0x28
 80156e0:	4618      	mov	r0, r3
 80156e2:	f7ff f92d 	bl	8014940 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	4618      	mov	r0, r3
 80156ea:	3708      	adds	r7, #8
 80156ec:	46bd      	mov	sp, r7
 80156ee:	bd80      	pop	{r7, pc}
 80156f0:	0801c9f4 	.word	0x0801c9f4

080156f4 <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b084      	sub	sp, #16
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	6078      	str	r0, [r7, #4]
 80156fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80156fe:	2300      	movs	r3, #0
 8015700:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	f103 0008 	add.w	r0, r3, #8
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	683a      	ldr	r2, [r7, #0]
 801570c:	4413      	add	r3, r2
 801570e:	4619      	mov	r1, r3
 8015710:	f7fe fc28 	bl	8013f64 <_ZNK13geometry_msgs5Point9serializeEPh>
 8015714:	4602      	mov	r2, r0
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	4413      	add	r3, r2
 801571a:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	683a      	ldr	r2, [r7, #0]
 8015726:	4413      	add	r3, r2
 8015728:	4619      	mov	r1, r3
 801572a:	f7ff f937 	bl	801499c <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 801572e:	4602      	mov	r2, r0
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	4413      	add	r3, r2
 8015734:	60fb      	str	r3, [r7, #12]
      return offset;
 8015736:	68fb      	ldr	r3, [r7, #12]
    }
 8015738:	4618      	mov	r0, r3
 801573a:	3710      	adds	r7, #16
 801573c:	46bd      	mov	sp, r7
 801573e:	bd80      	pop	{r7, pc}

08015740 <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8015740:	b580      	push	{r7, lr}
 8015742:	b084      	sub	sp, #16
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
 8015748:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 801574a:	2300      	movs	r3, #0
 801574c:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	f103 0008 	add.w	r0, r3, #8
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	683a      	ldr	r2, [r7, #0]
 8015758:	4413      	add	r3, r2
 801575a:	4619      	mov	r1, r3
 801575c:	f7fe fd75 	bl	801424a <_ZN13geometry_msgs5Point11deserializeEPh>
 8015760:	4602      	mov	r2, r0
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	4413      	add	r3, r2
 8015766:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	683a      	ldr	r2, [r7, #0]
 8015772:	4413      	add	r3, r2
 8015774:	4619      	mov	r1, r3
 8015776:	f7ff fafb 	bl	8014d70 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 801577a:	4602      	mov	r2, r0
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	4413      	add	r3, r2
 8015780:	60fb      	str	r3, [r7, #12]
     return offset;
 8015782:	68fb      	ldr	r3, [r7, #12]
    }
 8015784:	4618      	mov	r0, r3
 8015786:	3710      	adds	r7, #16
 8015788:	46bd      	mov	sp, r7
 801578a:	bd80      	pop	{r7, pc}

0801578c <_ZN13geometry_msgs4Pose7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Pose"; };
 801578c:	b480      	push	{r7}
 801578e:	b083      	sub	sp, #12
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
 8015794:	4b03      	ldr	r3, [pc, #12]	@ (80157a4 <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 8015796:	4618      	mov	r0, r3
 8015798:	370c      	adds	r7, #12
 801579a:	46bd      	mov	sp, r7
 801579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a0:	4770      	bx	lr
 80157a2:	bf00      	nop
 80157a4:	0801c7dc 	.word	0x0801c7dc

080157a8 <_ZN13geometry_msgs4Pose6getMD5Ev>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 80157a8:	b480      	push	{r7}
 80157aa:	b083      	sub	sp, #12
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
 80157b0:	4b03      	ldr	r3, [pc, #12]	@ (80157c0 <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 80157b2:	4618      	mov	r0, r3
 80157b4:	370c      	adds	r7, #12
 80157b6:	46bd      	mov	sp, r7
 80157b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157bc:	4770      	bx	lr
 80157be:	bf00      	nop
 80157c0:	0801c7f0 	.word	0x0801c7f0

080157c4 <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b082      	sub	sp, #8
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]
      data(0)
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	4618      	mov	r0, r3
 80157d0:	f7fd fb40 	bl	8012e54 <_ZN3ros3MsgC1Ev>
 80157d4:	4a05      	ldr	r2, [pc, #20]	@ (80157ec <_ZN8std_msgs5Int32C1Ev+0x28>)
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	601a      	str	r2, [r3, #0]
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	2200      	movs	r2, #0
 80157de:	605a      	str	r2, [r3, #4]
    {
    }
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	4618      	mov	r0, r3
 80157e4:	3708      	adds	r7, #8
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}
 80157ea:	bf00      	nop
 80157ec:	0801c9dc 	.word	0x0801c9dc

080157f0 <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80157f0:	b480      	push	{r7}
 80157f2:	b085      	sub	sp, #20
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
 80157f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80157fa:	2300      	movs	r3, #0
 80157fc:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	685b      	ldr	r3, [r3, #4]
 8015802:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8015804:	68b9      	ldr	r1, [r7, #8]
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	683a      	ldr	r2, [r7, #0]
 801580a:	4413      	add	r3, r2
 801580c:	b2ca      	uxtb	r2, r1
 801580e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8015810:	68bb      	ldr	r3, [r7, #8]
 8015812:	0a19      	lsrs	r1, r3, #8
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	3301      	adds	r3, #1
 8015818:	683a      	ldr	r2, [r7, #0]
 801581a:	4413      	add	r3, r2
 801581c:	b2ca      	uxtb	r2, r1
 801581e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8015820:	68bb      	ldr	r3, [r7, #8]
 8015822:	0c19      	lsrs	r1, r3, #16
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	3302      	adds	r3, #2
 8015828:	683a      	ldr	r2, [r7, #0]
 801582a:	4413      	add	r3, r2
 801582c:	b2ca      	uxtb	r2, r1
 801582e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8015830:	68bb      	ldr	r3, [r7, #8]
 8015832:	0e19      	lsrs	r1, r3, #24
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	3303      	adds	r3, #3
 8015838:	683a      	ldr	r2, [r7, #0]
 801583a:	4413      	add	r3, r2
 801583c:	b2ca      	uxtb	r2, r1
 801583e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	3304      	adds	r3, #4
 8015844:	60fb      	str	r3, [r7, #12]
      return offset;
 8015846:	68fb      	ldr	r3, [r7, #12]
    }
 8015848:	4618      	mov	r0, r3
 801584a:	3714      	adds	r7, #20
 801584c:	46bd      	mov	sp, r7
 801584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015852:	4770      	bx	lr

08015854 <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8015854:	b480      	push	{r7}
 8015856:	b085      	sub	sp, #20
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
 801585c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 801585e:	2300      	movs	r3, #0
 8015860:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8015862:	2300      	movs	r3, #0
 8015864:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8015866:	68bb      	ldr	r3, [r7, #8]
 8015868:	68fa      	ldr	r2, [r7, #12]
 801586a:	6839      	ldr	r1, [r7, #0]
 801586c:	440a      	add	r2, r1
 801586e:	7812      	ldrb	r2, [r2, #0]
 8015870:	4313      	orrs	r3, r2
 8015872:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8015874:	68ba      	ldr	r2, [r7, #8]
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	3301      	adds	r3, #1
 801587a:	6839      	ldr	r1, [r7, #0]
 801587c:	440b      	add	r3, r1
 801587e:	781b      	ldrb	r3, [r3, #0]
 8015880:	021b      	lsls	r3, r3, #8
 8015882:	4313      	orrs	r3, r2
 8015884:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8015886:	68ba      	ldr	r2, [r7, #8]
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	3302      	adds	r3, #2
 801588c:	6839      	ldr	r1, [r7, #0]
 801588e:	440b      	add	r3, r1
 8015890:	781b      	ldrb	r3, [r3, #0]
 8015892:	041b      	lsls	r3, r3, #16
 8015894:	4313      	orrs	r3, r2
 8015896:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8015898:	68ba      	ldr	r2, [r7, #8]
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	3303      	adds	r3, #3
 801589e:	6839      	ldr	r1, [r7, #0]
 80158a0:	440b      	add	r3, r1
 80158a2:	781b      	ldrb	r3, [r3, #0]
 80158a4:	061b      	lsls	r3, r3, #24
 80158a6:	4313      	orrs	r3, r2
 80158a8:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 80158aa:	68ba      	ldr	r2, [r7, #8]
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	3304      	adds	r3, #4
 80158b4:	60fb      	str	r3, [r7, #12]
     return offset;
 80158b6:	68fb      	ldr	r3, [r7, #12]
    }
 80158b8:	4618      	mov	r0, r3
 80158ba:	3714      	adds	r7, #20
 80158bc:	46bd      	mov	sp, r7
 80158be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c2:	4770      	bx	lr

080158c4 <_ZN8std_msgs5Int327getTypeEv>:

    const char * getType(){ return "std_msgs/Int32"; };
 80158c4:	b480      	push	{r7}
 80158c6:	b083      	sub	sp, #12
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
 80158cc:	4b03      	ldr	r3, [pc, #12]	@ (80158dc <_ZN8std_msgs5Int327getTypeEv+0x18>)
 80158ce:	4618      	mov	r0, r3
 80158d0:	370c      	adds	r7, #12
 80158d2:	46bd      	mov	sp, r7
 80158d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d8:	4770      	bx	lr
 80158da:	bf00      	nop
 80158dc:	0801c814 	.word	0x0801c814

080158e0 <_ZN8std_msgs5Int326getMD5Ev>:
    const char * getMD5(){ return "da5909fbe378aeaf85e547e830cc1bb7"; };
 80158e0:	b480      	push	{r7}
 80158e2:	b083      	sub	sp, #12
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
 80158e8:	4b03      	ldr	r3, [pc, #12]	@ (80158f8 <_ZN8std_msgs5Int326getMD5Ev+0x18>)
 80158ea:	4618      	mov	r0, r3
 80158ec:	370c      	adds	r7, #12
 80158ee:	46bd      	mov	sp, r7
 80158f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f4:	4770      	bx	lr
 80158f6:	bf00      	nop
 80158f8:	0801c824 	.word	0x0801c824

080158fc <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b082      	sub	sp, #8
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
      data(0)
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	4618      	mov	r0, r3
 8015908:	f7fd faa4 	bl	8012e54 <_ZN3ros3MsgC1Ev>
 801590c:	4a05      	ldr	r2, [pc, #20]	@ (8015924 <_ZN8std_msgs4BoolC1Ev+0x28>)
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	601a      	str	r2, [r3, #0]
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	2200      	movs	r2, #0
 8015916:	711a      	strb	r2, [r3, #4]
    {
    }
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	4618      	mov	r0, r3
 801591c:	3708      	adds	r7, #8
 801591e:	46bd      	mov	sp, r7
 8015920:	bd80      	pop	{r7, pc}
 8015922:	bf00      	nop
 8015924:	0801c9c4 	.word	0x0801c9c4

08015928 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8015928:	b480      	push	{r7}
 801592a:	b085      	sub	sp, #20
 801592c:	af00      	add	r7, sp, #0
 801592e:	6078      	str	r0, [r7, #4]
 8015930:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8015932:	2300      	movs	r3, #0
 8015934:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	791b      	ldrb	r3, [r3, #4]
 801593a:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	683a      	ldr	r2, [r7, #0]
 8015940:	4413      	add	r3, r2
 8015942:	7a3a      	ldrb	r2, [r7, #8]
 8015944:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	3301      	adds	r3, #1
 801594a:	60fb      	str	r3, [r7, #12]
      return offset;
 801594c:	68fb      	ldr	r3, [r7, #12]
    }
 801594e:	4618      	mov	r0, r3
 8015950:	3714      	adds	r7, #20
 8015952:	46bd      	mov	sp, r7
 8015954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015958:	4770      	bx	lr

0801595a <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 801595a:	b480      	push	{r7}
 801595c:	b085      	sub	sp, #20
 801595e:	af00      	add	r7, sp, #0
 8015960:	6078      	str	r0, [r7, #4]
 8015962:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8015964:	2300      	movs	r3, #0
 8015966:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8015968:	2300      	movs	r3, #0
 801596a:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 801596c:	7a3a      	ldrb	r2, [r7, #8]
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	6839      	ldr	r1, [r7, #0]
 8015972:	440b      	add	r3, r1
 8015974:	781b      	ldrb	r3, [r3, #0]
 8015976:	4313      	orrs	r3, r2
 8015978:	b2db      	uxtb	r3, r3
 801597a:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 801597c:	7a3a      	ldrb	r2, [r7, #8]
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	3301      	adds	r3, #1
 8015986:	60fb      	str	r3, [r7, #12]
     return offset;
 8015988:	68fb      	ldr	r3, [r7, #12]
    }
 801598a:	4618      	mov	r0, r3
 801598c:	3714      	adds	r7, #20
 801598e:	46bd      	mov	sp, r7
 8015990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015994:	4770      	bx	lr
	...

08015998 <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 8015998:	b480      	push	{r7}
 801599a:	b083      	sub	sp, #12
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
 80159a0:	4b03      	ldr	r3, [pc, #12]	@ (80159b0 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 80159a2:	4618      	mov	r0, r3
 80159a4:	370c      	adds	r7, #12
 80159a6:	46bd      	mov	sp, r7
 80159a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ac:	4770      	bx	lr
 80159ae:	bf00      	nop
 80159b0:	0801c848 	.word	0x0801c848

080159b4 <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 80159b4:	b480      	push	{r7}
 80159b6:	b083      	sub	sp, #12
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	6078      	str	r0, [r7, #4]
 80159bc:	4b03      	ldr	r3, [pc, #12]	@ (80159cc <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 80159be:	4618      	mov	r0, r3
 80159c0:	370c      	adds	r7, #12
 80159c2:	46bd      	mov	sp, r7
 80159c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c8:	4770      	bx	lr
 80159ca:	bf00      	nop
 80159cc:	0801c858 	.word	0x0801c858

080159d0 <_ZN4ROS14initEv>:
namespace ROS1 {
  /**
   * @brief ROS1 節點宣告。
   * @param void
   */
  void init(void) {
 80159d0:	b580      	push	{r7, lr}
 80159d2:	af00      	add	r7, sp, #0
    nh.initNode();
 80159d4:	480e      	ldr	r0, [pc, #56]	@ (8015a10 <_ZN4ROS14initEv+0x40>)
 80159d6:	f000 fa15 	bl	8015e04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

    nh.advertise(pub_chassis);
 80159da:	490e      	ldr	r1, [pc, #56]	@ (8015a14 <_ZN4ROS14initEv+0x44>)
 80159dc:	480c      	ldr	r0, [pc, #48]	@ (8015a10 <_ZN4ROS14initEv+0x40>)
 80159de:	f000 fa3a 	bl	8015e56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
   // nh.advertise(pub_arriveDestination);
    nh.advertise(pub_currentStage);
 80159e2:	490d      	ldr	r1, [pc, #52]	@ (8015a18 <_ZN4ROS14initEv+0x48>)
 80159e4:	480a      	ldr	r0, [pc, #40]	@ (8015a10 <_ZN4ROS14initEv+0x40>)
 80159e6:	f000 fa36 	bl	8015e56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    
    nh.subscribe(sub_chassis);
 80159ea:	490c      	ldr	r1, [pc, #48]	@ (8015a1c <_ZN4ROS14initEv+0x4c>)
 80159ec:	4808      	ldr	r0, [pc, #32]	@ (8015a10 <_ZN4ROS14initEv+0x40>)
 80159ee:	f000 fa60 	bl	8015eb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>
    nh.subscribe(sub_missionFinish);
 80159f2:	490b      	ldr	r1, [pc, #44]	@ (8015a20 <_ZN4ROS14initEv+0x50>)
 80159f4:	4806      	ldr	r0, [pc, #24]	@ (8015a10 <_ZN4ROS14initEv+0x40>)
 80159f6:	f000 fa89 	bl	8015f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>
    nh.subscribe(sub_coffeeTable);
 80159fa:	490a      	ldr	r1, [pc, #40]	@ (8015a24 <_ZN4ROS14initEv+0x54>)
 80159fc:	4804      	ldr	r0, [pc, #16]	@ (8015a10 <_ZN4ROS14initEv+0x40>)
 80159fe:	f000 fa58 	bl	8015eb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>
    nh.subscribe(sub_CupColor);
 8015a02:	4909      	ldr	r1, [pc, #36]	@ (8015a28 <_ZN4ROS14initEv+0x58>)
 8015a04:	4802      	ldr	r0, [pc, #8]	@ (8015a10 <_ZN4ROS14initEv+0x40>)
 8015a06:	f000 fa54 	bl	8015eb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>
    return;
 8015a0a:	bf00      	nop
  }
 8015a0c:	bd80      	pop	{r7, pc}
 8015a0e:	bf00      	nop
 8015a10:	240016c8 	.word	0x240016c8
 8015a14:	24003c60 	.word	0x24003c60
 8015a18:	24003c74 	.word	0x24003c74
 8015a1c:	24003c88 	.word	0x24003c88
 8015a20:	24003ca4 	.word	0x24003ca4
 8015a24:	24003cc0 	.word	0x24003cc0
 8015a28:	24003cdc 	.word	0x24003cdc

08015a2c <_ZN4ROS19spinCycleEv>:
int spin  = 0;
  /**
   * @brief ROS1 循環單位。
   * @param void
   */
  void spinCycle(void) {
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	af00      	add	r7, sp, #0
    // Limit spinOnce frequency to 50Hz
      nh.spinOnce();
 8015a30:	4804      	ldr	r0, [pc, #16]	@ (8015a44 <_ZN4ROS19spinCycleEv+0x18>)
 8015a32:	f000 fa98 	bl	8015f66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
      spin++;
 8015a36:	4b04      	ldr	r3, [pc, #16]	@ (8015a48 <_ZN4ROS19spinCycleEv+0x1c>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	3301      	adds	r3, #1
 8015a3c:	4a02      	ldr	r2, [pc, #8]	@ (8015a48 <_ZN4ROS19spinCycleEv+0x1c>)
 8015a3e:	6013      	str	r3, [r2, #0]

    return;
 8015a40:	bf00      	nop
  }
 8015a42:	bd80      	pop	{r7, pc}
 8015a44:	240016c8 	.word	0x240016c8
 8015a48:	24003cf8 	.word	0x24003cf8

08015a4c <_ZN4ROS116pub_chassis_poseEv>:

  void pub_chassis_pose(void){
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	af00      	add	r7, sp, #0
      chassis_current_pose.position.x = map_x;
 8015a50:	4b0e      	ldr	r3, [pc, #56]	@ (8015a8c <_ZN4ROS116pub_chassis_poseEv+0x40>)
 8015a52:	edd3 7a00 	vldr	s15, [r3]
 8015a56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8015a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8015a90 <_ZN4ROS116pub_chassis_poseEv+0x44>)
 8015a5c:	ed83 7b04 	vstr	d7, [r3, #16]
      chassis_current_pose.position.y = map_y;
 8015a60:	4b0c      	ldr	r3, [pc, #48]	@ (8015a94 <_ZN4ROS116pub_chassis_poseEv+0x48>)
 8015a62:	edd3 7a00 	vldr	s15, [r3]
 8015a66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8015a6a:	4b09      	ldr	r3, [pc, #36]	@ (8015a90 <_ZN4ROS116pub_chassis_poseEv+0x44>)
 8015a6c:	ed83 7b06 	vstr	d7, [r3, #24]
      chassis_current_pose.orientation.w = theta;
 8015a70:	4b09      	ldr	r3, [pc, #36]	@ (8015a98 <_ZN4ROS116pub_chassis_poseEv+0x4c>)
 8015a72:	edd3 7a00 	vldr	s15, [r3]
 8015a76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8015a7a:	4b05      	ldr	r3, [pc, #20]	@ (8015a90 <_ZN4ROS116pub_chassis_poseEv+0x44>)
 8015a7c:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
      pub_chassis.publish(&chassis_current_pose);
 8015a80:	4903      	ldr	r1, [pc, #12]	@ (8015a90 <_ZN4ROS116pub_chassis_poseEv+0x44>)
 8015a82:	4806      	ldr	r0, [pc, #24]	@ (8015a9c <_ZN4ROS116pub_chassis_poseEv+0x50>)
 8015a84:	f7fe f833 	bl	8013aee <_ZN3ros9Publisher7publishEPKNS_3MsgE>
      return;
 8015a88:	bf00      	nop
  }
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	240002ac 	.word	0x240002ac
 8015a90:	24003c00 	.word	0x24003c00
 8015a94:	240002b0 	.word	0x240002b0
 8015a98:	240002b4 	.word	0x240002b4
 8015a9c:	24003c60 	.word	0x24003c60

08015aa0 <_ZN4ROS117pub_current_stageEv>:

  /**
   * @brief 底盤切換為接受ROS速度移動模式。
   * @param void
   */
  void pub_current_stage() {
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	af00      	add	r7, sp, #0
      if (ach()) {
 8015aa4:	f001 fc82 	bl	80173ac <_Z3achv>
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d004      	beq.n	8015ab8 <_ZN4ROS117pub_current_stageEv+0x18>
        currentStage.data = stage;
 8015aae:	4b07      	ldr	r3, [pc, #28]	@ (8015acc <_ZN4ROS117pub_current_stageEv+0x2c>)
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	4a07      	ldr	r2, [pc, #28]	@ (8015ad0 <_ZN4ROS117pub_current_stageEv+0x30>)
 8015ab4:	6053      	str	r3, [r2, #4]
 8015ab6:	e002      	b.n	8015abe <_ZN4ROS117pub_current_stageEv+0x1e>
      }
      else {
        currentStage.data = 0;
 8015ab8:	4b05      	ldr	r3, [pc, #20]	@ (8015ad0 <_ZN4ROS117pub_current_stageEv+0x30>)
 8015aba:	2200      	movs	r2, #0
 8015abc:	605a      	str	r2, [r3, #4]
      }
      pub_currentStage.publish(&currentStage);
 8015abe:	4904      	ldr	r1, [pc, #16]	@ (8015ad0 <_ZN4ROS117pub_current_stageEv+0x30>)
 8015ac0:	4804      	ldr	r0, [pc, #16]	@ (8015ad4 <_ZN4ROS117pub_current_stageEv+0x34>)
 8015ac2:	f7fe f814 	bl	8013aee <_ZN3ros9Publisher7publishEPKNS_3MsgE>
      return;
 8015ac6:	bf00      	nop
  }
 8015ac8:	bd80      	pop	{r7, pc}
 8015aca:	bf00      	nop
 8015acc:	24003da8 	.word	0x24003da8
 8015ad0:	24003c58 	.word	0x24003c58
 8015ad4:	24003c74 	.word	0x24003c74

08015ad8 <_ZN4ROS116callback_XoffsetERKN8std_msgs5Int32E>:

  /**
   * @brief Chassis callback, 接收 ROS 底盤速度指令。
   * @param geometry_msgs::Twist
   */
  void callback_Xoffset(const std_msgs::Int32 &msg) {
 8015ad8:	b480      	push	{r7}
 8015ada:	b083      	sub	sp, #12
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
      xDis_receive = msg.data;
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	685b      	ldr	r3, [r3, #4]
 8015ae4:	ee07 3a90 	vmov	s15, r3
 8015ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015aec:	4b04      	ldr	r3, [pc, #16]	@ (8015b00 <_ZN4ROS116callback_XoffsetERKN8std_msgs5Int32E+0x28>)
 8015aee:	edc3 7a00 	vstr	s15, [r3]
      //cmd_v_w = msg.angular.z;
      return;
 8015af2:	bf00      	nop
  }
 8015af4:	370c      	adds	r7, #12
 8015af6:	46bd      	mov	sp, r7
 8015af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afc:	4770      	bx	lr
 8015afe:	bf00      	nop
 8015b00:	24003df4 	.word	0x24003df4

08015b04 <_ZN4ROS121callback_missonFinishERKN8std_msgs4BoolE>:

  /**
   * @brief MissionFinish callback, 接收任務完成資訊，完成後繼續底盤腳本。
   * @param std_msgs::Bool
   */
  void callback_missonFinish(const std_msgs::Bool &msg) {
 8015b04:	b480      	push	{r7}
 8015b06:	b083      	sub	sp, #12
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
      mission_flag = msg.data;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	791a      	ldrb	r2, [r3, #4]
 8015b10:	4b03      	ldr	r3, [pc, #12]	@ (8015b20 <_ZN4ROS121callback_missonFinishERKN8std_msgs4BoolE+0x1c>)
 8015b12:	701a      	strb	r2, [r3, #0]
      return;
 8015b14:	bf00      	nop
  }
 8015b16:	370c      	adds	r7, #12
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1e:	4770      	bx	lr
 8015b20:	240001e0 	.word	0x240001e0

08015b24 <_ZN4ROS120callback_coffeeTableERKN8std_msgs5Int32E>:

  /**
   * @brief CoffeeTable callback, 接收咖啡桌號資訊。
   * @param std_msgs::Int32
   */
  void callback_coffeeTable(const std_msgs::Int32 &msg) {
 8015b24:	b480      	push	{r7}
 8015b26:	b083      	sub	sp, #12
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
	  if(stage == 21){
 8015b2c:	4b07      	ldr	r3, [pc, #28]	@ (8015b4c <_ZN4ROS120callback_coffeeTableERKN8std_msgs5Int32E+0x28>)
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	2b15      	cmp	r3, #21
 8015b32:	d104      	bne.n	8015b3e <_ZN4ROS120callback_coffeeTableERKN8std_msgs5Int32E+0x1a>
      coffeTable = (int)msg.data;
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	685b      	ldr	r3, [r3, #4]
 8015b38:	4a05      	ldr	r2, [pc, #20]	@ (8015b50 <_ZN4ROS120callback_coffeeTableERKN8std_msgs5Int32E+0x2c>)
 8015b3a:	6013      	str	r3, [r2, #0]
	  }
      return;
 8015b3c:	bf00      	nop
 8015b3e:	bf00      	nop
  }
 8015b40:	370c      	adds	r7, #12
 8015b42:	46bd      	mov	sp, r7
 8015b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b48:	4770      	bx	lr
 8015b4a:	bf00      	nop
 8015b4c:	24003da8 	.word	0x24003da8
 8015b50:	24000208 	.word	0x24000208

08015b54 <_ZN4ROS117callback_CupColorERKN8std_msgs5Int32E>:

  /**
   * @brief CupColor callback, 接收杯子顏色資訊。
   * @param std_msgs::Int32
   */
  void callback_CupColor(const std_msgs::Int32 &msg) {
 8015b54:	b480      	push	{r7}
 8015b56:	b083      	sub	sp, #12
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
      cupColor = (int)msg.data;
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	685b      	ldr	r3, [r3, #4]
 8015b60:	4a03      	ldr	r2, [pc, #12]	@ (8015b70 <_ZN4ROS117callback_CupColorERKN8std_msgs5Int32E+0x1c>)
 8015b62:	6013      	str	r3, [r2, #0]
      return;
 8015b64:	bf00      	nop
  }
 8015b66:	370c      	adds	r7, #12
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6e:	4770      	bx	lr
 8015b70:	2400020c 	.word	0x2400020c

08015b74 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8015b74:	b480      	push	{r7}
 8015b76:	b085      	sub	sp, #20
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
 8015b7c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8015b7e:	2300      	movs	r3, #0
 8015b80:	60fb      	str	r3, [r7, #12]
 8015b82:	e00c      	b.n	8015b9e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	00db      	lsls	r3, r3, #3
 8015b88:	683a      	ldr	r2, [r7, #0]
 8015b8a:	fa22 f103 	lsr.w	r1, r2, r3
 8015b8e:	687a      	ldr	r2, [r7, #4]
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	4413      	add	r3, r2
 8015b94:	b2ca      	uxtb	r2, r1
 8015b96:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	3301      	adds	r3, #1
 8015b9c:	60fb      	str	r3, [r7, #12]
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	2b03      	cmp	r3, #3
 8015ba2:	d9ef      	bls.n	8015b84 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8015ba4:	bf00      	nop
 8015ba6:	bf00      	nop
 8015ba8:	3714      	adds	r7, #20
 8015baa:	46bd      	mov	sp, r7
 8015bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb0:	4770      	bx	lr

08015bb2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8015bb2:	b480      	push	{r7}
 8015bb4:	b085      	sub	sp, #20
 8015bb6:	af00      	add	r7, sp, #0
 8015bb8:	6078      	str	r0, [r7, #4]
 8015bba:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	60fb      	str	r3, [r7, #12]
 8015bc6:	e010      	b.n	8015bea <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	6839      	ldr	r1, [r7, #0]
 8015bce:	68fa      	ldr	r2, [r7, #12]
 8015bd0:	440a      	add	r2, r1
 8015bd2:	7812      	ldrb	r2, [r2, #0]
 8015bd4:	4611      	mov	r1, r2
 8015bd6:	68fa      	ldr	r2, [r7, #12]
 8015bd8:	00d2      	lsls	r2, r2, #3
 8015bda:	fa01 f202 	lsl.w	r2, r1, r2
 8015bde:	431a      	orrs	r2, r3
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	3301      	adds	r3, #1
 8015be8:	60fb      	str	r3, [r7, #12]
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	2b03      	cmp	r3, #3
 8015bee:	d9eb      	bls.n	8015bc8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8015bf0:	bf00      	nop
 8015bf2:	bf00      	nop
 8015bf4:	3714      	adds	r7, #20
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfc:	4770      	bx	lr
	...

08015c00 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8015c00:	b480      	push	{r7}
 8015c02:	b083      	sub	sp, #12
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
 8015c08:	4a04      	ldr	r2, [pc, #16]	@ (8015c1c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	601a      	str	r2, [r3, #0]
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	4618      	mov	r0, r3
 8015c12:	370c      	adds	r7, #12
 8015c14:	46bd      	mov	sp, r7
 8015c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c1a:	4770      	bx	lr
 8015c1c:	0801ca54 	.word	0x0801ca54

08015c20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b086      	sub	sp, #24
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	f7ff ffe8 	bl	8015c00 <_ZN3ros15NodeHandleBase_C1Ev>
 8015c30:	4a47      	ldr	r2, [pc, #284]	@ (8015d50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	601a      	str	r2, [r3, #0]
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	3304      	adds	r3, #4
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	f7fe f838 	bl	8013cb0 <_ZN13STM32HardwareC1Ev>
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015c46:	2200      	movs	r2, #0
 8015c48:	f883 24fc 	strb.w	r2, [r3, #1276]	@ 0x4fc
 8015c4c:	687a      	ldr	r2, [r7, #4]
 8015c4e:	f242 5310 	movw	r3, #9488	@ 0x2510
 8015c52:	4413      	add	r3, r2
 8015c54:	4618      	mov	r0, r3
 8015c56:	f7fd fc71 	bl	801353c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	617b      	str	r3, [r7, #20]
 8015c5e:	e009      	b.n	8015c74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	697a      	ldr	r2, [r7, #20]
 8015c64:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 8015c68:	2100      	movs	r1, #0
 8015c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8015c6e:	697b      	ldr	r3, [r7, #20]
 8015c70:	3301      	adds	r3, #1
 8015c72:	617b      	str	r3, [r7, #20]
 8015c74:	697b      	ldr	r3, [r7, #20]
 8015c76:	2b18      	cmp	r3, #24
 8015c78:	d9f2      	bls.n	8015c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x40>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	613b      	str	r3, [r7, #16]
 8015c7e:	e00a      	b.n	8015c96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8015c80:	687a      	ldr	r2, [r7, #4]
 8015c82:	693b      	ldr	r3, [r7, #16]
 8015c84:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8015c88:	009b      	lsls	r3, r3, #2
 8015c8a:	4413      	add	r3, r2
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8015c90:	693b      	ldr	r3, [r7, #16]
 8015c92:	3301      	adds	r3, #1
 8015c94:	613b      	str	r3, [r7, #16]
 8015c96:	693b      	ldr	r3, [r7, #16]
 8015c98:	2b18      	cmp	r3, #24
 8015c9a:	d9f1      	bls.n	8015c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	60fb      	str	r3, [r7, #12]
 8015ca0:	e00a      	b.n	8015cb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8015ca2:	687a      	ldr	r2, [r7, #4]
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	441a      	add	r2, r3
 8015ca8:	f242 0320 	movw	r3, #8224	@ 0x2020
 8015cac:	4413      	add	r3, r2
 8015cae:	2200      	movs	r2, #0
 8015cb0:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	3301      	adds	r3, #1
 8015cb6:	60fb      	str	r3, [r7, #12]
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015cbe:	d3f0      	bcc.n	8015ca2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x82>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	60bb      	str	r3, [r7, #8]
 8015cc4:	e00a      	b.n	8015cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xbc>
      message_out[i] = 0;
 8015cc6:	687a      	ldr	r2, [r7, #4]
 8015cc8:	68bb      	ldr	r3, [r7, #8]
 8015cca:	441a      	add	r2, r3
 8015ccc:	f242 2320 	movw	r3, #8736	@ 0x2220
 8015cd0:	4413      	add	r3, r2
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8015cd6:	68bb      	ldr	r3, [r7, #8]
 8015cd8:	3301      	adds	r3, #1
 8015cda:	60bb      	str	r3, [r7, #8]
 8015cdc:	68bb      	ldr	r3, [r7, #8]
 8015cde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015ce2:	d3f0      	bcc.n	8015cc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa6>

    req_param_resp.ints_length = 0;
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015cea:	461a      	mov	r2, r3
 8015cec:	2300      	movs	r3, #0
 8015cee:	f8c2 3514 	str.w	r3, [r2, #1300]	@ 0x514
    req_param_resp.ints = NULL;
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015cf8:	461a      	mov	r2, r3
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	f8c2 351c 	str.w	r3, [r2, #1308]	@ 0x51c
    req_param_resp.floats_length = 0;
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015d06:	461a      	mov	r2, r3
 8015d08:	2300      	movs	r3, #0
 8015d0a:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520
    req_param_resp.floats = NULL;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015d14:	461a      	mov	r2, r3
 8015d16:	2300      	movs	r3, #0
 8015d18:	f8c2 3528 	str.w	r3, [r2, #1320]	@ 0x528
    req_param_resp.ints_length = 0;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015d22:	461a      	mov	r2, r3
 8015d24:	2300      	movs	r3, #0
 8015d26:	f8c2 3514 	str.w	r3, [r2, #1300]	@ 0x514
    req_param_resp.ints = NULL;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015d30:	461a      	mov	r2, r3
 8015d32:	2300      	movs	r3, #0
 8015d34:	f8c2 351c 	str.w	r3, [r2, #1308]	@ 0x51c

    spin_timeout_ = 0;
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015d3e:	461a      	mov	r2, r3
 8015d40:	2300      	movs	r3, #0
 8015d42:	61d3      	str	r3, [r2, #28]
  }
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	4618      	mov	r0, r3
 8015d48:	3718      	adds	r7, #24
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	bd80      	pop	{r7, pc}
 8015d4e:	bf00      	nop
 8015d50:	0801c9b0 	.word	0x0801c9b0

08015d54 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8015d54:	b480      	push	{r7}
 8015d56:	b083      	sub	sp, #12
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
 8015d5c:	4a04      	ldr	r2, [pc, #16]	@ (8015d70 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	601a      	str	r2, [r3, #0]
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	4618      	mov	r0, r3
 8015d66:	370c      	adds	r7, #12
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6e:	4770      	bx	lr
 8015d70:	0801ca3c 	.word	0x0801ca3c

08015d74 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b084      	sub	sp, #16
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	60f8      	str	r0, [r7, #12]
 8015d7c:	60b9      	str	r1, [r7, #8]
 8015d7e:	607a      	str	r2, [r7, #4]
 8015d80:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	4618      	mov	r0, r3
 8015d86:	f7ff ffe5 	bl	8015d54 <_ZN3ros11Subscriber_C1Ev>
 8015d8a:	4a0b      	ldr	r2, [pc, #44]	@ (8015db8 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	601a      	str	r2, [r3, #0]
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	330c      	adds	r3, #12
 8015d94:	4618      	mov	r0, r3
 8015d96:	f7ff fd15 	bl	80157c4 <_ZN8std_msgs5Int32C1Ev>
    cb_(cb),
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	687a      	ldr	r2, [r7, #4]
 8015d9e:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	683a      	ldr	r2, [r7, #0]
 8015da4:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	68ba      	ldr	r2, [r7, #8]
 8015daa:	609a      	str	r2, [r3, #8]
  };
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	4618      	mov	r0, r3
 8015db0:	3710      	adds	r7, #16
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd80      	pop	{r7, pc}
 8015db6:	bf00      	nop
 8015db8:	0801c998 	.word	0x0801c998

08015dbc <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b084      	sub	sp, #16
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	60f8      	str	r0, [r7, #12]
 8015dc4:	60b9      	str	r1, [r7, #8]
 8015dc6:	607a      	str	r2, [r7, #4]
 8015dc8:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f7ff ffc1 	bl	8015d54 <_ZN3ros11Subscriber_C1Ev>
 8015dd2:	4a0b      	ldr	r2, [pc, #44]	@ (8015e00 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	601a      	str	r2, [r3, #0]
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	330c      	adds	r3, #12
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f7ff fd8d 	bl	80158fc <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	687a      	ldr	r2, [r7, #4]
 8015de6:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	683a      	ldr	r2, [r7, #0]
 8015dec:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	68ba      	ldr	r2, [r7, #8]
 8015df2:	609a      	str	r2, [r3, #8]
  };
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	4618      	mov	r0, r3
 8015df8:	3710      	adds	r7, #16
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	bd80      	pop	{r7, pc}
 8015dfe:	bf00      	nop
 8015e00:	0801c980 	.word	0x0801c980

08015e04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b082      	sub	sp, #8
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	3304      	adds	r3, #4
 8015e10:	4618      	mov	r0, r3
 8015e12:	f7fd ff6d 	bl	8013cf0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015e1c:	461a      	mov	r2, r3
 8015e1e:	2300      	movs	r3, #0
 8015e20:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
    bytes_ = 0;
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015e2a:	461a      	mov	r2, r3
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
    index_ = 0;
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015e38:	461a      	mov	r2, r3
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
    topic_ = 0;
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015e46:	461a      	mov	r2, r3
 8015e48:	2300      	movs	r3, #0
 8015e4a:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
  };
 8015e4e:	bf00      	nop
 8015e50:	3708      	adds	r7, #8
 8015e52:	46bd      	mov	sp, r7
 8015e54:	bd80      	pop	{r7, pc}

08015e56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8015e56:	b480      	push	{r7}
 8015e58:	b085      	sub	sp, #20
 8015e5a:	af00      	add	r7, sp, #0
 8015e5c:	6078      	str	r0, [r7, #4]
 8015e5e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8015e60:	2300      	movs	r3, #0
 8015e62:	60fb      	str	r3, [r7, #12]
 8015e64:	e01b      	b.n	8015e9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	68fa      	ldr	r2, [r7, #12]
 8015e6a:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 8015e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d110      	bne.n	8015e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	68fa      	ldr	r2, [r7, #12]
 8015e7a:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 8015e7e:	6839      	ldr	r1, [r7, #0]
 8015e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8015e8e:	687a      	ldr	r2, [r7, #4]
 8015e90:	683b      	ldr	r3, [r7, #0]
 8015e92:	60da      	str	r2, [r3, #12]
        return true;
 8015e94:	2301      	movs	r3, #1
 8015e96:	e006      	b.n	8015ea6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	3301      	adds	r3, #1
 8015e9c:	60fb      	str	r3, [r7, #12]
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	2b18      	cmp	r3, #24
 8015ea2:	dde0      	ble.n	8015e66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8015ea4:	2300      	movs	r3, #0
  }
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	3714      	adds	r7, #20
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb0:	4770      	bx	lr

08015eb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8015eb2:	b480      	push	{r7}
 8015eb4:	b085      	sub	sp, #20
 8015eb6:	af00      	add	r7, sp, #0
 8015eb8:	6078      	str	r0, [r7, #4]
 8015eba:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	60fb      	str	r3, [r7, #12]
 8015ec0:	e01a      	b.n	8015ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 8015ec2:	687a      	ldr	r2, [r7, #4]
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8015eca:	009b      	lsls	r3, r3, #2
 8015ecc:	4413      	add	r3, r2
 8015ece:	685b      	ldr	r3, [r3, #4]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d10e      	bne.n	8015ef2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8015ed4:	683a      	ldr	r2, [r7, #0]
 8015ed6:	6879      	ldr	r1, [r7, #4]
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8015ede:	009b      	lsls	r3, r3, #2
 8015ee0:	440b      	add	r3, r1
 8015ee2:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8015eea:	683b      	ldr	r3, [r7, #0]
 8015eec:	605a      	str	r2, [r3, #4]
        return true;
 8015eee:	2301      	movs	r3, #1
 8015ef0:	e006      	b.n	8015f00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	3301      	adds	r3, #1
 8015ef6:	60fb      	str	r3, [r7, #12]
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	2b18      	cmp	r3, #24
 8015efc:	dde1      	ble.n	8015ec2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x10>
      }
    }
    return false;
 8015efe:	2300      	movs	r3, #0
  }
 8015f00:	4618      	mov	r0, r3
 8015f02:	3714      	adds	r7, #20
 8015f04:	46bd      	mov	sp, r7
 8015f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f0a:	4770      	bx	lr

08015f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8015f0c:	b480      	push	{r7}
 8015f0e:	b085      	sub	sp, #20
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
 8015f14:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8015f16:	2300      	movs	r3, #0
 8015f18:	60fb      	str	r3, [r7, #12]
 8015f1a:	e01a      	b.n	8015f52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x46>
      if (subscribers[i] == 0) // empty slot
 8015f1c:	687a      	ldr	r2, [r7, #4]
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8015f24:	009b      	lsls	r3, r3, #2
 8015f26:	4413      	add	r3, r2
 8015f28:	685b      	ldr	r3, [r3, #4]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d10e      	bne.n	8015f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8015f2e:	683a      	ldr	r2, [r7, #0]
 8015f30:	6879      	ldr	r1, [r7, #4]
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8015f38:	009b      	lsls	r3, r3, #2
 8015f3a:	440b      	add	r3, r1
 8015f3c:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8015f44:	683b      	ldr	r3, [r7, #0]
 8015f46:	605a      	str	r2, [r3, #4]
        return true;
 8015f48:	2301      	movs	r3, #1
 8015f4a:	e006      	b.n	8015f5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	3301      	adds	r3, #1
 8015f50:	60fb      	str	r3, [r7, #12]
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	2b18      	cmp	r3, #24
 8015f56:	dde1      	ble.n	8015f1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x10>
    return false;
 8015f58:	2300      	movs	r3, #0
  }
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	3714      	adds	r7, #20
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f64:	4770      	bx	lr

08015f66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8015f66:	b580      	push	{r7, lr}
 8015f68:	b084      	sub	sp, #16
 8015f6a:	af00      	add	r7, sp, #0
 8015f6c:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	3304      	adds	r3, #4
 8015f72:	4618      	mov	r0, r3
 8015f74:	f7fd ffc3 	bl	8013efe <_ZN13STM32Hardware4timeEv>
 8015f78:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015f80:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8015f84:	68fa      	ldr	r2, [r7, #12]
 8015f86:	1ad3      	subs	r3, r2, r3
 8015f88:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8015f8c:	4293      	cmp	r3, r2
 8015f8e:	d905      	bls.n	8015f9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015f96:	2200      	movs	r2, #0
 8015f98:	f883 24fc 	strb.w	r2, [r3, #1276]	@ 0x4fc
    if (mode_ != MODE_FIRST_FF)
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015fa2:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d00e      	beq.n	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015fb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8015fb4:	68fa      	ldr	r2, [r7, #12]
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d906      	bls.n	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015fc0:	461a      	mov	r2, r3
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
      if (spin_timeout_ > 0)
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015fce:	69db      	ldr	r3, [r3, #28]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d015      	beq.n	8016000 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	3304      	adds	r3, #4
 8015fd8:	4618      	mov	r0, r3
 8015fda:	f7fd ff90 	bl	8013efe <_ZN13STM32Hardware4timeEv>
 8015fde:	4602      	mov	r2, r0
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	1ad2      	subs	r2, r2, r3
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8015fea:	69db      	ldr	r3, [r3, #28]
 8015fec:	429a      	cmp	r2, r3
 8015fee:	bf8c      	ite	hi
 8015ff0:	2301      	movhi	r3, #1
 8015ff2:	2300      	movls	r3, #0
 8015ff4:	b2db      	uxtb	r3, r3
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d002      	beq.n	8016000 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8015ffa:	f06f 0301 	mvn.w	r3, #1
 8015ffe:	e226      	b.n	801644e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	3304      	adds	r3, #4
 8016004:	4618      	mov	r0, r3
 8016006:	f7fd fe8f 	bl	8013d28 <_ZN13STM32Hardware4readEv>
 801600a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 801600c:	68bb      	ldr	r3, [r7, #8]
 801600e:	2b00      	cmp	r3, #0
 8016010:	f2c0 81ff 	blt.w	8016412 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801601a:	f8d3 24f8 	ldr.w	r2, [r3, #1272]	@ 0x4f8
 801601e:	68bb      	ldr	r3, [r7, #8]
 8016020:	4413      	add	r3, r2
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8016028:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016032:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8016036:	2b07      	cmp	r3, #7
 8016038:	d12d      	bne.n	8016096 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016040:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8016044:	1c5a      	adds	r2, r3, #1
 8016046:	6879      	ldr	r1, [r7, #4]
 8016048:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 801604c:	f8c1 24f4 	str.w	r2, [r1, #1268]	@ 0x4f4
 8016050:	68ba      	ldr	r2, [r7, #8]
 8016052:	b2d1      	uxtb	r1, r2
 8016054:	687a      	ldr	r2, [r7, #4]
 8016056:	441a      	add	r2, r3
 8016058:	f242 0320 	movw	r3, #8224	@ 0x2020
 801605c:	4413      	add	r3, r2
 801605e:	460a      	mov	r2, r1
 8016060:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016068:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 801606c:	3b01      	subs	r3, #1
 801606e:	687a      	ldr	r2, [r7, #4]
 8016070:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8016074:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801607e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8016082:	2b00      	cmp	r3, #0
 8016084:	d1a0      	bne.n	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801608c:	461a      	mov	r2, r3
 801608e:	2308      	movs	r3, #8
 8016090:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 8016094:	e798      	b.n	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801609c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d130      	bne.n	8016106 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 80160a4:	68bb      	ldr	r3, [r7, #8]
 80160a6:	2bff      	cmp	r3, #255	@ 0xff
 80160a8:	d112      	bne.n	80160d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80160b0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80160b4:	3301      	adds	r3, #1
 80160b6:	687a      	ldr	r2, [r7, #4]
 80160b8:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80160bc:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	3314      	adds	r3, #20
 80160c4:	687a      	ldr	r2, [r7, #4]
 80160c6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80160ca:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
 80160ce:	e77b      	b.n	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	3304      	adds	r3, #4
 80160d4:	4618      	mov	r0, r3
 80160d6:	f7fd ff12 	bl	8013efe <_ZN13STM32Hardware4timeEv>
 80160da:	4602      	mov	r2, r0
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	1ad3      	subs	r3, r2, r3
 80160e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80160e4:	4293      	cmp	r3, r2
 80160e6:	bf8c      	ite	hi
 80160e8:	2301      	movhi	r3, #1
 80160ea:	2300      	movls	r3, #0
 80160ec:	b2db      	uxtb	r3, r3
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	f43f af6a 	beq.w	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80160fa:	2200      	movs	r2, #0
 80160fc:	f883 24fc 	strb.w	r2, [r3, #1276]	@ 0x4fc
          return SPIN_TIMEOUT;
 8016100:	f06f 0301 	mvn.w	r3, #1
 8016104:	e1a3      	b.n	801644e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801610c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8016110:	2b01      	cmp	r3, #1
 8016112:	d121      	bne.n	8016158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8016114:	68bb      	ldr	r3, [r7, #8]
 8016116:	2bfe      	cmp	r3, #254	@ 0xfe
 8016118:	d10b      	bne.n	8016132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016120:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8016124:	3301      	adds	r3, #1
 8016126:	687a      	ldr	r2, [r7, #4]
 8016128:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 801612c:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 8016130:	e74a      	b.n	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016138:	461a      	mov	r2, r3
 801613a:	2300      	movs	r3, #0
 801613c:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
          if (configured_ == false)
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016146:	f893 34fc 	ldrb.w	r3, [r3, #1276]	@ 0x4fc
 801614a:	2b00      	cmp	r3, #0
 801614c:	f47f af3c 	bne.w	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f000 f980 	bl	8016456 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8016156:	e737      	b.n	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801615e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8016162:	2b02      	cmp	r3, #2
 8016164:	d120      	bne.n	80161a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801616c:	461a      	mov	r2, r3
 801616e:	68bb      	ldr	r3, [r7, #8]
 8016170:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        index_ = 0;
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801617a:	461a      	mov	r2, r3
 801617c:	2300      	movs	r3, #0
 801617e:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
        mode_++;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016188:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 801618c:	3301      	adds	r3, #1
 801618e:	687a      	ldr	r2, [r7, #4]
 8016190:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8016194:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
        checksum_ = data;               /* first byte for calculating size checksum */
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801619e:	461a      	mov	r2, r3
 80161a0:	68bb      	ldr	r3, [r7, #8]
 80161a2:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
 80161a6:	e70f      	b.n	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80161ae:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80161b2:	2b03      	cmp	r3, #3
 80161b4:	d118      	bne.n	80161e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80161bc:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	@ 0x4ec
 80161c0:	68bb      	ldr	r3, [r7, #8]
 80161c2:	021b      	lsls	r3, r3, #8
 80161c4:	4413      	add	r3, r2
 80161c6:	687a      	ldr	r2, [r7, #4]
 80161c8:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80161cc:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        mode_++;
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80161d6:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80161da:	3301      	adds	r3, #1
 80161dc:	687a      	ldr	r2, [r7, #4]
 80161de:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80161e2:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 80161e6:	e6ef      	b.n	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80161ee:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80161f2:	2b04      	cmp	r3, #4
 80161f4:	d11f      	bne.n	8016236 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80161fc:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 8016200:	425a      	negs	r2, r3
 8016202:	b2db      	uxtb	r3, r3
 8016204:	b2d2      	uxtb	r2, r2
 8016206:	bf58      	it	pl
 8016208:	4253      	negpl	r3, r2
 801620a:	2bff      	cmp	r3, #255	@ 0xff
 801620c:	d10b      	bne.n	8016226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016214:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8016218:	3301      	adds	r3, #1
 801621a:	687a      	ldr	r2, [r7, #4]
 801621c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8016220:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 8016224:	e6d0      	b.n	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801622c:	461a      	mov	r2, r3
 801622e:	2300      	movs	r3, #0
 8016230:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 8016234:	e6c8      	b.n	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801623c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8016240:	2b05      	cmp	r3, #5
 8016242:	d119      	bne.n	8016278 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801624a:	461a      	mov	r2, r3
 801624c:	68bb      	ldr	r3, [r7, #8]
 801624e:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        mode_++;
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016258:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 801625c:	3301      	adds	r3, #1
 801625e:	687a      	ldr	r2, [r7, #4]
 8016260:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8016264:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
        checksum_ = data;               /* first byte included in checksum */
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801626e:	461a      	mov	r2, r3
 8016270:	68bb      	ldr	r3, [r7, #8]
 8016272:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
 8016276:	e6a7      	b.n	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801627e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8016282:	2b06      	cmp	r3, #6
 8016284:	d123      	bne.n	80162ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801628c:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	@ 0x4f0
 8016290:	68bb      	ldr	r3, [r7, #8]
 8016292:	021b      	lsls	r3, r3, #8
 8016294:	4413      	add	r3, r2
 8016296:	687a      	ldr	r2, [r7, #4]
 8016298:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 801629c:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        mode_ = MODE_MESSAGE;
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80162a6:	461a      	mov	r2, r3
 80162a8:	2307      	movs	r3, #7
 80162aa:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
        if (bytes_ == 0)
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80162b4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	f47f ae85 	bne.w	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80162c4:	461a      	mov	r2, r3
 80162c6:	2308      	movs	r3, #8
 80162c8:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
 80162cc:	e67c      	b.n	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80162d4:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80162d8:	2b08      	cmp	r3, #8
 80162da:	f47f ae75 	bne.w	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80162e4:	461a      	mov	r2, r3
 80162e6:	2300      	movs	r3, #0
 80162e8:	f8c2 34e8 	str.w	r3, [r2, #1256]	@ 0x4e8
        if ((checksum_ % 256) == 255)
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80162f2:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 80162f6:	425a      	negs	r2, r3
 80162f8:	b2db      	uxtb	r3, r3
 80162fa:	b2d2      	uxtb	r2, r2
 80162fc:	bf58      	it	pl
 80162fe:	4253      	negpl	r3, r2
 8016300:	2bff      	cmp	r3, #255	@ 0xff
 8016302:	f47f ae61 	bne.w	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801630c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8016310:	2b00      	cmp	r3, #0
 8016312:	d116      	bne.n	8016342 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	f000 f89e 	bl	8016456 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	f000 f8ba 	bl	8016494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016326:	461a      	mov	r2, r3
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	f8c2 3500 	str.w	r3, [r2, #1280]	@ 0x500
            last_sync_receive_time = c_time;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016334:	461a      	mov	r2, r3
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
            return SPIN_ERR;
 801633c:	f04f 33ff 	mov.w	r3, #4294967295
 8016340:	e085      	b.n	801644e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016348:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 801634c:	2b0a      	cmp	r3, #10
 801634e:	d108      	bne.n	8016362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8016350:	687a      	ldr	r2, [r7, #4]
 8016352:	f242 0320 	movw	r3, #8224	@ 0x2020
 8016356:	4413      	add	r3, r2
 8016358:	4619      	mov	r1, r3
 801635a:	6878      	ldr	r0, [r7, #4]
 801635c:	f000 f97c 	bl	8016658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8016360:	e632      	b.n	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016368:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 801636c:	2b06      	cmp	r3, #6
 801636e:	d112      	bne.n	8016396 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8016370:	687a      	ldr	r2, [r7, #4]
 8016372:	f242 5310 	movw	r3, #9488	@ 0x2510
 8016376:	4413      	add	r3, r2
 8016378:	6879      	ldr	r1, [r7, #4]
 801637a:	f242 0220 	movw	r2, #8224	@ 0x2020
 801637e:	440a      	add	r2, r1
 8016380:	4611      	mov	r1, r2
 8016382:	4618      	mov	r0, r3
 8016384:	f7fd fa0f 	bl	80137a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801638e:	2201      	movs	r2, #1
 8016390:	f883 250c 	strb.w	r2, [r3, #1292]	@ 0x50c
 8016394:	e618      	b.n	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801639c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80163a0:	2b0b      	cmp	r3, #11
 80163a2:	d106      	bne.n	80163b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80163aa:	2200      	movs	r2, #0
 80163ac:	f883 24fc 	strb.w	r2, [r3, #1276]	@ 0x4fc
 80163b0:	e60a      	b.n	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80163b8:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80163bc:	3b64      	subs	r3, #100	@ 0x64
 80163be:	687a      	ldr	r2, [r7, #4]
 80163c0:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80163c4:	009b      	lsls	r3, r3, #2
 80163c6:	4413      	add	r3, r2
 80163c8:	685b      	ldr	r3, [r3, #4]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	f43f adfc 	beq.w	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80163d6:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80163da:	3b64      	subs	r3, #100	@ 0x64
 80163dc:	687a      	ldr	r2, [r7, #4]
 80163de:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80163e2:	009b      	lsls	r3, r3, #2
 80163e4:	4413      	add	r3, r2
 80163e6:	6858      	ldr	r0, [r3, #4]
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80163ee:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80163f2:	3b64      	subs	r3, #100	@ 0x64
 80163f4:	687a      	ldr	r2, [r7, #4]
 80163f6:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80163fa:	009b      	lsls	r3, r3, #2
 80163fc:	4413      	add	r3, r2
 80163fe:	685b      	ldr	r3, [r3, #4]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	681a      	ldr	r2, [r3, #0]
 8016404:	6879      	ldr	r1, [r7, #4]
 8016406:	f242 0320 	movw	r3, #8224	@ 0x2020
 801640a:	440b      	add	r3, r1
 801640c:	4619      	mov	r1, r3
 801640e:	4790      	blx	r2
    while (true)
 8016410:	e5da      	b.n	8015fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8016412:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801641a:	f893 34fc 	ldrb.w	r3, [r3, #1276]	@ 0x4fc
 801641e:	2b00      	cmp	r3, #0
 8016420:	d014      	beq.n	801644c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016428:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 801642c:	68fa      	ldr	r2, [r7, #12]
 801642e:	1ad3      	subs	r3, r2, r3
 8016430:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8016434:	4293      	cmp	r3, r2
 8016436:	d909      	bls.n	801644c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8016438:	6878      	ldr	r0, [r7, #4]
 801643a:	f000 f80c 	bl	8016456 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016444:	461a      	mov	r2, r3
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	f8c2 3500 	str.w	r3, [r2, #1280]	@ 0x500
    return SPIN_OK;
 801644c:	2300      	movs	r3, #0
  }
 801644e:	4618      	mov	r0, r3
 8016450:	3710      	adds	r7, #16
 8016452:	46bd      	mov	sp, r7
 8016454:	bd80      	pop	{r7, pc}

08016456 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8016456:	b580      	push	{r7, lr}
 8016458:	b086      	sub	sp, #24
 801645a:	af00      	add	r7, sp, #0
 801645c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 801645e:	f107 030c 	add.w	r3, r7, #12
 8016462:	4618      	mov	r0, r3
 8016464:	f7fc fd06 	bl	8012e74 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	f107 020c 	add.w	r2, r7, #12
 8016472:	210a      	movs	r1, #10
 8016474:	6878      	ldr	r0, [r7, #4]
 8016476:	4798      	blx	r3
    rt_time = hardware_.time();
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	3304      	adds	r3, #4
 801647c:	4618      	mov	r0, r3
 801647e:	f7fd fd3e 	bl	8013efe <_ZN13STM32Hardware4timeEv>
 8016482:	4602      	mov	r2, r0
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801648a:	611a      	str	r2, [r3, #16]
  }
 801648c:	bf00      	nop
 801648e:	3718      	adds	r7, #24
 8016490:	46bd      	mov	sp, r7
 8016492:	bd80      	pop	{r7, pc}

08016494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8016494:	b590      	push	{r4, r7, lr}
 8016496:	b08b      	sub	sp, #44	@ 0x2c
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 801649c:	f107 030c 	add.w	r3, r7, #12
 80164a0:	4618      	mov	r0, r3
 80164a2:	f7fc fdd7 	bl	8013054 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80164a6:	2300      	movs	r3, #0
 80164a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80164aa:	e05a      	b.n	8016562 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80164b0:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 80164b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d04f      	beq.n	801655c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80164c0:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 80164c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164c8:	689b      	ldr	r3, [r3, #8]
 80164ca:	b29b      	uxth	r3, r3
 80164cc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80164d2:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 80164d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80164e2:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 80164e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164ea:	6859      	ldr	r1, [r3, #4]
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80164f0:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 80164f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164f8:	685b      	ldr	r3, [r3, #4]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	3308      	adds	r3, #8
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	4608      	mov	r0, r1
 8016502:	4798      	blx	r3
 8016504:	4603      	mov	r3, r0
 8016506:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801650c:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 8016510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016514:	6859      	ldr	r1, [r3, #4]
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801651a:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 801651e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016522:	685b      	ldr	r3, [r3, #4]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	330c      	adds	r3, #12
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	4608      	mov	r0, r1
 801652c:	4798      	blx	r3
 801652e:	4603      	mov	r3, r0
 8016530:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8016532:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016536:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	681c      	ldr	r4, [r3, #0]
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016542:	f602 1208 	addw	r2, r2, #2312	@ 0x908
 8016546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801654a:	4618      	mov	r0, r3
 801654c:	f7fd fae3 	bl	8013b16 <_ZN3ros9Publisher15getEndpointTypeEv>
 8016550:	4601      	mov	r1, r0
 8016552:	f107 030c 	add.w	r3, r7, #12
 8016556:	461a      	mov	r2, r3
 8016558:	6878      	ldr	r0, [r7, #4]
 801655a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 801655c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801655e:	3301      	adds	r3, #1
 8016560:	627b      	str	r3, [r7, #36]	@ 0x24
 8016562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016564:	2b18      	cmp	r3, #24
 8016566:	dda1      	ble.n	80164ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8016568:	2300      	movs	r3, #0
 801656a:	627b      	str	r3, [r7, #36]	@ 0x24
 801656c:	e067      	b.n	801663e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 801656e:	687a      	ldr	r2, [r7, #4]
 8016570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016572:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8016576:	009b      	lsls	r3, r3, #2
 8016578:	4413      	add	r3, r2
 801657a:	685b      	ldr	r3, [r3, #4]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d05b      	beq.n	8016638 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 8016580:	687a      	ldr	r2, [r7, #4]
 8016582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016584:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8016588:	009b      	lsls	r3, r3, #2
 801658a:	4413      	add	r3, r2
 801658c:	685b      	ldr	r3, [r3, #4]
 801658e:	685b      	ldr	r3, [r3, #4]
 8016590:	b29b      	uxth	r3, r3
 8016592:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8016594:	687a      	ldr	r2, [r7, #4]
 8016596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016598:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 801659c:	009b      	lsls	r3, r3, #2
 801659e:	4413      	add	r3, r2
 80165a0:	685b      	ldr	r3, [r3, #4]
 80165a2:	689b      	ldr	r3, [r3, #8]
 80165a4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80165a6:	687a      	ldr	r2, [r7, #4]
 80165a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165aa:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80165ae:	009b      	lsls	r3, r3, #2
 80165b0:	4413      	add	r3, r2
 80165b2:	6859      	ldr	r1, [r3, #4]
 80165b4:	687a      	ldr	r2, [r7, #4]
 80165b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165b8:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80165bc:	009b      	lsls	r3, r3, #2
 80165be:	4413      	add	r3, r2
 80165c0:	685b      	ldr	r3, [r3, #4]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	3308      	adds	r3, #8
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	4608      	mov	r0, r1
 80165ca:	4798      	blx	r3
 80165cc:	4603      	mov	r3, r0
 80165ce:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80165d0:	687a      	ldr	r2, [r7, #4]
 80165d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165d4:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80165d8:	009b      	lsls	r3, r3, #2
 80165da:	4413      	add	r3, r2
 80165dc:	6859      	ldr	r1, [r3, #4]
 80165de:	687a      	ldr	r2, [r7, #4]
 80165e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165e2:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80165e6:	009b      	lsls	r3, r3, #2
 80165e8:	4413      	add	r3, r2
 80165ea:	685b      	ldr	r3, [r3, #4]
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	330c      	adds	r3, #12
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	4608      	mov	r0, r1
 80165f4:	4798      	blx	r3
 80165f6:	4603      	mov	r3, r0
 80165f8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80165fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80165fe:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	681c      	ldr	r4, [r3, #0]
 8016606:	687a      	ldr	r2, [r7, #4]
 8016608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801660a:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 801660e:	009b      	lsls	r3, r3, #2
 8016610:	4413      	add	r3, r2
 8016612:	6859      	ldr	r1, [r3, #4]
 8016614:	687a      	ldr	r2, [r7, #4]
 8016616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016618:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 801661c:	009b      	lsls	r3, r3, #2
 801661e:	4413      	add	r3, r2
 8016620:	685b      	ldr	r3, [r3, #4]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	3304      	adds	r3, #4
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	4608      	mov	r0, r1
 801662a:	4798      	blx	r3
 801662c:	4601      	mov	r1, r0
 801662e:	f107 030c 	add.w	r3, r7, #12
 8016632:	461a      	mov	r2, r3
 8016634:	6878      	ldr	r0, [r7, #4]
 8016636:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8016638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801663a:	3301      	adds	r3, #1
 801663c:	627b      	str	r3, [r7, #36]	@ 0x24
 801663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016640:	2b18      	cmp	r3, #24
 8016642:	dd94      	ble.n	801656e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801664a:	2201      	movs	r2, #1
 801664c:	f883 24fc 	strb.w	r2, [r3, #1276]	@ 0x4fc
  }
 8016650:	bf00      	nop
 8016652:	372c      	adds	r7, #44	@ 0x2c
 8016654:	46bd      	mov	sp, r7
 8016656:	bd90      	pop	{r4, r7, pc}

08016658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8016658:	b580      	push	{r7, lr}
 801665a:	b086      	sub	sp, #24
 801665c:	af00      	add	r7, sp, #0
 801665e:	6078      	str	r0, [r7, #4]
 8016660:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8016662:	f107 0308 	add.w	r3, r7, #8
 8016666:	4618      	mov	r0, r3
 8016668:	f7fc fc04 	bl	8012e74 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	3304      	adds	r3, #4
 8016670:	4618      	mov	r0, r3
 8016672:	f7fd fc44 	bl	8013efe <_ZN13STM32Hardware4timeEv>
 8016676:	4602      	mov	r2, r0
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801667e:	691b      	ldr	r3, [r3, #16]
 8016680:	1ad3      	subs	r3, r2, r3
 8016682:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8016684:	f107 0308 	add.w	r3, r7, #8
 8016688:	6839      	ldr	r1, [r7, #0]
 801668a:	4618      	mov	r0, r3
 801668c:	f7fc fc62 	bl	8012f54 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8016690:	68fa      	ldr	r2, [r7, #12]
 8016692:	697b      	ldr	r3, [r7, #20]
 8016694:	4915      	ldr	r1, [pc, #84]	@ (80166ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8016696:	fba1 1303 	umull	r1, r3, r1, r3
 801669a:	099b      	lsrs	r3, r3, #6
 801669c:	4413      	add	r3, r2
 801669e:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80166a0:	6939      	ldr	r1, [r7, #16]
 80166a2:	697a      	ldr	r2, [r7, #20]
 80166a4:	4b11      	ldr	r3, [pc, #68]	@ (80166ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80166a6:	fba3 0302 	umull	r0, r3, r3, r2
 80166aa:	099b      	lsrs	r3, r3, #6
 80166ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80166b0:	fb00 f303 	mul.w	r3, r0, r3
 80166b4:	1ad3      	subs	r3, r2, r3
 80166b6:	4a0e      	ldr	r2, [pc, #56]	@ (80166f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 80166b8:	fb02 f303 	mul.w	r3, r2, r3
 80166bc:	440b      	add	r3, r1
 80166be:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80166c0:	f107 0308 	add.w	r3, r7, #8
 80166c4:	3304      	adds	r3, #4
 80166c6:	4619      	mov	r1, r3
 80166c8:	6878      	ldr	r0, [r7, #4]
 80166ca:	f000 f8bf 	bl	801684c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	3304      	adds	r3, #4
 80166d2:	4618      	mov	r0, r3
 80166d4:	f7fd fc13 	bl	8013efe <_ZN13STM32Hardware4timeEv>
 80166d8:	4602      	mov	r2, r0
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80166e0:	f8c3 2504 	str.w	r2, [r3, #1284]	@ 0x504
  }
 80166e4:	bf00      	nop
 80166e6:	3718      	adds	r7, #24
 80166e8:	46bd      	mov	sp, r7
 80166ea:	bd80      	pop	{r7, pc}
 80166ec:	10624dd3 	.word	0x10624dd3
 80166f0:	000f4240 	.word	0x000f4240

080166f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b088      	sub	sp, #32
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	60f8      	str	r0, [r7, #12]
 80166fc:	60b9      	str	r1, [r7, #8]
 80166fe:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8016700:	68bb      	ldr	r3, [r7, #8]
 8016702:	2b63      	cmp	r3, #99	@ 0x63
 8016704:	dd0b      	ble.n	801671e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801670c:	f893 34fc 	ldrb.w	r3, [r3, #1276]	@ 0x4fc
 8016710:	f083 0301 	eor.w	r3, r3, #1
 8016714:	b2db      	uxtb	r3, r3
 8016716:	2b00      	cmp	r3, #0
 8016718:	d001      	beq.n	801671e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 801671a:	2300      	movs	r3, #0
 801671c:	e090      	b.n	8016840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	681a      	ldr	r2, [r3, #0]
 8016724:	68f9      	ldr	r1, [r7, #12]
 8016726:	f242 2320 	movw	r3, #8736	@ 0x2220
 801672a:	440b      	add	r3, r1
 801672c:	3307      	adds	r3, #7
 801672e:	4619      	mov	r1, r3
 8016730:	6878      	ldr	r0, [r7, #4]
 8016732:	4790      	blx	r2
 8016734:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801673c:	22ff      	movs	r2, #255	@ 0xff
 801673e:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
    message_out[1] = PROTOCOL_VER;
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016748:	22fe      	movs	r2, #254	@ 0xfe
 801674a:	f883 2221 	strb.w	r2, [r3, #545]	@ 0x221
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 801674e:	697b      	ldr	r3, [r7, #20]
 8016750:	b2da      	uxtb	r2, r3
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016758:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 801675c:	697b      	ldr	r3, [r7, #20]
 801675e:	b29b      	uxth	r3, r3
 8016760:	0a1b      	lsrs	r3, r3, #8
 8016762:	b29b      	uxth	r3, r3
 8016764:	b2da      	uxtb	r2, r3
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801676c:	f883 2223 	strb.w	r2, [r3, #547]	@ 0x223
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016776:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016780:	f893 3223 	ldrb.w	r3, [r3, #547]	@ 0x223
 8016784:	4413      	add	r3, r2
 8016786:	b2db      	uxtb	r3, r3
 8016788:	43db      	mvns	r3, r3
 801678a:	b2da      	uxtb	r2, r3
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016792:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8016796:	68bb      	ldr	r3, [r7, #8]
 8016798:	b2da      	uxtb	r2, r3
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80167a0:	f883 2225 	strb.w	r2, [r3, #549]	@ 0x225
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80167a4:	68bb      	ldr	r3, [r7, #8]
 80167a6:	b21b      	sxth	r3, r3
 80167a8:	121b      	asrs	r3, r3, #8
 80167aa:	b21b      	sxth	r3, r3
 80167ac:	b2da      	uxtb	r2, r3
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80167b4:	f883 2226 	strb.w	r2, [r3, #550]	@ 0x226

    /* calculate checksum */
    int chk = 0;
 80167b8:	2300      	movs	r3, #0
 80167ba:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80167bc:	2305      	movs	r3, #5
 80167be:	61bb      	str	r3, [r7, #24]
 80167c0:	e00d      	b.n	80167de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 80167c2:	68fa      	ldr	r2, [r7, #12]
 80167c4:	69bb      	ldr	r3, [r7, #24]
 80167c6:	441a      	add	r2, r3
 80167c8:	f242 2320 	movw	r3, #8736	@ 0x2220
 80167cc:	4413      	add	r3, r2
 80167ce:	781b      	ldrb	r3, [r3, #0]
 80167d0:	461a      	mov	r2, r3
 80167d2:	69fb      	ldr	r3, [r7, #28]
 80167d4:	4413      	add	r3, r2
 80167d6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80167d8:	69bb      	ldr	r3, [r7, #24]
 80167da:	3301      	adds	r3, #1
 80167dc:	61bb      	str	r3, [r7, #24]
 80167de:	697b      	ldr	r3, [r7, #20]
 80167e0:	3306      	adds	r3, #6
 80167e2:	69ba      	ldr	r2, [r7, #24]
 80167e4:	429a      	cmp	r2, r3
 80167e6:	ddec      	ble.n	80167c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 80167e8:	697b      	ldr	r3, [r7, #20]
 80167ea:	3307      	adds	r3, #7
 80167ec:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80167ee:	69fb      	ldr	r3, [r7, #28]
 80167f0:	425a      	negs	r2, r3
 80167f2:	b2db      	uxtb	r3, r3
 80167f4:	b2d2      	uxtb	r2, r2
 80167f6:	bf58      	it	pl
 80167f8:	4253      	negpl	r3, r2
 80167fa:	b2da      	uxtb	r2, r3
 80167fc:	697b      	ldr	r3, [r7, #20]
 80167fe:	1c59      	adds	r1, r3, #1
 8016800:	6179      	str	r1, [r7, #20]
 8016802:	43d2      	mvns	r2, r2
 8016804:	b2d1      	uxtb	r1, r2
 8016806:	68fa      	ldr	r2, [r7, #12]
 8016808:	441a      	add	r2, r3
 801680a:	f242 2320 	movw	r3, #8736	@ 0x2220
 801680e:	4413      	add	r3, r2
 8016810:	460a      	mov	r2, r1
 8016812:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8016814:	697b      	ldr	r3, [r7, #20]
 8016816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801681a:	dc0b      	bgt.n	8016834 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	1d18      	adds	r0, r3, #4
 8016820:	68fa      	ldr	r2, [r7, #12]
 8016822:	f242 2320 	movw	r3, #8736	@ 0x2220
 8016826:	4413      	add	r3, r2
 8016828:	697a      	ldr	r2, [r7, #20]
 801682a:	4619      	mov	r1, r3
 801682c:	f7fd fb16 	bl	8013e5c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8016830:	697b      	ldr	r3, [r7, #20]
 8016832:	e005      	b.n	8016840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8016834:	4904      	ldr	r1, [pc, #16]	@ (8016848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8016836:	68f8      	ldr	r0, [r7, #12]
 8016838:	f000 f84c 	bl	80168d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 801683c:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8016840:	4618      	mov	r0, r3
 8016842:	3720      	adds	r7, #32
 8016844:	46bd      	mov	sp, r7
 8016846:	bd80      	pop	{r7, pc}
 8016848:	0801c87c 	.word	0x0801c87c

0801684c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 801684c:	b580      	push	{r7, lr}
 801684e:	b084      	sub	sp, #16
 8016850:	af00      	add	r7, sp, #0
 8016852:	6078      	str	r0, [r7, #4]
 8016854:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	3304      	adds	r3, #4
 801685a:	4618      	mov	r0, r3
 801685c:	f7fd fb4f 	bl	8013efe <_ZN13STM32Hardware4timeEv>
 8016860:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8016862:	683b      	ldr	r3, [r7, #0]
 8016864:	681a      	ldr	r2, [r3, #0]
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	4917      	ldr	r1, [pc, #92]	@ (80168c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 801686a:	fba1 1303 	umull	r1, r3, r1, r3
 801686e:	099b      	lsrs	r3, r3, #6
 8016870:	1ad3      	subs	r3, r2, r3
 8016872:	3b01      	subs	r3, #1
 8016874:	687a      	ldr	r2, [r7, #4]
 8016876:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 801687a:	6153      	str	r3, [r2, #20]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 801687c:	683b      	ldr	r3, [r7, #0]
 801687e:	6859      	ldr	r1, [r3, #4]
 8016880:	68fa      	ldr	r2, [r7, #12]
 8016882:	4b11      	ldr	r3, [pc, #68]	@ (80168c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8016884:	fba3 0302 	umull	r0, r3, r3, r2
 8016888:	099b      	lsrs	r3, r3, #6
 801688a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801688e:	fb00 f303 	mul.w	r3, r0, r3
 8016892:	1ad3      	subs	r3, r2, r3
 8016894:	4a0d      	ldr	r2, [pc, #52]	@ (80168cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8016896:	fb02 f303 	mul.w	r3, r2, r3
 801689a:	1aca      	subs	r2, r1, r3
 801689c:	4b0c      	ldr	r3, [pc, #48]	@ (80168d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 801689e:	4413      	add	r3, r2
 80168a0:	687a      	ldr	r2, [r7, #4]
 80168a2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80168a6:	6193      	str	r3, [r2, #24]
    normalizeSecNSec(sec_offset, nsec_offset);
 80168a8:	687a      	ldr	r2, [r7, #4]
 80168aa:	f242 0314 	movw	r3, #8212	@ 0x2014
 80168ae:	4413      	add	r3, r2
 80168b0:	6879      	ldr	r1, [r7, #4]
 80168b2:	f242 0218 	movw	r2, #8216	@ 0x2018
 80168b6:	440a      	add	r2, r1
 80168b8:	4611      	mov	r1, r2
 80168ba:	4618      	mov	r0, r3
 80168bc:	f7ea fd18 	bl	80012f0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80168c0:	bf00      	nop
 80168c2:	3710      	adds	r7, #16
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}
 80168c8:	10624dd3 	.word	0x10624dd3
 80168cc:	000f4240 	.word	0x000f4240
 80168d0:	3b9aca00 	.word	0x3b9aca00

080168d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b082      	sub	sp, #8
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
 80168dc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80168de:	683a      	ldr	r2, [r7, #0]
 80168e0:	2103      	movs	r1, #3
 80168e2:	6878      	ldr	r0, [r7, #4]
 80168e4:	f000 f804 	bl	80168f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80168e8:	bf00      	nop
 80168ea:	3708      	adds	r7, #8
 80168ec:	46bd      	mov	sp, r7
 80168ee:	bd80      	pop	{r7, pc}

080168f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b088      	sub	sp, #32
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	60f8      	str	r0, [r7, #12]
 80168f8:	460b      	mov	r3, r1
 80168fa:	607a      	str	r2, [r7, #4]
 80168fc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80168fe:	f107 0314 	add.w	r3, r7, #20
 8016902:	4618      	mov	r0, r3
 8016904:	f7fc fd6a 	bl	80133dc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8016908:	7afb      	ldrb	r3, [r7, #11]
 801690a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	f107 0214 	add.w	r2, r7, #20
 801691a:	2107      	movs	r1, #7
 801691c:	68f8      	ldr	r0, [r7, #12]
 801691e:	4798      	blx	r3
  }
 8016920:	bf00      	nop
 8016922:	3720      	adds	r7, #32
 8016924:	46bd      	mov	sp, r7
 8016926:	bd80      	pop	{r7, pc}

08016928 <_Z41__static_initialization_and_destruction_0v>:

}
 8016928:	b580      	push	{r7, lr}
 801692a:	af00      	add	r7, sp, #0
ros::NodeHandle nh;
 801692c:	4818      	ldr	r0, [pc, #96]	@ (8016990 <_Z41__static_initialization_and_destruction_0v+0x68>)
 801692e:	f7ff f977 	bl	8015c20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Pose chassis_current_pose;
 8016932:	4818      	ldr	r0, [pc, #96]	@ (8016994 <_Z41__static_initialization_and_destruction_0v+0x6c>)
 8016934:	f7fe fec2 	bl	80156bc <_ZN13geometry_msgs4PoseC1Ev>
std_msgs::Int32 arriveDestination;
 8016938:	4817      	ldr	r0, [pc, #92]	@ (8016998 <_Z41__static_initialization_and_destruction_0v+0x70>)
 801693a:	f7fe ff43 	bl	80157c4 <_ZN8std_msgs5Int32C1Ev>
std_msgs::Int32 currentStage;
 801693e:	4817      	ldr	r0, [pc, #92]	@ (801699c <_Z41__static_initialization_and_destruction_0v+0x74>)
 8016940:	f7fe ff40 	bl	80157c4 <_ZN8std_msgs5Int32C1Ev>
ros::Publisher pub_chassis("/odometry", &chassis_current_pose);
 8016944:	2300      	movs	r3, #0
 8016946:	4a13      	ldr	r2, [pc, #76]	@ (8016994 <_Z41__static_initialization_and_destruction_0v+0x6c>)
 8016948:	4915      	ldr	r1, [pc, #84]	@ (80169a0 <_Z41__static_initialization_and_destruction_0v+0x78>)
 801694a:	4816      	ldr	r0, [pc, #88]	@ (80169a4 <_Z41__static_initialization_and_destruction_0v+0x7c>)
 801694c:	f7fd f8b8 	bl	8013ac0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_currentStage("/current_stage", &currentStage);
 8016950:	2300      	movs	r3, #0
 8016952:	4a12      	ldr	r2, [pc, #72]	@ (801699c <_Z41__static_initialization_and_destruction_0v+0x74>)
 8016954:	4914      	ldr	r1, [pc, #80]	@ (80169a8 <_Z41__static_initialization_and_destruction_0v+0x80>)
 8016956:	4815      	ldr	r0, [pc, #84]	@ (80169ac <_Z41__static_initialization_and_destruction_0v+0x84>)
 8016958:	f7fd f8b2 	bl	8013ac0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int32> sub_chassis("/cmd_Xoffset", ROS1::callback_Xoffset);
 801695c:	2301      	movs	r3, #1
 801695e:	4a14      	ldr	r2, [pc, #80]	@ (80169b0 <_Z41__static_initialization_and_destruction_0v+0x88>)
 8016960:	4914      	ldr	r1, [pc, #80]	@ (80169b4 <_Z41__static_initialization_and_destruction_0v+0x8c>)
 8016962:	4815      	ldr	r0, [pc, #84]	@ (80169b8 <_Z41__static_initialization_and_destruction_0v+0x90>)
 8016964:	f7ff fa06 	bl	8015d74 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> sub_missionFinish("/cmd_missionFinish", ROS1::callback_missonFinish);
 8016968:	2301      	movs	r3, #1
 801696a:	4a14      	ldr	r2, [pc, #80]	@ (80169bc <_Z41__static_initialization_and_destruction_0v+0x94>)
 801696c:	4914      	ldr	r1, [pc, #80]	@ (80169c0 <_Z41__static_initialization_and_destruction_0v+0x98>)
 801696e:	4815      	ldr	r0, [pc, #84]	@ (80169c4 <_Z41__static_initialization_and_destruction_0v+0x9c>)
 8016970:	f7ff fa24 	bl	8015dbc <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_coffeeTable("/cmd_coffeeTable", ROS1::callback_coffeeTable);
 8016974:	2301      	movs	r3, #1
 8016976:	4a14      	ldr	r2, [pc, #80]	@ (80169c8 <_Z41__static_initialization_and_destruction_0v+0xa0>)
 8016978:	4914      	ldr	r1, [pc, #80]	@ (80169cc <_Z41__static_initialization_and_destruction_0v+0xa4>)
 801697a:	4815      	ldr	r0, [pc, #84]	@ (80169d0 <_Z41__static_initialization_and_destruction_0v+0xa8>)
 801697c:	f7ff f9fa 	bl	8015d74 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_CupColor("/cmd_CupColor", ROS1::callback_CupColor);
 8016980:	2301      	movs	r3, #1
 8016982:	4a14      	ldr	r2, [pc, #80]	@ (80169d4 <_Z41__static_initialization_and_destruction_0v+0xac>)
 8016984:	4914      	ldr	r1, [pc, #80]	@ (80169d8 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 8016986:	4815      	ldr	r0, [pc, #84]	@ (80169dc <_Z41__static_initialization_and_destruction_0v+0xb4>)
 8016988:	f7ff f9f4 	bl	8015d74 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
}
 801698c:	bf00      	nop
 801698e:	bd80      	pop	{r7, pc}
 8016990:	240016c8 	.word	0x240016c8
 8016994:	24003c00 	.word	0x24003c00
 8016998:	24003c50 	.word	0x24003c50
 801699c:	24003c58 	.word	0x24003c58
 80169a0:	0801c8b8 	.word	0x0801c8b8
 80169a4:	24003c60 	.word	0x24003c60
 80169a8:	0801c8c4 	.word	0x0801c8c4
 80169ac:	24003c74 	.word	0x24003c74
 80169b0:	08015ad9 	.word	0x08015ad9
 80169b4:	0801c8d4 	.word	0x0801c8d4
 80169b8:	24003c88 	.word	0x24003c88
 80169bc:	08015b05 	.word	0x08015b05
 80169c0:	0801c8e4 	.word	0x0801c8e4
 80169c4:	24003ca4 	.word	0x24003ca4
 80169c8:	08015b25 	.word	0x08015b25
 80169cc:	0801c8f8 	.word	0x0801c8f8
 80169d0:	24003cc0 	.word	0x24003cc0
 80169d4:	08015b55 	.word	0x08015b55
 80169d8:	0801c90c 	.word	0x0801c90c
 80169dc:	24003cdc 	.word	0x24003cdc

080169e0 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80169e0:	b580      	push	{r7, lr}
 80169e2:	b082      	sub	sp, #8
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	6078      	str	r0, [r7, #4]
 80169e8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	330c      	adds	r3, #12
 80169ee:	6839      	ldr	r1, [r7, #0]
 80169f0:	4618      	mov	r0, r3
 80169f2:	f7fe ffb2 	bl	801595a <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	695b      	ldr	r3, [r3, #20]
 80169fa:	687a      	ldr	r2, [r7, #4]
 80169fc:	320c      	adds	r2, #12
 80169fe:	4610      	mov	r0, r2
 8016a00:	4798      	blx	r3
  }
 8016a02:	bf00      	nop
 8016a04:	3708      	adds	r7, #8
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bd80      	pop	{r7, pc}

08016a0a <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8016a0a:	b480      	push	{r7}
 8016a0c:	b083      	sub	sp, #12
 8016a0e:	af00      	add	r7, sp, #0
 8016a10:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	699b      	ldr	r3, [r3, #24]
  }
 8016a16:	4618      	mov	r0, r3
 8016a18:	370c      	adds	r7, #12
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a20:	4770      	bx	lr

08016a22 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8016a22:	b580      	push	{r7, lr}
 8016a24:	b082      	sub	sp, #8
 8016a26:	af00      	add	r7, sp, #0
 8016a28:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	330c      	adds	r3, #12
 8016a2e:	4618      	mov	r0, r3
 8016a30:	f7fe ffb2 	bl	8015998 <_ZN8std_msgs4Bool7getTypeEv>
 8016a34:	4603      	mov	r3, r0
  }
 8016a36:	4618      	mov	r0, r3
 8016a38:	3708      	adds	r7, #8
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	bd80      	pop	{r7, pc}

08016a3e <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8016a3e:	b580      	push	{r7, lr}
 8016a40:	b082      	sub	sp, #8
 8016a42:	af00      	add	r7, sp, #0
 8016a44:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	330c      	adds	r3, #12
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	f7fe ffb2 	bl	80159b4 <_ZN8std_msgs4Bool6getMD5Ev>
 8016a50:	4603      	mov	r3, r0
  }
 8016a52:	4618      	mov	r0, r3
 8016a54:	3708      	adds	r7, #8
 8016a56:	46bd      	mov	sp, r7
 8016a58:	bd80      	pop	{r7, pc}

08016a5a <_ZN3ros10SubscriberIN8std_msgs5Int32EvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8016a5a:	b580      	push	{r7, lr}
 8016a5c:	b082      	sub	sp, #8
 8016a5e:	af00      	add	r7, sp, #0
 8016a60:	6078      	str	r0, [r7, #4]
 8016a62:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	330c      	adds	r3, #12
 8016a68:	6839      	ldr	r1, [r7, #0]
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f7fe fef2 	bl	8015854 <_ZN8std_msgs5Int3211deserializeEPh>
    this->cb_(msg);
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	695b      	ldr	r3, [r3, #20]
 8016a74:	687a      	ldr	r2, [r7, #4]
 8016a76:	320c      	adds	r2, #12
 8016a78:	4610      	mov	r0, r2
 8016a7a:	4798      	blx	r3
  }
 8016a7c:	bf00      	nop
 8016a7e:	3708      	adds	r7, #8
 8016a80:	46bd      	mov	sp, r7
 8016a82:	bd80      	pop	{r7, pc}

08016a84 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8016a84:	b480      	push	{r7}
 8016a86:	b083      	sub	sp, #12
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	699b      	ldr	r3, [r3, #24]
  }
 8016a90:	4618      	mov	r0, r3
 8016a92:	370c      	adds	r7, #12
 8016a94:	46bd      	mov	sp, r7
 8016a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9a:	4770      	bx	lr

08016a9c <_ZN3ros10SubscriberIN8std_msgs5Int32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b082      	sub	sp, #8
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	330c      	adds	r3, #12
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	f7fe ff0b 	bl	80158c4 <_ZN8std_msgs5Int327getTypeEv>
 8016aae:	4603      	mov	r3, r0
  }
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	3708      	adds	r7, #8
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	bd80      	pop	{r7, pc}

08016ab8 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b082      	sub	sp, #8
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	330c      	adds	r3, #12
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	f7fe ff0b 	bl	80158e0 <_ZN8std_msgs5Int326getMD5Ev>
 8016aca:	4603      	mov	r3, r0
  }
 8016acc:	4618      	mov	r0, r3
 8016ace:	3708      	adds	r7, #8
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	bd80      	pop	{r7, pc}

08016ad4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8016ad4:	b480      	push	{r7}
 8016ad6:	b083      	sub	sp, #12
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]
    return configured_;
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016ae2:	f893 34fc 	ldrb.w	r3, [r3, #1276]	@ 0x4fc
  };
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	370c      	adds	r7, #12
 8016aea:	46bd      	mov	sp, r7
 8016aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af0:	4770      	bx	lr

08016af2 <_GLOBAL__sub_I_nh>:
 8016af2:	b580      	push	{r7, lr}
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	f7ff ff17 	bl	8016928 <_Z41__static_initialization_and_destruction_0v>
 8016afa:	bd80      	pop	{r7, pc}

08016afc <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b082      	sub	sp, #8
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	ed87 0a01 	vstr	s0, [r7, #4]
 8016b06:	edc7 0a00 	vstr	s1, [r7]
 8016b0a:	edd7 0a00 	vldr	s1, [r7]
 8016b0e:	ed97 0a01 	vldr	s0, [r7, #4]
 8016b12:	f002 ff09 	bl	8019928 <atan2f>
 8016b16:	eef0 7a40 	vmov.f32	s15, s0
 8016b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8016b1e:	3708      	adds	r7, #8
 8016b20:	46bd      	mov	sp, r7
 8016b22:	bd80      	pop	{r7, pc}

08016b24 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8016b24:	b580      	push	{r7, lr}
 8016b26:	b082      	sub	sp, #8
 8016b28:	af00      	add	r7, sp, #0
 8016b2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8016b2e:	ed97 0a01 	vldr	s0, [r7, #4]
 8016b32:	f002 fefb 	bl	801992c <sqrtf>
 8016b36:	eef0 7a40 	vmov.f32	s15, s0
 8016b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8016b3e:	3708      	adds	r7, #8
 8016b40:	46bd      	mov	sp, r7
 8016b42:	bd80      	pop	{r7, pc}

08016b44 <_ZSt4fmaxff>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }
 8016b44:	b480      	push	{r7}
 8016b46:	b083      	sub	sp, #12
 8016b48:	af00      	add	r7, sp, #0
 8016b4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8016b4e:	edc7 0a00 	vstr	s1, [r7]
 8016b52:	edd7 7a01 	vldr	s15, [r7, #4]
 8016b56:	ed97 7a00 	vldr	s14, [r7]
 8016b5a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8016b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8016b62:	370c      	adds	r7, #12
 8016b64:	46bd      	mov	sp, r7
 8016b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b6a:	4770      	bx	lr

08016b6c <_ZN15SpeedControllerC1Ev>:

// ============ 統一速度控制系統實現 ============
SpeedController g_speed_controller;

// SpeedController 建構函式
SpeedController::SpeedController() {
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b082      	sub	sp, #8
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
    // 預設線性速度配置
    profile.max_speed = 40.0f;        // 16 cm/s 或適當單位
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	4a21      	ldr	r2, [pc, #132]	@ (8016bfc <_ZN15SpeedControllerC1Ev+0x90>)
 8016b78:	601a      	str	r2, [r3, #0]
    profile.acceleration = 10.0f;      // 8 cm/s²
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	4a20      	ldr	r2, [pc, #128]	@ (8016c00 <_ZN15SpeedControllerC1Ev+0x94>)
 8016b7e:	605a      	str	r2, [r3, #4]
    profile.deceleration = 12.0f;     // 12 cm/s² (減速比加速快)
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	4a20      	ldr	r2, [pc, #128]	@ (8016c04 <_ZN15SpeedControllerC1Ev+0x98>)
 8016b84:	609a      	str	r2, [r3, #8]
    profile.jerk_limit = 20.0f;       // 20 cm/s³
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	4a1f      	ldr	r2, [pc, #124]	@ (8016c08 <_ZN15SpeedControllerC1Ev+0x9c>)
 8016b8a:	60da      	str	r2, [r3, #12]
    profile.min_speed_ratio = 0.4f;   // 最小10%速度
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8016c0c <_ZN15SpeedControllerC1Ev+0xa0>)
 8016b90:	611a      	str	r2, [r3, #16]
    
    // 新增：預設角速度配置
    profile.max_angular_speed = 0.8f;     // 0.3 rad/s (約 17度/秒) - 降低避免振盪
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	4a1e      	ldr	r2, [pc, #120]	@ (8016c10 <_ZN15SpeedControllerC1Ev+0xa4>)
 8016b96:	615a      	str	r2, [r3, #20]
    profile.angular_acceleration = 0.8f;  // 0.3 rad/s²  - 降低加速度
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8016c10 <_ZN15SpeedControllerC1Ev+0xa4>)
 8016b9c:	619a      	str	r2, [r3, #24]
    profile.angular_deceleration = 0.8f;  // 0.8 rad/s² - 較強的減速
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8016c10 <_ZN15SpeedControllerC1Ev+0xa4>)
 8016ba2:	61da      	str	r2, [r3, #28]
    profile.angular_jerk_limit = 3.0f;    // 3 rad/s³
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8016c14 <_ZN15SpeedControllerC1Ev+0xa8>)
 8016ba8:	621a      	str	r2, [r3, #32]
    profile.angular_speed_ratio = 0.3f;   // 角速度為線速度的10%
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	4a1a      	ldr	r2, [pc, #104]	@ (8016c18 <_ZN15SpeedControllerC1Ev+0xac>)
 8016bae:	625a      	str	r2, [r3, #36]	@ 0x24
    
    // 初始化狀態
    current_speed_x = current_speed_y = current_speed_w = 0.0f;
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	f04f 0200 	mov.w	r2, #0
 8016bb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	629a      	str	r2, [r3, #40]	@ 0x28
    target_speed_x = target_speed_y = target_speed_w = 0.0f;
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f04f 0200 	mov.w	r2, #0
 8016bce:	63da      	str	r2, [r3, #60]	@ 0x3c
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	639a      	str	r2, [r3, #56]	@ 0x38
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	635a      	str	r2, [r3, #52]	@ 0x34
    last_update_time = HAL_GetTick();
 8016be0:	f7ed fc62 	bl	80044a8 <HAL_GetTick>
 8016be4:	4602      	mov	r2, r0
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	641a      	str	r2, [r3, #64]	@ 0x40
    smooth_enabled = true;
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	2201      	movs	r2, #1
 8016bee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	3708      	adds	r7, #8
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}
 8016bfc:	42200000 	.word	0x42200000
 8016c00:	41200000 	.word	0x41200000
 8016c04:	41400000 	.word	0x41400000
 8016c08:	41a00000 	.word	0x41a00000
 8016c0c:	3ecccccd 	.word	0x3ecccccd
 8016c10:	3f4ccccd 	.word	0x3f4ccccd
 8016c14:	40400000 	.word	0x40400000
 8016c18:	3e99999a 	.word	0x3e99999a

08016c1c <_ZN15SpeedController11setMaxSpeedEf>:

void SpeedController::setProfile(const SpeedProfile& new_profile) {
    profile = new_profile;
}

void SpeedController::setMaxSpeed(float max_speed) {
 8016c1c:	b480      	push	{r7}
 8016c1e:	b083      	sub	sp, #12
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
 8016c24:	ed87 0a00 	vstr	s0, [r7]
    profile.max_speed = max_speed;
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	683a      	ldr	r2, [r7, #0]
 8016c2c:	601a      	str	r2, [r3, #0]
}
 8016c2e:	bf00      	nop
 8016c30:	370c      	adds	r7, #12
 8016c32:	46bd      	mov	sp, r7
 8016c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c38:	4770      	bx	lr

08016c3a <_ZN15SpeedController16setSmoothEnabledEb>:
void SpeedController::setAcceleration(float accel, float decel) {
    profile.acceleration = accel;
    profile.deceleration = (decel > 0) ? decel : accel * 1.5f; // 預設減速比加速快50%
}

void SpeedController::setSmoothEnabled(bool enabled) {
 8016c3a:	b480      	push	{r7}
 8016c3c:	b083      	sub	sp, #12
 8016c3e:	af00      	add	r7, sp, #0
 8016c40:	6078      	str	r0, [r7, #4]
 8016c42:	460b      	mov	r3, r1
 8016c44:	70fb      	strb	r3, [r7, #3]
    smooth_enabled = enabled;
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	78fa      	ldrb	r2, [r7, #3]
 8016c4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 8016c4e:	bf00      	nop
 8016c50:	370c      	adds	r7, #12
 8016c52:	46bd      	mov	sp, r7
 8016c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c58:	4770      	bx	lr

08016c5a <_ZN15SpeedController14setTargetSpeedEfff>:

void SpeedController::setAngularSpeedRatio(float ratio) {
    profile.angular_speed_ratio = ratio;
}

void SpeedController::setTargetSpeed(float vx, float vy, float vw) {
 8016c5a:	b580      	push	{r7, lr}
 8016c5c:	b086      	sub	sp, #24
 8016c5e:	af00      	add	r7, sp, #0
 8016c60:	60f8      	str	r0, [r7, #12]
 8016c62:	ed87 0a02 	vstr	s0, [r7, #8]
 8016c66:	edc7 0a01 	vstr	s1, [r7, #4]
 8016c6a:	ed87 1a00 	vstr	s2, [r7]

    target_speed_x = vx;
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	68ba      	ldr	r2, [r7, #8]
 8016c72:	635a      	str	r2, [r3, #52]	@ 0x34
    target_speed_y = vy;
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	687a      	ldr	r2, [r7, #4]
 8016c78:	639a      	str	r2, [r3, #56]	@ 0x38
    target_speed_w = vw;
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	683a      	ldr	r2, [r7, #0]
 8016c7e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    // 限制速度在最大值內
    float speed_norm = sqrt(vx * vx + vy * vy);
 8016c80:	edd7 7a02 	vldr	s15, [r7, #8]
 8016c84:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8016c88:	edd7 7a01 	vldr	s15, [r7, #4]
 8016c8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c94:	eeb0 0a67 	vmov.f32	s0, s15
 8016c98:	f7ff ff44 	bl	8016b24 <_ZSt4sqrtf>
 8016c9c:	ed87 0a05 	vstr	s0, [r7, #20]
    if (speed_norm > profile.max_speed) {
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	edd3 7a00 	vldr	s15, [r3]
 8016ca6:	ed97 7a05 	vldr	s14, [r7, #20]
 8016caa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cb2:	dd1c      	ble.n	8016cee <_ZN15SpeedController14setTargetSpeedEfff+0x94>
        float scale = profile.max_speed / speed_norm;
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	edd3 6a00 	vldr	s13, [r3]
 8016cba:	ed97 7a05 	vldr	s14, [r7, #20]
 8016cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016cc2:	edc7 7a04 	vstr	s15, [r7, #16]
        target_speed_x *= scale;
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8016ccc:	edd7 7a04 	vldr	s15, [r7, #16]
 8016cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
        target_speed_y *= scale;
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8016ce0:	edd7 7a04 	vldr	s15, [r7, #16]
 8016ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    }    
    // 限制角速度 - 使用專門的角速度參數
    if (fabs(target_speed_w) > profile.max_angular_speed) {
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8016cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8016cf8:	f7fb fede 	bl	8012ab8 <_ZSt4fabsf>
 8016cfc:	eeb0 7a40 	vmov.f32	s14, s0
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	edd3 7a05 	vldr	s15, [r3, #20]
 8016d06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d0e:	bfcc      	ite	gt
 8016d10:	2301      	movgt	r3, #1
 8016d12:	2300      	movle	r3, #0
 8016d14:	b2db      	uxtb	r3, r3
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d013      	beq.n	8016d42 <_ZN15SpeedController14setTargetSpeedEfff+0xe8>
        target_speed_w = (target_speed_w > 0) ? profile.max_angular_speed : -profile.max_angular_speed;
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8016d20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d28:	dd03      	ble.n	8016d32 <_ZN15SpeedController14setTargetSpeedEfff+0xd8>
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	edd3 7a05 	vldr	s15, [r3, #20]
 8016d30:	e004      	b.n	8016d3c <_ZN15SpeedController14setTargetSpeedEfff+0xe2>
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	edd3 7a05 	vldr	s15, [r3, #20]
 8016d38:	eef1 7a67 	vneg.f32	s15, s15
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    }
}
 8016d42:	bf00      	nop
 8016d44:	3718      	adds	r7, #24
 8016d46:	46bd      	mov	sp, r7
 8016d48:	bd80      	pop	{r7, pc}
	...

08016d4c <_ZN15SpeedController11updateSpeedEv>:

void SpeedController::updateSpeed() {
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b08e      	sub	sp, #56	@ 0x38
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
    if (!smooth_enabled) {
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016d5a:	f083 0301 	eor.w	r3, r3, #1
 8016d5e:	b2db      	uxtb	r3, r3
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d01d      	beq.n	8016da0 <_ZN15SpeedController11updateSpeedEv+0x54>
        current_speed_x = target_speed_x;
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	629a      	str	r2, [r3, #40]	@ 0x28
        current_speed_y = target_speed_y;
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	62da      	str	r2, [r3, #44]	@ 0x2c
        current_speed_w = target_speed_w;
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	631a      	str	r2, [r3, #48]	@ 0x30
        Chassis::setSpeed(current_speed_x, current_speed_y, current_speed_w);
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8016d8e:	eeb0 1a66 	vmov.f32	s2, s13
 8016d92:	eef0 0a47 	vmov.f32	s1, s14
 8016d96:	eeb0 0a67 	vmov.f32	s0, s15
 8016d9a:	f7ea f9b7 	bl	800110c <_ZN7Chassis8setSpeedEfff>
        return;
 8016d9e:	e1b6      	b.n	801710e <_ZN15SpeedController11updateSpeedEv+0x3c2>
    }
    
    uint32_t current_time = HAL_GetTick();
 8016da0:	f7ed fb82 	bl	80044a8 <HAL_GetTick>
 8016da4:	6278      	str	r0, [r7, #36]	@ 0x24
    float dt = (current_time - last_update_time) / 1000.0f; // 轉換為秒
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016dac:	1ad3      	subs	r3, r2, r3
 8016dae:	ee07 3a90 	vmov	s15, r3
 8016db2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016db6:	eddf 6ac6 	vldr	s13, [pc, #792]	@ 80170d0 <_ZN15SpeedController11updateSpeedEv+0x384>
 8016dba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016dbe:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    last_update_time = current_time;
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016dc6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    // 防止dt過大或過小
    if (dt > 0.1f) dt = 0.1f;
 8016dc8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8016dcc:	ed9f 7ac1 	vldr	s14, [pc, #772]	@ 80170d4 <_ZN15SpeedController11updateSpeedEv+0x388>
 8016dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dd8:	dd01      	ble.n	8016dde <_ZN15SpeedController11updateSpeedEv+0x92>
 8016dda:	4bbf      	ldr	r3, [pc, #764]	@ (80170d8 <_ZN15SpeedController11updateSpeedEv+0x38c>)
 8016ddc:	637b      	str	r3, [r7, #52]	@ 0x34
    if (dt < 0.001f) dt = 0.001f;
 8016dde:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8016de2:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 80170dc <_ZN15SpeedController11updateSpeedEv+0x390>
 8016de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dee:	d501      	bpl.n	8016df4 <_ZN15SpeedController11updateSpeedEv+0xa8>
 8016df0:	4bbb      	ldr	r3, [pc, #748]	@ (80170e0 <_ZN15SpeedController11updateSpeedEv+0x394>)
 8016df2:	637b      	str	r3, [r7, #52]	@ 0x34
    
    // 計算速度差值
    float dx_speed = target_speed_x - current_speed_x;
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8016e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e04:	edc7 7a08 	vstr	s15, [r7, #32]
    float dy_speed = target_speed_y - current_speed_y;
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8016e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e18:	edc7 7a07 	vstr	s15, [r7, #28]
    float dw_speed = target_speed_w - current_speed_w;
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8016e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e2c:	edc7 7a06 	vstr	s15, [r7, #24]
    
    // 計算最大允許的速度變化量
    float max_accel_change = profile.acceleration * dt;
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	edd3 7a01 	vldr	s15, [r3, #4]
 8016e36:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8016e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016e3e:	edc7 7a05 	vstr	s15, [r7, #20]
    float max_decel_change = profile.deceleration * dt;
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	edd3 7a02 	vldr	s15, [r3, #8]
 8016e48:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8016e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016e50:	edc7 7a04 	vstr	s15, [r7, #16]
    
    // 計算最大允許的角速度變化量
    float max_angular_accel_change = profile.angular_acceleration * dt;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	edd3 7a06 	vldr	s15, [r3, #24]
 8016e5a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8016e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016e62:	edc7 7a03 	vstr	s15, [r7, #12]
    float max_angular_decel_change = profile.angular_deceleration * dt;
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	edd3 7a07 	vldr	s15, [r3, #28]
 8016e6c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8016e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016e74:	edc7 7a02 	vstr	s15, [r7, #8]
    
    // X軸速度更新
    if (fabs(dx_speed) > max_accel_change) {
 8016e78:	ed97 0a08 	vldr	s0, [r7, #32]
 8016e7c:	f7fb fe1c 	bl	8012ab8 <_ZSt4fabsf>
 8016e80:	eeb0 7a40 	vmov.f32	s14, s0
 8016e84:	edd7 7a05 	vldr	s15, [r7, #20]
 8016e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e90:	bf4c      	ite	mi
 8016e92:	2301      	movmi	r3, #1
 8016e94:	2300      	movpl	r3, #0
 8016e96:	b2db      	uxtb	r3, r3
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d04e      	beq.n	8016f3a <_ZN15SpeedController11updateSpeedEv+0x1ee>
        float max_change = (dx_speed > 0) ? max_accel_change : -max_accel_change;
 8016e9c:	edd7 7a08 	vldr	s15, [r7, #32]
 8016ea0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ea8:	dd02      	ble.n	8016eb0 <_ZN15SpeedController11updateSpeedEv+0x164>
 8016eaa:	edd7 7a05 	vldr	s15, [r7, #20]
 8016eae:	e003      	b.n	8016eb8 <_ZN15SpeedController11updateSpeedEv+0x16c>
 8016eb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8016eb4:	eef1 7a67 	vneg.f32	s15, s15
 8016eb8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        // 如果是減速，使用更大的變化量
        if ((dx_speed > 0 && current_speed_x > target_speed_x) || 
 8016ebc:	edd7 7a08 	vldr	s15, [r7, #32]
 8016ec0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ec8:	dd0a      	ble.n	8016ee0 <_ZN15SpeedController11updateSpeedEv+0x194>
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8016ed6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ede:	dc11      	bgt.n	8016f04 <_ZN15SpeedController11updateSpeedEv+0x1b8>
 8016ee0:	edd7 7a08 	vldr	s15, [r7, #32]
 8016ee4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016eec:	d51a      	bpl.n	8016f24 <_ZN15SpeedController11updateSpeedEv+0x1d8>
            (dx_speed < 0 && current_speed_x < target_speed_x)) {
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8016efa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f02:	d50f      	bpl.n	8016f24 <_ZN15SpeedController11updateSpeedEv+0x1d8>
            max_change = (dx_speed > 0) ? max_decel_change : -max_decel_change;
 8016f04:	edd7 7a08 	vldr	s15, [r7, #32]
 8016f08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f10:	dd02      	ble.n	8016f18 <_ZN15SpeedController11updateSpeedEv+0x1cc>
 8016f12:	edd7 7a04 	vldr	s15, [r7, #16]
 8016f16:	e003      	b.n	8016f20 <_ZN15SpeedController11updateSpeedEv+0x1d4>
 8016f18:	edd7 7a04 	vldr	s15, [r7, #16]
 8016f1c:	eef1 7a67 	vneg.f32	s15, s15
 8016f20:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        }
        current_speed_x += max_change;
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8016f2a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8016f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 8016f38:	e003      	b.n	8016f42 <_ZN15SpeedController11updateSpeedEv+0x1f6>
    } else {
        current_speed_x = target_speed_x;
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    
    // Y軸速度更新
    if (fabs(dy_speed) > max_accel_change) {
 8016f42:	ed97 0a07 	vldr	s0, [r7, #28]
 8016f46:	f7fb fdb7 	bl	8012ab8 <_ZSt4fabsf>
 8016f4a:	eeb0 7a40 	vmov.f32	s14, s0
 8016f4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8016f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f5a:	bf4c      	ite	mi
 8016f5c:	2301      	movmi	r3, #1
 8016f5e:	2300      	movpl	r3, #0
 8016f60:	b2db      	uxtb	r3, r3
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d04e      	beq.n	8017004 <_ZN15SpeedController11updateSpeedEv+0x2b8>
        float max_change = (dy_speed > 0) ? max_accel_change : -max_accel_change;
 8016f66:	edd7 7a07 	vldr	s15, [r7, #28]
 8016f6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f72:	dd02      	ble.n	8016f7a <_ZN15SpeedController11updateSpeedEv+0x22e>
 8016f74:	edd7 7a05 	vldr	s15, [r7, #20]
 8016f78:	e003      	b.n	8016f82 <_ZN15SpeedController11updateSpeedEv+0x236>
 8016f7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8016f7e:	eef1 7a67 	vneg.f32	s15, s15
 8016f82:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        if ((dy_speed > 0 && current_speed_y > target_speed_y) || 
 8016f86:	edd7 7a07 	vldr	s15, [r7, #28]
 8016f8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f92:	dd0a      	ble.n	8016faa <_ZN15SpeedController11updateSpeedEv+0x25e>
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8016fa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fa8:	dc11      	bgt.n	8016fce <_ZN15SpeedController11updateSpeedEv+0x282>
 8016faa:	edd7 7a07 	vldr	s15, [r7, #28]
 8016fae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fb6:	d51a      	bpl.n	8016fee <_ZN15SpeedController11updateSpeedEv+0x2a2>
            (dy_speed < 0 && current_speed_y < target_speed_y)) {
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8016fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fcc:	d50f      	bpl.n	8016fee <_ZN15SpeedController11updateSpeedEv+0x2a2>
            max_change = (dy_speed > 0) ? max_decel_change : -max_decel_change;
 8016fce:	edd7 7a07 	vldr	s15, [r7, #28]
 8016fd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fda:	dd02      	ble.n	8016fe2 <_ZN15SpeedController11updateSpeedEv+0x296>
 8016fdc:	edd7 7a04 	vldr	s15, [r7, #16]
 8016fe0:	e003      	b.n	8016fea <_ZN15SpeedController11updateSpeedEv+0x29e>
 8016fe2:	edd7 7a04 	vldr	s15, [r7, #16]
 8016fe6:	eef1 7a67 	vneg.f32	s15, s15
 8016fea:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }
        current_speed_y += max_change;
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8016ff4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8016ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8017002:	e003      	b.n	801700c <_ZN15SpeedController11updateSpeedEv+0x2c0>
    } else {
        current_speed_y = target_speed_y;
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    // 角速度更新 - 使用專門的角速度加減速參數
    if (fabs(dw_speed) > max_angular_accel_change) {
 801700c:	ed97 0a06 	vldr	s0, [r7, #24]
 8017010:	f7fb fd52 	bl	8012ab8 <_ZSt4fabsf>
 8017014:	eeb0 7a40 	vmov.f32	s14, s0
 8017018:	edd7 7a03 	vldr	s15, [r7, #12]
 801701c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017024:	bf4c      	ite	mi
 8017026:	2301      	movmi	r3, #1
 8017028:	2300      	movpl	r3, #0
 801702a:	b2db      	uxtb	r3, r3
 801702c:	2b00      	cmp	r3, #0
 801702e:	d059      	beq.n	80170e4 <_ZN15SpeedController11updateSpeedEv+0x398>
        float max_angular_change = (dw_speed > 0) ? max_angular_accel_change : -max_angular_accel_change;
 8017030:	edd7 7a06 	vldr	s15, [r7, #24]
 8017034:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801703c:	dd02      	ble.n	8017044 <_ZN15SpeedController11updateSpeedEv+0x2f8>
 801703e:	edd7 7a03 	vldr	s15, [r7, #12]
 8017042:	e003      	b.n	801704c <_ZN15SpeedController11updateSpeedEv+0x300>
 8017044:	edd7 7a03 	vldr	s15, [r7, #12]
 8017048:	eef1 7a67 	vneg.f32	s15, s15
 801704c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        // 如果是角減速，使用更大的變化量
        if ((dw_speed > 0 && current_speed_w > target_speed_w) || 
 8017050:	edd7 7a06 	vldr	s15, [r7, #24]
 8017054:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801705c:	dd0a      	ble.n	8017074 <_ZN15SpeedController11updateSpeedEv+0x328>
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 801706a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801706e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017072:	dc11      	bgt.n	8017098 <_ZN15SpeedController11updateSpeedEv+0x34c>
 8017074:	edd7 7a06 	vldr	s15, [r7, #24]
 8017078:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801707c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017080:	d51a      	bpl.n	80170b8 <_ZN15SpeedController11updateSpeedEv+0x36c>
            (dw_speed < 0 && current_speed_w < target_speed_w)) {
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 801708e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017096:	d50f      	bpl.n	80170b8 <_ZN15SpeedController11updateSpeedEv+0x36c>
            max_angular_change = (dw_speed > 0) ? max_angular_decel_change : -max_angular_decel_change;
 8017098:	edd7 7a06 	vldr	s15, [r7, #24]
 801709c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80170a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170a4:	dd02      	ble.n	80170ac <_ZN15SpeedController11updateSpeedEv+0x360>
 80170a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80170aa:	e003      	b.n	80170b4 <_ZN15SpeedController11updateSpeedEv+0x368>
 80170ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80170b0:	eef1 7a67 	vneg.f32	s15, s15
 80170b4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        }
        current_speed_w += max_angular_change;
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80170be:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80170c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 80170cc:	e00e      	b.n	80170ec <_ZN15SpeedController11updateSpeedEv+0x3a0>
 80170ce:	bf00      	nop
 80170d0:	447a0000 	.word	0x447a0000
 80170d4:	3dcccccd 	.word	0x3dcccccd
 80170d8:	3dcccccd 	.word	0x3dcccccd
 80170dc:	3a83126f 	.word	0x3a83126f
 80170e0:	3a83126f 	.word	0x3a83126f
    } else {
        current_speed_w = target_speed_w;
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    // 輸出到底盤控制
    Chassis::setSpeed(current_speed_x, current_speed_y, current_speed_w);
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80170fe:	eeb0 1a66 	vmov.f32	s2, s13
 8017102:	eef0 0a47 	vmov.f32	s1, s14
 8017106:	eeb0 0a67 	vmov.f32	s0, s15
 801710a:	f7e9 ffff 	bl	800110c <_ZN7Chassis8setSpeedEfff>
}
 801710e:	3738      	adds	r7, #56	@ 0x38
 8017110:	46bd      	mov	sp, r7
 8017112:	bd80      	pop	{r7, pc}
 8017114:	0000      	movs	r0, r0
	...

08017118 <_ZN15SpeedController24calculateTrajectorySpeedEff>:
    vx = current_speed_x;
    vy = current_speed_y;
    vw = current_speed_w;
}

void SpeedController::calculateTrajectorySpeed(float distance_remaining, float total_distance) {
 8017118:	b580      	push	{r7, lr}
 801711a:	ed2d 8b04 	vpush	{d8-d9}
 801711e:	b08a      	sub	sp, #40	@ 0x28
 8017120:	af00      	add	r7, sp, #0
 8017122:	60f8      	str	r0, [r7, #12]
 8017124:	ed87 0a02 	vstr	s0, [r7, #8]
 8017128:	edc7 0a01 	vstr	s1, [r7, #4]
    if (total_distance <= 0) return;
 801712c:	edd7 7a01 	vldr	s15, [r7, #4]
 8017130:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017138:	f240 80e5 	bls.w	8017306 <_ZN15SpeedController24calculateTrajectorySpeedEff+0x1ee>
    
    float progress = 1.0f - (distance_remaining / total_distance);
 801713c:	edd7 6a02 	vldr	s13, [r7, #8]
 8017140:	ed97 7a01 	vldr	s14, [r7, #4]
 8017144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017148:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801714c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017150:	edc7 7a08 	vstr	s15, [r7, #32]
    float speed_scale = 1.0f;
 8017154:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8017158:	627b      	str	r3, [r7, #36]	@ 0x24
    
    // 三階段速度控制：加速(30%) - 恆速(40%) - 減速(30%)
    if (progress < 0.3f) {
 801715a:	edd7 7a08 	vldr	s15, [r7, #32]
 801715e:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8017320 <_ZN15SpeedController24calculateTrajectorySpeedEff+0x208>
 8017162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801716a:	d534      	bpl.n	80171d6 <_ZN15SpeedController24calculateTrajectorySpeedEff+0xbe>
        // 加速階段 - 使用S曲線
        float accel_progress = progress / 0.3f;
 801716c:	ed97 7a08 	vldr	s14, [r7, #32]
 8017170:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8017320 <_ZN15SpeedController24calculateTrajectorySpeedEff+0x208>
 8017174:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017178:	edc7 7a06 	vstr	s15, [r7, #24]
        speed_scale = profile.min_speed_ratio + 
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	edd3 7a04 	vldr	s15, [r3, #16]
 8017182:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
                     (1.0f - profile.min_speed_ratio) * (0.5f * (1.0f - cos(accel_progress * pi)));
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	edd3 7a04 	vldr	s15, [r3, #16]
 801718c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017194:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8017198:	edd7 7a06 	vldr	s15, [r7, #24]
 801719c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80171a0:	ed9f 6b5d 	vldr	d6, [pc, #372]	@ 8017318 <_ZN15SpeedController24calculateTrajectorySpeedEff+0x200>
 80171a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80171a8:	eeb0 0b47 	vmov.f64	d0, d7
 80171ac:	f002 fb70 	bl	8019890 <cos>
 80171b0:	eeb0 7b40 	vmov.f64	d7, d0
 80171b4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80171b8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80171bc:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80171c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80171c4:	ee29 7b07 	vmul.f64	d7, d9, d7
        speed_scale = profile.min_speed_ratio + 
 80171c8:	ee38 7b07 	vadd.f64	d7, d8, d7
 80171cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80171d0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 80171d4:	e044      	b.n	8017260 <_ZN15SpeedController24calculateTrajectorySpeedEff+0x148>
    } else if (progress > 0.7f) {
 80171d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80171da:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8017324 <_ZN15SpeedController24calculateTrajectorySpeedEff+0x20c>
 80171de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80171e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171e6:	dd38      	ble.n	801725a <_ZN15SpeedController24calculateTrajectorySpeedEff+0x142>
        // 減速階段 - 使用S曲線
        float decel_progress = (progress - 0.7f) / 0.3f;
 80171e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80171ec:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8017324 <_ZN15SpeedController24calculateTrajectorySpeedEff+0x20c>
 80171f0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80171f4:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8017320 <_ZN15SpeedController24calculateTrajectorySpeedEff+0x208>
 80171f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80171fc:	edc7 7a07 	vstr	s15, [r7, #28]
        speed_scale = profile.min_speed_ratio + 
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	edd3 7a04 	vldr	s15, [r3, #16]
 8017206:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
                     (1.0f - profile.min_speed_ratio) * (0.5f * (1.0f + cos(decel_progress * pi)));
 801720a:	68fb      	ldr	r3, [r7, #12]
 801720c:	edd3 7a04 	vldr	s15, [r3, #16]
 8017210:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017218:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 801721c:	edd7 7a07 	vldr	s15, [r7, #28]
 8017220:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017224:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 8017318 <_ZN15SpeedController24calculateTrajectorySpeedEff+0x200>
 8017228:	ee27 7b06 	vmul.f64	d7, d7, d6
 801722c:	eeb0 0b47 	vmov.f64	d0, d7
 8017230:	f002 fb2e 	bl	8019890 <cos>
 8017234:	eeb0 7b40 	vmov.f64	d7, d0
 8017238:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801723c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017240:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8017244:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017248:	ee29 7b07 	vmul.f64	d7, d9, d7
        speed_scale = profile.min_speed_ratio + 
 801724c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8017250:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017254:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8017258:	e002      	b.n	8017260 <_ZN15SpeedController24calculateTrajectorySpeedEff+0x148>
    } else {
        // 恆速階段
        speed_scale = 1.0f;
 801725a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801725e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    
    // 確保速度不低於最小值
    speed_scale = fmax(speed_scale, profile.min_speed_ratio);
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	edd3 7a04 	vldr	s15, [r3, #16]
 8017266:	eef0 0a67 	vmov.f32	s1, s15
 801726a:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 801726e:	f7ff fc69 	bl	8016b44 <_ZSt4fmaxff>
 8017272:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    
    // 更新目標速度（保持當前方向，只調整大小）
    float current_norm = sqrt(target_speed_x * target_speed_x + target_speed_y * target_speed_y);
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8017282:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8017292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017296:	ee77 7a27 	vadd.f32	s15, s14, s15
 801729a:	eeb0 0a67 	vmov.f32	s0, s15
 801729e:	f7ff fc41 	bl	8016b24 <_ZSt4sqrtf>
 80172a2:	ed87 0a05 	vstr	s0, [r7, #20]
    if (current_norm > 0.01f) {
 80172a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80172aa:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8017328 <_ZN15SpeedController24calculateTrajectorySpeedEff+0x210>
 80172ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80172b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172b6:	dd27      	ble.n	8017308 <_ZN15SpeedController24calculateTrajectorySpeedEff+0x1f0>
        target_speed_x = (target_speed_x / current_norm) * profile.max_speed * speed_scale;
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80172be:	edd7 7a05 	vldr	s15, [r7, #20]
 80172c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	edd3 7a00 	vldr	s15, [r3]
 80172cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80172d0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80172d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
        target_speed_y = (target_speed_y / current_norm) * profile.max_speed * speed_scale;
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 80172e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80172e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	edd3 7a00 	vldr	s15, [r3]
 80172f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80172f6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80172fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
 8017304:	e000      	b.n	8017308 <_ZN15SpeedController24calculateTrajectorySpeedEff+0x1f0>
    if (total_distance <= 0) return;
 8017306:	bf00      	nop
    }
}
 8017308:	3728      	adds	r7, #40	@ 0x28
 801730a:	46bd      	mov	sp, r7
 801730c:	ecbd 8b04 	vpop	{d8-d9}
 8017310:	bd80      	pop	{r7, pc}
 8017312:	bf00      	nop
 8017314:	f3af 8000 	nop.w
 8017318:	54442d18 	.word	0x54442d18
 801731c:	400921fb 	.word	0x400921fb
 8017320:	3e99999a 	.word	0x3e99999a
 8017324:	3f333333 	.word	0x3f333333
 8017328:	3c23d70a 	.word	0x3c23d70a

0801732c <_ZN15SpeedController4stopEv>:
    
    // 自動限速
    setTargetSpeed(target_speed_x, target_speed_y, target_speed_w);
}

void SpeedController::stop() {
 801732c:	b580      	push	{r7, lr}
 801732e:	b082      	sub	sp, #8
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
    target_speed_x = target_speed_y = target_speed_w = 0.0f;
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	f04f 0200 	mov.w	r2, #0
 801733a:	63da      	str	r2, [r3, #60]	@ 0x3c
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	639a      	str	r2, [r3, #56]	@ 0x38
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (!smooth_enabled) {
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017352:	f083 0301 	eor.w	r3, r3, #1
 8017356:	b2db      	uxtb	r3, r3
 8017358:	2b00      	cmp	r3, #0
 801735a:	d013      	beq.n	8017384 <_ZN15SpeedController4stopEv+0x58>
        current_speed_x = current_speed_y = current_speed_w = 0.0f;
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	f04f 0200 	mov.w	r2, #0
 8017362:	631a      	str	r2, [r3, #48]	@ 0x30
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	629a      	str	r2, [r3, #40]	@ 0x28
        Chassis::setSpeed(0, 0, 0);
 8017374:	ed9f 1a05 	vldr	s2, [pc, #20]	@ 801738c <_ZN15SpeedController4stopEv+0x60>
 8017378:	eddf 0a04 	vldr	s1, [pc, #16]	@ 801738c <_ZN15SpeedController4stopEv+0x60>
 801737c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 801738c <_ZN15SpeedController4stopEv+0x60>
 8017380:	f7e9 fec4 	bl	800110c <_ZN7Chassis8setSpeedEfff>
    }
}
 8017384:	bf00      	nop
 8017386:	3708      	adds	r7, #8
 8017388:	46bd      	mov	sp, r7
 801738a:	bd80      	pop	{r7, pc}
 801738c:	00000000 	.word	0x00000000

08017390 <_Z7achievev>:

void set_moveMode(int mode){
    moveMode_flag = mode;
}

bool achieve(){
 8017390:	b480      	push	{r7}
 8017392:	af00      	add	r7, sp, #0
    achieve_flag = true;
 8017394:	4b04      	ldr	r3, [pc, #16]	@ (80173a8 <_Z7achievev+0x18>)
 8017396:	2201      	movs	r2, #1
 8017398:	701a      	strb	r2, [r3, #0]
    return achieve_flag;
 801739a:	4b03      	ldr	r3, [pc, #12]	@ (80173a8 <_Z7achievev+0x18>)
 801739c:	781b      	ldrb	r3, [r3, #0]
}
 801739e:	4618      	mov	r0, r3
 80173a0:	46bd      	mov	sp, r7
 80173a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a6:	4770      	bx	lr
 80173a8:	24003d7c 	.word	0x24003d7c

080173ac <_Z3achv>:

bool ach(){
 80173ac:	b480      	push	{r7}
 80173ae:	af00      	add	r7, sp, #0
    ach_check++;
 80173b0:	4b05      	ldr	r3, [pc, #20]	@ (80173c8 <_Z3achv+0x1c>)
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	3301      	adds	r3, #1
 80173b6:	4a04      	ldr	r2, [pc, #16]	@ (80173c8 <_Z3achv+0x1c>)
 80173b8:	6013      	str	r3, [r2, #0]
    return achieve_flag;
 80173ba:	4b04      	ldr	r3, [pc, #16]	@ (80173cc <_Z3achv+0x20>)
 80173bc:	781b      	ldrb	r3, [r3, #0]
}
 80173be:	4618      	mov	r0, r3
 80173c0:	46bd      	mov	sp, r7
 80173c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c6:	4770      	bx	lr
 80173c8:	24003da4 	.word	0x24003da4
 80173cc:	24003d7c 	.word	0x24003d7c

080173d0 <_Z12missioncheckv>:
bool missioncheck(){
 80173d0:	b480      	push	{r7}
 80173d2:	af00      	add	r7, sp, #0
    return mission_flag;
 80173d4:	4b03      	ldr	r3, [pc, #12]	@ (80173e4 <_Z12missioncheckv+0x14>)
 80173d6:	781b      	ldrb	r3, [r3, #0]
}
 80173d8:	4618      	mov	r0, r3
 80173da:	46bd      	mov	sp, r7
 80173dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e0:	4770      	bx	lr
 80173e2:	bf00      	nop
 80173e4:	240001e0 	.word	0x240001e0

080173e8 <_Z4stopv>:
        }
    }
    return false;
}

void stop(){
 80173e8:	b580      	push	{r7, lr}
 80173ea:	af00      	add	r7, sp, #0
    // 使用統一速度控制器停止
    g_speed_controller.stop();
 80173ec:	4805      	ldr	r0, [pc, #20]	@ (8017404 <_Z4stopv+0x1c>)
 80173ee:	f7ff ff9d 	bl	801732c <_ZN15SpeedController4stopEv>
    g_speed_controller.updateSpeed();
 80173f2:	4804      	ldr	r0, [pc, #16]	@ (8017404 <_Z4stopv+0x1c>)
 80173f4:	f7ff fcaa 	bl	8016d4c <_ZN15SpeedController11updateSpeedEv>
    
    moveMode_flag = 0;
 80173f8:	4b03      	ldr	r3, [pc, #12]	@ (8017408 <_Z4stopv+0x20>)
 80173fa:	2200      	movs	r2, #0
 80173fc:	601a      	str	r2, [r3, #0]
}
 80173fe:	bf00      	nop
 8017400:	bd80      	pop	{r7, pc}
 8017402:	bf00      	nop
 8017404:	24003cfc 	.word	0x24003cfc
 8017408:	24003d78 	.word	0x24003d78
 801740c:	00000000 	.word	0x00000000

08017410 <_Z8moveModei>:

void moveMode(int mode) {
 8017410:	b580      	push	{r7, lr}
 8017412:	b082      	sub	sp, #8
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
    switch (mode) {
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	2b06      	cmp	r3, #6
 801741c:	d840      	bhi.n	80174a0 <_Z8moveModei+0x90>
 801741e:	a201      	add	r2, pc, #4	@ (adr r2, 8017424 <_Z8moveModei+0x14>)
 8017420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017424:	08017441 	.word	0x08017441
 8017428:	08017447 	.word	0x08017447
 801742c:	08017483 	.word	0x08017483
 8017430:	08017489 	.word	0x08017489
 8017434:	0801748f 	.word	0x0801748f
 8017438:	08017495 	.word	0x08017495
 801743c:	0801749b 	.word	0x0801749b
        case 0: // stop
            stop();
 8017440:	f7ff ffd2 	bl	80173e8 <_Z4stopv>
            break;
 8017444:	e02d      	b.n	80174a2 <_Z8moveModei+0x92>
        case 1: // move to a point without integral control
            integral_move_to(goal_x, goal_y, goal_theta * 180 / pi);//
 8017446:	4b1c      	ldr	r3, [pc, #112]	@ (80174b8 <_Z8moveModei+0xa8>)
 8017448:	edd3 4a00 	vldr	s9, [r3]
 801744c:	4b1b      	ldr	r3, [pc, #108]	@ (80174bc <_Z8moveModei+0xac>)
 801744e:	ed93 4a00 	vldr	s8, [r3]
 8017452:	4b1b      	ldr	r3, [pc, #108]	@ (80174c0 <_Z8moveModei+0xb0>)
 8017454:	edd3 7a00 	vldr	s15, [r3]
 8017458:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80174c4 <_Z8moveModei+0xb4>
 801745c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017460:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8017464:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80174b0 <_Z8moveModei+0xa0>
 8017468:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801746c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017470:	eeb0 1a67 	vmov.f32	s2, s15
 8017474:	eef0 0a44 	vmov.f32	s1, s8
 8017478:	eeb0 0a64 	vmov.f32	s0, s9
 801747c:	f000 fd3c 	bl	8017ef8 <_Z16integral_move_tofff>
            break;
 8017480:	e00f      	b.n	80174a2 <_Z8moveModei+0x92>
        case 2: // follow path for a distance
            path_moveDis();
 8017482:	f000 f82d 	bl	80174e0 <_Z12path_moveDisv>
            break;
 8017486:	e00c      	b.n	80174a2 <_Z8moveModei+0x92>
        case 3: // direct move till find line
            directMove_findLine();
 8017488:	f000 f8f4 	bl	8017674 <_Z19directMove_findLinev>
            break;
 801748c:	e009      	b.n	80174a2 <_Z8moveModei+0x92>
        case 4: // move straight or rotate
        	direct_moveDistance();
 801748e:	f000 f91b 	bl	80176c8 <_Z19direct_moveDistancev>
            break;
 8017492:	e006      	b.n	80174a2 <_Z8moveModei+0x92>
        case 5:
            path_findLine();
 8017494:	f000 fa22 	bl	80178dc <_Z13path_findLinev>
            break;
 8017498:	e003      	b.n	80174a2 <_Z8moveModei+0x92>
        case 6:
            moveDistance(); // 新增：等速率移動功能
 801749a:	f000 fa3d 	bl	8017918 <_Z12moveDistancev>
            break;
 801749e:	e000      	b.n	80174a2 <_Z8moveModei+0x92>
        default:
        	break;
 80174a0:	bf00      	nop
    }
}
 80174a2:	bf00      	nop
 80174a4:	3708      	adds	r7, #8
 80174a6:	46bd      	mov	sp, r7
 80174a8:	bd80      	pop	{r7, pc}
 80174aa:	bf00      	nop
 80174ac:	f3af 8000 	nop.w
 80174b0:	54442d18 	.word	0x54442d18
 80174b4:	400921fb 	.word	0x400921fb
 80174b8:	24003d6c 	.word	0x24003d6c
 80174bc:	24003d70 	.word	0x24003d70
 80174c0:	24003d74 	.word	0x24003d74
 80174c4:	43340000 	.word	0x43340000

080174c8 <_Z10followPathi>:
        // 同時更新 Chassis::updateSpeed() 以保持相容性
        Chassis::updateSpeed();
    }
}

void followPath(int path_dir) { // follow path for mecanum chassis - 使用原來的控制方式
 80174c8:	b580      	push	{r7, lr}
 80174ca:	b082      	sub	sp, #8
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	6078      	str	r0, [r7, #4]
    // 直接調用原來的 weight 函數進行尋跡控制
    // 這樣可以避免 SpeedController 的加減速影響尋跡性能
    weight(path_dir);
 80174d0:	6878      	ldr	r0, [r7, #4]
 80174d2:	f001 fa23 	bl	801891c <_Z6weighti>
}
 80174d6:	bf00      	nop
 80174d8:	3708      	adds	r7, #8
 80174da:	46bd      	mov	sp, r7
 80174dc:	bd80      	pop	{r7, pc}
	...

080174e0 <_Z12path_moveDisv>:

void path_moveDis() {
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b084      	sub	sp, #16
 80174e4:	af00      	add	r7, sp, #0
    float dx = map_x - start_x;
 80174e6:	4b20      	ldr	r3, [pc, #128]	@ (8017568 <_Z12path_moveDisv+0x88>)
 80174e8:	ed93 7a00 	vldr	s14, [r3]
 80174ec:	4b1f      	ldr	r3, [pc, #124]	@ (801756c <_Z12path_moveDisv+0x8c>)
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	ee07 3a90 	vmov	s15, r3
 80174f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80174f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80174fc:	edc7 7a03 	vstr	s15, [r7, #12]
    float dy = map_y - start_y;
 8017500:	4b1b      	ldr	r3, [pc, #108]	@ (8017570 <_Z12path_moveDisv+0x90>)
 8017502:	ed93 7a00 	vldr	s14, [r3]
 8017506:	4b1b      	ldr	r3, [pc, #108]	@ (8017574 <_Z12path_moveDisv+0x94>)
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	ee07 3a90 	vmov	s15, r3
 801750e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017512:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017516:	edc7 7a02 	vstr	s15, [r7, #8]
    float travel_distance = sqrtf(dx * dx + dy * dy);
 801751a:	edd7 7a03 	vldr	s15, [r7, #12]
 801751e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8017522:	edd7 7a02 	vldr	s15, [r7, #8]
 8017526:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801752a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801752e:	eeb0 0a67 	vmov.f32	s0, s15
 8017532:	f002 f9fb 	bl	801992c <sqrtf>
 8017536:	ed87 0a01 	vstr	s0, [r7, #4]
    
    if (travel_distance <= path_dis) {
 801753a:	4b0f      	ldr	r3, [pc, #60]	@ (8017578 <_Z12path_moveDisv+0x98>)
 801753c:	edd3 7a00 	vldr	s15, [r3]
 8017540:	ed97 7a01 	vldr	s14, [r7, #4]
 8017544:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801754c:	d805      	bhi.n	801755a <_Z12path_moveDisv+0x7a>
        // 使用原來的尋跡控制方式，不套用 SpeedController 的加減速
        followPath(path_dir);
 801754e:	4b0b      	ldr	r3, [pc, #44]	@ (801757c <_Z12path_moveDisv+0x9c>)
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	4618      	mov	r0, r3
 8017554:	f7ff ffb8 	bl	80174c8 <_Z10followPathi>
        return;
 8017558:	e003      	b.n	8017562 <_Z12path_moveDisv+0x82>
    }
    else {
        // 停止並標記完成
        stop(); // 使用原來的 stop() 函式
 801755a:	f7ff ff45 	bl	80173e8 <_Z4stopv>
        achieve(); // Mark as achieved
 801755e:	f7ff ff17 	bl	8017390 <_Z7achievev>
    }
}
 8017562:	3710      	adds	r7, #16
 8017564:	46bd      	mov	sp, r7
 8017566:	bd80      	pop	{r7, pc}
 8017568:	240002ac 	.word	0x240002ac
 801756c:	24003d94 	.word	0x24003d94
 8017570:	240002b0 	.word	0x240002b0
 8017574:	24003d98 	.word	0x24003d98
 8017578:	24003d88 	.word	0x24003d88
 801757c:	24003d90 	.word	0x24003d90

08017580 <_Z11direct_moveif>:

void direct_move(int direction, float speed) {
 8017580:	b580      	push	{r7, lr}
 8017582:	b084      	sub	sp, #16
 8017584:	af00      	add	r7, sp, #0
 8017586:	6078      	str	r0, [r7, #4]
 8017588:	ed87 0a00 	vstr	s0, [r7]
    // 設定基準速度（可從外部配置）
    float base_linear_speed = speed;  // 使用傳入的速度參數
 801758c:	683b      	ldr	r3, [r7, #0]
 801758e:	60fb      	str	r3, [r7, #12]
    float base_angular_speed = speed * 0.1f; // 角速度為線速度的10%
 8017590:	edd7 7a00 	vldr	s15, [r7]
 8017594:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8017668 <_Z11direct_moveif+0xe8>
 8017598:	ee67 7a87 	vmul.f32	s15, s15, s14
 801759c:	edc7 7a02 	vstr	s15, [r7, #8]

    switch (direction) {
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	2b05      	cmp	r3, #5
 80175a4:	d856      	bhi.n	8017654 <_Z11direct_moveif+0xd4>
 80175a6:	a201      	add	r2, pc, #4	@ (adr r2, 80175ac <_Z11direct_moveif+0x2c>)
 80175a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175ac:	080175c5 	.word	0x080175c5
 80175b0:	080175d9 	.word	0x080175d9
 80175b4:	080175f5 	.word	0x080175f5
 80175b8:	08017609 	.word	0x08017609
 80175bc:	08017625 	.word	0x08017625
 80175c0:	08017639 	.word	0x08017639
        case 0: // Move forward
            g_speed_controller.setTargetSpeed(0, base_linear_speed, 0);
 80175c4:	ed9f 1a29 	vldr	s2, [pc, #164]	@ 801766c <_Z11direct_moveif+0xec>
 80175c8:	edd7 0a03 	vldr	s1, [r7, #12]
 80175cc:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 801766c <_Z11direct_moveif+0xec>
 80175d0:	4827      	ldr	r0, [pc, #156]	@ (8017670 <_Z11direct_moveif+0xf0>)
 80175d2:	f7ff fb42 	bl	8016c5a <_ZN15SpeedController14setTargetSpeedEfff>
            break;
 80175d6:	e040      	b.n	801765a <_Z11direct_moveif+0xda>
        case 1: // Move backward
            g_speed_controller.setTargetSpeed(0, -base_linear_speed, 0);
 80175d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80175dc:	eef1 7a67 	vneg.f32	s15, s15
 80175e0:	ed9f 1a22 	vldr	s2, [pc, #136]	@ 801766c <_Z11direct_moveif+0xec>
 80175e4:	eef0 0a67 	vmov.f32	s1, s15
 80175e8:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 801766c <_Z11direct_moveif+0xec>
 80175ec:	4820      	ldr	r0, [pc, #128]	@ (8017670 <_Z11direct_moveif+0xf0>)
 80175ee:	f7ff fb34 	bl	8016c5a <_ZN15SpeedController14setTargetSpeedEfff>
            break;
 80175f2:	e032      	b.n	801765a <_Z11direct_moveif+0xda>
        case 2: // Move right
            g_speed_controller.setTargetSpeed(base_linear_speed, 0, 0);
 80175f4:	ed9f 1a1d 	vldr	s2, [pc, #116]	@ 801766c <_Z11direct_moveif+0xec>
 80175f8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801766c <_Z11direct_moveif+0xec>
 80175fc:	ed97 0a03 	vldr	s0, [r7, #12]
 8017600:	481b      	ldr	r0, [pc, #108]	@ (8017670 <_Z11direct_moveif+0xf0>)
 8017602:	f7ff fb2a 	bl	8016c5a <_ZN15SpeedController14setTargetSpeedEfff>
            break;
 8017606:	e028      	b.n	801765a <_Z11direct_moveif+0xda>
        case 3: // Move left
            g_speed_controller.setTargetSpeed(-base_linear_speed, 0, 0);
 8017608:	edd7 7a03 	vldr	s15, [r7, #12]
 801760c:	eef1 7a67 	vneg.f32	s15, s15
 8017610:	ed9f 1a16 	vldr	s2, [pc, #88]	@ 801766c <_Z11direct_moveif+0xec>
 8017614:	eddf 0a15 	vldr	s1, [pc, #84]	@ 801766c <_Z11direct_moveif+0xec>
 8017618:	eeb0 0a67 	vmov.f32	s0, s15
 801761c:	4814      	ldr	r0, [pc, #80]	@ (8017670 <_Z11direct_moveif+0xf0>)
 801761e:	f7ff fb1c 	bl	8016c5a <_ZN15SpeedController14setTargetSpeedEfff>
            break;
 8017622:	e01a      	b.n	801765a <_Z11direct_moveif+0xda>
        case 4: // Rotate counterclockwise
            g_speed_controller.setTargetSpeed(0, 0, base_angular_speed);
 8017624:	ed97 1a02 	vldr	s2, [r7, #8]
 8017628:	eddf 0a10 	vldr	s1, [pc, #64]	@ 801766c <_Z11direct_moveif+0xec>
 801762c:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 801766c <_Z11direct_moveif+0xec>
 8017630:	480f      	ldr	r0, [pc, #60]	@ (8017670 <_Z11direct_moveif+0xf0>)
 8017632:	f7ff fb12 	bl	8016c5a <_ZN15SpeedController14setTargetSpeedEfff>
            break;
 8017636:	e010      	b.n	801765a <_Z11direct_moveif+0xda>
        case 5: // Rotate clockwise
            g_speed_controller.setTargetSpeed(0, 0, -base_angular_speed);
 8017638:	edd7 7a02 	vldr	s15, [r7, #8]
 801763c:	eef1 7a67 	vneg.f32	s15, s15
 8017640:	eeb0 1a67 	vmov.f32	s2, s15
 8017644:	eddf 0a09 	vldr	s1, [pc, #36]	@ 801766c <_Z11direct_moveif+0xec>
 8017648:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801766c <_Z11direct_moveif+0xec>
 801764c:	4808      	ldr	r0, [pc, #32]	@ (8017670 <_Z11direct_moveif+0xf0>)
 801764e:	f7ff fb04 	bl	8016c5a <_ZN15SpeedController14setTargetSpeedEfff>
            break;
 8017652:	e002      	b.n	801765a <_Z11direct_moveif+0xda>
        default:
            g_speed_controller.stop(); // Stop if the direction is invalid
 8017654:	4806      	ldr	r0, [pc, #24]	@ (8017670 <_Z11direct_moveif+0xf0>)
 8017656:	f7ff fe69 	bl	801732c <_ZN15SpeedController4stopEv>
    }
    
    // 更新速度控制器
    g_speed_controller.updateSpeed();
 801765a:	4805      	ldr	r0, [pc, #20]	@ (8017670 <_Z11direct_moveif+0xf0>)
 801765c:	f7ff fb76 	bl	8016d4c <_ZN15SpeedController11updateSpeedEv>
}
 8017660:	bf00      	nop
 8017662:	3710      	adds	r7, #16
 8017664:	46bd      	mov	sp, r7
 8017666:	bd80      	pop	{r7, pc}
 8017668:	3dcccccd 	.word	0x3dcccccd
 801766c:	00000000 	.word	0x00000000
 8017670:	24003cfc 	.word	0x24003cfc

08017674 <_Z19directMove_findLinev>:

void directMove_findLine() {
 8017674:	b580      	push	{r7, lr}
 8017676:	af00      	add	r7, sp, #0
    if (!line_check(line_type)) {
 8017678:	4b0f      	ldr	r3, [pc, #60]	@ (80176b8 <_Z19directMove_findLinev+0x44>)
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	4618      	mov	r0, r3
 801767e:	f001 fbe5 	bl	8018e4c <_Z10line_checki>
 8017682:	4603      	mov	r3, r0
 8017684:	f083 0301 	eor.w	r3, r3, #1
 8017688:	b2db      	uxtb	r3, r3
 801768a:	2b00      	cmp	r3, #0
 801768c:	d00a      	beq.n	80176a4 <_Z19directMove_findLinev+0x30>
        // 使用統一的 direct_move 函式，並傳入速度參數
        direct_move(move_dir, normal_Speed);
 801768e:	4b0b      	ldr	r3, [pc, #44]	@ (80176bc <_Z19directMove_findLinev+0x48>)
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	4a0b      	ldr	r2, [pc, #44]	@ (80176c0 <_Z19directMove_findLinev+0x4c>)
 8017694:	edd2 7a00 	vldr	s15, [r2]
 8017698:	eeb0 0a67 	vmov.f32	s0, s15
 801769c:	4618      	mov	r0, r3
 801769e:	f7ff ff6f 	bl	8017580 <_Z11direct_moveif>
    } else {
        g_speed_controller.stop();
        g_speed_controller.updateSpeed();
        achieve(); // Mark as achieved
    }
}
 80176a2:	e007      	b.n	80176b4 <_Z19directMove_findLinev+0x40>
        g_speed_controller.stop();
 80176a4:	4807      	ldr	r0, [pc, #28]	@ (80176c4 <_Z19directMove_findLinev+0x50>)
 80176a6:	f7ff fe41 	bl	801732c <_ZN15SpeedController4stopEv>
        g_speed_controller.updateSpeed();
 80176aa:	4806      	ldr	r0, [pc, #24]	@ (80176c4 <_Z19directMove_findLinev+0x50>)
 80176ac:	f7ff fb4e 	bl	8016d4c <_ZN15SpeedController11updateSpeedEv>
        achieve(); // Mark as achieved
 80176b0:	f7ff fe6e 	bl	8017390 <_Z7achievev>
}
 80176b4:	bf00      	nop
 80176b6:	bd80      	pop	{r7, pc}
 80176b8:	24003d8c 	.word	0x24003d8c
 80176bc:	24003da0 	.word	0x24003da0
 80176c0:	240001ec 	.word	0x240001ec
 80176c4:	24003cfc 	.word	0x24003cfc

080176c8 <_Z19direct_moveDistancev>:

void direct_moveDistance() {
 80176c8:	b580      	push	{r7, lr}
 80176ca:	b084      	sub	sp, #16
 80176cc:	af00      	add	r7, sp, #0
    //float velocity = 0.2; // Set a constant speed
    //float spin = 0.1;     // Set a constant spin rate
    float dx = map_x - start_x;
 80176ce:	4b78      	ldr	r3, [pc, #480]	@ (80178b0 <_Z19direct_moveDistancev+0x1e8>)
 80176d0:	ed93 7a00 	vldr	s14, [r3]
 80176d4:	4b77      	ldr	r3, [pc, #476]	@ (80178b4 <_Z19direct_moveDistancev+0x1ec>)
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	ee07 3a90 	vmov	s15, r3
 80176dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80176e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80176e4:	edc7 7a03 	vstr	s15, [r7, #12]
    float dy = map_y - start_y;
 80176e8:	4b73      	ldr	r3, [pc, #460]	@ (80178b8 <_Z19direct_moveDistancev+0x1f0>)
 80176ea:	ed93 7a00 	vldr	s14, [r3]
 80176ee:	4b73      	ldr	r3, [pc, #460]	@ (80178bc <_Z19direct_moveDistancev+0x1f4>)
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	ee07 3a90 	vmov	s15, r3
 80176f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80176fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80176fe:	edc7 7a02 	vstr	s15, [r7, #8]
    float travel_distance = sqrtf(dx * dx + dy * dy);
 8017702:	edd7 7a03 	vldr	s15, [r7, #12]
 8017706:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801770a:	edd7 7a02 	vldr	s15, [r7, #8]
 801770e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017716:	eeb0 0a67 	vmov.f32	s0, s15
 801771a:	f002 f907 	bl	801992c <sqrtf>
 801771e:	ed87 0a01 	vstr	s0, [r7, #4]
    float dtheta = fabs(theta - start_theta);
 8017722:	4b67      	ldr	r3, [pc, #412]	@ (80178c0 <_Z19direct_moveDistancev+0x1f8>)
 8017724:	ed93 7a00 	vldr	s14, [r3]
 8017728:	4b66      	ldr	r3, [pc, #408]	@ (80178c4 <_Z19direct_moveDistancev+0x1fc>)
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	ee07 3a90 	vmov	s15, r3
 8017730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017738:	eeb0 0a67 	vmov.f32	s0, s15
 801773c:	f7fb f9bc 	bl	8012ab8 <_ZSt4fabsf>
 8017740:	ed87 0a00 	vstr	s0, [r7]

    switch (move_dir) {
 8017744:	4b60      	ldr	r3, [pc, #384]	@ (80178c8 <_Z19direct_moveDistancev+0x200>)
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	2b05      	cmp	r3, #5
 801774a:	f200 80ab 	bhi.w	80178a4 <_Z19direct_moveDistancev+0x1dc>
 801774e:	a201      	add	r2, pc, #4	@ (adr r2, 8017754 <_Z19direct_moveDistancev+0x8c>)
 8017750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017754:	0801776d 	.word	0x0801776d
 8017758:	080177a1 	.word	0x080177a1
 801775c:	080177d5 	.word	0x080177d5
 8017760:	08017809 	.word	0x08017809
 8017764:	0801783d 	.word	0x0801783d
 8017768:	08017871 	.word	0x08017871
        case 0: // Move forward
            if (travel_distance <= distance) {
 801776c:	4b57      	ldr	r3, [pc, #348]	@ (80178cc <_Z19direct_moveDistancev+0x204>)
 801776e:	edd3 7a00 	vldr	s15, [r3]
 8017772:	ed97 7a01 	vldr	s14, [r7, #4]
 8017776:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801777a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801777e:	d80a      	bhi.n	8017796 <_Z19direct_moveDistancev+0xce>
                direct_move(move_dir, direct_move_speed);
 8017780:	4b51      	ldr	r3, [pc, #324]	@ (80178c8 <_Z19direct_moveDistancev+0x200>)
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	4a52      	ldr	r2, [pc, #328]	@ (80178d0 <_Z19direct_moveDistancev+0x208>)
 8017786:	edd2 7a00 	vldr	s15, [r2]
 801778a:	eeb0 0a67 	vmov.f32	s0, s15
 801778e:	4618      	mov	r0, r3
 8017790:	f7ff fef6 	bl	8017580 <_Z11direct_moveif>
                return;
 8017794:	e088      	b.n	80178a8 <_Z19direct_moveDistancev+0x1e0>
            } else {
                stop();
 8017796:	f7ff fe27 	bl	80173e8 <_Z4stopv>
                achieve();
 801779a:	f7ff fdf9 	bl	8017390 <_Z7achievev>
            }
            break;
 801779e:	e083      	b.n	80178a8 <_Z19direct_moveDistancev+0x1e0>
        case 1: // Move backward
            if (travel_distance <= distance) {
 80177a0:	4b4a      	ldr	r3, [pc, #296]	@ (80178cc <_Z19direct_moveDistancev+0x204>)
 80177a2:	edd3 7a00 	vldr	s15, [r3]
 80177a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80177aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80177ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177b2:	d80a      	bhi.n	80177ca <_Z19direct_moveDistancev+0x102>
                direct_move(move_dir, direct_move_speed);
 80177b4:	4b44      	ldr	r3, [pc, #272]	@ (80178c8 <_Z19direct_moveDistancev+0x200>)
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	4a45      	ldr	r2, [pc, #276]	@ (80178d0 <_Z19direct_moveDistancev+0x208>)
 80177ba:	edd2 7a00 	vldr	s15, [r2]
 80177be:	eeb0 0a67 	vmov.f32	s0, s15
 80177c2:	4618      	mov	r0, r3
 80177c4:	f7ff fedc 	bl	8017580 <_Z11direct_moveif>
                return;
 80177c8:	e06e      	b.n	80178a8 <_Z19direct_moveDistancev+0x1e0>
            } else {
                stop();
 80177ca:	f7ff fe0d 	bl	80173e8 <_Z4stopv>
                achieve();
 80177ce:	f7ff fddf 	bl	8017390 <_Z7achievev>
            }
            break;
 80177d2:	e069      	b.n	80178a8 <_Z19direct_moveDistancev+0x1e0>
        case 2: // Move right
            if (travel_distance <= distance) {
 80177d4:	4b3d      	ldr	r3, [pc, #244]	@ (80178cc <_Z19direct_moveDistancev+0x204>)
 80177d6:	edd3 7a00 	vldr	s15, [r3]
 80177da:	ed97 7a01 	vldr	s14, [r7, #4]
 80177de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80177e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177e6:	d80a      	bhi.n	80177fe <_Z19direct_moveDistancev+0x136>
                direct_move(move_dir, direct_move_speed);
 80177e8:	4b37      	ldr	r3, [pc, #220]	@ (80178c8 <_Z19direct_moveDistancev+0x200>)
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	4a38      	ldr	r2, [pc, #224]	@ (80178d0 <_Z19direct_moveDistancev+0x208>)
 80177ee:	edd2 7a00 	vldr	s15, [r2]
 80177f2:	eeb0 0a67 	vmov.f32	s0, s15
 80177f6:	4618      	mov	r0, r3
 80177f8:	f7ff fec2 	bl	8017580 <_Z11direct_moveif>
                return;
 80177fc:	e054      	b.n	80178a8 <_Z19direct_moveDistancev+0x1e0>
            } else {
                stop();
 80177fe:	f7ff fdf3 	bl	80173e8 <_Z4stopv>
                achieve();
 8017802:	f7ff fdc5 	bl	8017390 <_Z7achievev>
            }
            break;
 8017806:	e04f      	b.n	80178a8 <_Z19direct_moveDistancev+0x1e0>
        case 3: // Move left
            if (travel_distance <= distance) {
 8017808:	4b30      	ldr	r3, [pc, #192]	@ (80178cc <_Z19direct_moveDistancev+0x204>)
 801780a:	edd3 7a00 	vldr	s15, [r3]
 801780e:	ed97 7a01 	vldr	s14, [r7, #4]
 8017812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801781a:	d80a      	bhi.n	8017832 <_Z19direct_moveDistancev+0x16a>
                direct_move(move_dir, direct_move_speed);
 801781c:	4b2a      	ldr	r3, [pc, #168]	@ (80178c8 <_Z19direct_moveDistancev+0x200>)
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	4a2b      	ldr	r2, [pc, #172]	@ (80178d0 <_Z19direct_moveDistancev+0x208>)
 8017822:	edd2 7a00 	vldr	s15, [r2]
 8017826:	eeb0 0a67 	vmov.f32	s0, s15
 801782a:	4618      	mov	r0, r3
 801782c:	f7ff fea8 	bl	8017580 <_Z11direct_moveif>
                return;
 8017830:	e03a      	b.n	80178a8 <_Z19direct_moveDistancev+0x1e0>
            } else {
                stop();
 8017832:	f7ff fdd9 	bl	80173e8 <_Z4stopv>
                achieve();
 8017836:	f7ff fdab 	bl	8017390 <_Z7achievev>
            }
            break;
 801783a:	e035      	b.n	80178a8 <_Z19direct_moveDistancev+0x1e0>
        case 4: // Rotate counterclockwise
            if (dtheta <= angle) {
 801783c:	4b25      	ldr	r3, [pc, #148]	@ (80178d4 <_Z19direct_moveDistancev+0x20c>)
 801783e:	edd3 7a00 	vldr	s15, [r3]
 8017842:	ed97 7a00 	vldr	s14, [r7]
 8017846:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801784a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801784e:	d80a      	bhi.n	8017866 <_Z19direct_moveDistancev+0x19e>
                direct_move(dir, direct_move_speed);
 8017850:	4b21      	ldr	r3, [pc, #132]	@ (80178d8 <_Z19direct_moveDistancev+0x210>)
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	4a1e      	ldr	r2, [pc, #120]	@ (80178d0 <_Z19direct_moveDistancev+0x208>)
 8017856:	edd2 7a00 	vldr	s15, [r2]
 801785a:	eeb0 0a67 	vmov.f32	s0, s15
 801785e:	4618      	mov	r0, r3
 8017860:	f7ff fe8e 	bl	8017580 <_Z11direct_moveif>
            } else {
                stop();
                achieve();
            }
            break;
 8017864:	e020      	b.n	80178a8 <_Z19direct_moveDistancev+0x1e0>
                stop();
 8017866:	f7ff fdbf 	bl	80173e8 <_Z4stopv>
                achieve();
 801786a:	f7ff fd91 	bl	8017390 <_Z7achievev>
            break;
 801786e:	e01b      	b.n	80178a8 <_Z19direct_moveDistancev+0x1e0>
        case 5: // Rotate clockwise
            if (dtheta <= angle) {
 8017870:	4b18      	ldr	r3, [pc, #96]	@ (80178d4 <_Z19direct_moveDistancev+0x20c>)
 8017872:	edd3 7a00 	vldr	s15, [r3]
 8017876:	ed97 7a00 	vldr	s14, [r7]
 801787a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801787e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017882:	d80a      	bhi.n	801789a <_Z19direct_moveDistancev+0x1d2>
                direct_move(dir, direct_move_speed);
 8017884:	4b14      	ldr	r3, [pc, #80]	@ (80178d8 <_Z19direct_moveDistancev+0x210>)
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	4a11      	ldr	r2, [pc, #68]	@ (80178d0 <_Z19direct_moveDistancev+0x208>)
 801788a:	edd2 7a00 	vldr	s15, [r2]
 801788e:	eeb0 0a67 	vmov.f32	s0, s15
 8017892:	4618      	mov	r0, r3
 8017894:	f7ff fe74 	bl	8017580 <_Z11direct_moveif>
                return;
 8017898:	e006      	b.n	80178a8 <_Z19direct_moveDistancev+0x1e0>
            } else {
                stop();
 801789a:	f7ff fda5 	bl	80173e8 <_Z4stopv>
                achieve();
 801789e:	f7ff fd77 	bl	8017390 <_Z7achievev>
            }
            break;
 80178a2:	e001      	b.n	80178a8 <_Z19direct_moveDistancev+0x1e0>
        default:
            stop();
 80178a4:	f7ff fda0 	bl	80173e8 <_Z4stopv>
    }
}
 80178a8:	3710      	adds	r7, #16
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bd80      	pop	{r7, pc}
 80178ae:	bf00      	nop
 80178b0:	240002ac 	.word	0x240002ac
 80178b4:	24003d94 	.word	0x24003d94
 80178b8:	240002b0 	.word	0x240002b0
 80178bc:	24003d98 	.word	0x24003d98
 80178c0:	240002b4 	.word	0x240002b4
 80178c4:	24003d9c 	.word	0x24003d9c
 80178c8:	24003da0 	.word	0x24003da0
 80178cc:	24003d44 	.word	0x24003d44
 80178d0:	240001d8 	.word	0x240001d8
 80178d4:	24003d48 	.word	0x24003d48
 80178d8:	24003d84 	.word	0x24003d84

080178dc <_Z13path_findLinev>:

void path_findLine() {
 80178dc:	b580      	push	{r7, lr}
 80178de:	af00      	add	r7, sp, #0
    // Check the type of line to find
    if (!line_check(line_type)) {
 80178e0:	4b0a      	ldr	r3, [pc, #40]	@ (801790c <_Z13path_findLinev+0x30>)
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	4618      	mov	r0, r3
 80178e6:	f001 fab1 	bl	8018e4c <_Z10line_checki>
 80178ea:	4603      	mov	r3, r0
 80178ec:	f083 0301 	eor.w	r3, r3, #1
 80178f0:	b2db      	uxtb	r3, r3
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d005      	beq.n	8017902 <_Z13path_findLinev+0x26>
        followPath(path_dir); // 使用恢復原控制方式的 followPath
 80178f6:	4b06      	ldr	r3, [pc, #24]	@ (8017910 <_Z13path_findLinev+0x34>)
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	4618      	mov	r0, r3
 80178fc:	f7ff fde4 	bl	80174c8 <_Z10followPathi>
        return;       // If the line is not found, continue following the path
 8017900:	e003      	b.n	801790a <_Z13path_findLinev+0x2e>
    } else {
        stop(); // 使用原來的 stop() 函式
 8017902:	f7ff fd71 	bl	80173e8 <_Z4stopv>
        achieve();
 8017906:	f7ff fd43 	bl	8017390 <_Z7achievev>
    }
}
 801790a:	bd80      	pop	{r7, pc}
 801790c:	24003d8c 	.word	0x24003d8c
 8017910:	24003d90 	.word	0x24003d90
 8017914:	00000000 	.word	0x00000000

08017918 <_Z12moveDistancev>:
        achieve(); // Mark as achieved
    }
}


void moveDistance(){
 8017918:	b580      	push	{r7, lr}
 801791a:	b096      	sub	sp, #88	@ 0x58
 801791c:	af00      	add	r7, sp, #0
    // 計算總移動距離
    dis = sqrt(x_distance * x_distance + y_distance * y_distance);
 801791e:	4bcc      	ldr	r3, [pc, #816]	@ (8017c50 <_Z12moveDistancev+0x338>)
 8017920:	ed93 7a00 	vldr	s14, [r3]
 8017924:	4bca      	ldr	r3, [pc, #808]	@ (8017c50 <_Z12moveDistancev+0x338>)
 8017926:	edd3 7a00 	vldr	s15, [r3]
 801792a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801792e:	4bc9      	ldr	r3, [pc, #804]	@ (8017c54 <_Z12moveDistancev+0x33c>)
 8017930:	edd3 6a00 	vldr	s13, [r3]
 8017934:	4bc7      	ldr	r3, [pc, #796]	@ (8017c54 <_Z12moveDistancev+0x33c>)
 8017936:	edd3 7a00 	vldr	s15, [r3]
 801793a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801793e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017942:	eeb0 0a67 	vmov.f32	s0, s15
 8017946:	f7ff f8ed 	bl	8016b24 <_ZSt4sqrtf>
 801794a:	eef0 7a40 	vmov.f32	s15, s0
 801794e:	4bc2      	ldr	r3, [pc, #776]	@ (8017c58 <_Z12moveDistancev+0x340>)
 8017950:	edc3 7a00 	vstr	s15, [r3]
    // 計算已移動的距離
    float dx_traveled = map_x - start_x;
 8017954:	4bc1      	ldr	r3, [pc, #772]	@ (8017c5c <_Z12moveDistancev+0x344>)
 8017956:	ed93 7a00 	vldr	s14, [r3]
 801795a:	4bc1      	ldr	r3, [pc, #772]	@ (8017c60 <_Z12moveDistancev+0x348>)
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	ee07 3a90 	vmov	s15, r3
 8017962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017966:	ee77 7a67 	vsub.f32	s15, s14, s15
 801796a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float dy_traveled = map_y - start_y;
 801796e:	4bbd      	ldr	r3, [pc, #756]	@ (8017c64 <_Z12moveDistancev+0x34c>)
 8017970:	ed93 7a00 	vldr	s14, [r3]
 8017974:	4bbc      	ldr	r3, [pc, #752]	@ (8017c68 <_Z12moveDistancev+0x350>)
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	ee07 3a90 	vmov	s15, r3
 801797c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017984:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float traveled_distance = sqrt(dx_traveled * dx_traveled + dy_traveled * dy_traveled);
 8017988:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 801798c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8017990:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8017994:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017998:	ee77 7a27 	vadd.f32	s15, s14, s15
 801799c:	eeb0 0a67 	vmov.f32	s0, s15
 80179a0:	f7ff f8c0 	bl	8016b24 <_ZSt4sqrtf>
 80179a4:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
    
    // 計算角度誤差 - 不進行正規化，保留 setmoveDistance 設定的路徑方向
    float angle_error = moveangle - theta;
 80179a8:	4bb0      	ldr	r3, [pc, #704]	@ (8017c6c <_Z12moveDistancev+0x354>)
 80179aa:	ed93 7a00 	vldr	s14, [r3]
 80179ae:	4bb0      	ldr	r3, [pc, #704]	@ (8017c70 <_Z12moveDistancev+0x358>)
 80179b0:	edd3 7a00 	vldr	s15, [r3]
 80179b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80179b8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    // 安全限制：防止角度差過大導致異常行為
    if (fabs(angle_error) > 4 * pi) {  // 超過 720° 就是異常了
 80179bc:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 80179c0:	f7fb f87a 	bl	8012ab8 <_ZSt4fabsf>
 80179c4:	eef0 7a40 	vmov.f32	s15, s0
 80179c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80179cc:	ed9f 6b9a 	vldr	d6, [pc, #616]	@ 8017c38 <_Z12moveDistancev+0x320>
 80179d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80179d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179d8:	bfcc      	ite	gt
 80179da:	2301      	movgt	r3, #1
 80179dc:	2300      	movle	r3, #0
 80179de:	b2db      	uxtb	r3, r3
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d02f      	beq.n	8017a44 <_Z12moveDistancev+0x12c>
        // 強制正規化到合理範圍
        while (angle_error > 2 * pi) angle_error -= 2 * pi;
 80179e4:	e00b      	b.n	80179fe <_Z12moveDistancev+0xe6>
 80179e6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80179ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80179ee:	ed9f 6b94 	vldr	d6, [pc, #592]	@ 8017c40 <_Z12moveDistancev+0x328>
 80179f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80179f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80179fa:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 80179fe:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8017a02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017a06:	ed9f 6b8e 	vldr	d6, [pc, #568]	@ 8017c40 <_Z12moveDistancev+0x328>
 8017a0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a12:	dce8      	bgt.n	80179e6 <_Z12moveDistancev+0xce>
        while (angle_error < -2 * pi) angle_error += 2 * pi;
 8017a14:	e00b      	b.n	8017a2e <_Z12moveDistancev+0x116>
 8017a16:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8017a1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017a1e:	ed9f 6b88 	vldr	d6, [pc, #544]	@ 8017c40 <_Z12moveDistancev+0x328>
 8017a22:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017a26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017a2a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 8017a2e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8017a32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017a36:	ed9f 6b84 	vldr	d6, [pc, #528]	@ 8017c48 <_Z12moveDistancev+0x330>
 8017a3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a42:	d4e8      	bmi.n	8017a16 <_Z12moveDistancev+0xfe>
    }
    
    // 設定速度控制器的參數
    g_speed_controller.setMaxSpeed(moveDistance_speed);
 8017a44:	4b8b      	ldr	r3, [pc, #556]	@ (8017c74 <_Z12moveDistancev+0x35c>)
 8017a46:	edd3 7a00 	vldr	s15, [r3]
 8017a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8017a4e:	488a      	ldr	r0, [pc, #552]	@ (8017c78 <_Z12moveDistancev+0x360>)
 8017a50:	f7ff f8e4 	bl	8016c1c <_ZN15SpeedController11setMaxSpeedEf>
    g_speed_controller.setSmoothEnabled(accel);
 8017a54:	4b89      	ldr	r3, [pc, #548]	@ (8017c7c <_Z12moveDistancev+0x364>)
 8017a56:	781b      	ldrb	r3, [r3, #0]
 8017a58:	4619      	mov	r1, r3
 8017a5a:	4887      	ldr	r0, [pc, #540]	@ (8017c78 <_Z12moveDistancev+0x360>)
 8017a5c:	f7ff f8ed 	bl	8016c3a <_ZN15SpeedController16setSmoothEnabledEb>
    
    // 如果移動距離太小但需要旋轉，執行原地旋轉
    if (dis < pos_threshold) {
 8017a60:	4b7d      	ldr	r3, [pc, #500]	@ (8017c58 <_Z12moveDistancev+0x340>)
 8017a62:	ed93 7a00 	vldr	s14, [r3]
 8017a66:	4b86      	ldr	r3, [pc, #536]	@ (8017c80 <_Z12moveDistancev+0x368>)
 8017a68:	edd3 7a00 	vldr	s15, [r3]
 8017a6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a74:	f140 808c 	bpl.w	8017b90 <_Z12moveDistancev+0x278>
        if (fabs(angle_error) < 0.01f) {  // 使用更小的停止閾值 0.01 弧度 (~0.57 度)
 8017a78:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8017a7c:	f7fb f81c 	bl	8012ab8 <_ZSt4fabsf>
 8017a80:	eef0 7a40 	vmov.f32	s15, s0
 8017a84:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8017c84 <_Z12moveDistancev+0x36c>
 8017a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a90:	bf4c      	ite	mi
 8017a92:	2301      	movmi	r3, #1
 8017a94:	2300      	movpl	r3, #0
 8017a96:	b2db      	uxtb	r3, r3
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d008      	beq.n	8017aae <_Z12moveDistancev+0x196>
            g_speed_controller.stop();
 8017a9c:	4876      	ldr	r0, [pc, #472]	@ (8017c78 <_Z12moveDistancev+0x360>)
 8017a9e:	f7ff fc45 	bl	801732c <_ZN15SpeedController4stopEv>
            g_speed_controller.updateSpeed();
 8017aa2:	4875      	ldr	r0, [pc, #468]	@ (8017c78 <_Z12moveDistancev+0x360>)
 8017aa4:	f7ff f952 	bl	8016d4c <_ZN15SpeedController11updateSpeedEv>
            achieve();
 8017aa8:	f7ff fc72 	bl	8017390 <_Z7achievev>
            return;
 8017aac:	e201      	b.n	8017eb2 <_Z12moveDistancev+0x59a>
        } else {
            // 純旋轉模式 - 直接計算角速度，不使用 SpeedController 的復雜計算
            float kp_pure_rotation = 0.8f; // 純旋轉的比例增益
 8017aae:	4b76      	ldr	r3, [pc, #472]	@ (8017c88 <_Z12moveDistancev+0x370>)
 8017ab0:	60bb      	str	r3, [r7, #8]
            float angular_velocity = kp_pure_rotation * angle_error;
 8017ab2:	ed97 7a02 	vldr	s14, [r7, #8]
 8017ab6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8017aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017abe:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
            
            // 限制角速度範圍
            float max_angular_speed = 1.0f; // 純旋轉的最大角速度
 8017ac2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8017ac6:	607b      	str	r3, [r7, #4]
            if (fabs(angular_velocity) > max_angular_speed) {
 8017ac8:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 8017acc:	f7fa fff4 	bl	8012ab8 <_ZSt4fabsf>
 8017ad0:	eeb0 7a40 	vmov.f32	s14, s0
 8017ad4:	edd7 7a01 	vldr	s15, [r7, #4]
 8017ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ae0:	bf4c      	ite	mi
 8017ae2:	2301      	movmi	r3, #1
 8017ae4:	2300      	movpl	r3, #0
 8017ae6:	b2db      	uxtb	r3, r3
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d00f      	beq.n	8017b0c <_Z12moveDistancev+0x1f4>
                angular_velocity = (angular_velocity > 0) ? max_angular_speed : -max_angular_speed;
 8017aec:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8017af0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017af8:	dd02      	ble.n	8017b00 <_Z12moveDistancev+0x1e8>
 8017afa:	edd7 7a01 	vldr	s15, [r7, #4]
 8017afe:	e003      	b.n	8017b08 <_Z12moveDistancev+0x1f0>
 8017b00:	edd7 7a01 	vldr	s15, [r7, #4]
 8017b04:	eef1 7a67 	vneg.f32	s15, s15
 8017b08:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
            }
            
            // 確保最小角速度（避免過慢）
            float min_angular_speed = 0.1f;
 8017b0c:	4b5f      	ldr	r3, [pc, #380]	@ (8017c8c <_Z12moveDistancev+0x374>)
 8017b0e:	603b      	str	r3, [r7, #0]
            if (fabs(angle_error) > 0.01f && fabs(angular_velocity) < min_angular_speed) {  // 調整最小速度條件
 8017b10:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8017b14:	f7fa ffd0 	bl	8012ab8 <_ZSt4fabsf>
 8017b18:	eef0 7a40 	vmov.f32	s15, s0
 8017b1c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8017c84 <_Z12moveDistancev+0x36c>
 8017b20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b28:	dd0e      	ble.n	8017b48 <_Z12moveDistancev+0x230>
 8017b2a:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 8017b2e:	f7fa ffc3 	bl	8012ab8 <_ZSt4fabsf>
 8017b32:	eeb0 7a40 	vmov.f32	s14, s0
 8017b36:	edd7 7a00 	vldr	s15, [r7]
 8017b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b42:	dd01      	ble.n	8017b48 <_Z12moveDistancev+0x230>
 8017b44:	2301      	movs	r3, #1
 8017b46:	e000      	b.n	8017b4a <_Z12moveDistancev+0x232>
 8017b48:	2300      	movs	r3, #0
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d00f      	beq.n	8017b6e <_Z12moveDistancev+0x256>
                angular_velocity = (angular_velocity > 0) ? min_angular_speed : -min_angular_speed;
 8017b4e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8017b52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b5a:	dd02      	ble.n	8017b62 <_Z12moveDistancev+0x24a>
 8017b5c:	edd7 7a00 	vldr	s15, [r7]
 8017b60:	e003      	b.n	8017b6a <_Z12moveDistancev+0x252>
 8017b62:	edd7 7a00 	vldr	s15, [r7]
 8017b66:	eef1 7a67 	vneg.f32	s15, s15
 8017b6a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
            }
            
            // 直接設定角速度，不經過 SpeedController 的加減速處理
            g_speed_controller.setTargetSpeed(0, 0, angular_velocity);
 8017b6e:	ed97 1a14 	vldr	s2, [r7, #80]	@ 0x50
 8017b72:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8017c90 <_Z12moveDistancev+0x378>
 8017b76:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8017c90 <_Z12moveDistancev+0x378>
 8017b7a:	483f      	ldr	r0, [pc, #252]	@ (8017c78 <_Z12moveDistancev+0x360>)
 8017b7c:	f7ff f86d 	bl	8016c5a <_ZN15SpeedController14setTargetSpeedEfff>
            g_speed_controller.setSmoothEnabled(false); // 純旋轉不使用平滑控制
 8017b80:	2100      	movs	r1, #0
 8017b82:	483d      	ldr	r0, [pc, #244]	@ (8017c78 <_Z12moveDistancev+0x360>)
 8017b84:	f7ff f859 	bl	8016c3a <_ZN15SpeedController16setSmoothEnabledEb>
            g_speed_controller.updateSpeed();
 8017b88:	483b      	ldr	r0, [pc, #236]	@ (8017c78 <_Z12moveDistancev+0x360>)
 8017b8a:	f7ff f8df 	bl	8016d4c <_ZN15SpeedController11updateSpeedEv>
            return;
 8017b8e:	e190      	b.n	8017eb2 <_Z12moveDistancev+0x59a>
        }
    }
    
    // 檢查是否已達到目標
    if (traveled_distance >= dis) {
 8017b90:	4b31      	ldr	r3, [pc, #196]	@ (8017c58 <_Z12moveDistancev+0x340>)
 8017b92:	edd3 7a00 	vldr	s15, [r3]
 8017b96:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8017b9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ba2:	db08      	blt.n	8017bb6 <_Z12moveDistancev+0x29e>
        g_speed_controller.stop();
 8017ba4:	4834      	ldr	r0, [pc, #208]	@ (8017c78 <_Z12moveDistancev+0x360>)
 8017ba6:	f7ff fbc1 	bl	801732c <_ZN15SpeedController4stopEv>
        g_speed_controller.updateSpeed();
 8017baa:	4833      	ldr	r0, [pc, #204]	@ (8017c78 <_Z12moveDistancev+0x360>)
 8017bac:	f7ff f8ce 	bl	8016d4c <_ZN15SpeedController11updateSpeedEv>
        achieve();
 8017bb0:	f7ff fbee 	bl	8017390 <_Z7achievev>
        return;
 8017bb4:	e17d      	b.n	8017eb2 <_Z12moveDistancev+0x59a>
    }
    
    // 計算剩餘需要移動的距離
    float remaining_x = x_distance - dx_traveled;
 8017bb6:	4b26      	ldr	r3, [pc, #152]	@ (8017c50 <_Z12moveDistancev+0x338>)
 8017bb8:	ed93 7a00 	vldr	s14, [r3]
 8017bbc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8017bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017bc4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float remaining_y = y_distance - dy_traveled;
 8017bc8:	4b22      	ldr	r3, [pc, #136]	@ (8017c54 <_Z12moveDistancev+0x33c>)
 8017bca:	ed93 7a00 	vldr	s14, [r3]
 8017bce:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8017bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017bd6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float remaining_distance = sqrt(remaining_x * remaining_x + remaining_y * remaining_y);
 8017bda:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8017bde:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8017be2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8017be6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017bee:	eeb0 0a67 	vmov.f32	s0, s15
 8017bf2:	f7fe ff97 	bl	8016b24 <_ZSt4sqrtf>
 8017bf6:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
    
    // 如果剩餘距離太小，直接完成
    if (remaining_distance < pos_threshold) {
 8017bfa:	4b21      	ldr	r3, [pc, #132]	@ (8017c80 <_Z12moveDistancev+0x368>)
 8017bfc:	edd3 7a00 	vldr	s15, [r3]
 8017c00:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8017c04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c0c:	d508      	bpl.n	8017c20 <_Z12moveDistancev+0x308>
        g_speed_controller.stop();
 8017c0e:	481a      	ldr	r0, [pc, #104]	@ (8017c78 <_Z12moveDistancev+0x360>)
 8017c10:	f7ff fb8c 	bl	801732c <_ZN15SpeedController4stopEv>
        g_speed_controller.updateSpeed();
 8017c14:	4818      	ldr	r0, [pc, #96]	@ (8017c78 <_Z12moveDistancev+0x360>)
 8017c16:	f7ff f899 	bl	8016d4c <_ZN15SpeedController11updateSpeedEv>
        achieve();
 8017c1a:	f7ff fbb9 	bl	8017390 <_Z7achievev>
        return;
 8017c1e:	e148      	b.n	8017eb2 <_Z12moveDistancev+0x59a>
    }
    
    // 計算目標移動方向
    float target_angle = atan2(remaining_y, remaining_x);
 8017c20:	edd7 0a0e 	vldr	s1, [r7, #56]	@ 0x38
 8017c24:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8017c28:	f7fe ff68 	bl	8016afc <_ZSt5atan2ff>
 8017c2c:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
    while (target_angle > M_PI) target_angle -= 2 * M_PI;
 8017c30:	e03c      	b.n	8017cac <_Z12moveDistancev+0x394>
 8017c32:	bf00      	nop
 8017c34:	f3af 8000 	nop.w
 8017c38:	54442d18 	.word	0x54442d18
 8017c3c:	402921fb 	.word	0x402921fb
 8017c40:	54442d18 	.word	0x54442d18
 8017c44:	401921fb 	.word	0x401921fb
 8017c48:	54442d18 	.word	0x54442d18
 8017c4c:	c01921fb 	.word	0xc01921fb
 8017c50:	24003d4c 	.word	0x24003d4c
 8017c54:	24003d50 	.word	0x24003d50
 8017c58:	24003d54 	.word	0x24003d54
 8017c5c:	240002ac 	.word	0x240002ac
 8017c60:	24003d94 	.word	0x24003d94
 8017c64:	240002b0 	.word	0x240002b0
 8017c68:	24003d98 	.word	0x24003d98
 8017c6c:	24003d58 	.word	0x24003d58
 8017c70:	240002b4 	.word	0x240002b4
 8017c74:	240001dc 	.word	0x240001dc
 8017c78:	24003cfc 	.word	0x24003cfc
 8017c7c:	24003d5c 	.word	0x24003d5c
 8017c80:	240001e4 	.word	0x240001e4
 8017c84:	3c23d70a 	.word	0x3c23d70a
 8017c88:	3f4ccccd 	.word	0x3f4ccccd
 8017c8c:	3dcccccd 	.word	0x3dcccccd
 8017c90:	00000000 	.word	0x00000000
 8017c94:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8017c98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017c9c:	ed9f 6b86 	vldr	d6, [pc, #536]	@ 8017eb8 <_Z12moveDistancev+0x5a0>
 8017ca0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017ca4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017ca8:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 8017cac:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8017cb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017cb4:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 8017ec0 <_Z12moveDistancev+0x5a8>
 8017cb8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cc0:	dce8      	bgt.n	8017c94 <_Z12moveDistancev+0x37c>
    while (target_angle < -M_PI) target_angle += 2 * M_PI;
 8017cc2:	e00b      	b.n	8017cdc <_Z12moveDistancev+0x3c4>
 8017cc4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8017cc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017ccc:	ed9f 6b7a 	vldr	d6, [pc, #488]	@ 8017eb8 <_Z12moveDistancev+0x5a0>
 8017cd0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017cd4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017cd8:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 8017cdc:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8017ce0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017ce4:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8017ec8 <_Z12moveDistancev+0x5b0>
 8017ce8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cf0:	d4e8      	bmi.n	8017cc4 <_Z12moveDistancev+0x3ac>
    
    // 使用統一控制器的軌跡速度計算
    if (accel) {
 8017cf2:	4b77      	ldr	r3, [pc, #476]	@ (8017ed0 <_Z12moveDistancev+0x5b8>)
 8017cf4:	781b      	ldrb	r3, [r3, #0]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d009      	beq.n	8017d0e <_Z12moveDistancev+0x3f6>
        g_speed_controller.calculateTrajectorySpeed(remaining_distance, dis);
 8017cfa:	4b76      	ldr	r3, [pc, #472]	@ (8017ed4 <_Z12moveDistancev+0x5bc>)
 8017cfc:	edd3 7a00 	vldr	s15, [r3]
 8017d00:	eef0 0a67 	vmov.f32	s1, s15
 8017d04:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8017d08:	4873      	ldr	r0, [pc, #460]	@ (8017ed8 <_Z12moveDistancev+0x5c0>)
 8017d0a:	f7ff fa05 	bl	8017118 <_ZN15SpeedController24calculateTrajectorySpeedEff>
    }
    
    // 計算基準速度分量
    float vx_global = moveDistance_speed * cos(target_angle);
 8017d0e:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8017d12:	f7e8 fea7 	bl	8000a64 <_ZSt3cosf>
 8017d16:	eeb0 7a40 	vmov.f32	s14, s0
 8017d1a:	4b70      	ldr	r3, [pc, #448]	@ (8017edc <_Z12moveDistancev+0x5c4>)
 8017d1c:	edd3 7a00 	vldr	s15, [r3]
 8017d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017d24:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float vy_global = moveDistance_speed * sin(target_angle);
 8017d28:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8017d2c:	f7e8 feaa 	bl	8000a84 <_ZSt3sinf>
 8017d30:	eeb0 7a40 	vmov.f32	s14, s0
 8017d34:	4b69      	ldr	r3, [pc, #420]	@ (8017edc <_Z12moveDistancev+0x5c4>)
 8017d36:	edd3 7a00 	vldr	s15, [r3]
 8017d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017d3e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    
    // 轉換到機器人本體座標系
    float cos_theta = cos(theta);
 8017d42:	4b67      	ldr	r3, [pc, #412]	@ (8017ee0 <_Z12moveDistancev+0x5c8>)
 8017d44:	edd3 7a00 	vldr	s15, [r3]
 8017d48:	eeb0 0a67 	vmov.f32	s0, s15
 8017d4c:	f7e8 fe8a 	bl	8000a64 <_ZSt3cosf>
 8017d50:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float sin_theta = sin(theta);
 8017d54:	4b62      	ldr	r3, [pc, #392]	@ (8017ee0 <_Z12moveDistancev+0x5c8>)
 8017d56:	edd3 7a00 	vldr	s15, [r3]
 8017d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8017d5e:	f7e8 fe91 	bl	8000a84 <_ZSt3sinf>
 8017d62:	ed87 0a08 	vstr	s0, [r7, #32]
    float vx_robot = cos_theta * vx_global + sin_theta * vy_global;
 8017d66:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8017d6a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8017d6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017d72:	edd7 6a08 	vldr	s13, [r7, #32]
 8017d76:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8017d7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017d82:	edc7 7a07 	vstr	s15, [r7, #28]
    float vy_robot = -sin_theta * vx_global + cos_theta * vy_global;
 8017d86:	edd7 7a08 	vldr	s15, [r7, #32]
 8017d8a:	eeb1 7a67 	vneg.f32	s14, s15
 8017d8e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8017d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017d96:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8017d9a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8017d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017da6:	edc7 7a06 	vstr	s15, [r7, #24]
    
    // 角度控制 - 如果需要同時旋轉
    float angular_velocity = 0.0f;
 8017daa:	f04f 0300 	mov.w	r3, #0
 8017dae:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (fabs(angle_error) > theta_threshold) {
 8017db0:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8017db4:	f7fa fe80 	bl	8012ab8 <_ZSt4fabsf>
 8017db8:	eef0 7a40 	vmov.f32	s15, s0
 8017dbc:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8017ee4 <_Z12moveDistancev+0x5cc>
 8017dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dc8:	bfcc      	ite	gt
 8017dca:	2301      	movgt	r3, #1
 8017dcc:	2300      	movle	r3, #0
 8017dce:	b2db      	uxtb	r3, r3
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d051      	beq.n	8017e78 <_Z12moveDistancev+0x560>
        // 簡化的角度控制，避免復雜的加減速計算
        float kp_angular = 0.8f; // 降低比例係數，減少震盪
 8017dd4:	4b44      	ldr	r3, [pc, #272]	@ (8017ee8 <_Z12moveDistancev+0x5d0>)
 8017dd6:	617b      	str	r3, [r7, #20]
        angular_velocity = kp_angular * angle_error;
 8017dd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8017ddc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8017de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017de4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        
        // 限制角速度範圍
        float max_angular_speed = 0.6f; // 降低最大角速度
 8017de8:	4b40      	ldr	r3, [pc, #256]	@ (8017eec <_Z12moveDistancev+0x5d4>)
 8017dea:	613b      	str	r3, [r7, #16]
        if (fabs(angular_velocity) > max_angular_speed) {
 8017dec:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8017df0:	f7fa fe62 	bl	8012ab8 <_ZSt4fabsf>
 8017df4:	eeb0 7a40 	vmov.f32	s14, s0
 8017df8:	edd7 7a04 	vldr	s15, [r7, #16]
 8017dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e04:	bf4c      	ite	mi
 8017e06:	2301      	movmi	r3, #1
 8017e08:	2300      	movpl	r3, #0
 8017e0a:	b2db      	uxtb	r3, r3
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d00f      	beq.n	8017e30 <_Z12moveDistancev+0x518>
            angular_velocity = (angular_velocity > 0) ? max_angular_speed : -max_angular_speed;
 8017e10:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8017e14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e1c:	dd02      	ble.n	8017e24 <_Z12moveDistancev+0x50c>
 8017e1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8017e22:	e003      	b.n	8017e2c <_Z12moveDistancev+0x514>
 8017e24:	edd7 7a04 	vldr	s15, [r7, #16]
 8017e28:	eef1 7a67 	vneg.f32	s15, s15
 8017e2c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        }
        
        // 最小角速度限制
        float min_angular_speed = 0.05f;
 8017e30:	4b2f      	ldr	r3, [pc, #188]	@ (8017ef0 <_Z12moveDistancev+0x5d8>)
 8017e32:	60fb      	str	r3, [r7, #12]
        if (fabs(angular_velocity) < min_angular_speed) {
 8017e34:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8017e38:	f7fa fe3e 	bl	8012ab8 <_ZSt4fabsf>
 8017e3c:	eeb0 7a40 	vmov.f32	s14, s0
 8017e40:	edd7 7a03 	vldr	s15, [r7, #12]
 8017e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e4c:	bfcc      	ite	gt
 8017e4e:	2301      	movgt	r3, #1
 8017e50:	2300      	movle	r3, #0
 8017e52:	b2db      	uxtb	r3, r3
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d00f      	beq.n	8017e78 <_Z12moveDistancev+0x560>
            angular_velocity = (angular_velocity > 0) ? min_angular_speed : -min_angular_speed;
 8017e58:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8017e5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e64:	dd02      	ble.n	8017e6c <_Z12moveDistancev+0x554>
 8017e66:	edd7 7a03 	vldr	s15, [r7, #12]
 8017e6a:	e003      	b.n	8017e74 <_Z12moveDistancev+0x55c>
 8017e6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8017e70:	eef1 7a67 	vneg.f32	s15, s15
 8017e74:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        }
    }
    
    // 設定目標速度
    g_speed_controller.setTargetSpeed(vx_robot, vy_robot, angular_velocity);
 8017e78:	ed97 1a12 	vldr	s2, [r7, #72]	@ 0x48
 8017e7c:	edd7 0a06 	vldr	s1, [r7, #24]
 8017e80:	ed97 0a07 	vldr	s0, [r7, #28]
 8017e84:	4814      	ldr	r0, [pc, #80]	@ (8017ed8 <_Z12moveDistancev+0x5c0>)
 8017e86:	f7fe fee8 	bl	8016c5a <_ZN15SpeedController14setTargetSpeedEfff>
    
    // 對於同時移動和旋轉的情況，啟用平滑控制
    if (dis >= pos_threshold) {
 8017e8a:	4b12      	ldr	r3, [pc, #72]	@ (8017ed4 <_Z12moveDistancev+0x5bc>)
 8017e8c:	ed93 7a00 	vldr	s14, [r3]
 8017e90:	4b18      	ldr	r3, [pc, #96]	@ (8017ef4 <_Z12moveDistancev+0x5dc>)
 8017e92:	edd3 7a00 	vldr	s15, [r3]
 8017e96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e9e:	db05      	blt.n	8017eac <_Z12moveDistancev+0x594>
        g_speed_controller.setSmoothEnabled(accel);
 8017ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8017ed0 <_Z12moveDistancev+0x5b8>)
 8017ea2:	781b      	ldrb	r3, [r3, #0]
 8017ea4:	4619      	mov	r1, r3
 8017ea6:	480c      	ldr	r0, [pc, #48]	@ (8017ed8 <_Z12moveDistancev+0x5c0>)
 8017ea8:	f7fe fec7 	bl	8016c3a <_ZN15SpeedController16setSmoothEnabledEb>
    }
    
    g_speed_controller.updateSpeed();
 8017eac:	480a      	ldr	r0, [pc, #40]	@ (8017ed8 <_Z12moveDistancev+0x5c0>)
 8017eae:	f7fe ff4d 	bl	8016d4c <_ZN15SpeedController11updateSpeedEv>
}
 8017eb2:	3758      	adds	r7, #88	@ 0x58
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	bd80      	pop	{r7, pc}
 8017eb8:	54442d18 	.word	0x54442d18
 8017ebc:	401921fb 	.word	0x401921fb
 8017ec0:	54442d18 	.word	0x54442d18
 8017ec4:	400921fb 	.word	0x400921fb
 8017ec8:	54442d18 	.word	0x54442d18
 8017ecc:	c00921fb 	.word	0xc00921fb
 8017ed0:	24003d5c 	.word	0x24003d5c
 8017ed4:	24003d54 	.word	0x24003d54
 8017ed8:	24003cfc 	.word	0x24003cfc
 8017edc:	240001dc 	.word	0x240001dc
 8017ee0:	240002b4 	.word	0x240002b4
 8017ee4:	3d4ccccd 	.word	0x3d4ccccd
 8017ee8:	3f4ccccd 	.word	0x3f4ccccd
 8017eec:	3f19999a 	.word	0x3f19999a
 8017ef0:	3d4ccccd 	.word	0x3d4ccccd
 8017ef4:	240001e4 	.word	0x240001e4

08017ef8 <_Z16integral_move_tofff>:

//use in main function
void integral_move_to (float x,float y,float w){
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b084      	sub	sp, #16
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8017f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8017f06:	ed87 1a01 	vstr	s2, [r7, #4]
    goal_x = x;
 8017f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8017f78 <_Z16integral_move_tofff+0x80>)
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	6013      	str	r3, [r2, #0]
    goal_y = y;
 8017f10:	4a1a      	ldr	r2, [pc, #104]	@ (8017f7c <_Z16integral_move_tofff+0x84>)
 8017f12:	68bb      	ldr	r3, [r7, #8]
 8017f14:	6013      	str	r3, [r2, #0]
    goal_theta = w * pi / 180; // Convert to radians
 8017f16:	edd7 7a01 	vldr	s15, [r7, #4]
 8017f1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017f1e:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8017f68 <_Z16integral_move_tofff+0x70>
 8017f22:	ee27 6b06 	vmul.f64	d6, d7, d6
 8017f26:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8017f70 <_Z16integral_move_tofff+0x78>
 8017f2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8017f2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017f32:	4b13      	ldr	r3, [pc, #76]	@ (8017f80 <_Z16integral_move_tofff+0x88>)
 8017f34:	edc3 7a00 	vstr	s15, [r3]
    moveMode_flag = 1;
 8017f38:	4b12      	ldr	r3, [pc, #72]	@ (8017f84 <_Z16integral_move_tofff+0x8c>)
 8017f3a:	2201      	movs	r2, #1
 8017f3c:	601a      	str	r2, [r3, #0]
    achieve_flag = false;
 8017f3e:	4b12      	ldr	r3, [pc, #72]	@ (8017f88 <_Z16integral_move_tofff+0x90>)
 8017f40:	2200      	movs	r2, #0
 8017f42:	701a      	strb	r2, [r3, #0]
    while (!ach()) {
 8017f44:	e001      	b.n	8017f4a <_Z16integral_move_tofff+0x52>
        ROS1::spinCycle();
 8017f46:	f7fd fd71 	bl	8015a2c <_ZN4ROS19spinCycleEv>
    while (!ach()) {
 8017f4a:	f7ff fa2f 	bl	80173ac <_Z3achv>
 8017f4e:	4603      	mov	r3, r0
 8017f50:	f083 0301 	eor.w	r3, r3, #1
 8017f54:	b2db      	uxtb	r3, r3
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d1f5      	bne.n	8017f46 <_Z16integral_move_tofff+0x4e>
    }
    //ach_stage++;
}
 8017f5a:	bf00      	nop
 8017f5c:	bf00      	nop
 8017f5e:	3710      	adds	r7, #16
 8017f60:	46bd      	mov	sp, r7
 8017f62:	bd80      	pop	{r7, pc}
 8017f64:	f3af 8000 	nop.w
 8017f68:	54442d18 	.word	0x54442d18
 8017f6c:	400921fb 	.word	0x400921fb
 8017f70:	00000000 	.word	0x00000000
 8017f74:	40668000 	.word	0x40668000
 8017f78:	24003d6c 	.word	0x24003d6c
 8017f7c:	24003d70 	.word	0x24003d70
 8017f80:	24003d74 	.word	0x24003d74
 8017f84:	24003d78 	.word	0x24003d78
 8017f88:	24003d7c 	.word	0x24003d7c

08017f8c <_Z16setPath_distancefif>:

void setPath_distance(float path_distance, int _path_dir, float speed) {
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b084      	sub	sp, #16
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	ed87 0a03 	vstr	s0, [r7, #12]
 8017f96:	60b8      	str	r0, [r7, #8]
 8017f98:	edc7 0a01 	vstr	s1, [r7, #4]
    path_dis = path_distance;
 8017f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8018010 <_Z16setPath_distancefif+0x84>)
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	6013      	str	r3, [r2, #0]
    path_dir = _path_dir; // Set the direction for path following
 8017fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8018014 <_Z16setPath_distancefif+0x88>)
 8017fa4:	68bb      	ldr	r3, [r7, #8]
 8017fa6:	6013      	str	r3, [r2, #0]
    moveMode_flag = 2;
 8017fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8018018 <_Z16setPath_distancefif+0x8c>)
 8017faa:	2202      	movs	r2, #2
 8017fac:	601a      	str	r2, [r3, #0]
    achieve_flag = false;
 8017fae:	4b1b      	ldr	r3, [pc, #108]	@ (801801c <_Z16setPath_distancefif+0x90>)
 8017fb0:	2200      	movs	r2, #0
 8017fb2:	701a      	strb	r2, [r3, #0]
    travel_distance = 0; // Reset travel distance for the new path
 8017fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8018020 <_Z16setPath_distancefif+0x94>)
 8017fb6:	f04f 0200 	mov.w	r2, #0
 8017fba:	601a      	str	r2, [r3, #0]
    start_x = map_x; // Store the starting position
 8017fbc:	4b19      	ldr	r3, [pc, #100]	@ (8018024 <_Z16setPath_distancefif+0x98>)
 8017fbe:	edd3 7a00 	vldr	s15, [r3]
 8017fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017fc6:	ee17 2a90 	vmov	r2, s15
 8017fca:	4b17      	ldr	r3, [pc, #92]	@ (8018028 <_Z16setPath_distancefif+0x9c>)
 8017fcc:	601a      	str	r2, [r3, #0]
    start_y = map_y; // Store the starting position
 8017fce:	4b17      	ldr	r3, [pc, #92]	@ (801802c <_Z16setPath_distancefif+0xa0>)
 8017fd0:	edd3 7a00 	vldr	s15, [r3]
 8017fd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017fd8:	ee17 2a90 	vmov	r2, s15
 8017fdc:	4b14      	ldr	r3, [pc, #80]	@ (8018030 <_Z16setPath_distancefif+0xa4>)
 8017fde:	601a      	str	r2, [r3, #0]
    
    // 設定循跡速度`
    normal_Speed = speed;
 8017fe0:	4a14      	ldr	r2, [pc, #80]	@ (8018034 <_Z16setPath_distancefif+0xa8>)
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	6013      	str	r3, [r2, #0]
    // 儲存當前的 move_speed 作為原始速度
    original_move_speed = normal_Speed;
 8017fe6:	4b13      	ldr	r3, [pc, #76]	@ (8018034 <_Z16setPath_distancefif+0xa8>)
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	4a13      	ldr	r2, [pc, #76]	@ (8018038 <_Z16setPath_distancefif+0xac>)
 8017fec:	6013      	str	r3, [r2, #0]
    
    while (!ach()) {
 8017fee:	e001      	b.n	8017ff4 <_Z16setPath_distancefif+0x68>
        ROS1::spinCycle();
 8017ff0:	f7fd fd1c 	bl	8015a2c <_ZN4ROS19spinCycleEv>
    while (!ach()) {
 8017ff4:	f7ff f9da 	bl	80173ac <_Z3achv>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	f083 0301 	eor.w	r3, r3, #1
 8017ffe:	b2db      	uxtb	r3, r3
 8018000:	2b00      	cmp	r3, #0
 8018002:	d1f5      	bne.n	8017ff0 <_Z16setPath_distancefif+0x64>
    }
    //ach_stage++;

}
 8018004:	bf00      	nop
 8018006:	bf00      	nop
 8018008:	3710      	adds	r7, #16
 801800a:	46bd      	mov	sp, r7
 801800c:	bd80      	pop	{r7, pc}
 801800e:	bf00      	nop
 8018010:	24003d88 	.word	0x24003d88
 8018014:	24003d90 	.word	0x24003d90
 8018018:	24003d78 	.word	0x24003d78
 801801c:	24003d7c 	.word	0x24003d7c
 8018020:	24003d80 	.word	0x24003d80
 8018024:	240002ac 	.word	0x240002ac
 8018028:	24003d94 	.word	0x24003d94
 801802c:	240002b0 	.word	0x240002b0
 8018030:	24003d98 	.word	0x24003d98
 8018034:	240001ec 	.word	0x240001ec
 8018038:	240001e8 	.word	0x240001e8

0801803c <_Z23set_directMove_findLineiif>:

void set_directMove_findLine(int _dir, int _line_type, float speed) {
 801803c:	b580      	push	{r7, lr}
 801803e:	b084      	sub	sp, #16
 8018040:	af00      	add	r7, sp, #0
 8018042:	60f8      	str	r0, [r7, #12]
 8018044:	60b9      	str	r1, [r7, #8]
 8018046:	ed87 0a01 	vstr	s0, [r7, #4]
    moveMode_flag = 3; // Set the mode to follow line
 801804a:	4b0f      	ldr	r3, [pc, #60]	@ (8018088 <_Z23set_directMove_findLineiif+0x4c>)
 801804c:	2203      	movs	r2, #3
 801804e:	601a      	str	r2, [r3, #0]
    achieve_flag = false; // Reset the achievement flag
 8018050:	4b0e      	ldr	r3, [pc, #56]	@ (801808c <_Z23set_directMove_findLineiif+0x50>)
 8018052:	2200      	movs	r2, #0
 8018054:	701a      	strb	r2, [r3, #0]
    line_type = _line_type; // Set the line type
 8018056:	4a0e      	ldr	r2, [pc, #56]	@ (8018090 <_Z23set_directMove_findLineiif+0x54>)
 8018058:	68bb      	ldr	r3, [r7, #8]
 801805a:	6013      	str	r3, [r2, #0]
    move_dir = _dir; // Set the direction for direct move
 801805c:	4a0d      	ldr	r2, [pc, #52]	@ (8018094 <_Z23set_directMove_findLineiif+0x58>)
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	6013      	str	r3, [r2, #0]

    // Set the speed for direct move
    normal_Speed = speed;
 8018062:	4a0d      	ldr	r2, [pc, #52]	@ (8018098 <_Z23set_directMove_findLineiif+0x5c>)
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	6013      	str	r3, [r2, #0]

    while (!ach()) {
 8018068:	e001      	b.n	801806e <_Z23set_directMove_findLineiif+0x32>
        ROS1::spinCycle();
 801806a:	f7fd fcdf 	bl	8015a2c <_ZN4ROS19spinCycleEv>
    while (!ach()) {
 801806e:	f7ff f99d 	bl	80173ac <_Z3achv>
 8018072:	4603      	mov	r3, r0
 8018074:	f083 0301 	eor.w	r3, r3, #1
 8018078:	b2db      	uxtb	r3, r3
 801807a:	2b00      	cmp	r3, #0
 801807c:	d1f5      	bne.n	801806a <_Z23set_directMove_findLineiif+0x2e>
    }
   // ach_stage++;
}
 801807e:	bf00      	nop
 8018080:	bf00      	nop
 8018082:	3710      	adds	r7, #16
 8018084:	46bd      	mov	sp, r7
 8018086:	bd80      	pop	{r7, pc}
 8018088:	24003d78 	.word	0x24003d78
 801808c:	24003d7c 	.word	0x24003d7c
 8018090:	24003d8c 	.word	0x24003d8c
 8018094:	24003da0 	.word	0x24003da0
 8018098:	240001ec 	.word	0x240001ec

0801809c <_Z20setPath_finding_lineiif>:
        ROS1::spinCycle();
    }
    //ach_stage++;
}

void setPath_finding_line(int _line_type, int _path_dir, float speed) {
 801809c:	b580      	push	{r7, lr}
 801809e:	b084      	sub	sp, #16
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	60f8      	str	r0, [r7, #12]
 80180a4:	60b9      	str	r1, [r7, #8]
 80180a6:	ed87 0a01 	vstr	s0, [r7, #4]
    moveMode_flag = 5; // Set the mode to finding line
 80180aa:	4b11      	ldr	r3, [pc, #68]	@ (80180f0 <_Z20setPath_finding_lineiif+0x54>)
 80180ac:	2205      	movs	r2, #5
 80180ae:	601a      	str	r2, [r3, #0]
    line_type = _line_type; // Set the line type
 80180b0:	4a10      	ldr	r2, [pc, #64]	@ (80180f4 <_Z20setPath_finding_lineiif+0x58>)
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	6013      	str	r3, [r2, #0]
    path_dir = _path_dir; // Default direction for path following
 80180b6:	4a10      	ldr	r2, [pc, #64]	@ (80180f8 <_Z20setPath_finding_lineiif+0x5c>)
 80180b8:	68bb      	ldr	r3, [r7, #8]
 80180ba:	6013      	str	r3, [r2, #0]
    achieve_flag = false; // Reset the achievement flag
 80180bc:	4b0f      	ldr	r3, [pc, #60]	@ (80180fc <_Z20setPath_finding_lineiif+0x60>)
 80180be:	2200      	movs	r2, #0
 80180c0:	701a      	strb	r2, [r3, #0]
    
    // 設定循跡速度
    normal_Speed = speed;
 80180c2:	4a0f      	ldr	r2, [pc, #60]	@ (8018100 <_Z20setPath_finding_lineiif+0x64>)
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	6013      	str	r3, [r2, #0]
    // 儲存當前的 move_speed 作為原始速度
    original_move_speed = normal_Speed;
 80180c8:	4b0d      	ldr	r3, [pc, #52]	@ (8018100 <_Z20setPath_finding_lineiif+0x64>)
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	4a0d      	ldr	r2, [pc, #52]	@ (8018104 <_Z20setPath_finding_lineiif+0x68>)
 80180ce:	6013      	str	r3, [r2, #0]
    
    while (!ach()) {
 80180d0:	e001      	b.n	80180d6 <_Z20setPath_finding_lineiif+0x3a>
        ROS1::spinCycle();
 80180d2:	f7fd fcab 	bl	8015a2c <_ZN4ROS19spinCycleEv>
    while (!ach()) {
 80180d6:	f7ff f969 	bl	80173ac <_Z3achv>
 80180da:	4603      	mov	r3, r0
 80180dc:	f083 0301 	eor.w	r3, r3, #1
 80180e0:	b2db      	uxtb	r3, r3
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d1f5      	bne.n	80180d2 <_Z20setPath_finding_lineiif+0x36>
    }
    //ach_stage++;
}
 80180e6:	bf00      	nop
 80180e8:	bf00      	nop
 80180ea:	3710      	adds	r7, #16
 80180ec:	46bd      	mov	sp, r7
 80180ee:	bd80      	pop	{r7, pc}
 80180f0:	24003d78 	.word	0x24003d78
 80180f4:	24003d8c 	.word	0x24003d8c
 80180f8:	24003d90 	.word	0x24003d90
 80180fc:	24003d7c 	.word	0x24003d7c
 8018100:	240001ec 	.word	0x240001ec
 8018104:	240001e8 	.word	0x240001e8

08018108 <_Z19waitMissionCompletei>:
//int currentStage = 0;
void waitMissionComplete(int _stage){
 8018108:	b580      	push	{r7, lr}
 801810a:	b082      	sub	sp, #8
 801810c:	af00      	add	r7, sp, #0
 801810e:	6078      	str	r0, [r7, #4]
	if(ttest)
 8018110:	4b0f      	ldr	r3, [pc, #60]	@ (8018150 <_Z19waitMissionCompletei+0x48>)
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	2b00      	cmp	r3, #0
 8018116:	d117      	bne.n	8018148 <_Z19waitMissionCompletei+0x40>
		return;
    stage = _stage;
 8018118:	4a0e      	ldr	r2, [pc, #56]	@ (8018154 <_Z19waitMissionCompletei+0x4c>)
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	6013      	str	r3, [r2, #0]
    moveMode_flag = 0;
 801811e:	4b0e      	ldr	r3, [pc, #56]	@ (8018158 <_Z19waitMissionCompletei+0x50>)
 8018120:	2200      	movs	r2, #0
 8018122:	601a      	str	r2, [r3, #0]
    mission_flag = false; // 修正：使用賦值運算符而非比較運算符
 8018124:	4b0d      	ldr	r3, [pc, #52]	@ (801815c <_Z19waitMissionCompletei+0x54>)
 8018126:	2200      	movs	r2, #0
 8018128:	701a      	strb	r2, [r3, #0]
    //currentStage = _stage;
    while(!missioncheck()) {
 801812a:	e001      	b.n	8018130 <_Z19waitMissionCompletei+0x28>
        ROS1::spinCycle();
 801812c:	f7fd fc7e 	bl	8015a2c <_ZN4ROS19spinCycleEv>
    while(!missioncheck()) {
 8018130:	f7ff f94e 	bl	80173d0 <_Z12missioncheckv>
 8018134:	4603      	mov	r3, r0
 8018136:	f083 0301 	eor.w	r3, r3, #1
 801813a:	b2db      	uxtb	r3, r3
 801813c:	2b00      	cmp	r3, #0
 801813e:	d1f5      	bne.n	801812c <_Z19waitMissionCompletei+0x24>
    }
    stage = 0 ;
 8018140:	4b04      	ldr	r3, [pc, #16]	@ (8018154 <_Z19waitMissionCompletei+0x4c>)
 8018142:	2200      	movs	r2, #0
 8018144:	601a      	str	r2, [r3, #0]
 8018146:	e000      	b.n	801814a <_Z19waitMissionCompletei+0x42>
		return;
 8018148:	bf00      	nop
}
 801814a:	3708      	adds	r7, #8
 801814c:	46bd      	mov	sp, r7
 801814e:	bd80      	pop	{r7, pc}
 8018150:	240010fc 	.word	0x240010fc
 8018154:	24003da8 	.word	0x24003da8
 8018158:	24003d78 	.word	0x24003d78
 801815c:	240001e0 	.word	0x240001e0

08018160 <_Z15setmoveDistanceffffii>:
    if (speed_rate) *speed_rate = pathfinding_speed_change_rate;
    if (min_ratio) *min_ratio = pathfinding_min_speed_ratio;
    if (threshold) *threshold = pathfinding_line_threshold;
}

void setmoveDistance(float x_dis, float y_dis ,float angle ,float speed,int _accel, int rotation_dir ){
 8018160:	b580      	push	{r7, lr}
 8018162:	b08a      	sub	sp, #40	@ 0x28
 8018164:	af00      	add	r7, sp, #0
 8018166:	ed87 0a05 	vstr	s0, [r7, #20]
 801816a:	edc7 0a04 	vstr	s1, [r7, #16]
 801816e:	ed87 1a03 	vstr	s2, [r7, #12]
 8018172:	edc7 1a02 	vstr	s3, [r7, #8]
 8018176:	6078      	str	r0, [r7, #4]
 8018178:	6039      	str	r1, [r7, #0]
    moveMode_flag = 6;
 801817a:	4b79      	ldr	r3, [pc, #484]	@ (8018360 <_Z15setmoveDistanceffffii+0x200>)
 801817c:	2206      	movs	r2, #6
 801817e:	601a      	str	r2, [r3, #0]
    x_distance = x_dis;
 8018180:	4a78      	ldr	r2, [pc, #480]	@ (8018364 <_Z15setmoveDistanceffffii+0x204>)
 8018182:	697b      	ldr	r3, [r7, #20]
 8018184:	6013      	str	r3, [r2, #0]
    y_distance = y_dis;
 8018186:	4a78      	ldr	r2, [pc, #480]	@ (8018368 <_Z15setmoveDistanceffffii+0x208>)
 8018188:	693b      	ldr	r3, [r7, #16]
 801818a:	6013      	str	r3, [r2, #0]
    
    // 根據旋轉方向控制處理角度
    // rotation_dir: 0=自動選擇最短路徑, 1=順時針, -1=逆時針, 2=絕對角度
    if (rotation_dir == 2) {
 801818c:	683b      	ldr	r3, [r7, #0]
 801818e:	2b02      	cmp	r3, #2
 8018190:	d147      	bne.n	8018222 <_Z15setmoveDistanceffffii+0xc2>
        // 絕對角度模式：直接使用給定角度
        moveangle = angle * pi / 180; // Convert degrees to radians
 8018192:	edd7 7a03 	vldr	s15, [r7, #12]
 8018196:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801819a:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8018340 <_Z15setmoveDistanceffffii+0x1e0>
 801819e:	ee27 6b06 	vmul.f64	d6, d7, d6
 80181a2:	ed9f 5b69 	vldr	d5, [pc, #420]	@ 8018348 <_Z15setmoveDistanceffffii+0x1e8>
 80181a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80181aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80181ae:	4b6f      	ldr	r3, [pc, #444]	@ (801836c <_Z15setmoveDistanceffffii+0x20c>)
 80181b0:	edc3 7a00 	vstr	s15, [r3]
        // 正規化到 [-π, π] 以避免多轉問題
        while (moveangle > pi) moveangle -= 2 * pi;
 80181b4:	e00d      	b.n	80181d2 <_Z15setmoveDistanceffffii+0x72>
 80181b6:	4b6d      	ldr	r3, [pc, #436]	@ (801836c <_Z15setmoveDistanceffffii+0x20c>)
 80181b8:	edd3 7a00 	vldr	s15, [r3]
 80181bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80181c0:	ed9f 6b63 	vldr	d6, [pc, #396]	@ 8018350 <_Z15setmoveDistanceffffii+0x1f0>
 80181c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80181c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80181cc:	4b67      	ldr	r3, [pc, #412]	@ (801836c <_Z15setmoveDistanceffffii+0x20c>)
 80181ce:	edc3 7a00 	vstr	s15, [r3]
 80181d2:	4b66      	ldr	r3, [pc, #408]	@ (801836c <_Z15setmoveDistanceffffii+0x20c>)
 80181d4:	edd3 7a00 	vldr	s15, [r3]
 80181d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80181dc:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8018340 <_Z15setmoveDistanceffffii+0x1e0>
 80181e0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80181e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181e8:	dce5      	bgt.n	80181b6 <_Z15setmoveDistanceffffii+0x56>
        while (moveangle < -pi) moveangle += 2 * pi;
 80181ea:	e00d      	b.n	8018208 <_Z15setmoveDistanceffffii+0xa8>
 80181ec:	4b5f      	ldr	r3, [pc, #380]	@ (801836c <_Z15setmoveDistanceffffii+0x20c>)
 80181ee:	edd3 7a00 	vldr	s15, [r3]
 80181f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80181f6:	ed9f 6b56 	vldr	d6, [pc, #344]	@ 8018350 <_Z15setmoveDistanceffffii+0x1f0>
 80181fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80181fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8018202:	4b5a      	ldr	r3, [pc, #360]	@ (801836c <_Z15setmoveDistanceffffii+0x20c>)
 8018204:	edc3 7a00 	vstr	s15, [r3]
 8018208:	4b58      	ldr	r3, [pc, #352]	@ (801836c <_Z15setmoveDistanceffffii+0x20c>)
 801820a:	edd3 7a00 	vldr	s15, [r3]
 801820e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018212:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8018358 <_Z15setmoveDistanceffffii+0x1f8>
 8018216:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801821a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801821e:	d4e5      	bmi.n	80181ec <_Z15setmoveDistanceffffii+0x8c>
 8018220:	e0ca      	b.n	80183b8 <_Z15setmoveDistanceffffii+0x258>
    } else if (fabs(angle) < 0.1f) {
 8018222:	ed97 0a03 	vldr	s0, [r7, #12]
 8018226:	f7fa fc47 	bl	8012ab8 <_ZSt4fabsf>
 801822a:	eef0 7a40 	vmov.f32	s15, s0
 801822e:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8018370 <_Z15setmoveDistanceffffii+0x210>
 8018232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801823a:	bf4c      	ite	mi
 801823c:	2301      	movmi	r3, #1
 801823e:	2300      	movpl	r3, #0
 8018240:	b2db      	uxtb	r3, r3
 8018242:	2b00      	cmp	r3, #0
 8018244:	d004      	beq.n	8018250 <_Z15setmoveDistanceffffii+0xf0>
        // 如果角度接近 0，不進行旋轉，保持當前角度
        moveangle = theta; // 保持當前角度，不旋轉
 8018246:	4b4b      	ldr	r3, [pc, #300]	@ (8018374 <_Z15setmoveDistanceffffii+0x214>)
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	4a48      	ldr	r2, [pc, #288]	@ (801836c <_Z15setmoveDistanceffffii+0x20c>)
 801824c:	6013      	str	r3, [r2, #0]
 801824e:	e0b3      	b.n	80183b8 <_Z15setmoveDistanceffffii+0x258>
    } else {
        // 相對角度模式：基於當前角度計算目標角度
        float target_angle_rad = angle * pi / 180;      // 目標角度轉為弧度
 8018250:	edd7 7a03 	vldr	s15, [r7, #12]
 8018254:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018258:	ed9f 6b39 	vldr	d6, [pc, #228]	@ 8018340 <_Z15setmoveDistanceffffii+0x1e0>
 801825c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8018260:	ed9f 5b39 	vldr	d5, [pc, #228]	@ 8018348 <_Z15setmoveDistanceffffii+0x1e8>
 8018264:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8018268:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801826c:	edc7 7a08 	vstr	s15, [r7, #32]
        float current_angle_rad = theta;                // 當前角度已經是弧度
 8018270:	4b40      	ldr	r3, [pc, #256]	@ (8018374 <_Z15setmoveDistanceffffii+0x214>)
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	61fb      	str	r3, [r7, #28]
        
        // 計算角度差（弧度）
        float angle_diff = target_angle_rad - current_angle_rad;
 8018276:	ed97 7a08 	vldr	s14, [r7, #32]
 801827a:	edd7 7a07 	vldr	s15, [r7, #28]
 801827e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018282:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        
        // 正規化角度差到 [-π, π] 弧度
        while (angle_diff > pi) angle_diff -= 2 * pi;
 8018286:	e00b      	b.n	80182a0 <_Z15setmoveDistanceffffii+0x140>
 8018288:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801828c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018290:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8018350 <_Z15setmoveDistanceffffii+0x1f0>
 8018294:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018298:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801829c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 80182a0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80182a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80182a8:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8018340 <_Z15setmoveDistanceffffii+0x1e0>
 80182ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80182b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182b4:	dce8      	bgt.n	8018288 <_Z15setmoveDistanceffffii+0x128>
        while (angle_diff < -pi) angle_diff += 2 * pi;
 80182b6:	e00b      	b.n	80182d0 <_Z15setmoveDistanceffffii+0x170>
 80182b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80182bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80182c0:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8018350 <_Z15setmoveDistanceffffii+0x1f0>
 80182c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80182c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80182cc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 80182d0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80182d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80182d8:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8018358 <_Z15setmoveDistanceffffii+0x1f8>
 80182dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80182e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182e4:	d4e8      	bmi.n	80182b8 <_Z15setmoveDistanceffffii+0x158>
        
        if (rotation_dir == 0) {
 80182e6:	683b      	ldr	r3, [r7, #0]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d109      	bne.n	8018300 <_Z15setmoveDistanceffffii+0x1a0>
            // 自動選擇最短路徑（預設行為）
            moveangle = current_angle_rad + angle_diff;
 80182ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80182f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80182f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80182f8:	4b1c      	ldr	r3, [pc, #112]	@ (801836c <_Z15setmoveDistanceffffii+0x20c>)
 80182fa:	edc3 7a00 	vstr	s15, [r3]
 80182fe:	e05b      	b.n	80183b8 <_Z15setmoveDistanceffffii+0x258>
        } else if (rotation_dir == 1) {
 8018300:	683b      	ldr	r3, [r7, #0]
 8018302:	2b01      	cmp	r3, #1
 8018304:	d138      	bne.n	8018378 <_Z15setmoveDistanceffffii+0x218>
            // 強制順時針旋轉
            // 在你的座標系中，順時針 = 角度值減少 = 負角速度
            if (angle_diff >= 0) {
 8018306:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801830a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801830e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018312:	db0b      	blt.n	801832c <_Z15setmoveDistanceffffii+0x1cc>
                // 如果自然方向是逆時針或零，強制走順時針路徑
                angle_diff -= 2 * pi;
 8018314:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8018318:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801831c:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8018350 <_Z15setmoveDistanceffffii+0x1f0>
 8018320:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018324:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8018328:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            }
            moveangle = current_angle_rad + angle_diff;
 801832c:	ed97 7a07 	vldr	s14, [r7, #28]
 8018330:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8018334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018338:	4b0c      	ldr	r3, [pc, #48]	@ (801836c <_Z15setmoveDistanceffffii+0x20c>)
 801833a:	edc3 7a00 	vstr	s15, [r3]
 801833e:	e03b      	b.n	80183b8 <_Z15setmoveDistanceffffii+0x258>
 8018340:	54442d18 	.word	0x54442d18
 8018344:	400921fb 	.word	0x400921fb
 8018348:	00000000 	.word	0x00000000
 801834c:	40668000 	.word	0x40668000
 8018350:	54442d18 	.word	0x54442d18
 8018354:	401921fb 	.word	0x401921fb
 8018358:	54442d18 	.word	0x54442d18
 801835c:	c00921fb 	.word	0xc00921fb
 8018360:	24003d78 	.word	0x24003d78
 8018364:	24003d4c 	.word	0x24003d4c
 8018368:	24003d50 	.word	0x24003d50
 801836c:	24003d58 	.word	0x24003d58
 8018370:	3dcccccd 	.word	0x3dcccccd
 8018374:	240002b4 	.word	0x240002b4
        } else if (rotation_dir == -1) {
 8018378:	683b      	ldr	r3, [r7, #0]
 801837a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801837e:	d11b      	bne.n	80183b8 <_Z15setmoveDistanceffffii+0x258>
            // 強制逆時針旋轉  
            // 在你的座標系中，逆時針 = 角度值增加 = 正角速度
            if (angle_diff <= 0) {
 8018380:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8018384:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801838c:	d80b      	bhi.n	80183a6 <_Z15setmoveDistanceffffii+0x246>
                // 如果自然方向是順時針或零，強制走逆時針路徑
                angle_diff += 2 * pi;
 801838e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8018392:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018396:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8018500 <_Z15setmoveDistanceffffii+0x3a0>
 801839a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801839e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80183a2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            }
            moveangle = current_angle_rad + angle_diff;
 80183a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80183aa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80183ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80183b2:	4b55      	ldr	r3, [pc, #340]	@ (8018508 <_Z15setmoveDistanceffffii+0x3a8>)
 80183b4:	edc3 7a00 	vstr	s15, [r3]

        // 不進行最終角度正規化！讓 moveangle 可以超出 [-π, π] 範圍
        // 這樣 moveDistance() 才能知道要走長路徑還是短路徑
    }
    
    moveDistance_speed = speed;
 80183b8:	4a54      	ldr	r2, [pc, #336]	@ (801850c <_Z15setmoveDistanceffffii+0x3ac>)
 80183ba:	68bb      	ldr	r3, [r7, #8]
 80183bc:	6013      	str	r3, [r2, #0]
    
    // 計算當前的實際移動速度作為初始速度（基於encoder反饋）
    initial_speed = sqrt(v_x * v_x + v_y * v_y);
 80183be:	4b54      	ldr	r3, [pc, #336]	@ (8018510 <_Z15setmoveDistanceffffii+0x3b0>)
 80183c0:	ed93 7a00 	vldr	s14, [r3]
 80183c4:	4b52      	ldr	r3, [pc, #328]	@ (8018510 <_Z15setmoveDistanceffffii+0x3b0>)
 80183c6:	edd3 7a00 	vldr	s15, [r3]
 80183ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80183ce:	4b51      	ldr	r3, [pc, #324]	@ (8018514 <_Z15setmoveDistanceffffii+0x3b4>)
 80183d0:	edd3 6a00 	vldr	s13, [r3]
 80183d4:	4b4f      	ldr	r3, [pc, #316]	@ (8018514 <_Z15setmoveDistanceffffii+0x3b4>)
 80183d6:	edd3 7a00 	vldr	s15, [r3]
 80183da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80183de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80183e2:	eeb0 0a67 	vmov.f32	s0, s15
 80183e6:	f7fe fb9d 	bl	8016b24 <_ZSt4sqrtf>
 80183ea:	eef0 7a40 	vmov.f32	s15, s0
 80183ee:	4b4a      	ldr	r3, [pc, #296]	@ (8018518 <_Z15setmoveDistanceffffii+0x3b8>)
 80183f0:	edc3 7a00 	vstr	s15, [r3]
    
    // 如果當前速度為0，設定一個最小初始速度
    if (initial_speed < 0.1f) {
 80183f4:	4b48      	ldr	r3, [pc, #288]	@ (8018518 <_Z15setmoveDistanceffffii+0x3b8>)
 80183f6:	edd3 7a00 	vldr	s15, [r3]
 80183fa:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 801851c <_Z15setmoveDistanceffffii+0x3bc>
 80183fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018406:	d508      	bpl.n	801841a <_Z15setmoveDistanceffffii+0x2ba>
        initial_speed = speed * 0.1f; // 設為目標速度的10%
 8018408:	edd7 7a02 	vldr	s15, [r7, #8]
 801840c:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 801851c <_Z15setmoveDistanceffffii+0x3bc>
 8018410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018414:	4b40      	ldr	r3, [pc, #256]	@ (8018518 <_Z15setmoveDistanceffffii+0x3b8>)
 8018416:	edc3 7a00 	vstr	s15, [r3]
    }
    
    // 確保初始速度不超過目標速度
    if (initial_speed > speed) {
 801841a:	4b3f      	ldr	r3, [pc, #252]	@ (8018518 <_Z15setmoveDistanceffffii+0x3b8>)
 801841c:	edd3 7a00 	vldr	s15, [r3]
 8018420:	ed97 7a02 	vldr	s14, [r7, #8]
 8018424:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801842c:	d508      	bpl.n	8018440 <_Z15setmoveDistanceffffii+0x2e0>
        initial_speed = speed * 0.8f; // 如果當前速度太高，設為目標速度的80%
 801842e:	edd7 7a02 	vldr	s15, [r7, #8]
 8018432:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8018520 <_Z15setmoveDistanceffffii+0x3c0>
 8018436:	ee67 7a87 	vmul.f32	s15, s15, s14
 801843a:	4b37      	ldr	r3, [pc, #220]	@ (8018518 <_Z15setmoveDistanceffffii+0x3b8>)
 801843c:	edc3 7a00 	vstr	s15, [r3]
    }
    
    current_move_speed = initial_speed; // 初始化當前速度
 8018440:	4b35      	ldr	r3, [pc, #212]	@ (8018518 <_Z15setmoveDistanceffffii+0x3b8>)
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	4a37      	ldr	r2, [pc, #220]	@ (8018524 <_Z15setmoveDistanceffffii+0x3c4>)
 8018446:	6013      	str	r3, [r2, #0]
    
    // 初始化起始位置
    start_x = map_x;
 8018448:	4b37      	ldr	r3, [pc, #220]	@ (8018528 <_Z15setmoveDistanceffffii+0x3c8>)
 801844a:	edd3 7a00 	vldr	s15, [r3]
 801844e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018452:	ee17 2a90 	vmov	r2, s15
 8018456:	4b35      	ldr	r3, [pc, #212]	@ (801852c <_Z15setmoveDistanceffffii+0x3cc>)
 8018458:	601a      	str	r2, [r3, #0]
    start_y = map_y;
 801845a:	4b35      	ldr	r3, [pc, #212]	@ (8018530 <_Z15setmoveDistanceffffii+0x3d0>)
 801845c:	edd3 7a00 	vldr	s15, [r3]
 8018460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018464:	ee17 2a90 	vmov	r2, s15
 8018468:	4b32      	ldr	r3, [pc, #200]	@ (8018534 <_Z15setmoveDistanceffffii+0x3d4>)
 801846a:	601a      	str	r2, [r3, #0]
    start_theta = theta;
 801846c:	4b32      	ldr	r3, [pc, #200]	@ (8018538 <_Z15setmoveDistanceffffii+0x3d8>)
 801846e:	edd3 7a00 	vldr	s15, [r3]
 8018472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018476:	ee17 2a90 	vmov	r2, s15
 801847a:	4b30      	ldr	r3, [pc, #192]	@ (801853c <_Z15setmoveDistanceffffii+0x3dc>)
 801847c:	601a      	str	r2, [r3, #0]
    accel = _accel;
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	2b00      	cmp	r3, #0
 8018482:	bf14      	ite	ne
 8018484:	2301      	movne	r3, #1
 8018486:	2300      	moveq	r3, #0
 8018488:	b2da      	uxtb	r2, r3
 801848a:	4b2d      	ldr	r3, [pc, #180]	@ (8018540 <_Z15setmoveDistanceffffii+0x3e0>)
 801848c:	701a      	strb	r2, [r3, #0]
    
    // 重置成就標誌
    achieve_flag = false;
 801848e:	4b2d      	ldr	r3, [pc, #180]	@ (8018544 <_Z15setmoveDistanceffffii+0x3e4>)
 8018490:	2200      	movs	r2, #0
 8018492:	701a      	strb	r2, [r3, #0]
    
    // 計算總距離
    dis = sqrt(x_distance * x_distance + y_distance * y_distance);
 8018494:	4b2c      	ldr	r3, [pc, #176]	@ (8018548 <_Z15setmoveDistanceffffii+0x3e8>)
 8018496:	ed93 7a00 	vldr	s14, [r3]
 801849a:	4b2b      	ldr	r3, [pc, #172]	@ (8018548 <_Z15setmoveDistanceffffii+0x3e8>)
 801849c:	edd3 7a00 	vldr	s15, [r3]
 80184a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80184a4:	4b29      	ldr	r3, [pc, #164]	@ (801854c <_Z15setmoveDistanceffffii+0x3ec>)
 80184a6:	edd3 6a00 	vldr	s13, [r3]
 80184aa:	4b28      	ldr	r3, [pc, #160]	@ (801854c <_Z15setmoveDistanceffffii+0x3ec>)
 80184ac:	edd3 7a00 	vldr	s15, [r3]
 80184b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80184b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80184b8:	eeb0 0a67 	vmov.f32	s0, s15
 80184bc:	f7fe fb32 	bl	8016b24 <_ZSt4sqrtf>
 80184c0:	eef0 7a40 	vmov.f32	s15, s0
 80184c4:	4b22      	ldr	r3, [pc, #136]	@ (8018550 <_Z15setmoveDistanceffffii+0x3f0>)
 80184c6:	edc3 7a00 	vstr	s15, [r3]
    
    // 設定加速/減速距離為總距離的10%
    acceleration_distance = dis * 0.1f;
 80184ca:	4b21      	ldr	r3, [pc, #132]	@ (8018550 <_Z15setmoveDistanceffffii+0x3f0>)
 80184cc:	edd3 7a00 	vldr	s15, [r3]
 80184d0:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 801851c <_Z15setmoveDistanceffffii+0x3bc>
 80184d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80184d8:	4b1e      	ldr	r3, [pc, #120]	@ (8018554 <_Z15setmoveDistanceffffii+0x3f4>)
 80184da:	edc3 7a00 	vstr	s15, [r3]
    
    // 等待執行完成
    while (!ach()) {
 80184de:	e001      	b.n	80184e4 <_Z15setmoveDistanceffffii+0x384>
    	ROS1::spinCycle();
 80184e0:	f7fd faa4 	bl	8015a2c <_ZN4ROS19spinCycleEv>
    while (!ach()) {
 80184e4:	f7fe ff62 	bl	80173ac <_Z3achv>
 80184e8:	4603      	mov	r3, r0
 80184ea:	f083 0301 	eor.w	r3, r3, #1
 80184ee:	b2db      	uxtb	r3, r3
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d1f5      	bne.n	80184e0 <_Z15setmoveDistanceffffii+0x380>
    }
    //ach_stage++;
}
 80184f4:	bf00      	nop
 80184f6:	bf00      	nop
 80184f8:	3728      	adds	r7, #40	@ 0x28
 80184fa:	46bd      	mov	sp, r7
 80184fc:	bd80      	pop	{r7, pc}
 80184fe:	bf00      	nop
 8018500:	54442d18 	.word	0x54442d18
 8018504:	401921fb 	.word	0x401921fb
 8018508:	24003d58 	.word	0x24003d58
 801850c:	240001dc 	.word	0x240001dc
 8018510:	240002b8 	.word	0x240002b8
 8018514:	240002bc 	.word	0x240002bc
 8018518:	24003d64 	.word	0x24003d64
 801851c:	3dcccccd 	.word	0x3dcccccd
 8018520:	3f4ccccd 	.word	0x3f4ccccd
 8018524:	24003d68 	.word	0x24003d68
 8018528:	240002ac 	.word	0x240002ac
 801852c:	24003d94 	.word	0x24003d94
 8018530:	240002b0 	.word	0x240002b0
 8018534:	24003d98 	.word	0x24003d98
 8018538:	240002b4 	.word	0x240002b4
 801853c:	24003d9c 	.word	0x24003d9c
 8018540:	24003d5c 	.word	0x24003d5c
 8018544:	24003d7c 	.word	0x24003d7c
 8018548:	24003d4c 	.word	0x24003d4c
 801854c:	24003d50 	.word	0x24003d50
 8018550:	24003d54 	.word	0x24003d54
 8018554:	24003d60 	.word	0x24003d60

08018558 <_Z12chassis_movev>:
//    Lifter::wheel_sp = chassisSP;
//    achieve_flag = false;
//    while(!ach()) {}
//}

void chassis_move(){
 8018558:	b580      	push	{r7, lr}
 801855a:	af00      	add	r7, sp, #0
	moveMode(moveMode_flag);
 801855c:	4b03      	ldr	r3, [pc, #12]	@ (801856c <_Z12chassis_movev+0x14>)
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	4618      	mov	r0, r3
 8018562:	f7fe ff55 	bl	8017410 <_Z8moveModei>
}
 8018566:	bf00      	nop
 8018568:	bd80      	pop	{r7, pc}
 801856a:	bf00      	nop
 801856c:	24003d78 	.word	0x24003d78

08018570 <_Z14updatePositionfff>:

void updatePosition(float x, float y, float z){
 8018570:	b480      	push	{r7}
 8018572:	b085      	sub	sp, #20
 8018574:	af00      	add	r7, sp, #0
 8018576:	ed87 0a03 	vstr	s0, [r7, #12]
 801857a:	edc7 0a02 	vstr	s1, [r7, #8]
 801857e:	ed87 1a01 	vstr	s2, [r7, #4]
	map_x = x;
 8018582:	4a31      	ldr	r2, [pc, #196]	@ (8018648 <_Z14updatePositionfff+0xd8>)
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	6013      	str	r3, [r2, #0]
	map_y = y;
 8018588:	4a30      	ldr	r2, [pc, #192]	@ (801864c <_Z14updatePositionfff+0xdc>)
 801858a:	68bb      	ldr	r3, [r7, #8]
 801858c:	6013      	str	r3, [r2, #0]
	theta = z / (180 / pi);  // Convert degrees to radians
 801858e:	edd7 7a01 	vldr	s15, [r7, #4]
 8018592:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8018596:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8018628 <_Z14updatePositionfff+0xb8>
 801859a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801859e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80185a2:	4b2b      	ldr	r3, [pc, #172]	@ (8018650 <_Z14updatePositionfff+0xe0>)
 80185a4:	edc3 7a00 	vstr	s15, [r3]
	// 正規化 theta 到 [-π, π] 以避免累積錯誤和晃動問題
	while (theta > pi) theta -= 2 * pi;
 80185a8:	e00d      	b.n	80185c6 <_Z14updatePositionfff+0x56>
 80185aa:	4b29      	ldr	r3, [pc, #164]	@ (8018650 <_Z14updatePositionfff+0xe0>)
 80185ac:	edd3 7a00 	vldr	s15, [r3]
 80185b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80185b4:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8018630 <_Z14updatePositionfff+0xc0>
 80185b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80185bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80185c0:	4b23      	ldr	r3, [pc, #140]	@ (8018650 <_Z14updatePositionfff+0xe0>)
 80185c2:	edc3 7a00 	vstr	s15, [r3]
 80185c6:	4b22      	ldr	r3, [pc, #136]	@ (8018650 <_Z14updatePositionfff+0xe0>)
 80185c8:	edd3 7a00 	vldr	s15, [r3]
 80185cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80185d0:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8018638 <_Z14updatePositionfff+0xc8>
 80185d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80185d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185dc:	dce5      	bgt.n	80185aa <_Z14updatePositionfff+0x3a>
	while (theta < -pi) theta += 2 * pi;
 80185de:	e00d      	b.n	80185fc <_Z14updatePositionfff+0x8c>
 80185e0:	4b1b      	ldr	r3, [pc, #108]	@ (8018650 <_Z14updatePositionfff+0xe0>)
 80185e2:	edd3 7a00 	vldr	s15, [r3]
 80185e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80185ea:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8018630 <_Z14updatePositionfff+0xc0>
 80185ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80185f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80185f6:	4b16      	ldr	r3, [pc, #88]	@ (8018650 <_Z14updatePositionfff+0xe0>)
 80185f8:	edc3 7a00 	vstr	s15, [r3]
 80185fc:	4b14      	ldr	r3, [pc, #80]	@ (8018650 <_Z14updatePositionfff+0xe0>)
 80185fe:	edd3 7a00 	vldr	s15, [r3]
 8018602:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018606:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8018640 <_Z14updatePositionfff+0xd0>
 801860a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801860e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018612:	d4e5      	bmi.n	80185e0 <_Z14updatePositionfff+0x70>
}
 8018614:	bf00      	nop
 8018616:	bf00      	nop
 8018618:	3714      	adds	r7, #20
 801861a:	46bd      	mov	sp, r7
 801861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018620:	4770      	bx	lr
 8018622:	bf00      	nop
 8018624:	f3af 8000 	nop.w
 8018628:	1a63c1f8 	.word	0x1a63c1f8
 801862c:	404ca5dc 	.word	0x404ca5dc
 8018630:	54442d18 	.word	0x54442d18
 8018634:	401921fb 	.word	0x401921fb
 8018638:	54442d18 	.word	0x54442d18
 801863c:	400921fb 	.word	0x400921fb
 8018640:	54442d18 	.word	0x54442d18
 8018644:	c00921fb 	.word	0xc00921fb
 8018648:	240002ac 	.word	0x240002ac
 801864c:	240002b0 	.word	0x240002b0
 8018650:	240002b4 	.word	0x240002b4

08018654 <_Z41__static_initialization_and_destruction_0v>:
 8018654:	b580      	push	{r7, lr}
 8018656:	af00      	add	r7, sp, #0
SpeedController g_speed_controller;
 8018658:	4802      	ldr	r0, [pc, #8]	@ (8018664 <_Z41__static_initialization_and_destruction_0v+0x10>)
 801865a:	f7fe fa87 	bl	8016b6c <_ZN15SpeedControllerC1Ev>
}
 801865e:	bf00      	nop
 8018660:	bd80      	pop	{r7, pc}
 8018662:	bf00      	nop
 8018664:	24003cfc 	.word	0x24003cfc

08018668 <_GLOBAL__sub_I_g_speed_controller>:
 8018668:	b580      	push	{r7, lr}
 801866a:	af00      	add	r7, sp, #0
 801866c:	f7ff fff2 	bl	8018654 <_Z41__static_initialization_and_destruction_0v>
 8018670:	bd80      	pop	{r7, pc}
	...

08018674 <_Z9setLinePIfff>:
adcRead_ADC3[4]  adc3-4   PA0  left
adcRead_ADC3[5]  adc3-5   PB0  middle right
adcRead_ADC3[6]  adc3-6   PB1  middle left
*/

void setLinePI(float kp_y, float kp_x, float kd) {
 8018674:	b480      	push	{r7}
 8018676:	b085      	sub	sp, #20
 8018678:	af00      	add	r7, sp, #0
 801867a:	ed87 0a03 	vstr	s0, [r7, #12]
 801867e:	edc7 0a02 	vstr	s1, [r7, #8]
 8018682:	ed87 1a01 	vstr	s2, [r7, #4]
    w_kp_y = kp_y;
 8018686:	4a07      	ldr	r2, [pc, #28]	@ (80186a4 <_Z9setLinePIfff+0x30>)
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	6013      	str	r3, [r2, #0]
    w_kp_x = kp_x;
 801868c:	4a06      	ldr	r2, [pc, #24]	@ (80186a8 <_Z9setLinePIfff+0x34>)
 801868e:	68bb      	ldr	r3, [r7, #8]
 8018690:	6013      	str	r3, [r2, #0]
    w_kd = kd;
 8018692:	4a06      	ldr	r2, [pc, #24]	@ (80186ac <_Z9setLinePIfff+0x38>)
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	6013      	str	r3, [r2, #0]
    
}
 8018698:	bf00      	nop
 801869a:	3714      	adds	r7, #20
 801869c:	46bd      	mov	sp, r7
 801869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186a2:	4770      	bx	lr
 80186a4:	240001f0 	.word	0x240001f0
 80186a8:	240001f4 	.word	0x240001f4
 80186ac:	24003dac 	.word	0x24003dac

080186b0 <_Z10path_setupv>:
void path_setup(){
 80186b0:	b580      	push	{r7, lr}
 80186b2:	af00      	add	r7, sp, #0
	//    HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adcRead_ADC3, 12);
	    // Start DMA for ADC1, storing 3 channels in adcRead_ADC3_ADC1
	  //  HAL_ADCEx_Calibration_Start(&hadc1);
	    //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRead_ADC1, 3);//	    HAL_DMA_Start_IT(&hdma_adc1, (uint32_t)&hadc1.Instance->DR, (uint32_t)adcRead_ADC1, 3);
	   // HAL_ADC_Start(&hadc1);
	    HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adcRead_ADC3, 12);
 80186b4:	220c      	movs	r2, #12
 80186b6:	4905      	ldr	r1, [pc, #20]	@ (80186cc <_Z10path_setupv+0x1c>)
 80186b8:	4805      	ldr	r0, [pc, #20]	@ (80186d0 <_Z10path_setupv+0x20>)
 80186ba:	f7ec fc45 	bl	8004f48 <HAL_ADC_Start_DMA>
		check++;
 80186be:	4b05      	ldr	r3, [pc, #20]	@ (80186d4 <_Z10path_setupv+0x24>)
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	3301      	adds	r3, #1
 80186c4:	4a03      	ldr	r2, [pc, #12]	@ (80186d4 <_Z10path_setupv+0x24>)
 80186c6:	6013      	str	r3, [r2, #0]
}
 80186c8:	bf00      	nop
 80186ca:	bd80      	pop	{r7, pc}
 80186cc:	24003dc8 	.word	0x24003dc8
 80186d0:	24000528 	.word	0x24000528
 80186d4:	24003de0 	.word	0x24003de0

080186d8 <_Z19smooth_speed_updateff>:
// 平滑速度更新函數
void smooth_speed_update(float target_x, float target_y) {
 80186d8:	b580      	push	{r7, lr}
 80186da:	b084      	sub	sp, #16
 80186dc:	af00      	add	r7, sp, #0
 80186de:	ed87 0a01 	vstr	s0, [r7, #4]
 80186e2:	edc7 0a00 	vstr	s1, [r7]
    // 計算速度差值
    float diff_x = target_x - current_speed_x;
 80186e6:	4b3a      	ldr	r3, [pc, #232]	@ (80187d0 <_Z19smooth_speed_updateff+0xf8>)
 80186e8:	edd3 7a00 	vldr	s15, [r3]
 80186ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80186f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80186f4:	edc7 7a03 	vstr	s15, [r7, #12]
    float diff_y = target_y - current_speed_y;
 80186f8:	4b36      	ldr	r3, [pc, #216]	@ (80187d4 <_Z19smooth_speed_updateff+0xfc>)
 80186fa:	edd3 7a00 	vldr	s15, [r3]
 80186fe:	ed97 7a00 	vldr	s14, [r7]
 8018702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018706:	edc7 7a02 	vstr	s15, [r7, #8]
    
    // 限制速度變化率
    if (fabs(diff_x) > pathfinding_speed_change_rate) {
 801870a:	ed97 0a03 	vldr	s0, [r7, #12]
 801870e:	f7fa f9d3 	bl	8012ab8 <_ZSt4fabsf>
 8018712:	eeb0 7a40 	vmov.f32	s14, s0
 8018716:	4b30      	ldr	r3, [pc, #192]	@ (80187d8 <_Z19smooth_speed_updateff+0x100>)
 8018718:	edd3 7a00 	vldr	s15, [r3]
 801871c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018724:	bfcc      	ite	gt
 8018726:	2301      	movgt	r3, #1
 8018728:	2300      	movle	r3, #0
 801872a:	b2db      	uxtb	r3, r3
 801872c:	2b00      	cmp	r3, #0
 801872e:	d018      	beq.n	8018762 <_Z19smooth_speed_updateff+0x8a>
        current_speed_x += (diff_x > 0) ? pathfinding_speed_change_rate : -pathfinding_speed_change_rate;
 8018730:	edd7 7a03 	vldr	s15, [r7, #12]
 8018734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801873c:	dd03      	ble.n	8018746 <_Z19smooth_speed_updateff+0x6e>
 801873e:	4b26      	ldr	r3, [pc, #152]	@ (80187d8 <_Z19smooth_speed_updateff+0x100>)
 8018740:	edd3 7a00 	vldr	s15, [r3]
 8018744:	e004      	b.n	8018750 <_Z19smooth_speed_updateff+0x78>
 8018746:	4b24      	ldr	r3, [pc, #144]	@ (80187d8 <_Z19smooth_speed_updateff+0x100>)
 8018748:	edd3 7a00 	vldr	s15, [r3]
 801874c:	eef1 7a67 	vneg.f32	s15, s15
 8018750:	4b1f      	ldr	r3, [pc, #124]	@ (80187d0 <_Z19smooth_speed_updateff+0xf8>)
 8018752:	ed93 7a00 	vldr	s14, [r3]
 8018756:	ee77 7a87 	vadd.f32	s15, s15, s14
 801875a:	4b1d      	ldr	r3, [pc, #116]	@ (80187d0 <_Z19smooth_speed_updateff+0xf8>)
 801875c:	edc3 7a00 	vstr	s15, [r3]
 8018760:	e002      	b.n	8018768 <_Z19smooth_speed_updateff+0x90>
    } else {
        current_speed_x = target_x;
 8018762:	4a1b      	ldr	r2, [pc, #108]	@ (80187d0 <_Z19smooth_speed_updateff+0xf8>)
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	6013      	str	r3, [r2, #0]
    }
    
    if (fabs(diff_y) > pathfinding_speed_change_rate) {
 8018768:	ed97 0a02 	vldr	s0, [r7, #8]
 801876c:	f7fa f9a4 	bl	8012ab8 <_ZSt4fabsf>
 8018770:	eeb0 7a40 	vmov.f32	s14, s0
 8018774:	4b18      	ldr	r3, [pc, #96]	@ (80187d8 <_Z19smooth_speed_updateff+0x100>)
 8018776:	edd3 7a00 	vldr	s15, [r3]
 801877a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801877e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018782:	bfcc      	ite	gt
 8018784:	2301      	movgt	r3, #1
 8018786:	2300      	movle	r3, #0
 8018788:	b2db      	uxtb	r3, r3
 801878a:	2b00      	cmp	r3, #0
 801878c:	d018      	beq.n	80187c0 <_Z19smooth_speed_updateff+0xe8>
        current_speed_y += (diff_y > 0) ? pathfinding_speed_change_rate : -pathfinding_speed_change_rate;
 801878e:	edd7 7a02 	vldr	s15, [r7, #8]
 8018792:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801879a:	dd03      	ble.n	80187a4 <_Z19smooth_speed_updateff+0xcc>
 801879c:	4b0e      	ldr	r3, [pc, #56]	@ (80187d8 <_Z19smooth_speed_updateff+0x100>)
 801879e:	edd3 7a00 	vldr	s15, [r3]
 80187a2:	e004      	b.n	80187ae <_Z19smooth_speed_updateff+0xd6>
 80187a4:	4b0c      	ldr	r3, [pc, #48]	@ (80187d8 <_Z19smooth_speed_updateff+0x100>)
 80187a6:	edd3 7a00 	vldr	s15, [r3]
 80187aa:	eef1 7a67 	vneg.f32	s15, s15
 80187ae:	4b09      	ldr	r3, [pc, #36]	@ (80187d4 <_Z19smooth_speed_updateff+0xfc>)
 80187b0:	ed93 7a00 	vldr	s14, [r3]
 80187b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80187b8:	4b06      	ldr	r3, [pc, #24]	@ (80187d4 <_Z19smooth_speed_updateff+0xfc>)
 80187ba:	edc3 7a00 	vstr	s15, [r3]
    } else {
        current_speed_y = target_y;
    }
}
 80187be:	e002      	b.n	80187c6 <_Z19smooth_speed_updateff+0xee>
        current_speed_y = target_y;
 80187c0:	4a04      	ldr	r2, [pc, #16]	@ (80187d4 <_Z19smooth_speed_updateff+0xfc>)
 80187c2:	683b      	ldr	r3, [r7, #0]
 80187c4:	6013      	str	r3, [r2, #0]
}
 80187c6:	bf00      	nop
 80187c8:	3710      	adds	r7, #16
 80187ca:	46bd      	mov	sp, r7
 80187cc:	bd80      	pop	{r7, pc}
 80187ce:	bf00      	nop
 80187d0:	24003db0 	.word	0x24003db0
 80187d4:	24003db4 	.word	0x24003db4
 80187d8:	240001f8 	.word	0x240001f8

080187dc <_Z15check_line_losti>:

// 檢測是否失去線條
bool check_line_lost(int dir) {
 80187dc:	b480      	push	{r7}
 80187de:	b085      	sub	sp, #20
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	6078      	str	r0, [r7, #4]
    bool lost = false;
 80187e4:	2300      	movs	r3, #0
 80187e6:	73fb      	strb	r3, [r7, #15]
    
    if (dir == 0) { // front
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d120      	bne.n	8018830 <_Z15check_line_losti+0x54>
        lost = (adcRead_ADC3[0] < pathfinding_line_threshold && 
 80187ee:	4b49      	ldr	r3, [pc, #292]	@ (8018914 <_Z15check_line_losti+0x138>)
 80187f0:	881b      	ldrh	r3, [r3, #0]
 80187f2:	461a      	mov	r2, r3
 80187f4:	4b48      	ldr	r3, [pc, #288]	@ (8018918 <_Z15check_line_losti+0x13c>)
 80187f6:	681b      	ldr	r3, [r3, #0]
                adcRead_ADC3[1] < pathfinding_line_threshold && 
                adcRead_ADC3[2] < pathfinding_line_threshold && 
 80187f8:	429a      	cmp	r2, r3
 80187fa:	da16      	bge.n	801882a <_Z15check_line_losti+0x4e>
                adcRead_ADC3[1] < pathfinding_line_threshold && 
 80187fc:	4b45      	ldr	r3, [pc, #276]	@ (8018914 <_Z15check_line_losti+0x138>)
 80187fe:	885b      	ldrh	r3, [r3, #2]
 8018800:	461a      	mov	r2, r3
 8018802:	4b45      	ldr	r3, [pc, #276]	@ (8018918 <_Z15check_line_losti+0x13c>)
 8018804:	681b      	ldr	r3, [r3, #0]
        lost = (adcRead_ADC3[0] < pathfinding_line_threshold && 
 8018806:	429a      	cmp	r2, r3
 8018808:	da0f      	bge.n	801882a <_Z15check_line_losti+0x4e>
                adcRead_ADC3[2] < pathfinding_line_threshold && 
 801880a:	4b42      	ldr	r3, [pc, #264]	@ (8018914 <_Z15check_line_losti+0x138>)
 801880c:	889b      	ldrh	r3, [r3, #4]
 801880e:	461a      	mov	r2, r3
 8018810:	4b41      	ldr	r3, [pc, #260]	@ (8018918 <_Z15check_line_losti+0x13c>)
 8018812:	681b      	ldr	r3, [r3, #0]
                adcRead_ADC3[1] < pathfinding_line_threshold && 
 8018814:	429a      	cmp	r2, r3
 8018816:	da08      	bge.n	801882a <_Z15check_line_losti+0x4e>
                adcRead_ADC3[3] < pathfinding_line_threshold);
 8018818:	4b3e      	ldr	r3, [pc, #248]	@ (8018914 <_Z15check_line_losti+0x138>)
 801881a:	88db      	ldrh	r3, [r3, #6]
 801881c:	461a      	mov	r2, r3
 801881e:	4b3e      	ldr	r3, [pc, #248]	@ (8018918 <_Z15check_line_losti+0x13c>)
 8018820:	681b      	ldr	r3, [r3, #0]
                adcRead_ADC3[2] < pathfinding_line_threshold && 
 8018822:	429a      	cmp	r2, r3
 8018824:	da01      	bge.n	801882a <_Z15check_line_losti+0x4e>
 8018826:	2301      	movs	r3, #1
 8018828:	e000      	b.n	801882c <_Z15check_line_losti+0x50>
 801882a:	2300      	movs	r3, #0
        lost = (adcRead_ADC3[0] < pathfinding_line_threshold && 
 801882c:	73fb      	strb	r3, [r7, #15]
 801882e:	e06a      	b.n	8018906 <_Z15check_line_losti+0x12a>
    }
    else if (dir == 1) { // back
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	2b01      	cmp	r3, #1
 8018834:	d120      	bne.n	8018878 <_Z15check_line_losti+0x9c>
        lost = (adcRead_ADC3[0] < pathfinding_line_threshold && 
 8018836:	4b37      	ldr	r3, [pc, #220]	@ (8018914 <_Z15check_line_losti+0x138>)
 8018838:	881b      	ldrh	r3, [r3, #0]
 801883a:	461a      	mov	r2, r3
 801883c:	4b36      	ldr	r3, [pc, #216]	@ (8018918 <_Z15check_line_losti+0x13c>)
 801883e:	681b      	ldr	r3, [r3, #0]
                adcRead_ADC3[1] < pathfinding_line_threshold && 
                adcRead_ADC3[3] < pathfinding_line_threshold && 
 8018840:	429a      	cmp	r2, r3
 8018842:	da16      	bge.n	8018872 <_Z15check_line_losti+0x96>
                adcRead_ADC3[1] < pathfinding_line_threshold && 
 8018844:	4b33      	ldr	r3, [pc, #204]	@ (8018914 <_Z15check_line_losti+0x138>)
 8018846:	885b      	ldrh	r3, [r3, #2]
 8018848:	461a      	mov	r2, r3
 801884a:	4b33      	ldr	r3, [pc, #204]	@ (8018918 <_Z15check_line_losti+0x13c>)
 801884c:	681b      	ldr	r3, [r3, #0]
        lost = (adcRead_ADC3[0] < pathfinding_line_threshold && 
 801884e:	429a      	cmp	r2, r3
 8018850:	da0f      	bge.n	8018872 <_Z15check_line_losti+0x96>
                adcRead_ADC3[3] < pathfinding_line_threshold && 
 8018852:	4b30      	ldr	r3, [pc, #192]	@ (8018914 <_Z15check_line_losti+0x138>)
 8018854:	88db      	ldrh	r3, [r3, #6]
 8018856:	461a      	mov	r2, r3
 8018858:	4b2f      	ldr	r3, [pc, #188]	@ (8018918 <_Z15check_line_losti+0x13c>)
 801885a:	681b      	ldr	r3, [r3, #0]
                adcRead_ADC3[1] < pathfinding_line_threshold && 
 801885c:	429a      	cmp	r2, r3
 801885e:	da08      	bge.n	8018872 <_Z15check_line_losti+0x96>
                adcRead_ADC3[4] < pathfinding_line_threshold);
 8018860:	4b2c      	ldr	r3, [pc, #176]	@ (8018914 <_Z15check_line_losti+0x138>)
 8018862:	891b      	ldrh	r3, [r3, #8]
 8018864:	461a      	mov	r2, r3
 8018866:	4b2c      	ldr	r3, [pc, #176]	@ (8018918 <_Z15check_line_losti+0x13c>)
 8018868:	681b      	ldr	r3, [r3, #0]
                adcRead_ADC3[3] < pathfinding_line_threshold && 
 801886a:	429a      	cmp	r2, r3
 801886c:	da01      	bge.n	8018872 <_Z15check_line_losti+0x96>
 801886e:	2301      	movs	r3, #1
 8018870:	e000      	b.n	8018874 <_Z15check_line_losti+0x98>
 8018872:	2300      	movs	r3, #0
        lost = (adcRead_ADC3[0] < pathfinding_line_threshold && 
 8018874:	73fb      	strb	r3, [r7, #15]
 8018876:	e046      	b.n	8018906 <_Z15check_line_losti+0x12a>
    }
    else if (dir == 2) { // right
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	2b02      	cmp	r3, #2
 801887c:	d120      	bne.n	80188c0 <_Z15check_line_losti+0xe4>
        lost = (adcRead_ADC3[8] < pathfinding_line_threshold && 
 801887e:	4b25      	ldr	r3, [pc, #148]	@ (8018914 <_Z15check_line_losti+0x138>)
 8018880:	8a1b      	ldrh	r3, [r3, #16]
 8018882:	461a      	mov	r2, r3
 8018884:	4b24      	ldr	r3, [pc, #144]	@ (8018918 <_Z15check_line_losti+0x13c>)
 8018886:	681b      	ldr	r3, [r3, #0]
                adcRead_ADC3[9] < pathfinding_line_threshold && 
                adcRead_ADC3[10] < pathfinding_line_threshold && 
 8018888:	429a      	cmp	r2, r3
 801888a:	da16      	bge.n	80188ba <_Z15check_line_losti+0xde>
                adcRead_ADC3[9] < pathfinding_line_threshold && 
 801888c:	4b21      	ldr	r3, [pc, #132]	@ (8018914 <_Z15check_line_losti+0x138>)
 801888e:	8a5b      	ldrh	r3, [r3, #18]
 8018890:	461a      	mov	r2, r3
 8018892:	4b21      	ldr	r3, [pc, #132]	@ (8018918 <_Z15check_line_losti+0x13c>)
 8018894:	681b      	ldr	r3, [r3, #0]
        lost = (adcRead_ADC3[8] < pathfinding_line_threshold && 
 8018896:	429a      	cmp	r2, r3
 8018898:	da0f      	bge.n	80188ba <_Z15check_line_losti+0xde>
                adcRead_ADC3[10] < pathfinding_line_threshold && 
 801889a:	4b1e      	ldr	r3, [pc, #120]	@ (8018914 <_Z15check_line_losti+0x138>)
 801889c:	8a9b      	ldrh	r3, [r3, #20]
 801889e:	461a      	mov	r2, r3
 80188a0:	4b1d      	ldr	r3, [pc, #116]	@ (8018918 <_Z15check_line_losti+0x13c>)
 80188a2:	681b      	ldr	r3, [r3, #0]
                adcRead_ADC3[9] < pathfinding_line_threshold && 
 80188a4:	429a      	cmp	r2, r3
 80188a6:	da08      	bge.n	80188ba <_Z15check_line_losti+0xde>
                adcRead_ADC3[11] < pathfinding_line_threshold);
 80188a8:	4b1a      	ldr	r3, [pc, #104]	@ (8018914 <_Z15check_line_losti+0x138>)
 80188aa:	8adb      	ldrh	r3, [r3, #22]
 80188ac:	461a      	mov	r2, r3
 80188ae:	4b1a      	ldr	r3, [pc, #104]	@ (8018918 <_Z15check_line_losti+0x13c>)
 80188b0:	681b      	ldr	r3, [r3, #0]
                adcRead_ADC3[10] < pathfinding_line_threshold && 
 80188b2:	429a      	cmp	r2, r3
 80188b4:	da01      	bge.n	80188ba <_Z15check_line_losti+0xde>
 80188b6:	2301      	movs	r3, #1
 80188b8:	e000      	b.n	80188bc <_Z15check_line_losti+0xe0>
 80188ba:	2300      	movs	r3, #0
        lost = (adcRead_ADC3[8] < pathfinding_line_threshold && 
 80188bc:	73fb      	strb	r3, [r7, #15]
 80188be:	e022      	b.n	8018906 <_Z15check_line_losti+0x12a>
    }
    else if (dir == 3) { // left
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	2b03      	cmp	r3, #3
 80188c4:	d11f      	bne.n	8018906 <_Z15check_line_losti+0x12a>
        lost = (adcRead_ADC3[4] < pathfinding_line_threshold && 
 80188c6:	4b13      	ldr	r3, [pc, #76]	@ (8018914 <_Z15check_line_losti+0x138>)
 80188c8:	891b      	ldrh	r3, [r3, #8]
 80188ca:	461a      	mov	r2, r3
 80188cc:	4b12      	ldr	r3, [pc, #72]	@ (8018918 <_Z15check_line_losti+0x13c>)
 80188ce:	681b      	ldr	r3, [r3, #0]
                adcRead_ADC3[5] < pathfinding_line_threshold && 
                adcRead_ADC3[6] < pathfinding_line_threshold && 
 80188d0:	429a      	cmp	r2, r3
 80188d2:	da16      	bge.n	8018902 <_Z15check_line_losti+0x126>
                adcRead_ADC3[5] < pathfinding_line_threshold && 
 80188d4:	4b0f      	ldr	r3, [pc, #60]	@ (8018914 <_Z15check_line_losti+0x138>)
 80188d6:	895b      	ldrh	r3, [r3, #10]
 80188d8:	461a      	mov	r2, r3
 80188da:	4b0f      	ldr	r3, [pc, #60]	@ (8018918 <_Z15check_line_losti+0x13c>)
 80188dc:	681b      	ldr	r3, [r3, #0]
        lost = (adcRead_ADC3[4] < pathfinding_line_threshold && 
 80188de:	429a      	cmp	r2, r3
 80188e0:	da0f      	bge.n	8018902 <_Z15check_line_losti+0x126>
                adcRead_ADC3[6] < pathfinding_line_threshold && 
 80188e2:	4b0c      	ldr	r3, [pc, #48]	@ (8018914 <_Z15check_line_losti+0x138>)
 80188e4:	899b      	ldrh	r3, [r3, #12]
 80188e6:	461a      	mov	r2, r3
 80188e8:	4b0b      	ldr	r3, [pc, #44]	@ (8018918 <_Z15check_line_losti+0x13c>)
 80188ea:	681b      	ldr	r3, [r3, #0]
                adcRead_ADC3[5] < pathfinding_line_threshold && 
 80188ec:	429a      	cmp	r2, r3
 80188ee:	da08      	bge.n	8018902 <_Z15check_line_losti+0x126>
                adcRead_ADC3[7] < pathfinding_line_threshold);
 80188f0:	4b08      	ldr	r3, [pc, #32]	@ (8018914 <_Z15check_line_losti+0x138>)
 80188f2:	89db      	ldrh	r3, [r3, #14]
 80188f4:	461a      	mov	r2, r3
 80188f6:	4b08      	ldr	r3, [pc, #32]	@ (8018918 <_Z15check_line_losti+0x13c>)
 80188f8:	681b      	ldr	r3, [r3, #0]
                adcRead_ADC3[6] < pathfinding_line_threshold && 
 80188fa:	429a      	cmp	r2, r3
 80188fc:	da01      	bge.n	8018902 <_Z15check_line_losti+0x126>
 80188fe:	2301      	movs	r3, #1
 8018900:	e000      	b.n	8018904 <_Z15check_line_losti+0x128>
 8018902:	2300      	movs	r3, #0
        lost = (adcRead_ADC3[4] < pathfinding_line_threshold && 
 8018904:	73fb      	strb	r3, [r7, #15]
    }
    
    return lost;
 8018906:	7bfb      	ldrb	r3, [r7, #15]
}
 8018908:	4618      	mov	r0, r3
 801890a:	3714      	adds	r7, #20
 801890c:	46bd      	mov	sp, r7
 801890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018912:	4770      	bx	lr
 8018914:	24003dc8 	.word	0x24003dc8
 8018918:	24000200 	.word	0x24000200

0801891c <_Z6weighti>:

void weight(int dir) {//0:front,1:back,2:right,3:left
 801891c:	b580      	push	{r7, lr}
 801891e:	b084      	sub	sp, #16
 8018920:	af00      	add	r7, sp, #0
 8018922:	6078      	str	r0, [r7, #4]
    // 檢測方向切換
    bool direction_changed = (last_direction != -1 && last_direction != dir);
 8018924:	4b79      	ldr	r3, [pc, #484]	@ (8018b0c <_Z6weighti+0x1f0>)
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	f1b3 3fff 	cmp.w	r3, #4294967295
 801892c:	d006      	beq.n	801893c <_Z6weighti+0x20>
 801892e:	4b77      	ldr	r3, [pc, #476]	@ (8018b0c <_Z6weighti+0x1f0>)
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	687a      	ldr	r2, [r7, #4]
 8018934:	429a      	cmp	r2, r3
 8018936:	d001      	beq.n	801893c <_Z6weighti+0x20>
 8018938:	2301      	movs	r3, #1
 801893a:	e000      	b.n	801893e <_Z6weighti+0x22>
 801893c:	2300      	movs	r3, #0
 801893e:	73fb      	strb	r3, [r7, #15]
    if (direction_changed) {
 8018940:	7bfb      	ldrb	r3, [r7, #15]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d00c      	beq.n	8018960 <_Z6weighti+0x44>
        direction_change_time = HAL_GetTick();
 8018946:	f7eb fdaf 	bl	80044a8 <HAL_GetTick>
 801894a:	4603      	mov	r3, r0
 801894c:	4a70      	ldr	r2, [pc, #448]	@ (8018b10 <_Z6weighti+0x1f4>)
 801894e:	6013      	str	r3, [r2, #0]
        // 保存當前速度作為初始速度
        current_speed_x = cmd_v_x;
 8018950:	4b70      	ldr	r3, [pc, #448]	@ (8018b14 <_Z6weighti+0x1f8>)
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	4a70      	ldr	r2, [pc, #448]	@ (8018b18 <_Z6weighti+0x1fc>)
 8018956:	6013      	str	r3, [r2, #0]
        current_speed_y = cmd_v_y;
 8018958:	4b70      	ldr	r3, [pc, #448]	@ (8018b1c <_Z6weighti+0x200>)
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	4a70      	ldr	r2, [pc, #448]	@ (8018b20 <_Z6weighti+0x204>)
 801895e:	6013      	str	r3, [r2, #0]
    }
    last_direction = dir;
 8018960:	4a6a      	ldr	r2, [pc, #424]	@ (8018b0c <_Z6weighti+0x1f0>)
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	6013      	str	r3, [r2, #0]
    
    // 檢測是否失去線條
    line_lost = check_line_lost(dir);
 8018966:	6878      	ldr	r0, [r7, #4]
 8018968:	f7ff ff38 	bl	80187dc <_Z15check_line_losti>
 801896c:	4603      	mov	r3, r0
 801896e:	461a      	mov	r2, r3
 8018970:	4b6c      	ldr	r3, [pc, #432]	@ (8018b24 <_Z6weighti+0x208>)
 8018972:	701a      	strb	r2, [r3, #0]
    
    // 如果失去線條，降低速度繼續前進
    if (line_lost) {
 8018974:	4b6b      	ldr	r3, [pc, #428]	@ (8018b24 <_Z6weighti+0x208>)
 8018976:	781b      	ldrb	r3, [r3, #0]
 8018978:	2b00      	cmp	r3, #0
 801897a:	d055      	beq.n	8018a28 <_Z6weighti+0x10c>
        float min_speed = normal_Speed * pathfinding_min_speed_ratio;
 801897c:	4b6a      	ldr	r3, [pc, #424]	@ (8018b28 <_Z6weighti+0x20c>)
 801897e:	ed93 7a00 	vldr	s14, [r3]
 8018982:	4b6a      	ldr	r3, [pc, #424]	@ (8018b2c <_Z6weighti+0x210>)
 8018984:	edd3 7a00 	vldr	s15, [r3]
 8018988:	ee67 7a27 	vmul.f32	s15, s14, s15
 801898c:	edc7 7a02 	vstr	s15, [r7, #8]
        
        if (dir == 0) {        // front
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d107      	bne.n	80189a6 <_Z6weighti+0x8a>
            target_speed_y = min_speed;
 8018996:	4a66      	ldr	r2, [pc, #408]	@ (8018b30 <_Z6weighti+0x214>)
 8018998:	68bb      	ldr	r3, [r7, #8]
 801899a:	6013      	str	r3, [r2, #0]
            target_speed_x = 0;
 801899c:	4b65      	ldr	r3, [pc, #404]	@ (8018b34 <_Z6weighti+0x218>)
 801899e:	f04f 0200 	mov.w	r2, #0
 80189a2:	601a      	str	r2, [r3, #0]
 80189a4:	e027      	b.n	80189f6 <_Z6weighti+0xda>
        }
        else if (dir == 1) {   // back
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	2b01      	cmp	r3, #1
 80189aa:	d10b      	bne.n	80189c4 <_Z6weighti+0xa8>
            target_speed_y = -min_speed;
 80189ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80189b0:	eef1 7a67 	vneg.f32	s15, s15
 80189b4:	4b5e      	ldr	r3, [pc, #376]	@ (8018b30 <_Z6weighti+0x214>)
 80189b6:	edc3 7a00 	vstr	s15, [r3]
            target_speed_x = 0;
 80189ba:	4b5e      	ldr	r3, [pc, #376]	@ (8018b34 <_Z6weighti+0x218>)
 80189bc:	f04f 0200 	mov.w	r2, #0
 80189c0:	601a      	str	r2, [r3, #0]
 80189c2:	e018      	b.n	80189f6 <_Z6weighti+0xda>
        }
        else if (dir == 2) {   // right
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	2b02      	cmp	r3, #2
 80189c8:	d107      	bne.n	80189da <_Z6weighti+0xbe>
            target_speed_y = 0;
 80189ca:	4b59      	ldr	r3, [pc, #356]	@ (8018b30 <_Z6weighti+0x214>)
 80189cc:	f04f 0200 	mov.w	r2, #0
 80189d0:	601a      	str	r2, [r3, #0]
            target_speed_x = min_speed;
 80189d2:	4a58      	ldr	r2, [pc, #352]	@ (8018b34 <_Z6weighti+0x218>)
 80189d4:	68bb      	ldr	r3, [r7, #8]
 80189d6:	6013      	str	r3, [r2, #0]
 80189d8:	e00d      	b.n	80189f6 <_Z6weighti+0xda>
        }
        else if (dir == 3) {   // left
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	2b03      	cmp	r3, #3
 80189de:	d10a      	bne.n	80189f6 <_Z6weighti+0xda>
            target_speed_y = 0;
 80189e0:	4b53      	ldr	r3, [pc, #332]	@ (8018b30 <_Z6weighti+0x214>)
 80189e2:	f04f 0200 	mov.w	r2, #0
 80189e6:	601a      	str	r2, [r3, #0]
            target_speed_x = -min_speed;
 80189e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80189ec:	eef1 7a67 	vneg.f32	s15, s15
 80189f0:	4b50      	ldr	r3, [pc, #320]	@ (8018b34 <_Z6weighti+0x218>)
 80189f2:	edc3 7a00 	vstr	s15, [r3]
        }
        
        smooth_speed_update(target_speed_x, target_speed_y);
 80189f6:	4b4f      	ldr	r3, [pc, #316]	@ (8018b34 <_Z6weighti+0x218>)
 80189f8:	edd3 7a00 	vldr	s15, [r3]
 80189fc:	4b4c      	ldr	r3, [pc, #304]	@ (8018b30 <_Z6weighti+0x214>)
 80189fe:	ed93 7a00 	vldr	s14, [r3]
 8018a02:	eef0 0a47 	vmov.f32	s1, s14
 8018a06:	eeb0 0a67 	vmov.f32	s0, s15
 8018a0a:	f7ff fe65 	bl	80186d8 <_Z19smooth_speed_updateff>
        cmd_v_x = current_speed_x;
 8018a0e:	4b42      	ldr	r3, [pc, #264]	@ (8018b18 <_Z6weighti+0x1fc>)
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	4a40      	ldr	r2, [pc, #256]	@ (8018b14 <_Z6weighti+0x1f8>)
 8018a14:	6013      	str	r3, [r2, #0]
        cmd_v_y = current_speed_y;
 8018a16:	4b42      	ldr	r3, [pc, #264]	@ (8018b20 <_Z6weighti+0x204>)
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	4a40      	ldr	r2, [pc, #256]	@ (8018b1c <_Z6weighti+0x200>)
 8018a1c:	6013      	str	r3, [r2, #0]
        cmd_v_w = 0; // 失去線條時不進行角度修正
 8018a1e:	4b46      	ldr	r3, [pc, #280]	@ (8018b38 <_Z6weighti+0x21c>)
 8018a20:	f04f 0200 	mov.w	r2, #0
 8018a24:	601a      	str	r2, [r3, #0]
        return;
 8018a26:	e1ef      	b.n	8018e08 <_Z6weighti+0x4ec>
    }
    
    // Calculate line following error (P and D)
    if (dir == 0){//front
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	f040 8092 	bne.w	8018b54 <_Z6weighti+0x238>
        weight_err = ((float)(-3*adcRead_ADC3[0] - adcRead_ADC3[1] + adcRead_ADC3[2] + 3*adcRead_ADC3[3]) /
 8018a30:	4b42      	ldr	r3, [pc, #264]	@ (8018b3c <_Z6weighti+0x220>)
 8018a32:	881b      	ldrh	r3, [r3, #0]
 8018a34:	461a      	mov	r2, r3
 8018a36:	009b      	lsls	r3, r3, #2
 8018a38:	1ad3      	subs	r3, r2, r3
 8018a3a:	4a40      	ldr	r2, [pc, #256]	@ (8018b3c <_Z6weighti+0x220>)
 8018a3c:	8852      	ldrh	r2, [r2, #2]
 8018a3e:	1a9b      	subs	r3, r3, r2
 8018a40:	4a3e      	ldr	r2, [pc, #248]	@ (8018b3c <_Z6weighti+0x220>)
 8018a42:	8892      	ldrh	r2, [r2, #4]
 8018a44:	441a      	add	r2, r3
 8018a46:	4b3d      	ldr	r3, [pc, #244]	@ (8018b3c <_Z6weighti+0x220>)
 8018a48:	88db      	ldrh	r3, [r3, #6]
 8018a4a:	4619      	mov	r1, r3
 8018a4c:	460b      	mov	r3, r1
 8018a4e:	005b      	lsls	r3, r3, #1
 8018a50:	440b      	add	r3, r1
 8018a52:	4413      	add	r3, r2
 8018a54:	ee07 3a90 	vmov	s15, r3
 8018a58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                     (adcRead_ADC3[0] + adcRead_ADC3[1]+ 4096 +adcRead_ADC3[2] + adcRead_ADC3[3]));
 8018a5c:	4b37      	ldr	r3, [pc, #220]	@ (8018b3c <_Z6weighti+0x220>)
 8018a5e:	881b      	ldrh	r3, [r3, #0]
 8018a60:	461a      	mov	r2, r3
 8018a62:	4b36      	ldr	r3, [pc, #216]	@ (8018b3c <_Z6weighti+0x220>)
 8018a64:	885b      	ldrh	r3, [r3, #2]
 8018a66:	4413      	add	r3, r2
 8018a68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018a6c:	4a33      	ldr	r2, [pc, #204]	@ (8018b3c <_Z6weighti+0x220>)
 8018a6e:	8892      	ldrh	r2, [r2, #4]
 8018a70:	4413      	add	r3, r2
 8018a72:	4a32      	ldr	r2, [pc, #200]	@ (8018b3c <_Z6weighti+0x220>)
 8018a74:	88d2      	ldrh	r2, [r2, #6]
 8018a76:	4413      	add	r3, r2
        weight_err = ((float)(-3*adcRead_ADC3[0] - adcRead_ADC3[1] + adcRead_ADC3[2] + 3*adcRead_ADC3[3]) /
 8018a78:	ee07 3a90 	vmov	s15, r3
 8018a7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018a84:	4b2e      	ldr	r3, [pc, #184]	@ (8018b40 <_Z6weighti+0x224>)
 8018a86:	edc3 7a00 	vstr	s15, [r3]
        weight_change = weight_err - weight_lasttime;
 8018a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8018b40 <_Z6weighti+0x224>)
 8018a8c:	ed93 7a00 	vldr	s14, [r3]
 8018a90:	4b2c      	ldr	r3, [pc, #176]	@ (8018b44 <_Z6weighti+0x228>)
 8018a92:	edd3 7a00 	vldr	s15, [r3]
 8018a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8018b48 <_Z6weighti+0x22c>)
 8018a9c:	edc3 7a00 	vstr	s15, [r3]
        weight_lasttime = weight_err;
 8018aa0:	4b27      	ldr	r3, [pc, #156]	@ (8018b40 <_Z6weighti+0x224>)
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	4a27      	ldr	r2, [pc, #156]	@ (8018b44 <_Z6weighti+0x228>)
 8018aa6:	6013      	str	r3, [r2, #0]

        // 設定目標速度
        target_speed_y = normal_Speed;
 8018aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8018b28 <_Z6weighti+0x20c>)
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	4a20      	ldr	r2, [pc, #128]	@ (8018b30 <_Z6weighti+0x214>)
 8018aae:	6013      	str	r3, [r2, #0]
        target_speed_x = 0;
 8018ab0:	4b20      	ldr	r3, [pc, #128]	@ (8018b34 <_Z6weighti+0x218>)
 8018ab2:	f04f 0200 	mov.w	r2, #0
 8018ab6:	601a      	str	r2, [r3, #0]
        
        // 平滑速度更新
        smooth_speed_update(target_speed_x, target_speed_y);
 8018ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8018b34 <_Z6weighti+0x218>)
 8018aba:	edd3 7a00 	vldr	s15, [r3]
 8018abe:	4b1c      	ldr	r3, [pc, #112]	@ (8018b30 <_Z6weighti+0x214>)
 8018ac0:	ed93 7a00 	vldr	s14, [r3]
 8018ac4:	eef0 0a47 	vmov.f32	s1, s14
 8018ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8018acc:	f7ff fe04 	bl	80186d8 <_Z19smooth_speed_updateff>
        
        // For mecanum: output chassis velocity vector
        cmd_v_y = current_speed_y; // 使用平滑後的速度
 8018ad0:	4b13      	ldr	r3, [pc, #76]	@ (8018b20 <_Z6weighti+0x204>)
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	4a11      	ldr	r2, [pc, #68]	@ (8018b1c <_Z6weighti+0x200>)
 8018ad6:	6013      	str	r3, [r2, #0]
        cmd_v_x = current_speed_x;
 8018ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8018b18 <_Z6weighti+0x1fc>)
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	4a0d      	ldr	r2, [pc, #52]	@ (8018b14 <_Z6weighti+0x1f8>)
 8018ade:	6013      	str	r3, [r2, #0]
        cmd_v_w = (weight_err * w_kp_y + weight_change * w_kd); // Rotation correction
 8018ae0:	4b17      	ldr	r3, [pc, #92]	@ (8018b40 <_Z6weighti+0x224>)
 8018ae2:	ed93 7a00 	vldr	s14, [r3]
 8018ae6:	4b19      	ldr	r3, [pc, #100]	@ (8018b4c <_Z6weighti+0x230>)
 8018ae8:	edd3 7a00 	vldr	s15, [r3]
 8018aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018af0:	4b15      	ldr	r3, [pc, #84]	@ (8018b48 <_Z6weighti+0x22c>)
 8018af2:	edd3 6a00 	vldr	s13, [r3]
 8018af6:	4b16      	ldr	r3, [pc, #88]	@ (8018b50 <_Z6weighti+0x234>)
 8018af8:	edd3 7a00 	vldr	s15, [r3]
 8018afc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b04:	4b0c      	ldr	r3, [pc, #48]	@ (8018b38 <_Z6weighti+0x21c>)
 8018b06:	edc3 7a00 	vstr	s15, [r3]
 8018b0a:	e17d      	b.n	8018e08 <_Z6weighti+0x4ec>
 8018b0c:	24000204 	.word	0x24000204
 8018b10:	24003dc4 	.word	0x24003dc4
 8018b14:	240002c4 	.word	0x240002c4
 8018b18:	24003db0 	.word	0x24003db0
 8018b1c:	240002c8 	.word	0x240002c8
 8018b20:	24003db4 	.word	0x24003db4
 8018b24:	24003dc0 	.word	0x24003dc0
 8018b28:	240001ec 	.word	0x240001ec
 8018b2c:	240001fc 	.word	0x240001fc
 8018b30:	24003dbc 	.word	0x24003dbc
 8018b34:	24003db8 	.word	0x24003db8
 8018b38:	240002cc 	.word	0x240002cc
 8018b3c:	24003dc8 	.word	0x24003dc8
 8018b40:	24003de4 	.word	0x24003de4
 8018b44:	24003de8 	.word	0x24003de8
 8018b48:	24003dec 	.word	0x24003dec
 8018b4c:	240001f0 	.word	0x240001f0
 8018b50:	24003dac 	.word	0x24003dac
    }
    else if(dir == 1){//back
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	2b01      	cmp	r3, #1
 8018b58:	d171      	bne.n	8018c3e <_Z6weighti+0x322>
        weight_err = ((float)(-3*adcRead_ADC3[0] - adcRead_ADC3[1] + adcRead_ADC3[3] + 3*adcRead_ADC3[4]) /
 8018b5a:	4bad      	ldr	r3, [pc, #692]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018b5c:	881b      	ldrh	r3, [r3, #0]
 8018b5e:	461a      	mov	r2, r3
 8018b60:	009b      	lsls	r3, r3, #2
 8018b62:	1ad3      	subs	r3, r2, r3
 8018b64:	4aaa      	ldr	r2, [pc, #680]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018b66:	8852      	ldrh	r2, [r2, #2]
 8018b68:	1a9b      	subs	r3, r3, r2
 8018b6a:	4aa9      	ldr	r2, [pc, #676]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018b6c:	88d2      	ldrh	r2, [r2, #6]
 8018b6e:	441a      	add	r2, r3
 8018b70:	4ba7      	ldr	r3, [pc, #668]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018b72:	891b      	ldrh	r3, [r3, #8]
 8018b74:	4619      	mov	r1, r3
 8018b76:	460b      	mov	r3, r1
 8018b78:	005b      	lsls	r3, r3, #1
 8018b7a:	440b      	add	r3, r1
 8018b7c:	4413      	add	r3, r2
 8018b7e:	ee07 3a90 	vmov	s15, r3
 8018b82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                    (adcRead_ADC3[0] + adcRead_ADC3[1]+ 4096 +adcRead_ADC3[3] + adcRead_ADC3[4]));
 8018b86:	4ba2      	ldr	r3, [pc, #648]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018b88:	881b      	ldrh	r3, [r3, #0]
 8018b8a:	461a      	mov	r2, r3
 8018b8c:	4ba0      	ldr	r3, [pc, #640]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018b8e:	885b      	ldrh	r3, [r3, #2]
 8018b90:	4413      	add	r3, r2
 8018b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018b96:	4a9e      	ldr	r2, [pc, #632]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018b98:	88d2      	ldrh	r2, [r2, #6]
 8018b9a:	4413      	add	r3, r2
 8018b9c:	4a9c      	ldr	r2, [pc, #624]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018b9e:	8912      	ldrh	r2, [r2, #8]
 8018ba0:	4413      	add	r3, r2
        weight_err = ((float)(-3*adcRead_ADC3[0] - adcRead_ADC3[1] + adcRead_ADC3[3] + 3*adcRead_ADC3[4]) /
 8018ba2:	ee07 3a90 	vmov	s15, r3
 8018ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018bae:	4b99      	ldr	r3, [pc, #612]	@ (8018e14 <_Z6weighti+0x4f8>)
 8018bb0:	edc3 7a00 	vstr	s15, [r3]
        weight_change = weight_err - weight_lasttime;
 8018bb4:	4b97      	ldr	r3, [pc, #604]	@ (8018e14 <_Z6weighti+0x4f8>)
 8018bb6:	ed93 7a00 	vldr	s14, [r3]
 8018bba:	4b97      	ldr	r3, [pc, #604]	@ (8018e18 <_Z6weighti+0x4fc>)
 8018bbc:	edd3 7a00 	vldr	s15, [r3]
 8018bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018bc4:	4b95      	ldr	r3, [pc, #596]	@ (8018e1c <_Z6weighti+0x500>)
 8018bc6:	edc3 7a00 	vstr	s15, [r3]
        weight_lasttime = weight_err;
 8018bca:	4b92      	ldr	r3, [pc, #584]	@ (8018e14 <_Z6weighti+0x4f8>)
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	4a92      	ldr	r2, [pc, #584]	@ (8018e18 <_Z6weighti+0x4fc>)
 8018bd0:	6013      	str	r3, [r2, #0]

        // 設定目標速度
        target_speed_y = -normal_Speed;
 8018bd2:	4b93      	ldr	r3, [pc, #588]	@ (8018e20 <_Z6weighti+0x504>)
 8018bd4:	edd3 7a00 	vldr	s15, [r3]
 8018bd8:	eef1 7a67 	vneg.f32	s15, s15
 8018bdc:	4b91      	ldr	r3, [pc, #580]	@ (8018e24 <_Z6weighti+0x508>)
 8018bde:	edc3 7a00 	vstr	s15, [r3]
        target_speed_x = 0;
 8018be2:	4b91      	ldr	r3, [pc, #580]	@ (8018e28 <_Z6weighti+0x50c>)
 8018be4:	f04f 0200 	mov.w	r2, #0
 8018be8:	601a      	str	r2, [r3, #0]
        
        // 平滑速度更新
        smooth_speed_update(target_speed_x, target_speed_y);
 8018bea:	4b8f      	ldr	r3, [pc, #572]	@ (8018e28 <_Z6weighti+0x50c>)
 8018bec:	edd3 7a00 	vldr	s15, [r3]
 8018bf0:	4b8c      	ldr	r3, [pc, #560]	@ (8018e24 <_Z6weighti+0x508>)
 8018bf2:	ed93 7a00 	vldr	s14, [r3]
 8018bf6:	eef0 0a47 	vmov.f32	s1, s14
 8018bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8018bfe:	f7ff fd6b 	bl	80186d8 <_Z19smooth_speed_updateff>
        
        // For mecanum: output chassis velocity vector
        cmd_v_y = current_speed_y; // 使用平滑後的速度
 8018c02:	4b8a      	ldr	r3, [pc, #552]	@ (8018e2c <_Z6weighti+0x510>)
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	4a8a      	ldr	r2, [pc, #552]	@ (8018e30 <_Z6weighti+0x514>)
 8018c08:	6013      	str	r3, [r2, #0]
        cmd_v_x = current_speed_x;
 8018c0a:	4b8a      	ldr	r3, [pc, #552]	@ (8018e34 <_Z6weighti+0x518>)
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	4a8a      	ldr	r2, [pc, #552]	@ (8018e38 <_Z6weighti+0x51c>)
 8018c10:	6013      	str	r3, [r2, #0]
        cmd_v_w = (weight_err * w_kp_y + weight_change * w_kd); // Rotation correction
 8018c12:	4b80      	ldr	r3, [pc, #512]	@ (8018e14 <_Z6weighti+0x4f8>)
 8018c14:	ed93 7a00 	vldr	s14, [r3]
 8018c18:	4b88      	ldr	r3, [pc, #544]	@ (8018e3c <_Z6weighti+0x520>)
 8018c1a:	edd3 7a00 	vldr	s15, [r3]
 8018c1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018c22:	4b7e      	ldr	r3, [pc, #504]	@ (8018e1c <_Z6weighti+0x500>)
 8018c24:	edd3 6a00 	vldr	s13, [r3]
 8018c28:	4b85      	ldr	r3, [pc, #532]	@ (8018e40 <_Z6weighti+0x524>)
 8018c2a:	edd3 7a00 	vldr	s15, [r3]
 8018c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018c36:	4b83      	ldr	r3, [pc, #524]	@ (8018e44 <_Z6weighti+0x528>)
 8018c38:	edc3 7a00 	vstr	s15, [r3]
 8018c3c:	e0e4      	b.n	8018e08 <_Z6weighti+0x4ec>
    }
    else if(dir == 2){//right
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	2b02      	cmp	r3, #2
 8018c42:	d16d      	bne.n	8018d20 <_Z6weighti+0x404>
        weight_err = ((float)(-3*adcRead_ADC3[8] - adcRead_ADC3[9] + adcRead_ADC3[10] + 3*adcRead_ADC3[11]) /
 8018c44:	4b72      	ldr	r3, [pc, #456]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018c46:	8a1b      	ldrh	r3, [r3, #16]
 8018c48:	461a      	mov	r2, r3
 8018c4a:	009b      	lsls	r3, r3, #2
 8018c4c:	1ad3      	subs	r3, r2, r3
 8018c4e:	4a70      	ldr	r2, [pc, #448]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018c50:	8a52      	ldrh	r2, [r2, #18]
 8018c52:	1a9b      	subs	r3, r3, r2
 8018c54:	4a6e      	ldr	r2, [pc, #440]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018c56:	8a92      	ldrh	r2, [r2, #20]
 8018c58:	441a      	add	r2, r3
 8018c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018c5c:	8adb      	ldrh	r3, [r3, #22]
 8018c5e:	4619      	mov	r1, r3
 8018c60:	460b      	mov	r3, r1
 8018c62:	005b      	lsls	r3, r3, #1
 8018c64:	440b      	add	r3, r1
 8018c66:	4413      	add	r3, r2
 8018c68:	ee07 3a90 	vmov	s15, r3
 8018c6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                           (adcRead_ADC3[8] + adcRead_ADC3[9]+ 4096 +adcRead_ADC3[10] + adcRead_ADC3[11]));
 8018c70:	4b67      	ldr	r3, [pc, #412]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018c72:	8a1b      	ldrh	r3, [r3, #16]
 8018c74:	461a      	mov	r2, r3
 8018c76:	4b66      	ldr	r3, [pc, #408]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018c78:	8a5b      	ldrh	r3, [r3, #18]
 8018c7a:	4413      	add	r3, r2
 8018c7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018c80:	4a63      	ldr	r2, [pc, #396]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018c82:	8a92      	ldrh	r2, [r2, #20]
 8018c84:	4413      	add	r3, r2
 8018c86:	4a62      	ldr	r2, [pc, #392]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018c88:	8ad2      	ldrh	r2, [r2, #22]
 8018c8a:	4413      	add	r3, r2
        weight_err = ((float)(-3*adcRead_ADC3[8] - adcRead_ADC3[9] + adcRead_ADC3[10] + 3*adcRead_ADC3[11]) /
 8018c8c:	ee07 3a90 	vmov	s15, r3
 8018c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018c98:	4b5e      	ldr	r3, [pc, #376]	@ (8018e14 <_Z6weighti+0x4f8>)
 8018c9a:	edc3 7a00 	vstr	s15, [r3]
        weight_change = weight_err - weight_lasttime;
 8018c9e:	4b5d      	ldr	r3, [pc, #372]	@ (8018e14 <_Z6weighti+0x4f8>)
 8018ca0:	ed93 7a00 	vldr	s14, [r3]
 8018ca4:	4b5c      	ldr	r3, [pc, #368]	@ (8018e18 <_Z6weighti+0x4fc>)
 8018ca6:	edd3 7a00 	vldr	s15, [r3]
 8018caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018cae:	4b5b      	ldr	r3, [pc, #364]	@ (8018e1c <_Z6weighti+0x500>)
 8018cb0:	edc3 7a00 	vstr	s15, [r3]
        weight_lasttime = weight_err;
 8018cb4:	4b57      	ldr	r3, [pc, #348]	@ (8018e14 <_Z6weighti+0x4f8>)
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	4a57      	ldr	r2, [pc, #348]	@ (8018e18 <_Z6weighti+0x4fc>)
 8018cba:	6013      	str	r3, [r2, #0]

        // 設定目標速度
        target_speed_y = 0;
 8018cbc:	4b59      	ldr	r3, [pc, #356]	@ (8018e24 <_Z6weighti+0x508>)
 8018cbe:	f04f 0200 	mov.w	r2, #0
 8018cc2:	601a      	str	r2, [r3, #0]
        target_speed_x = normal_Speed;
 8018cc4:	4b56      	ldr	r3, [pc, #344]	@ (8018e20 <_Z6weighti+0x504>)
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	4a57      	ldr	r2, [pc, #348]	@ (8018e28 <_Z6weighti+0x50c>)
 8018cca:	6013      	str	r3, [r2, #0]
        
        // 平滑速度更新
        smooth_speed_update(target_speed_x, target_speed_y);
 8018ccc:	4b56      	ldr	r3, [pc, #344]	@ (8018e28 <_Z6weighti+0x50c>)
 8018cce:	edd3 7a00 	vldr	s15, [r3]
 8018cd2:	4b54      	ldr	r3, [pc, #336]	@ (8018e24 <_Z6weighti+0x508>)
 8018cd4:	ed93 7a00 	vldr	s14, [r3]
 8018cd8:	eef0 0a47 	vmov.f32	s1, s14
 8018cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8018ce0:	f7ff fcfa 	bl	80186d8 <_Z19smooth_speed_updateff>
        
        // For mecanum: output chassis velocity vector
        cmd_v_y = current_speed_y; // 使用平滑後的速度
 8018ce4:	4b51      	ldr	r3, [pc, #324]	@ (8018e2c <_Z6weighti+0x510>)
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	4a51      	ldr	r2, [pc, #324]	@ (8018e30 <_Z6weighti+0x514>)
 8018cea:	6013      	str	r3, [r2, #0]
        cmd_v_x = current_speed_x;
 8018cec:	4b51      	ldr	r3, [pc, #324]	@ (8018e34 <_Z6weighti+0x518>)
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	4a51      	ldr	r2, [pc, #324]	@ (8018e38 <_Z6weighti+0x51c>)
 8018cf2:	6013      	str	r3, [r2, #0]
        cmd_v_w = (weight_err * w_kp_x + weight_change * w_kd); // Rotation correction
 8018cf4:	4b47      	ldr	r3, [pc, #284]	@ (8018e14 <_Z6weighti+0x4f8>)
 8018cf6:	ed93 7a00 	vldr	s14, [r3]
 8018cfa:	4b53      	ldr	r3, [pc, #332]	@ (8018e48 <_Z6weighti+0x52c>)
 8018cfc:	edd3 7a00 	vldr	s15, [r3]
 8018d00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018d04:	4b45      	ldr	r3, [pc, #276]	@ (8018e1c <_Z6weighti+0x500>)
 8018d06:	edd3 6a00 	vldr	s13, [r3]
 8018d0a:	4b4d      	ldr	r3, [pc, #308]	@ (8018e40 <_Z6weighti+0x524>)
 8018d0c:	edd3 7a00 	vldr	s15, [r3]
 8018d10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018d18:	4b4a      	ldr	r3, [pc, #296]	@ (8018e44 <_Z6weighti+0x528>)
 8018d1a:	edc3 7a00 	vstr	s15, [r3]
 8018d1e:	e073      	b.n	8018e08 <_Z6weighti+0x4ec>
    }
    else if(dir == 3){//left
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	2b03      	cmp	r3, #3
 8018d24:	d170      	bne.n	8018e08 <_Z6weighti+0x4ec>
        weight_err = ((float)(-3*adcRead_ADC3[4] - adcRead_ADC3[5] + adcRead_ADC3[6] + 3*adcRead_ADC3[7]) /
 8018d26:	4b3a      	ldr	r3, [pc, #232]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018d28:	891b      	ldrh	r3, [r3, #8]
 8018d2a:	461a      	mov	r2, r3
 8018d2c:	009b      	lsls	r3, r3, #2
 8018d2e:	1ad3      	subs	r3, r2, r3
 8018d30:	4a37      	ldr	r2, [pc, #220]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018d32:	8952      	ldrh	r2, [r2, #10]
 8018d34:	1a9b      	subs	r3, r3, r2
 8018d36:	4a36      	ldr	r2, [pc, #216]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018d38:	8992      	ldrh	r2, [r2, #12]
 8018d3a:	441a      	add	r2, r3
 8018d3c:	4b34      	ldr	r3, [pc, #208]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018d3e:	89db      	ldrh	r3, [r3, #14]
 8018d40:	4619      	mov	r1, r3
 8018d42:	460b      	mov	r3, r1
 8018d44:	005b      	lsls	r3, r3, #1
 8018d46:	440b      	add	r3, r1
 8018d48:	4413      	add	r3, r2
 8018d4a:	ee07 3a90 	vmov	s15, r3
 8018d4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                         (adcRead_ADC3[4] + adcRead_ADC3[5]+ 4096 +adcRead_ADC3[6] + adcRead_ADC3[7]));
 8018d52:	4b2f      	ldr	r3, [pc, #188]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018d54:	891b      	ldrh	r3, [r3, #8]
 8018d56:	461a      	mov	r2, r3
 8018d58:	4b2d      	ldr	r3, [pc, #180]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018d5a:	895b      	ldrh	r3, [r3, #10]
 8018d5c:	4413      	add	r3, r2
 8018d5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018d62:	4a2b      	ldr	r2, [pc, #172]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018d64:	8992      	ldrh	r2, [r2, #12]
 8018d66:	4413      	add	r3, r2
 8018d68:	4a29      	ldr	r2, [pc, #164]	@ (8018e10 <_Z6weighti+0x4f4>)
 8018d6a:	89d2      	ldrh	r2, [r2, #14]
 8018d6c:	4413      	add	r3, r2
        weight_err = ((float)(-3*adcRead_ADC3[4] - adcRead_ADC3[5] + adcRead_ADC3[6] + 3*adcRead_ADC3[7]) /
 8018d6e:	ee07 3a90 	vmov	s15, r3
 8018d72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018d7a:	4b26      	ldr	r3, [pc, #152]	@ (8018e14 <_Z6weighti+0x4f8>)
 8018d7c:	edc3 7a00 	vstr	s15, [r3]
        weight_change = weight_err - weight_lasttime;
 8018d80:	4b24      	ldr	r3, [pc, #144]	@ (8018e14 <_Z6weighti+0x4f8>)
 8018d82:	ed93 7a00 	vldr	s14, [r3]
 8018d86:	4b24      	ldr	r3, [pc, #144]	@ (8018e18 <_Z6weighti+0x4fc>)
 8018d88:	edd3 7a00 	vldr	s15, [r3]
 8018d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018d90:	4b22      	ldr	r3, [pc, #136]	@ (8018e1c <_Z6weighti+0x500>)
 8018d92:	edc3 7a00 	vstr	s15, [r3]
        weight_lasttime = weight_err;
 8018d96:	4b1f      	ldr	r3, [pc, #124]	@ (8018e14 <_Z6weighti+0x4f8>)
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8018e18 <_Z6weighti+0x4fc>)
 8018d9c:	6013      	str	r3, [r2, #0]

        // 設定目標速度
        target_speed_y = 0;
 8018d9e:	4b21      	ldr	r3, [pc, #132]	@ (8018e24 <_Z6weighti+0x508>)
 8018da0:	f04f 0200 	mov.w	r2, #0
 8018da4:	601a      	str	r2, [r3, #0]
        target_speed_x = -normal_Speed;
 8018da6:	4b1e      	ldr	r3, [pc, #120]	@ (8018e20 <_Z6weighti+0x504>)
 8018da8:	edd3 7a00 	vldr	s15, [r3]
 8018dac:	eef1 7a67 	vneg.f32	s15, s15
 8018db0:	4b1d      	ldr	r3, [pc, #116]	@ (8018e28 <_Z6weighti+0x50c>)
 8018db2:	edc3 7a00 	vstr	s15, [r3]
        
        // 平滑速度更新
        smooth_speed_update(target_speed_x, target_speed_y);
 8018db6:	4b1c      	ldr	r3, [pc, #112]	@ (8018e28 <_Z6weighti+0x50c>)
 8018db8:	edd3 7a00 	vldr	s15, [r3]
 8018dbc:	4b19      	ldr	r3, [pc, #100]	@ (8018e24 <_Z6weighti+0x508>)
 8018dbe:	ed93 7a00 	vldr	s14, [r3]
 8018dc2:	eef0 0a47 	vmov.f32	s1, s14
 8018dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8018dca:	f7ff fc85 	bl	80186d8 <_Z19smooth_speed_updateff>
        
        // For mecanum: output chassis velocity vector
        cmd_v_y = current_speed_y; // 使用平滑後的速度
 8018dce:	4b17      	ldr	r3, [pc, #92]	@ (8018e2c <_Z6weighti+0x510>)
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	4a17      	ldr	r2, [pc, #92]	@ (8018e30 <_Z6weighti+0x514>)
 8018dd4:	6013      	str	r3, [r2, #0]
        cmd_v_x = current_speed_x;
 8018dd6:	4b17      	ldr	r3, [pc, #92]	@ (8018e34 <_Z6weighti+0x518>)
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	4a17      	ldr	r2, [pc, #92]	@ (8018e38 <_Z6weighti+0x51c>)
 8018ddc:	6013      	str	r3, [r2, #0]
        cmd_v_w = (weight_err * w_kp_x + weight_change * w_kd); // Rotation correction
 8018dde:	4b0d      	ldr	r3, [pc, #52]	@ (8018e14 <_Z6weighti+0x4f8>)
 8018de0:	ed93 7a00 	vldr	s14, [r3]
 8018de4:	4b18      	ldr	r3, [pc, #96]	@ (8018e48 <_Z6weighti+0x52c>)
 8018de6:	edd3 7a00 	vldr	s15, [r3]
 8018dea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018dee:	4b0b      	ldr	r3, [pc, #44]	@ (8018e1c <_Z6weighti+0x500>)
 8018df0:	edd3 6a00 	vldr	s13, [r3]
 8018df4:	4b12      	ldr	r3, [pc, #72]	@ (8018e40 <_Z6weighti+0x524>)
 8018df6:	edd3 7a00 	vldr	s15, [r3]
 8018dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018e02:	4b10      	ldr	r3, [pc, #64]	@ (8018e44 <_Z6weighti+0x528>)
 8018e04:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8018e08:	3710      	adds	r7, #16
 8018e0a:	46bd      	mov	sp, r7
 8018e0c:	bd80      	pop	{r7, pc}
 8018e0e:	bf00      	nop
 8018e10:	24003dc8 	.word	0x24003dc8
 8018e14:	24003de4 	.word	0x24003de4
 8018e18:	24003de8 	.word	0x24003de8
 8018e1c:	24003dec 	.word	0x24003dec
 8018e20:	240001ec 	.word	0x240001ec
 8018e24:	24003dbc 	.word	0x24003dbc
 8018e28:	24003db8 	.word	0x24003db8
 8018e2c:	24003db4 	.word	0x24003db4
 8018e30:	240002c8 	.word	0x240002c8
 8018e34:	24003db0 	.word	0x24003db0
 8018e38:	240002c4 	.word	0x240002c4
 8018e3c:	240001f0 	.word	0x240001f0
 8018e40:	24003dac 	.word	0x24003dac
 8018e44:	240002cc 	.word	0x240002cc
 8018e48:	240001f4 	.word	0x240001f4

08018e4c <_Z10line_checki>:
//void path_move(float path_d){
//
//
//}
//1:front find line, 2:middle find line, 3:find cross road, 4:find line
bool line_check(int type){
 8018e4c:	b480      	push	{r7}
 8018e4e:	b085      	sub	sp, #20
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
	int b = 2000;
 8018e54:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8018e58:	60fb      	str	r3, [r7, #12]
	int c= 3000;
 8018e5a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8018e5e:	60bb      	str	r3, [r7, #8]

	switch(type){
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	3b01      	subs	r3, #1
 8018e64:	2b05      	cmp	r3, #5
 8018e66:	f200 80a5 	bhi.w	8018fb4 <_Z10line_checki+0x168>
 8018e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8018e70 <_Z10line_checki+0x24>)
 8018e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e70:	08018e89 	.word	0x08018e89
 8018e74:	08018eb5 	.word	0x08018eb5
 8018e78:	08018f05 	.word	0x08018f05
 8018e7c:	08018f3d 	.word	0x08018f3d
 8018e80:	08018f75 	.word	0x08018f75
 8018e84:	08018f95 	.word	0x08018f95
    	case 1://left and right line
            if(adcRead_ADC3[5] >= b && adcRead_ADC3[10] >= b && adcRead_ADC3[1] <= b)
 8018e88:	4b4e      	ldr	r3, [pc, #312]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018e8a:	895b      	ldrh	r3, [r3, #10]
 8018e8c:	461a      	mov	r2, r3
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	4293      	cmp	r3, r2
 8018e92:	dc0d      	bgt.n	8018eb0 <_Z10line_checki+0x64>
 8018e94:	4b4b      	ldr	r3, [pc, #300]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018e96:	8a9b      	ldrh	r3, [r3, #20]
 8018e98:	461a      	mov	r2, r3
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	4293      	cmp	r3, r2
 8018e9e:	dc07      	bgt.n	8018eb0 <_Z10line_checki+0x64>
 8018ea0:	4b48      	ldr	r3, [pc, #288]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018ea2:	885b      	ldrh	r3, [r3, #2]
 8018ea4:	461a      	mov	r2, r3
 8018ea6:	68fb      	ldr	r3, [r7, #12]
 8018ea8:	4293      	cmp	r3, r2
 8018eaa:	db01      	blt.n	8018eb0 <_Z10line_checki+0x64>
                return 1;
 8018eac:	2301      	movs	r3, #1
 8018eae:	e082      	b.n	8018fb6 <_Z10line_checki+0x16a>
            else
                return 0;
 8018eb0:	2300      	movs	r3, #0
 8018eb2:	e080      	b.n	8018fb6 <_Z10line_checki+0x16a>
            break; // Note: 'break' after 'return' is redundant but harmless.
	
	    case 2:////front and right line and left line
	    	  if((adcRead_ADC3[1] >= b||adcRead_ADC3[2] >= b) && (adcRead_ADC3[9] >= b||adcRead_ADC3[10] >= b )&&(adcRead_ADC3[5] >= b||adcRead_ADC3[6] >= b))
 8018eb4:	4b43      	ldr	r3, [pc, #268]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018eb6:	885b      	ldrh	r3, [r3, #2]
 8018eb8:	461a      	mov	r2, r3
 8018eba:	68fb      	ldr	r3, [r7, #12]
 8018ebc:	4293      	cmp	r3, r2
 8018ebe:	dd05      	ble.n	8018ecc <_Z10line_checki+0x80>
 8018ec0:	4b40      	ldr	r3, [pc, #256]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018ec2:	889b      	ldrh	r3, [r3, #4]
 8018ec4:	461a      	mov	r2, r3
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	4293      	cmp	r3, r2
 8018eca:	dc19      	bgt.n	8018f00 <_Z10line_checki+0xb4>
 8018ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018ece:	8a5b      	ldrh	r3, [r3, #18]
 8018ed0:	461a      	mov	r2, r3
 8018ed2:	68fb      	ldr	r3, [r7, #12]
 8018ed4:	4293      	cmp	r3, r2
 8018ed6:	dd05      	ble.n	8018ee4 <_Z10line_checki+0x98>
 8018ed8:	4b3a      	ldr	r3, [pc, #232]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018eda:	8a9b      	ldrh	r3, [r3, #20]
 8018edc:	461a      	mov	r2, r3
 8018ede:	68fb      	ldr	r3, [r7, #12]
 8018ee0:	4293      	cmp	r3, r2
 8018ee2:	dc0d      	bgt.n	8018f00 <_Z10line_checki+0xb4>
 8018ee4:	4b37      	ldr	r3, [pc, #220]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018ee6:	895b      	ldrh	r3, [r3, #10]
 8018ee8:	461a      	mov	r2, r3
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	4293      	cmp	r3, r2
 8018eee:	dd05      	ble.n	8018efc <_Z10line_checki+0xb0>
 8018ef0:	4b34      	ldr	r3, [pc, #208]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018ef2:	899b      	ldrh	r3, [r3, #12]
 8018ef4:	461a      	mov	r2, r3
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	4293      	cmp	r3, r2
 8018efa:	dc01      	bgt.n	8018f00 <_Z10line_checki+0xb4>
                return 1;
 8018efc:	2301      	movs	r3, #1
 8018efe:	e05a      	b.n	8018fb6 <_Z10line_checki+0x16a>
            else
                return 0;
 8018f00:	2300      	movs	r3, #0
 8018f02:	e058      	b.n	8018fb6 <_Z10line_checki+0x16a>
            break;
		
	    case 3://left and right
            if((adcRead_ADC3[5] >= b || adcRead_ADC3[6] >= b )&& (adcRead_ADC3[9] >= b || adcRead_ADC3[10] >= b))
 8018f04:	4b2f      	ldr	r3, [pc, #188]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018f06:	895b      	ldrh	r3, [r3, #10]
 8018f08:	461a      	mov	r2, r3
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	4293      	cmp	r3, r2
 8018f0e:	dd05      	ble.n	8018f1c <_Z10line_checki+0xd0>
 8018f10:	4b2c      	ldr	r3, [pc, #176]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018f12:	899b      	ldrh	r3, [r3, #12]
 8018f14:	461a      	mov	r2, r3
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	4293      	cmp	r3, r2
 8018f1a:	dc0d      	bgt.n	8018f38 <_Z10line_checki+0xec>
 8018f1c:	4b29      	ldr	r3, [pc, #164]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018f1e:	8a5b      	ldrh	r3, [r3, #18]
 8018f20:	461a      	mov	r2, r3
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	4293      	cmp	r3, r2
 8018f26:	dd05      	ble.n	8018f34 <_Z10line_checki+0xe8>
 8018f28:	4b26      	ldr	r3, [pc, #152]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018f2a:	8a9b      	ldrh	r3, [r3, #20]
 8018f2c:	461a      	mov	r2, r3
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	4293      	cmp	r3, r2
 8018f32:	dc01      	bgt.n	8018f38 <_Z10line_checki+0xec>
                return 1;
 8018f34:	2301      	movs	r3, #1
 8018f36:	e03e      	b.n	8018fb6 <_Z10line_checki+0x16a>
            else
                return 0;
 8018f38:	2300      	movs	r3, #0
 8018f3a:	e03c      	b.n	8018fb6 <_Z10line_checki+0x16a>
            break;
	    case 4://front and left
            if((adcRead_ADC3[1] >= b||adcRead_ADC3[2] >= b) && (adcRead_ADC3[5] >= b||adcRead_ADC3[6] >= b ))
 8018f3c:	4b21      	ldr	r3, [pc, #132]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018f3e:	885b      	ldrh	r3, [r3, #2]
 8018f40:	461a      	mov	r2, r3
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	4293      	cmp	r3, r2
 8018f46:	dd05      	ble.n	8018f54 <_Z10line_checki+0x108>
 8018f48:	4b1e      	ldr	r3, [pc, #120]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018f4a:	889b      	ldrh	r3, [r3, #4]
 8018f4c:	461a      	mov	r2, r3
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	4293      	cmp	r3, r2
 8018f52:	dc0d      	bgt.n	8018f70 <_Z10line_checki+0x124>
 8018f54:	4b1b      	ldr	r3, [pc, #108]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018f56:	895b      	ldrh	r3, [r3, #10]
 8018f58:	461a      	mov	r2, r3
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	4293      	cmp	r3, r2
 8018f5e:	dd05      	ble.n	8018f6c <_Z10line_checki+0x120>
 8018f60:	4b18      	ldr	r3, [pc, #96]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018f62:	899b      	ldrh	r3, [r3, #12]
 8018f64:	461a      	mov	r2, r3
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	4293      	cmp	r3, r2
 8018f6a:	dc01      	bgt.n	8018f70 <_Z10line_checki+0x124>
                return 1;
 8018f6c:	2301      	movs	r3, #1
 8018f6e:	e022      	b.n	8018fb6 <_Z10line_checki+0x16a>
            else
                return 0;
 8018f70:	2300      	movs	r3, #0
 8018f72:	e020      	b.n	8018fb6 <_Z10line_checki+0x16a>
            break;
	    case 5://left line
            if(adcRead_ADC3[5] >= b || adcRead_ADC3[6] >= b )
 8018f74:	4b13      	ldr	r3, [pc, #76]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018f76:	895b      	ldrh	r3, [r3, #10]
 8018f78:	461a      	mov	r2, r3
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	4293      	cmp	r3, r2
 8018f7e:	dd05      	ble.n	8018f8c <_Z10line_checki+0x140>
 8018f80:	4b10      	ldr	r3, [pc, #64]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018f82:	899b      	ldrh	r3, [r3, #12]
 8018f84:	461a      	mov	r2, r3
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	4293      	cmp	r3, r2
 8018f8a:	dc01      	bgt.n	8018f90 <_Z10line_checki+0x144>
                return 1;
 8018f8c:	2301      	movs	r3, #1
 8018f8e:	e012      	b.n	8018fb6 <_Z10line_checki+0x16a>
            else
                return 0;
 8018f90:	2300      	movs	r3, #0
 8018f92:	e010      	b.n	8018fb6 <_Z10line_checki+0x16a>
            break;
	    case 6://right line
            if(adcRead_ADC3[9] >= b || adcRead_ADC3[10] >= b )
 8018f94:	4b0b      	ldr	r3, [pc, #44]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018f96:	8a5b      	ldrh	r3, [r3, #18]
 8018f98:	461a      	mov	r2, r3
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	4293      	cmp	r3, r2
 8018f9e:	dd05      	ble.n	8018fac <_Z10line_checki+0x160>
 8018fa0:	4b08      	ldr	r3, [pc, #32]	@ (8018fc4 <_Z10line_checki+0x178>)
 8018fa2:	8a9b      	ldrh	r3, [r3, #20]
 8018fa4:	461a      	mov	r2, r3
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	4293      	cmp	r3, r2
 8018faa:	dc01      	bgt.n	8018fb0 <_Z10line_checki+0x164>
                return 1;
 8018fac:	2301      	movs	r3, #1
 8018fae:	e002      	b.n	8018fb6 <_Z10line_checki+0x16a>
            else
                return 0;
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	e000      	b.n	8018fb6 <_Z10line_checki+0x16a>
            break;

        // Add a default return value to handle all other cases
        default:
            return 0;
 8018fb4:	2300      	movs	r3, #0
            break;
	}

    // You can also place a single return at the end instead of a default case
    // return 0;
}
 8018fb6:	4618      	mov	r0, r3
 8018fb8:	3714      	adds	r7, #20
 8018fba:	46bd      	mov	sp, r7
 8018fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fc0:	4770      	bx	lr
 8018fc2:	bf00      	nop
 8018fc4:	24003dc8 	.word	0x24003dc8

08018fc8 <_Z7stage_1v>:

float veryfast =70;



void stage_1() {
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	af00      	add	r7, sp, #0
    //setPath_finding_line(3, 0,veryfast);//Follow front path till find right and left line
	setLinePI(1.5f,0.15,2.f);
 8018fcc:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8018fd0:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8019020 <_Z7stage_1v+0x58>
 8018fd4:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8018fd8:	f7ff fb4c 	bl	8018674 <_Z9setLinePIfff>
    setPath_distance(180,0,veryfast);
 8018fdc:	4b11      	ldr	r3, [pc, #68]	@ (8019024 <_Z7stage_1v+0x5c>)
 8018fde:	edd3 7a00 	vldr	s15, [r3]
 8018fe2:	eef0 0a67 	vmov.f32	s1, s15
 8018fe6:	2000      	movs	r0, #0
 8018fe8:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8019028 <_Z7stage_1v+0x60>
 8018fec:	f7fe ffce 	bl	8017f8c <_Z16setPath_distancefif>
    setLinePI(0.6,0.15,0.f);
 8018ff0:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 801902c <_Z7stage_1v+0x64>
 8018ff4:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8019020 <_Z7stage_1v+0x58>
 8018ff8:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8019030 <_Z7stage_1v+0x68>
 8018ffc:	f7ff fb3a 	bl	8018674 <_Z9setLinePIfff>
    setPath_finding_line(3,0,normalSpeed);
 8019000:	4b0c      	ldr	r3, [pc, #48]	@ (8019034 <_Z7stage_1v+0x6c>)
 8019002:	edd3 7a00 	vldr	s15, [r3]
 8019006:	eeb0 0a67 	vmov.f32	s0, s15
 801900a:	2100      	movs	r1, #0
 801900c:	2003      	movs	r0, #3
 801900e:	f7ff f845 	bl	801809c <_Z20setPath_finding_lineiif>

    //stop();

   // while (!ach()) {}
    s++;
 8019012:	4b09      	ldr	r3, [pc, #36]	@ (8019038 <_Z7stage_1v+0x70>)
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	3301      	adds	r3, #1
 8019018:	4a07      	ldr	r2, [pc, #28]	@ (8019038 <_Z7stage_1v+0x70>)
 801901a:	6013      	str	r3, [r2, #0]
}
 801901c:	bf00      	nop
 801901e:	bd80      	pop	{r7, pc}
 8019020:	3e19999a 	.word	0x3e19999a
 8019024:	24000218 	.word	0x24000218
 8019028:	43340000 	.word	0x43340000
 801902c:	00000000 	.word	0x00000000
 8019030:	3f19999a 	.word	0x3f19999a
 8019034:	24000210 	.word	0x24000210
 8019038:	24003df0 	.word	0x24003df0

0801903c <_Z14set_coffeTablei>:
float xDis_receive = 0, yDis_receive = 0;
void set_coffeTable(int coffeeTable) {
 801903c:	b580      	push	{r7, lr}
 801903e:	b084      	sub	sp, #16
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
    float deskDistance = 28; // Distance to move for placing the cup
 8019044:	4be4      	ldr	r3, [pc, #912]	@ (80193d8 <_Z14set_coffeTablei+0x39c>)
 8019046:	60fb      	str	r3, [r7, #12]

    switch (coffeTable) {//左上桌
 8019048:	4be4      	ldr	r3, [pc, #912]	@ (80193dc <_Z14set_coffeTablei+0x3a0>)
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	3b01      	subs	r3, #1
 801904e:	2b03      	cmp	r3, #3
 8019050:	f200 81d8 	bhi.w	8019404 <_Z14set_coffeTablei+0x3c8>
 8019054:	a201      	add	r2, pc, #4	@ (adr r2, 801905c <_Z14set_coffeTablei+0x20>)
 8019056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801905a:	bf00      	nop
 801905c:	0801906d 	.word	0x0801906d
 8019060:	08019127 	.word	0x08019127
 8019064:	08019235 	.word	0x08019235
 8019068:	080192ef 	.word	0x080192ef
        case 1:
            setPath_finding_line(2, 3, normalSpeed);// Follow left path till find front and right line
 801906c:	4bdc      	ldr	r3, [pc, #880]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 801906e:	edd3 7a00 	vldr	s15, [r3]
 8019072:	eeb0 0a67 	vmov.f32	s0, s15
 8019076:	2103      	movs	r1, #3
 8019078:	2002      	movs	r0, #2
 801907a:	f7ff f80f 	bl	801809c <_Z20setPath_finding_lineiif>
        	//setPath_finding_line(1, 3);// Follow left path till find front and left line

            setPath_distance(deskDistance, 0, slowSpeed);// move to desk
 801907e:	4bd9      	ldr	r3, [pc, #868]	@ (80193e4 <_Z14set_coffeTablei+0x3a8>)
 8019080:	edd3 7a00 	vldr	s15, [r3]
 8019084:	eef0 0a67 	vmov.f32	s1, s15
 8019088:	2000      	movs	r0, #0
 801908a:	ed97 0a03 	vldr	s0, [r7, #12]
 801908e:	f7fe ff7d 	bl	8017f8c <_Z16setPath_distancefif>
            waitMissionComplete(23);//wait for receiveDistance
 8019092:	2017      	movs	r0, #23
 8019094:	f7ff f838 	bl	8018108 <_Z19waitMissionCompletei>
            updatePosition(0,0,0.f);
 8019098:	ed9f 1ad3 	vldr	s2, [pc, #844]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 801909c:	eddf 0ad2 	vldr	s1, [pc, #840]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 80190a0:	ed9f 0ad1 	vldr	s0, [pc, #836]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 80190a4:	f7ff fa64 	bl	8018570 <_Z14updatePositionfff>
            setmoveDistance(xDis_receive, yDis_receive, 0, slowSpeed,3);// Move to desk
 80190a8:	4bd0      	ldr	r3, [pc, #832]	@ (80193ec <_Z14set_coffeTablei+0x3b0>)
 80190aa:	edd3 7a00 	vldr	s15, [r3]
 80190ae:	4bd0      	ldr	r3, [pc, #832]	@ (80193f0 <_Z14set_coffeTablei+0x3b4>)
 80190b0:	ed93 7a00 	vldr	s14, [r3]
 80190b4:	4bcb      	ldr	r3, [pc, #812]	@ (80193e4 <_Z14set_coffeTablei+0x3a8>)
 80190b6:	edd3 6a00 	vldr	s13, [r3]
 80190ba:	2101      	movs	r1, #1
 80190bc:	2003      	movs	r0, #3
 80190be:	eef0 1a66 	vmov.f32	s3, s13
 80190c2:	ed9f 1ac9 	vldr	s2, [pc, #804]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 80190c6:	eef0 0a47 	vmov.f32	s1, s14
 80190ca:	eeb0 0a67 	vmov.f32	s0, s15
 80190ce:	f7ff f847 	bl	8018160 <_Z15setmoveDistanceffffii>
            waitMissionComplete(24);//wait for put cup
 80190d2:	2018      	movs	r0, #24
 80190d4:	f7ff f818 	bl	8018108 <_Z19waitMissionCompletei>
            set_directMove_findLine(1, 3, normalSpeed);// move back till find left and right line
 80190d8:	4bc1      	ldr	r3, [pc, #772]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 80190da:	edd3 7a00 	vldr	s15, [r3]
 80190de:	eeb0 0a67 	vmov.f32	s0, s15
 80190e2:	2103      	movs	r1, #3
 80190e4:	2001      	movs	r0, #1
 80190e6:	f7fe ffa9 	bl	801803c <_Z23set_directMove_findLineiif>
            setPath_distance(120, 3, normalSpeed);// Follow front path for normalSpeed cm
 80190ea:	4bbd      	ldr	r3, [pc, #756]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 80190ec:	edd3 7a00 	vldr	s15, [r3]
 80190f0:	eef0 0a67 	vmov.f32	s1, s15
 80190f4:	2003      	movs	r0, #3
 80190f6:	ed9f 0abf 	vldr	s0, [pc, #764]	@ 80193f4 <_Z14set_coffeTablei+0x3b8>
 80190fa:	f7fe ff47 	bl	8017f8c <_Z16setPath_distancefif>
            setPath_finding_line(2,3, normalSpeed);//follow left path till find front line
 80190fe:	4bb8      	ldr	r3, [pc, #736]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 8019100:	edd3 7a00 	vldr	s15, [r3]
 8019104:	eeb0 0a67 	vmov.f32	s0, s15
 8019108:	2103      	movs	r1, #3
 801910a:	2002      	movs	r0, #2
 801910c:	f7fe ffc6 	bl	801809c <_Z20setPath_finding_lineiif>
            updatePosition(0,0,0);
 8019110:	ed9f 1ab5 	vldr	s2, [pc, #724]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 8019114:	eddf 0ab4 	vldr	s1, [pc, #720]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 8019118:	ed9f 0ab3 	vldr	s0, [pc, #716]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 801911c:	f7ff fa28 	bl	8018570 <_Z14updatePositionfff>
            stop();  
 8019120:	f7fe f962 	bl	80173e8 <_Z4stopv>
            // 放杯子
            break;
 8019124:	e176      	b.n	8019414 <_Z14set_coffeTablei+0x3d8>

        case 2://右上桌
        	 updatePosition(0,0,0);
 8019126:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 801912a:	eddf 0aaf 	vldr	s1, [pc, #700]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 801912e:	ed9f 0aae 	vldr	s0, [pc, #696]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 8019132:	f7ff fa1d 	bl	8018570 <_Z14updatePositionfff>
            setmoveDistance(0, 0, 180.f, normalSpeed,1,-1);// move back for normalSpeed cm
 8019136:	4baa      	ldr	r3, [pc, #680]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 8019138:	edd3 7a00 	vldr	s15, [r3]
 801913c:	f04f 31ff 	mov.w	r1, #4294967295
 8019140:	2001      	movs	r0, #1
 8019142:	eef0 1a67 	vmov.f32	s3, s15
 8019146:	ed9f 1aac 	vldr	s2, [pc, #688]	@ 80193f8 <_Z14set_coffeTablei+0x3bc>
 801914a:	eddf 0aa7 	vldr	s1, [pc, #668]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 801914e:	ed9f 0aa6 	vldr	s0, [pc, #664]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 8019152:	f7ff f805 	bl	8018160 <_Z15setmoveDistanceffffii>
            setPath_distance(150, 2, normalSpeed);// Follow front path for normalSpeed cm
 8019156:	4ba2      	ldr	r3, [pc, #648]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 8019158:	edd3 7a00 	vldr	s15, [r3]
 801915c:	eef0 0a67 	vmov.f32	s1, s15
 8019160:	2002      	movs	r0, #2
 8019162:	ed9f 0aa6 	vldr	s0, [pc, #664]	@ 80193fc <_Z14set_coffeTablei+0x3c0>
 8019166:	f7fe ff11 	bl	8017f8c <_Z16setPath_distancefif>
            setPath_finding_line(2, 2, normalSpeed);// Follow right path till find front and right line
 801916a:	4b9d      	ldr	r3, [pc, #628]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 801916c:	edd3 7a00 	vldr	s15, [r3]
 8019170:	eeb0 0a67 	vmov.f32	s0, s15
 8019174:	2102      	movs	r1, #2
 8019176:	2002      	movs	r0, #2
 8019178:	f7fe ff90 	bl	801809c <_Z20setPath_finding_lineiif>
            setPath_distance(deskDistance, 0, slowSpeed);// move to desk
 801917c:	4b99      	ldr	r3, [pc, #612]	@ (80193e4 <_Z14set_coffeTablei+0x3a8>)
 801917e:	edd3 7a00 	vldr	s15, [r3]
 8019182:	eef0 0a67 	vmov.f32	s1, s15
 8019186:	2000      	movs	r0, #0
 8019188:	ed97 0a03 	vldr	s0, [r7, #12]
 801918c:	f7fe fefe 	bl	8017f8c <_Z16setPath_distancefif>
            updatePosition(0,0,180.f);
 8019190:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 80193f8 <_Z14set_coffeTablei+0x3bc>
 8019194:	eddf 0a94 	vldr	s1, [pc, #592]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 8019198:	ed9f 0a93 	vldr	s0, [pc, #588]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 801919c:	f7ff f9e8 	bl	8018570 <_Z14updatePositionfff>
            waitMissionComplete(23);//wait for receiveDistance
 80191a0:	2017      	movs	r0, #23
 80191a2:	f7fe ffb1 	bl	8018108 <_Z19waitMissionCompletei>
            setmoveDistance(xDis_receive, yDis_receive, 180.f, slowSpeed,3);// Move to desk (保持180度角度)
 80191a6:	4b91      	ldr	r3, [pc, #580]	@ (80193ec <_Z14set_coffeTablei+0x3b0>)
 80191a8:	edd3 7a00 	vldr	s15, [r3]
 80191ac:	4b90      	ldr	r3, [pc, #576]	@ (80193f0 <_Z14set_coffeTablei+0x3b4>)
 80191ae:	ed93 7a00 	vldr	s14, [r3]
 80191b2:	4b8c      	ldr	r3, [pc, #560]	@ (80193e4 <_Z14set_coffeTablei+0x3a8>)
 80191b4:	edd3 6a00 	vldr	s13, [r3]
 80191b8:	2101      	movs	r1, #1
 80191ba:	2003      	movs	r0, #3
 80191bc:	eef0 1a66 	vmov.f32	s3, s13
 80191c0:	ed9f 1a8d 	vldr	s2, [pc, #564]	@ 80193f8 <_Z14set_coffeTablei+0x3bc>
 80191c4:	eef0 0a47 	vmov.f32	s1, s14
 80191c8:	eeb0 0a67 	vmov.f32	s0, s15
 80191cc:	f7fe ffc8 	bl	8018160 <_Z15setmoveDistanceffffii>
            waitMissionComplete(24);//wait for put cup
 80191d0:	2018      	movs	r0, #24
 80191d2:	f7fe ff99 	bl	8018108 <_Z19waitMissionCompletei>
            set_directMove_findLine(1, 3, normalSpeed);// move back till find left and right line
 80191d6:	4b82      	ldr	r3, [pc, #520]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 80191d8:	edd3 7a00 	vldr	s15, [r3]
 80191dc:	eeb0 0a67 	vmov.f32	s0, s15
 80191e0:	2103      	movs	r1, #3
 80191e2:	2001      	movs	r0, #1
 80191e4:	f7fe ff2a 	bl	801803c <_Z23set_directMove_findLineiif>
            setmoveDistance(0, 0, 0.f, normalSpeed,1,-1);// move back for normalSpeed cm
 80191e8:	4b7d      	ldr	r3, [pc, #500]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 80191ea:	edd3 7a00 	vldr	s15, [r3]
 80191ee:	f04f 31ff 	mov.w	r1, #4294967295
 80191f2:	2001      	movs	r0, #1
 80191f4:	eef0 1a67 	vmov.f32	s3, s15
 80191f8:	ed9f 1a7b 	vldr	s2, [pc, #492]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 80191fc:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 8019200:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 8019204:	f7fe ffac 	bl	8018160 <_Z15setmoveDistanceffffii>
            setPath_distance(120, 2, normalSpeed);// Follow front path for normalSpeed cm
 8019208:	4b75      	ldr	r3, [pc, #468]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 801920a:	edd3 7a00 	vldr	s15, [r3]
 801920e:	eef0 0a67 	vmov.f32	s1, s15
 8019212:	2002      	movs	r0, #2
 8019214:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 80193f4 <_Z14set_coffeTablei+0x3b8>
 8019218:	f7fe feb8 	bl	8017f8c <_Z16setPath_distancefif>
            setPath_finding_line(2, 2, normalSpeed);//follow left path till find front line
 801921c:	4b70      	ldr	r3, [pc, #448]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 801921e:	edd3 7a00 	vldr	s15, [r3]
 8019222:	eeb0 0a67 	vmov.f32	s0, s15
 8019226:	2102      	movs	r1, #2
 8019228:	2002      	movs	r0, #2
 801922a:	f7fe ff37 	bl	801809c <_Z20setPath_finding_lineiif>
            stop();  
 801922e:	f7fe f8db 	bl	80173e8 <_Z4stopv>
           // while (!ach()) {}
           // stop();
            // 放杯子
            break;
 8019232:	e0ef      	b.n	8019414 <_Z14set_coffeTablei+0x3d8>

        case 3://left down table
            setPath_distance(200, 3, normalSpeed); // Follow left path for 200 cm
 8019234:	4b6a      	ldr	r3, [pc, #424]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 8019236:	edd3 7a00 	vldr	s15, [r3]
 801923a:	eef0 0a67 	vmov.f32	s1, s15
 801923e:	2003      	movs	r0, #3
 8019240:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 8019400 <_Z14set_coffeTablei+0x3c4>
 8019244:	f7fe fea2 	bl	8017f8c <_Z16setPath_distancefif>
            setPath_finding_line(2, 3, normalSpeed); // Follow left path till find front and left line
 8019248:	4b65      	ldr	r3, [pc, #404]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 801924a:	edd3 7a00 	vldr	s15, [r3]
 801924e:	eeb0 0a67 	vmov.f32	s0, s15
 8019252:	2103      	movs	r1, #3
 8019254:	2002      	movs	r0, #2
 8019256:	f7fe ff21 	bl	801809c <_Z20setPath_finding_lineiif>
            setPath_distance(deskDistance, 0, slowSpeed); // move to desk
 801925a:	4b62      	ldr	r3, [pc, #392]	@ (80193e4 <_Z14set_coffeTablei+0x3a8>)
 801925c:	edd3 7a00 	vldr	s15, [r3]
 8019260:	eef0 0a67 	vmov.f32	s1, s15
 8019264:	2000      	movs	r0, #0
 8019266:	ed97 0a03 	vldr	s0, [r7, #12]
 801926a:	f7fe fe8f 	bl	8017f8c <_Z16setPath_distancefif>
            updatePosition(0,0,0.f);
 801926e:	ed9f 1a5e 	vldr	s2, [pc, #376]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 8019272:	eddf 0a5d 	vldr	s1, [pc, #372]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 8019276:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 801927a:	f7ff f979 	bl	8018570 <_Z14updatePositionfff>
            waitMissionComplete(23);//wait for receiveDistance
 801927e:	2017      	movs	r0, #23
 8019280:	f7fe ff42 	bl	8018108 <_Z19waitMissionCompletei>
            setmoveDistance(xDis_receive, yDis_receive, 0, slowSpeed,3);// Move to desk
 8019284:	4b59      	ldr	r3, [pc, #356]	@ (80193ec <_Z14set_coffeTablei+0x3b0>)
 8019286:	edd3 7a00 	vldr	s15, [r3]
 801928a:	4b59      	ldr	r3, [pc, #356]	@ (80193f0 <_Z14set_coffeTablei+0x3b4>)
 801928c:	ed93 7a00 	vldr	s14, [r3]
 8019290:	4b54      	ldr	r3, [pc, #336]	@ (80193e4 <_Z14set_coffeTablei+0x3a8>)
 8019292:	edd3 6a00 	vldr	s13, [r3]
 8019296:	2101      	movs	r1, #1
 8019298:	2003      	movs	r0, #3
 801929a:	eef0 1a66 	vmov.f32	s3, s13
 801929e:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 80192a2:	eef0 0a47 	vmov.f32	s1, s14
 80192a6:	eeb0 0a67 	vmov.f32	s0, s15
 80192aa:	f7fe ff59 	bl	8018160 <_Z15setmoveDistanceffffii>
            waitMissionComplete(24);//wait for put cup
 80192ae:	2018      	movs	r0, #24
 80192b0:	f7fe ff2a 	bl	8018108 <_Z19waitMissionCompletei>
            set_directMove_findLine(1, 3, normalSpeed); // move back till find left and right line
 80192b4:	4b4a      	ldr	r3, [pc, #296]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 80192b6:	edd3 7a00 	vldr	s15, [r3]
 80192ba:	eeb0 0a67 	vmov.f32	s0, s15
 80192be:	2103      	movs	r1, #3
 80192c0:	2001      	movs	r0, #1
 80192c2:	f7fe febb 	bl	801803c <_Z23set_directMove_findLineiif>
            setPath_finding_line(2,3, normalSpeed);
 80192c6:	4b46      	ldr	r3, [pc, #280]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 80192c8:	edd3 7a00 	vldr	s15, [r3]
 80192cc:	eeb0 0a67 	vmov.f32	s0, s15
 80192d0:	2103      	movs	r1, #3
 80192d2:	2002      	movs	r0, #2
 80192d4:	f7fe fee2 	bl	801809c <_Z20setPath_finding_lineiif>
            updatePosition(0,0,0);
 80192d8:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 80192dc:	eddf 0a42 	vldr	s1, [pc, #264]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 80192e0:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 80192e4:	f7ff f944 	bl	8018570 <_Z14updatePositionfff>
            stop();
 80192e8:	f7fe f87e 	bl	80173e8 <_Z4stopv>
            break;
 80192ec:	e092      	b.n	8019414 <_Z14set_coffeTablei+0x3d8>

        case 4://right down table
            setmoveDistance(0, 0, 180, normalSpeed,1,-1);// turn for 180 degree
 80192ee:	4b3c      	ldr	r3, [pc, #240]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 80192f0:	edd3 7a00 	vldr	s15, [r3]
 80192f4:	f04f 31ff 	mov.w	r1, #4294967295
 80192f8:	2001      	movs	r0, #1
 80192fa:	eef0 1a67 	vmov.f32	s3, s15
 80192fe:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 80193f8 <_Z14set_coffeTablei+0x3bc>
 8019302:	eddf 0a39 	vldr	s1, [pc, #228]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 8019306:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 801930a:	f7fe ff29 	bl	8018160 <_Z15setmoveDistanceffffii>
            setPath_distance(200, 2, normalSpeed);// Follow front path for normalSpeed cm
 801930e:	4b34      	ldr	r3, [pc, #208]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 8019310:	edd3 7a00 	vldr	s15, [r3]
 8019314:	eef0 0a67 	vmov.f32	s1, s15
 8019318:	2002      	movs	r0, #2
 801931a:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8019400 <_Z14set_coffeTablei+0x3c4>
 801931e:	f7fe fe35 	bl	8017f8c <_Z16setPath_distancefif>
            setPath_finding_line(2, 2, normalSpeed); // Follow right path till find front and right line
 8019322:	4b2f      	ldr	r3, [pc, #188]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 8019324:	edd3 7a00 	vldr	s15, [r3]
 8019328:	eeb0 0a67 	vmov.f32	s0, s15
 801932c:	2102      	movs	r1, #2
 801932e:	2002      	movs	r0, #2
 8019330:	f7fe feb4 	bl	801809c <_Z20setPath_finding_lineiif>
            setPath_distance(deskDistance, 0, slowSpeed); // move to desk
 8019334:	4b2b      	ldr	r3, [pc, #172]	@ (80193e4 <_Z14set_coffeTablei+0x3a8>)
 8019336:	edd3 7a00 	vldr	s15, [r3]
 801933a:	eef0 0a67 	vmov.f32	s1, s15
 801933e:	2000      	movs	r0, #0
 8019340:	ed97 0a03 	vldr	s0, [r7, #12]
 8019344:	f7fe fe22 	bl	8017f8c <_Z16setPath_distancefif>
            updatePosition(0,0,180.f);
 8019348:	ed9f 1a2b 	vldr	s2, [pc, #172]	@ 80193f8 <_Z14set_coffeTablei+0x3bc>
 801934c:	eddf 0a26 	vldr	s1, [pc, #152]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 8019350:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 8019354:	f7ff f90c 	bl	8018570 <_Z14updatePositionfff>
            waitMissionComplete(23);//wait for receiveDistance
 8019358:	2017      	movs	r0, #23
 801935a:	f7fe fed5 	bl	8018108 <_Z19waitMissionCompletei>
            setmoveDistance(xDis_receive, yDis_receive, 180, slowSpeed,3);// Move to desk (保持180度角度)
 801935e:	4b23      	ldr	r3, [pc, #140]	@ (80193ec <_Z14set_coffeTablei+0x3b0>)
 8019360:	edd3 7a00 	vldr	s15, [r3]
 8019364:	4b22      	ldr	r3, [pc, #136]	@ (80193f0 <_Z14set_coffeTablei+0x3b4>)
 8019366:	ed93 7a00 	vldr	s14, [r3]
 801936a:	4b1e      	ldr	r3, [pc, #120]	@ (80193e4 <_Z14set_coffeTablei+0x3a8>)
 801936c:	edd3 6a00 	vldr	s13, [r3]
 8019370:	2101      	movs	r1, #1
 8019372:	2003      	movs	r0, #3
 8019374:	eef0 1a66 	vmov.f32	s3, s13
 8019378:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 80193f8 <_Z14set_coffeTablei+0x3bc>
 801937c:	eef0 0a47 	vmov.f32	s1, s14
 8019380:	eeb0 0a67 	vmov.f32	s0, s15
 8019384:	f7fe feec 	bl	8018160 <_Z15setmoveDistanceffffii>
            waitMissionComplete(24);//wait for put cup
 8019388:	2018      	movs	r0, #24
 801938a:	f7fe febd 	bl	8018108 <_Z19waitMissionCompletei>
            set_directMove_findLine(1, 3, normalSpeed); // move back till find left and right line
 801938e:	4b14      	ldr	r3, [pc, #80]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 8019390:	edd3 7a00 	vldr	s15, [r3]
 8019394:	eeb0 0a67 	vmov.f32	s0, s15
 8019398:	2103      	movs	r1, #3
 801939a:	2001      	movs	r0, #1
 801939c:	f7fe fe4e 	bl	801803c <_Z23set_directMove_findLineiif>
            setmoveDistance(0, 0, 0.f, normalSpeed,1,-1);// move back for normalSpeed cm
 80193a0:	4b0f      	ldr	r3, [pc, #60]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 80193a2:	edd3 7a00 	vldr	s15, [r3]
 80193a6:	f04f 31ff 	mov.w	r1, #4294967295
 80193aa:	2001      	movs	r0, #1
 80193ac:	eef0 1a67 	vmov.f32	s3, s15
 80193b0:	ed9f 1a0d 	vldr	s2, [pc, #52]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 80193b4:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 80193b8:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80193e8 <_Z14set_coffeTablei+0x3ac>
 80193bc:	f7fe fed0 	bl	8018160 <_Z15setmoveDistanceffffii>
            setPath_finding_line(2,2, normalSpeed);//follow left path till find front line
 80193c0:	4b07      	ldr	r3, [pc, #28]	@ (80193e0 <_Z14set_coffeTablei+0x3a4>)
 80193c2:	edd3 7a00 	vldr	s15, [r3]
 80193c6:	eeb0 0a67 	vmov.f32	s0, s15
 80193ca:	2102      	movs	r1, #2
 80193cc:	2002      	movs	r0, #2
 80193ce:	f7fe fe65 	bl	801809c <_Z20setPath_finding_lineiif>
            stop();  
 80193d2:	f7fe f809 	bl	80173e8 <_Z4stopv>
            // 放杯子
            break;
 80193d6:	e01d      	b.n	8019414 <_Z14set_coffeTablei+0x3d8>
 80193d8:	41e00000 	.word	0x41e00000
 80193dc:	24000208 	.word	0x24000208
 80193e0:	24000210 	.word	0x24000210
 80193e4:	24000214 	.word	0x24000214
 80193e8:	00000000 	.word	0x00000000
 80193ec:	24003df4 	.word	0x24003df4
 80193f0:	24003df8 	.word	0x24003df8
 80193f4:	42f00000 	.word	0x42f00000
 80193f8:	43340000 	.word	0x43340000
 80193fc:	43160000 	.word	0x43160000
 8019400:	43480000 	.word	0x43480000
        default:
        	stop();
 8019404:	f7fd fff0 	bl	80173e8 <_Z4stopv>
        	waitMissionComplete(coffeTable);
 8019408:	4b04      	ldr	r3, [pc, #16]	@ (801941c <_Z14set_coffeTablei+0x3e0>)
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	4618      	mov	r0, r3
 801940e:	f7fe fe7b 	bl	8018108 <_Z19waitMissionCompletei>
        	break;
 8019412:	bf00      	nop

    }
}
 8019414:	bf00      	nop
 8019416:	3710      	adds	r7, #16
 8019418:	46bd      	mov	sp, r7
 801941a:	bd80      	pop	{r7, pc}
 801941c:	24000208 	.word	0x24000208

08019420 <_Z14set_coffee_cupv>:
float sslowSpeed = 7;
//int cupDistance_x = 20; // Distance to move for placing the cup
void set_coffee_cup() {
 8019420:	b580      	push	{r7, lr}
 8019422:	b082      	sub	sp, #8
 8019424:	af00      	add	r7, sp, #0
    float cupDistance_x = 16.5; // Distance to move for placing the cup
 8019426:	4b28      	ldr	r3, [pc, #160]	@ (80194c8 <_Z14set_coffee_cupv+0xa8>)
 8019428:	607b      	str	r3, [r7, #4]
    float cupDistance_y = 16.5; // Distance to move for placing the cup
 801942a:	4b27      	ldr	r3, [pc, #156]	@ (80194c8 <_Z14set_coffee_cupv+0xa8>)
 801942c:	603b      	str	r3, [r7, #0]
    switch (cupColor) {
 801942e:	4b27      	ldr	r3, [pc, #156]	@ (80194cc <_Z14set_coffee_cupv+0xac>)
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	2b01      	cmp	r3, #1
 8019434:	d002      	beq.n	801943c <_Z14set_coffee_cupv+0x1c>
 8019436:	2b02      	cmp	r3, #2
 8019438:	d023      	beq.n	8019482 <_Z14set_coffee_cupv+0x62>
        case 2: // black cup
            setmoveDistance(cupDistance_x, 0, 0, sslowSpeed,1); // Move forward to place the cup
            setmoveDistance(0, cupDistance_y, 0, sslowSpeed,1); // Move upward to place the cup
            break;
    }
}
 801943a:	e041      	b.n	80194c0 <_Z14set_coffee_cupv+0xa0>
            setmoveDistance(-cupDistance_x, 0, 0, sslowSpeed,1); // Move forward to place the cup
 801943c:	edd7 7a01 	vldr	s15, [r7, #4]
 8019440:	eef1 7a67 	vneg.f32	s15, s15
 8019444:	4b22      	ldr	r3, [pc, #136]	@ (80194d0 <_Z14set_coffee_cupv+0xb0>)
 8019446:	ed93 7a00 	vldr	s14, [r3]
 801944a:	2101      	movs	r1, #1
 801944c:	2001      	movs	r0, #1
 801944e:	eef0 1a47 	vmov.f32	s3, s14
 8019452:	ed9f 1a20 	vldr	s2, [pc, #128]	@ 80194d4 <_Z14set_coffee_cupv+0xb4>
 8019456:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 80194d4 <_Z14set_coffee_cupv+0xb4>
 801945a:	eeb0 0a67 	vmov.f32	s0, s15
 801945e:	f7fe fe7f 	bl	8018160 <_Z15setmoveDistanceffffii>
            setmoveDistance(0, cupDistance_y, 0, sslowSpeed,1); // Move upward to place the cup
 8019462:	4b1b      	ldr	r3, [pc, #108]	@ (80194d0 <_Z14set_coffee_cupv+0xb0>)
 8019464:	edd3 7a00 	vldr	s15, [r3]
 8019468:	2101      	movs	r1, #1
 801946a:	2001      	movs	r0, #1
 801946c:	eef0 1a67 	vmov.f32	s3, s15
 8019470:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 80194d4 <_Z14set_coffee_cupv+0xb4>
 8019474:	edd7 0a00 	vldr	s1, [r7]
 8019478:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 80194d4 <_Z14set_coffee_cupv+0xb4>
 801947c:	f7fe fe70 	bl	8018160 <_Z15setmoveDistanceffffii>
            break;
 8019480:	e01e      	b.n	80194c0 <_Z14set_coffee_cupv+0xa0>
            setmoveDistance(cupDistance_x, 0, 0, sslowSpeed,1); // Move forward to place the cup
 8019482:	4b13      	ldr	r3, [pc, #76]	@ (80194d0 <_Z14set_coffee_cupv+0xb0>)
 8019484:	edd3 7a00 	vldr	s15, [r3]
 8019488:	2101      	movs	r1, #1
 801948a:	2001      	movs	r0, #1
 801948c:	eef0 1a67 	vmov.f32	s3, s15
 8019490:	ed9f 1a10 	vldr	s2, [pc, #64]	@ 80194d4 <_Z14set_coffee_cupv+0xb4>
 8019494:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80194d4 <_Z14set_coffee_cupv+0xb4>
 8019498:	ed97 0a01 	vldr	s0, [r7, #4]
 801949c:	f7fe fe60 	bl	8018160 <_Z15setmoveDistanceffffii>
            setmoveDistance(0, cupDistance_y, 0, sslowSpeed,1); // Move upward to place the cup
 80194a0:	4b0b      	ldr	r3, [pc, #44]	@ (80194d0 <_Z14set_coffee_cupv+0xb0>)
 80194a2:	edd3 7a00 	vldr	s15, [r3]
 80194a6:	2101      	movs	r1, #1
 80194a8:	2001      	movs	r0, #1
 80194aa:	eef0 1a67 	vmov.f32	s3, s15
 80194ae:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 80194d4 <_Z14set_coffee_cupv+0xb4>
 80194b2:	edd7 0a00 	vldr	s1, [r7]
 80194b6:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80194d4 <_Z14set_coffee_cupv+0xb4>
 80194ba:	f7fe fe51 	bl	8018160 <_Z15setmoveDistanceffffii>
            break;
 80194be:	bf00      	nop
}
 80194c0:	bf00      	nop
 80194c2:	3708      	adds	r7, #8
 80194c4:	46bd      	mov	sp, r7
 80194c6:	bd80      	pop	{r7, pc}
 80194c8:	41840000 	.word	0x41840000
 80194cc:	2400020c 	.word	0x2400020c
 80194d0:	2400021c 	.word	0x2400021c
 80194d4:	00000000 	.word	0x00000000

080194d8 <_Z7stage_2v>:

int firstDeskDis = 25;
void stage_2() {
 80194d8:	b580      	push	{r7, lr}
 80194da:	af00      	add	r7, sp, #0
    setPath_finding_line(4, 2, normalSpeed);// Follow right path till find front and left line//
 80194dc:	4b1b      	ldr	r3, [pc, #108]	@ (801954c <_Z7stage_2v+0x74>)
 80194de:	edd3 7a00 	vldr	s15, [r3]
 80194e2:	eeb0 0a67 	vmov.f32	s0, s15
 80194e6:	2102      	movs	r1, #2
 80194e8:	2004      	movs	r0, #4
 80194ea:	f7fe fdd7 	bl	801809c <_Z20setPath_finding_lineiif>
//    set_directMove_findLine(4,2);//
   // set_directMove_findLine(1,2);// direct move right till find front and right line
   // while (!ach()) {}
    //setPath_distance(normalSpeed, 0, 0 ,10.f);// Follow front path for normalSpeed cm//到桌子前
    setPath_distance(firstDeskDis, 0, 10);
 80194ee:	4b18      	ldr	r3, [pc, #96]	@ (8019550 <_Z7stage_2v+0x78>)
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	ee07 3a90 	vmov	s15, r3
 80194f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80194fa:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80194fe:	2000      	movs	r0, #0
 8019500:	eeb0 0a67 	vmov.f32	s0, s15
 8019504:	f7fe fd42 	bl	8017f8c <_Z16setPath_distancefif>

//    while(cupColor == 0){
//
//    }
    waitMissionComplete(21);//wait for receive cup color
 8019508:	2015      	movs	r0, #21
 801950a:	f7fe fdfd 	bl	8018108 <_Z19waitMissionCompletei>
    //setmoveDistance(0, -5, 0, normalSpeed,1);// Move to desk (保持180度角度)
   // waitMissionComplete(21);//wait for receive desk informatu
    updatePosition(0,0,0);
 801950e:	ed9f 1a11 	vldr	s2, [pc, #68]	@ 8019554 <_Z7stage_2v+0x7c>
 8019512:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8019554 <_Z7stage_2v+0x7c>
 8019516:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8019554 <_Z7stage_2v+0x7c>
 801951a:	f7ff f829 	bl	8018570 <_Z14updatePositionfff>
    set_coffee_cup();//go tp cup location
 801951e:	f7ff ff7f 	bl	8019420 <_Z14set_coffee_cupv>
    waitMissionComplete(22);//wait for close grip
 8019522:	2016      	movs	r0, #22
 8019524:	f7fe fdf0 	bl	8018108 <_Z19waitMissionCompletei>
    set_directMove_findLine(1,5, normalSpeed);// 往後移到碰到左線
 8019528:	4b08      	ldr	r3, [pc, #32]	@ (801954c <_Z7stage_2v+0x74>)
 801952a:	edd3 7a00 	vldr	s15, [r3]
 801952e:	eeb0 0a67 	vmov.f32	s0, s15
 8019532:	2105      	movs	r1, #5
 8019534:	2001      	movs	r0, #1
 8019536:	f7fe fd81 	bl	801803c <_Z23set_directMove_findLineiif>

    set_coffeTable(coffeTable);// Place the coffee cup based on the coffee table number
 801953a:	4b07      	ldr	r3, [pc, #28]	@ (8019558 <_Z7stage_2v+0x80>)
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	4618      	mov	r0, r3
 8019540:	f7ff fd7c 	bl	801903c <_Z14set_coffeTablei>
    stop();
 8019544:	f7fd ff50 	bl	80173e8 <_Z4stopv>
}
 8019548:	bf00      	nop
 801954a:	bd80      	pop	{r7, pc}
 801954c:	24000210 	.word	0x24000210
 8019550:	24000220 	.word	0x24000220
 8019554:	00000000 	.word	0x00000000
 8019558:	24000208 	.word	0x24000208

0801955c <_Z7stage_3v>:

float basket_x = 68, basket_y = 30,putbasket_x = 80;
void stage_3() {
 801955c:	b580      	push	{r7, lr}
 801955e:	af00      	add	r7, sp, #0
	updatePosition(0,0,0);
 8019560:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 8019644 <_Z7stage_3v+0xe8>
 8019564:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8019644 <_Z7stage_3v+0xe8>
 8019568:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8019644 <_Z7stage_3v+0xe8>
 801956c:	f7ff f800 	bl	8018570 <_Z14updatePositionfff>
    setmoveDistance(0, 0, 180.f, normalSpeed,1,-1);// rotate counterclockwise 180 degree
 8019570:	4b35      	ldr	r3, [pc, #212]	@ (8019648 <_Z7stage_3v+0xec>)
 8019572:	edd3 7a00 	vldr	s15, [r3]
 8019576:	f04f 31ff 	mov.w	r1, #4294967295
 801957a:	2001      	movs	r0, #1
 801957c:	eef0 1a67 	vmov.f32	s3, s15
 8019580:	ed9f 1a32 	vldr	s2, [pc, #200]	@ 801964c <_Z7stage_3v+0xf0>
 8019584:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8019644 <_Z7stage_3v+0xe8>
 8019588:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8019644 <_Z7stage_3v+0xe8>
 801958c:	f7fe fde8 	bl	8018160 <_Z15setmoveDistanceffffii>
    setPath_distance(basket_x , 2, slowSpeed);
 8019590:	4b2f      	ldr	r3, [pc, #188]	@ (8019650 <_Z7stage_3v+0xf4>)
 8019592:	edd3 7a00 	vldr	s15, [r3]
 8019596:	4b2f      	ldr	r3, [pc, #188]	@ (8019654 <_Z7stage_3v+0xf8>)
 8019598:	ed93 7a00 	vldr	s14, [r3]
 801959c:	eef0 0a47 	vmov.f32	s1, s14
 80195a0:	2002      	movs	r0, #2
 80195a2:	eeb0 0a67 	vmov.f32	s0, s15
 80195a6:	f7fe fcf1 	bl	8017f8c <_Z16setPath_distancefif>
    updatePosition(0,0,180);
 80195aa:	ed9f 1a28 	vldr	s2, [pc, #160]	@ 801964c <_Z7stage_3v+0xf0>
 80195ae:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8019644 <_Z7stage_3v+0xe8>
 80195b2:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8019644 <_Z7stage_3v+0xe8>
 80195b6:	f7fe ffdb 	bl	8018570 <_Z14updatePositionfff>
    setmoveDistance(0, basket_y, 180.f, normalSpeed,1);
 80195ba:	4b27      	ldr	r3, [pc, #156]	@ (8019658 <_Z7stage_3v+0xfc>)
 80195bc:	edd3 7a00 	vldr	s15, [r3]
 80195c0:	4b21      	ldr	r3, [pc, #132]	@ (8019648 <_Z7stage_3v+0xec>)
 80195c2:	ed93 7a00 	vldr	s14, [r3]
 80195c6:	2101      	movs	r1, #1
 80195c8:	2001      	movs	r0, #1
 80195ca:	eef0 1a47 	vmov.f32	s3, s14
 80195ce:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 801964c <_Z7stage_3v+0xf0>
 80195d2:	eef0 0a67 	vmov.f32	s1, s15
 80195d6:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8019644 <_Z7stage_3v+0xe8>
 80195da:	f7fe fdc1 	bl	8018160 <_Z15setmoveDistanceffffii>
    waitMissionComplete(31);//wait for grab basket
 80195de:	201f      	movs	r0, #31
 80195e0:	f7fe fd92 	bl	8018108 <_Z19waitMissionCompletei>
    set_directMove_findLine(6,0, normalSpeed);// move forward till find right line
 80195e4:	4b18      	ldr	r3, [pc, #96]	@ (8019648 <_Z7stage_3v+0xec>)
 80195e6:	edd3 7a00 	vldr	s15, [r3]
 80195ea:	eeb0 0a67 	vmov.f32	s0, s15
 80195ee:	2100      	movs	r1, #0
 80195f0:	2006      	movs	r0, #6
 80195f2:	f7fe fd23 	bl	801803c <_Z23set_directMove_findLineiif>
    setPath_finding_line(6,2, normalSpeed);// Follow right path till find front and right line and left line
 80195f6:	4b14      	ldr	r3, [pc, #80]	@ (8019648 <_Z7stage_3v+0xec>)
 80195f8:	edd3 7a00 	vldr	s15, [r3]
 80195fc:	eeb0 0a67 	vmov.f32	s0, s15
 8019600:	2102      	movs	r1, #2
 8019602:	2006      	movs	r0, #6
 8019604:	f7fe fd4a 	bl	801809c <_Z20setPath_finding_lineiif>
    setPath_distance(putbasket_x, 2, slowSpeed);// Follow front path for slowSpeed cm
 8019608:	4b14      	ldr	r3, [pc, #80]	@ (801965c <_Z7stage_3v+0x100>)
 801960a:	edd3 7a00 	vldr	s15, [r3]
 801960e:	4b11      	ldr	r3, [pc, #68]	@ (8019654 <_Z7stage_3v+0xf8>)
 8019610:	ed93 7a00 	vldr	s14, [r3]
 8019614:	eef0 0a47 	vmov.f32	s1, s14
 8019618:	2002      	movs	r0, #2
 801961a:	eeb0 0a67 	vmov.f32	s0, s15
 801961e:	f7fe fcb5 	bl	8017f8c <_Z16setPath_distancefif>
    waitMissionComplete(32);// wait for put basket
 8019622:	2020      	movs	r0, #32
 8019624:	f7fe fd70 	bl	8018108 <_Z19waitMissionCompletei>
    setPath_finding_line(3,0, slowSpeed);//follow front path till find left ,right,speeds
 8019628:	4b0a      	ldr	r3, [pc, #40]	@ (8019654 <_Z7stage_3v+0xf8>)
 801962a:	edd3 7a00 	vldr	s15, [r3]
 801962e:	eeb0 0a67 	vmov.f32	s0, s15
 8019632:	2100      	movs	r1, #0
 8019634:	2003      	movs	r0, #3
 8019636:	f7fe fd31 	bl	801809c <_Z20setPath_finding_lineiif>

    stop();
 801963a:	f7fd fed5 	bl	80173e8 <_Z4stopv>
}
 801963e:	bf00      	nop
 8019640:	bd80      	pop	{r7, pc}
 8019642:	bf00      	nop
 8019644:	00000000 	.word	0x00000000
 8019648:	24000210 	.word	0x24000210
 801964c:	43340000 	.word	0x43340000
 8019650:	24000224 	.word	0x24000224
 8019654:	24000214 	.word	0x24000214
 8019658:	24000228 	.word	0x24000228
 801965c:	2400022c 	.word	0x2400022c

08019660 <_Z5testtv>:
void testt(){
 8019660:	b580      	push	{r7, lr}
 8019662:	af00      	add	r7, sp, #0
	updatePosition(0,0,180.f);
 8019664:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 80196b0 <_Z5testtv+0x50>
 8019668:	eddf 0a12 	vldr	s1, [pc, #72]	@ 80196b4 <_Z5testtv+0x54>
 801966c:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80196b4 <_Z5testtv+0x54>
 8019670:	f7fe ff7e 	bl	8018570 <_Z14updatePositionfff>
	waitMissionComplete(23);//wait for receiveDistance
 8019674:	2017      	movs	r0, #23
 8019676:	f7fe fd47 	bl	8018108 <_Z19waitMissionCompletei>
	setmoveDistance(xDis_receive, yDis_receive, 180, slowSpeed,2);// Move to desk (保持180度角度)
 801967a:	4b0f      	ldr	r3, [pc, #60]	@ (80196b8 <_Z5testtv+0x58>)
 801967c:	edd3 7a00 	vldr	s15, [r3]
 8019680:	4b0e      	ldr	r3, [pc, #56]	@ (80196bc <_Z5testtv+0x5c>)
 8019682:	ed93 7a00 	vldr	s14, [r3]
 8019686:	4b0e      	ldr	r3, [pc, #56]	@ (80196c0 <_Z5testtv+0x60>)
 8019688:	edd3 6a00 	vldr	s13, [r3]
 801968c:	2101      	movs	r1, #1
 801968e:	2002      	movs	r0, #2
 8019690:	eef0 1a66 	vmov.f32	s3, s13
 8019694:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 80196b0 <_Z5testtv+0x50>
 8019698:	eef0 0a47 	vmov.f32	s1, s14
 801969c:	eeb0 0a67 	vmov.f32	s0, s15
 80196a0:	f7fe fd5e 	bl	8018160 <_Z15setmoveDistanceffffii>
	waitMissionComplete(24);//wait for put cup
 80196a4:	2018      	movs	r0, #24
 80196a6:	f7fe fd2f 	bl	8018108 <_Z19waitMissionCompletei>
	// 順時針應該是：0° → -90° → -180° → -270° (= 90°)，總共轉 -270°
	//setmoveDistance(20, 0, 0, 15, 1, -1);   // 順時針到90°

	// 逆時針應該是：0° → 90°，總共轉 +90°
	//setmoveDistance(0, 0, 180, 15, 1, -1); // 逆時針到90°
}
 80196aa:	bf00      	nop
 80196ac:	bd80      	pop	{r7, pc}
 80196ae:	bf00      	nop
 80196b0:	43340000 	.word	0x43340000
 80196b4:	00000000 	.word	0x00000000
 80196b8:	24003df4 	.word	0x24003df4
 80196bc:	24003df8 	.word	0x24003df8
 80196c0:	24000214 	.word	0x24000214

080196c4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80196c4:	b10a      	cbz	r2, 80196ca <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80196c6:	f001 bd22 	b.w	801b10e <memcpy>
 80196ca:	4770      	bx	lr

080196cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>:
 80196cc:	1e08      	subs	r0, r1, #0
 80196ce:	b508      	push	{r3, lr}
 80196d0:	da01      	bge.n	80196d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j+0xa>
 80196d2:	f000 f8cc 	bl	801986e <_ZSt17__throw_bad_allocv>
 80196d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80196da:	f000 b8b7 	b.w	801984c <_Znwj>

080196de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 80196de:	f850 3b08 	ldr.w	r3, [r0], #8
 80196e2:	1a1b      	subs	r3, r3, r0
 80196e4:	4258      	negs	r0, r3
 80196e6:	4158      	adcs	r0, r3
 80196e8:	4770      	bx	lr
	...

080196ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80196ec:	680b      	ldr	r3, [r1, #0]
 80196ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80196f2:	b510      	push	{r4, lr}
 80196f4:	d302      	bcc.n	80196fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80196f6:	480b      	ldr	r0, [pc, #44]	@ (8019724 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 80196f8:	f000 f8bf 	bl	801987a <_ZSt20__throw_length_errorPKc>
 80196fc:	4293      	cmp	r3, r2
 80196fe:	d90b      	bls.n	8019718 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8019700:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8019704:	ea4f 0442 	mov.w	r4, r2, lsl #1
 8019708:	d206      	bcs.n	8019718 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801970a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801970e:	bf2a      	itet	cs
 8019710:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8019714:	600c      	strcc	r4, [r1, #0]
 8019716:	600b      	strcs	r3, [r1, #0]
 8019718:	6809      	ldr	r1, [r1, #0]
 801971a:	3101      	adds	r1, #1
 801971c:	f7ff ffd6 	bl	80196cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>
 8019720:	bd10      	pop	{r4, pc}
 8019722:	bf00      	nop
 8019724:	0801cad8 	.word	0x0801cad8

08019728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>:
 8019728:	6800      	ldr	r0, [r0, #0]
 801972a:	f000 b88d 	b.w	8019848 <_ZdlPv>

0801972e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 801972e:	b510      	push	{r4, lr}
 8019730:	4604      	mov	r4, r0
 8019732:	f7ff ffd4 	bl	80196de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8019736:	b918      	cbnz	r0, 8019740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x12>
 8019738:	68a1      	ldr	r1, [r4, #8]
 801973a:	4620      	mov	r0, r4
 801973c:	f7ff fff4 	bl	8019728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
 8019740:	bd10      	pop	{r4, pc}

08019742 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8019742:	2a01      	cmp	r2, #1
 8019744:	b410      	push	{r4}
 8019746:	d104      	bne.n	8019752 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8019748:	780a      	ldrb	r2, [r1, #0]
 801974a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801974e:	7002      	strb	r2, [r0, #0]
 8019750:	4770      	bx	lr
 8019752:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019756:	f7ff bfb5 	b.w	80196c4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0801975a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801975a:	b508      	push	{r3, lr}
 801975c:	1a52      	subs	r2, r2, r1
 801975e:	f7ff fff0 	bl	8019742 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8019762:	bd08      	pop	{r3, pc}

08019764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8019764:	f100 0208 	add.w	r2, r0, #8
 8019768:	6002      	str	r2, [r0, #0]
 801976a:	2200      	movs	r2, #0
 801976c:	6042      	str	r2, [r0, #4]
 801976e:	7202      	strb	r2, [r0, #8]
 8019770:	4770      	bx	lr

08019772 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8019772:	b510      	push	{r4, lr}
 8019774:	4604      	mov	r4, r0
 8019776:	f7ff ffda 	bl	801972e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801977a:	4620      	mov	r0, r4
 801977c:	bd10      	pop	{r4, pc}

0801977e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 801977e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019780:	4605      	mov	r5, r0
 8019782:	4608      	mov	r0, r1
 8019784:	460c      	mov	r4, r1
 8019786:	f7ff ffaa 	bl	80196de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801978a:	4606      	mov	r6, r0
 801978c:	b190      	cbz	r0, 80197b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x36>
 801978e:	42a5      	cmp	r5, r4
 8019790:	d00a      	beq.n	80197a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2a>
 8019792:	6862      	ldr	r2, [r4, #4]
 8019794:	b11a      	cbz	r2, 801979e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x20>
 8019796:	6821      	ldr	r1, [r4, #0]
 8019798:	6828      	ldr	r0, [r5, #0]
 801979a:	f7ff ffd2 	bl	8019742 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801979e:	6863      	ldr	r3, [r4, #4]
 80197a0:	682a      	ldr	r2, [r5, #0]
 80197a2:	606b      	str	r3, [r5, #4]
 80197a4:	2100      	movs	r1, #0
 80197a6:	54d1      	strb	r1, [r2, r3]
 80197a8:	6822      	ldr	r2, [r4, #0]
 80197aa:	2300      	movs	r3, #0
 80197ac:	6063      	str	r3, [r4, #4]
 80197ae:	7013      	strb	r3, [r2, #0]
 80197b0:	4628      	mov	r0, r5
 80197b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197b4:	4628      	mov	r0, r5
 80197b6:	f7ff ff92 	bl	80196de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80197ba:	b908      	cbnz	r0, 80197c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x42>
 80197bc:	682e      	ldr	r6, [r5, #0]
 80197be:	68af      	ldr	r7, [r5, #8]
 80197c0:	6823      	ldr	r3, [r4, #0]
 80197c2:	602b      	str	r3, [r5, #0]
 80197c4:	6863      	ldr	r3, [r4, #4]
 80197c6:	606b      	str	r3, [r5, #4]
 80197c8:	68a3      	ldr	r3, [r4, #8]
 80197ca:	60ab      	str	r3, [r5, #8]
 80197cc:	b116      	cbz	r6, 80197d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x56>
 80197ce:	6026      	str	r6, [r4, #0]
 80197d0:	60a7      	str	r7, [r4, #8]
 80197d2:	e7e9      	b.n	80197a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2a>
 80197d4:	f104 0308 	add.w	r3, r4, #8
 80197d8:	6023      	str	r3, [r4, #0]
 80197da:	e7e5      	b.n	80197a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2a>

080197dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80197dc:	6800      	ldr	r0, [r0, #0]
 80197de:	4770      	bx	lr

080197e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80197e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80197e2:	1a53      	subs	r3, r2, r1
 80197e4:	2b0f      	cmp	r3, #15
 80197e6:	4604      	mov	r4, r0
 80197e8:	460d      	mov	r5, r1
 80197ea:	4616      	mov	r6, r2
 80197ec:	9301      	str	r3, [sp, #4]
 80197ee:	d906      	bls.n	80197fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 80197f0:	2200      	movs	r2, #0
 80197f2:	a901      	add	r1, sp, #4
 80197f4:	f7ff ff7a 	bl	80196ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80197f8:	9b01      	ldr	r3, [sp, #4]
 80197fa:	6020      	str	r0, [r4, #0]
 80197fc:	60a3      	str	r3, [r4, #8]
 80197fe:	4632      	mov	r2, r6
 8019800:	4629      	mov	r1, r5
 8019802:	6820      	ldr	r0, [r4, #0]
 8019804:	f7ff ffa9 	bl	801975a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8019808:	9b01      	ldr	r3, [sp, #4]
 801980a:	6822      	ldr	r2, [r4, #0]
 801980c:	6063      	str	r3, [r4, #4]
 801980e:	2100      	movs	r1, #0
 8019810:	54d1      	strb	r1, [r2, r3]
 8019812:	b002      	add	sp, #8
 8019814:	bd70      	pop	{r4, r5, r6, pc}
	...

08019818 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8019818:	b538      	push	{r3, r4, r5, lr}
 801981a:	f100 0308 	add.w	r3, r0, #8
 801981e:	4604      	mov	r4, r0
 8019820:	6003      	str	r3, [r0, #0]
 8019822:	460d      	mov	r5, r1
 8019824:	b911      	cbnz	r1, 801982c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 8019826:	4807      	ldr	r0, [pc, #28]	@ (8019844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 8019828:	f000 f824 	bl	8019874 <_ZSt19__throw_logic_errorPKc>
 801982c:	4608      	mov	r0, r1
 801982e:	f7e6 fdbf 	bl	80003b0 <strlen>
 8019832:	f04f 0300 	mov.w	r3, #0
 8019836:	182a      	adds	r2, r5, r0
 8019838:	4629      	mov	r1, r5
 801983a:	4620      	mov	r0, r4
 801983c:	f7ff ffd0 	bl	80197e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8019840:	4620      	mov	r0, r4
 8019842:	bd38      	pop	{r3, r4, r5, pc}
 8019844:	0801caf0 	.word	0x0801caf0

08019848 <_ZdlPv>:
 8019848:	f001 b93e 	b.w	801aac8 <free>

0801984c <_Znwj>:
 801984c:	2801      	cmp	r0, #1
 801984e:	bf38      	it	cc
 8019850:	2001      	movcc	r0, #1
 8019852:	b510      	push	{r4, lr}
 8019854:	4604      	mov	r4, r0
 8019856:	4620      	mov	r0, r4
 8019858:	f001 f92e 	bl	801aab8 <malloc>
 801985c:	b100      	cbz	r0, 8019860 <_Znwj+0x14>
 801985e:	bd10      	pop	{r4, pc}
 8019860:	f000 f80e 	bl	8019880 <_ZSt15get_new_handlerv>
 8019864:	b908      	cbnz	r0, 801986a <_Znwj+0x1e>
 8019866:	f001 f91f 	bl	801aaa8 <abort>
 801986a:	4780      	blx	r0
 801986c:	e7f3      	b.n	8019856 <_Znwj+0xa>

0801986e <_ZSt17__throw_bad_allocv>:
 801986e:	b508      	push	{r3, lr}
 8019870:	f001 f91a 	bl	801aaa8 <abort>

08019874 <_ZSt19__throw_logic_errorPKc>:
 8019874:	b508      	push	{r3, lr}
 8019876:	f001 f917 	bl	801aaa8 <abort>

0801987a <_ZSt20__throw_length_errorPKc>:
 801987a:	b508      	push	{r3, lr}
 801987c:	f001 f914 	bl	801aaa8 <abort>

08019880 <_ZSt15get_new_handlerv>:
 8019880:	4b02      	ldr	r3, [pc, #8]	@ (801988c <_ZSt15get_new_handlerv+0xc>)
 8019882:	6818      	ldr	r0, [r3, #0]
 8019884:	f3bf 8f5b 	dmb	ish
 8019888:	4770      	bx	lr
 801988a:	bf00      	nop
 801988c:	24003dfc 	.word	0x24003dfc

08019890 <cos>:
 8019890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019892:	eeb0 7b40 	vmov.f64	d7, d0
 8019896:	ee17 3a90 	vmov	r3, s15
 801989a:	4a21      	ldr	r2, [pc, #132]	@ (8019920 <cos+0x90>)
 801989c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80198a0:	4293      	cmp	r3, r2
 80198a2:	d806      	bhi.n	80198b2 <cos+0x22>
 80198a4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8019918 <cos+0x88>
 80198a8:	b005      	add	sp, #20
 80198aa:	f85d eb04 	ldr.w	lr, [sp], #4
 80198ae:	f000 ba0b 	b.w	8019cc8 <__kernel_cos>
 80198b2:	4a1c      	ldr	r2, [pc, #112]	@ (8019924 <cos+0x94>)
 80198b4:	4293      	cmp	r3, r2
 80198b6:	d904      	bls.n	80198c2 <cos+0x32>
 80198b8:	ee30 0b40 	vsub.f64	d0, d0, d0
 80198bc:	b005      	add	sp, #20
 80198be:	f85d fb04 	ldr.w	pc, [sp], #4
 80198c2:	4668      	mov	r0, sp
 80198c4:	f000 fac0 	bl	8019e48 <__ieee754_rem_pio2>
 80198c8:	f000 0003 	and.w	r0, r0, #3
 80198cc:	2801      	cmp	r0, #1
 80198ce:	d009      	beq.n	80198e4 <cos+0x54>
 80198d0:	2802      	cmp	r0, #2
 80198d2:	d010      	beq.n	80198f6 <cos+0x66>
 80198d4:	b9b0      	cbnz	r0, 8019904 <cos+0x74>
 80198d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80198da:	ed9d 0b00 	vldr	d0, [sp]
 80198de:	f000 f9f3 	bl	8019cc8 <__kernel_cos>
 80198e2:	e7eb      	b.n	80198bc <cos+0x2c>
 80198e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80198e8:	ed9d 0b00 	vldr	d0, [sp]
 80198ec:	f000 fa54 	bl	8019d98 <__kernel_sin>
 80198f0:	eeb1 0b40 	vneg.f64	d0, d0
 80198f4:	e7e2      	b.n	80198bc <cos+0x2c>
 80198f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80198fa:	ed9d 0b00 	vldr	d0, [sp]
 80198fe:	f000 f9e3 	bl	8019cc8 <__kernel_cos>
 8019902:	e7f5      	b.n	80198f0 <cos+0x60>
 8019904:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019908:	ed9d 0b00 	vldr	d0, [sp]
 801990c:	2001      	movs	r0, #1
 801990e:	f000 fa43 	bl	8019d98 <__kernel_sin>
 8019912:	e7d3      	b.n	80198bc <cos+0x2c>
 8019914:	f3af 8000 	nop.w
	...
 8019920:	3fe921fb 	.word	0x3fe921fb
 8019924:	7fefffff 	.word	0x7fefffff

08019928 <atan2f>:
 8019928:	f000 bbda 	b.w	801a0e0 <__ieee754_atan2f>

0801992c <sqrtf>:
 801992c:	b508      	push	{r3, lr}
 801992e:	ed2d 8b02 	vpush	{d8}
 8019932:	eeb0 8a40 	vmov.f32	s16, s0
 8019936:	f000 f9c4 	bl	8019cc2 <__ieee754_sqrtf>
 801993a:	eeb4 8a48 	vcmp.f32	s16, s16
 801993e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019942:	d60c      	bvs.n	801995e <sqrtf+0x32>
 8019944:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8019964 <sqrtf+0x38>
 8019948:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801994c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019950:	d505      	bpl.n	801995e <sqrtf+0x32>
 8019952:	f001 fbaf 	bl	801b0b4 <__errno>
 8019956:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801995a:	2321      	movs	r3, #33	@ 0x21
 801995c:	6003      	str	r3, [r0, #0]
 801995e:	ecbd 8b02 	vpop	{d8}
 8019962:	bd08      	pop	{r3, pc}
 8019964:	00000000 	.word	0x00000000

08019968 <sinf_poly>:
 8019968:	07cb      	lsls	r3, r1, #31
 801996a:	d412      	bmi.n	8019992 <sinf_poly+0x2a>
 801996c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8019970:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8019974:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8019978:	eea6 7b01 	vfma.f64	d7, d6, d1
 801997c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8019980:	ee21 1b05 	vmul.f64	d1, d1, d5
 8019984:	eea6 0b05 	vfma.f64	d0, d6, d5
 8019988:	eea7 0b01 	vfma.f64	d0, d7, d1
 801998c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019990:	4770      	bx	lr
 8019992:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8019996:	ee21 5b01 	vmul.f64	d5, d1, d1
 801999a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801999e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80199a2:	eea1 7b06 	vfma.f64	d7, d1, d6
 80199a6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80199aa:	eea1 0b06 	vfma.f64	d0, d1, d6
 80199ae:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80199b2:	ee21 1b05 	vmul.f64	d1, d1, d5
 80199b6:	eea5 0b06 	vfma.f64	d0, d5, d6
 80199ba:	e7e5      	b.n	8019988 <sinf_poly+0x20>
 80199bc:	0000      	movs	r0, r0
	...

080199c0 <sinf>:
 80199c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80199c2:	ee10 4a10 	vmov	r4, s0
 80199c6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80199ca:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80199ce:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80199d2:	eef0 7a40 	vmov.f32	s15, s0
 80199d6:	d218      	bcs.n	8019a0a <sinf+0x4a>
 80199d8:	ee26 1b06 	vmul.f64	d1, d6, d6
 80199dc:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80199e0:	d20a      	bcs.n	80199f8 <sinf+0x38>
 80199e2:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80199e6:	d103      	bne.n	80199f0 <sinf+0x30>
 80199e8:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 80199ec:	ed8d 1a01 	vstr	s2, [sp, #4]
 80199f0:	eeb0 0a67 	vmov.f32	s0, s15
 80199f4:	b003      	add	sp, #12
 80199f6:	bd30      	pop	{r4, r5, pc}
 80199f8:	483b      	ldr	r0, [pc, #236]	@ (8019ae8 <sinf+0x128>)
 80199fa:	eeb0 0b46 	vmov.f64	d0, d6
 80199fe:	2100      	movs	r1, #0
 8019a00:	b003      	add	sp, #12
 8019a02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019a06:	f7ff bfaf 	b.w	8019968 <sinf_poly>
 8019a0a:	f240 422e 	movw	r2, #1070	@ 0x42e
 8019a0e:	4293      	cmp	r3, r2
 8019a10:	d824      	bhi.n	8019a5c <sinf+0x9c>
 8019a12:	4b35      	ldr	r3, [pc, #212]	@ (8019ae8 <sinf+0x128>)
 8019a14:	ed93 7b08 	vldr	d7, [r3, #32]
 8019a18:	ee26 7b07 	vmul.f64	d7, d6, d7
 8019a1c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8019a20:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8019a24:	ee17 1a90 	vmov	r1, s15
 8019a28:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8019a2c:	1609      	asrs	r1, r1, #24
 8019a2e:	ee07 1a90 	vmov	s15, r1
 8019a32:	f001 0203 	and.w	r2, r1, #3
 8019a36:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8019a3a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8019a3e:	ed92 0b00 	vldr	d0, [r2]
 8019a42:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8019a46:	f011 0f02 	tst.w	r1, #2
 8019a4a:	eea5 6b47 	vfms.f64	d6, d5, d7
 8019a4e:	bf08      	it	eq
 8019a50:	4618      	moveq	r0, r3
 8019a52:	ee26 1b06 	vmul.f64	d1, d6, d6
 8019a56:	ee20 0b06 	vmul.f64	d0, d0, d6
 8019a5a:	e7d1      	b.n	8019a00 <sinf+0x40>
 8019a5c:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8019a60:	d237      	bcs.n	8019ad2 <sinf+0x112>
 8019a62:	4922      	ldr	r1, [pc, #136]	@ (8019aec <sinf+0x12c>)
 8019a64:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8019a68:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8019a6c:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8019a70:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8019a74:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8019a78:	6a10      	ldr	r0, [r2, #32]
 8019a7a:	6912      	ldr	r2, [r2, #16]
 8019a7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8019a80:	40ab      	lsls	r3, r5
 8019a82:	fba0 5003 	umull	r5, r0, r0, r3
 8019a86:	4359      	muls	r1, r3
 8019a88:	fbe3 0102 	umlal	r0, r1, r3, r2
 8019a8c:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8019a90:	0f9d      	lsrs	r5, r3, #30
 8019a92:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8019a96:	1ac9      	subs	r1, r1, r3
 8019a98:	f7e6 fe20 	bl	80006dc <__aeabi_l2d>
 8019a9c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8019aa0:	4b11      	ldr	r3, [pc, #68]	@ (8019ae8 <sinf+0x128>)
 8019aa2:	f004 0203 	and.w	r2, r4, #3
 8019aa6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8019aaa:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8019ae0 <sinf+0x120>
 8019aae:	ed92 0b00 	vldr	d0, [r2]
 8019ab2:	ec41 0b17 	vmov	d7, r0, r1
 8019ab6:	f014 0f02 	tst.w	r4, #2
 8019aba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019abe:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8019ac2:	4629      	mov	r1, r5
 8019ac4:	bf08      	it	eq
 8019ac6:	4618      	moveq	r0, r3
 8019ac8:	ee27 1b07 	vmul.f64	d1, d7, d7
 8019acc:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019ad0:	e796      	b.n	8019a00 <sinf+0x40>
 8019ad2:	b003      	add	sp, #12
 8019ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019ad8:	f000 b8e4 	b.w	8019ca4 <__math_invalidf>
 8019adc:	f3af 8000 	nop.w
 8019ae0:	54442d18 	.word	0x54442d18
 8019ae4:	3c1921fb 	.word	0x3c1921fb
 8019ae8:	0801cbb8 	.word	0x0801cbb8
 8019aec:	0801cb58 	.word	0x0801cb58

08019af0 <sinf_poly>:
 8019af0:	07cb      	lsls	r3, r1, #31
 8019af2:	d412      	bmi.n	8019b1a <sinf_poly+0x2a>
 8019af4:	ee21 5b00 	vmul.f64	d5, d1, d0
 8019af8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8019afc:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8019b00:	eea6 7b01 	vfma.f64	d7, d6, d1
 8019b04:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8019b08:	ee21 1b05 	vmul.f64	d1, d1, d5
 8019b0c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8019b10:	eea7 0b01 	vfma.f64	d0, d7, d1
 8019b14:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019b18:	4770      	bx	lr
 8019b1a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8019b1e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8019b22:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8019b26:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8019b2a:	eea1 7b06 	vfma.f64	d7, d1, d6
 8019b2e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8019b32:	eea1 0b06 	vfma.f64	d0, d1, d6
 8019b36:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8019b3a:	ee21 1b05 	vmul.f64	d1, d1, d5
 8019b3e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8019b42:	e7e5      	b.n	8019b10 <sinf_poly+0x20>
 8019b44:	0000      	movs	r0, r0
	...

08019b48 <cosf>:
 8019b48:	b538      	push	{r3, r4, r5, lr}
 8019b4a:	ee10 4a10 	vmov	r4, s0
 8019b4e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8019b52:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8019b56:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8019b5a:	d21f      	bcs.n	8019b9c <cosf+0x54>
 8019b5c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8019b60:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8019b64:	f0c0 8082 	bcc.w	8019c6c <cosf+0x124>
 8019b68:	ee27 4b07 	vmul.f64	d4, d7, d7
 8019b6c:	4b44      	ldr	r3, [pc, #272]	@ (8019c80 <cosf+0x138>)
 8019b6e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8019b72:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8019b76:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8019b7a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019b7e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8019b82:	eea7 0b05 	vfma.f64	d0, d7, d5
 8019b86:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8019b8a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019b8e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8019b92:	eea6 0b07 	vfma.f64	d0, d6, d7
 8019b96:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019b9a:	bd38      	pop	{r3, r4, r5, pc}
 8019b9c:	f240 422e 	movw	r2, #1070	@ 0x42e
 8019ba0:	4293      	cmp	r3, r2
 8019ba2:	d829      	bhi.n	8019bf8 <cosf+0xb0>
 8019ba4:	4b36      	ldr	r3, [pc, #216]	@ (8019c80 <cosf+0x138>)
 8019ba6:	ed93 6b08 	vldr	d6, [r3, #32]
 8019baa:	ee27 6b06 	vmul.f64	d6, d7, d6
 8019bae:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8019bb2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8019bb6:	ee16 1a90 	vmov	r1, s13
 8019bba:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8019bbe:	1609      	asrs	r1, r1, #24
 8019bc0:	ee06 1a90 	vmov	s13, r1
 8019bc4:	f001 0203 	and.w	r2, r1, #3
 8019bc8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8019bcc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8019bd0:	ed92 0b00 	vldr	d0, [r2]
 8019bd4:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8019bd8:	f011 0f02 	tst.w	r1, #2
 8019bdc:	f081 0101 	eor.w	r1, r1, #1
 8019be0:	eea5 7b46 	vfms.f64	d7, d5, d6
 8019be4:	bf08      	it	eq
 8019be6:	4618      	moveq	r0, r3
 8019be8:	ee27 1b07 	vmul.f64	d1, d7, d7
 8019bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019bf0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019bf4:	f7ff bf7c 	b.w	8019af0 <sinf_poly>
 8019bf8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8019bfc:	d232      	bcs.n	8019c64 <cosf+0x11c>
 8019bfe:	4921      	ldr	r1, [pc, #132]	@ (8019c84 <cosf+0x13c>)
 8019c00:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8019c04:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8019c08:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8019c0c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8019c10:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8019c14:	6a10      	ldr	r0, [r2, #32]
 8019c16:	6912      	ldr	r2, [r2, #16]
 8019c18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8019c1c:	40ab      	lsls	r3, r5
 8019c1e:	fba0 5003 	umull	r5, r0, r0, r3
 8019c22:	4359      	muls	r1, r3
 8019c24:	fbe3 0102 	umlal	r0, r1, r3, r2
 8019c28:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8019c2c:	0f9d      	lsrs	r5, r3, #30
 8019c2e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8019c32:	1ac9      	subs	r1, r1, r3
 8019c34:	f7e6 fd52 	bl	80006dc <__aeabi_l2d>
 8019c38:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8019c3c:	4b10      	ldr	r3, [pc, #64]	@ (8019c80 <cosf+0x138>)
 8019c3e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8019c78 <cosf+0x130>
 8019c42:	ec41 0b17 	vmov	d7, r0, r1
 8019c46:	f004 0203 	and.w	r2, r4, #3
 8019c4a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8019c4e:	ed92 0b00 	vldr	d0, [r2]
 8019c52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019c56:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8019c5a:	f014 0f02 	tst.w	r4, #2
 8019c5e:	f085 0101 	eor.w	r1, r5, #1
 8019c62:	e7bf      	b.n	8019be4 <cosf+0x9c>
 8019c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019c68:	f000 b81c 	b.w	8019ca4 <__math_invalidf>
 8019c6c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019c70:	e793      	b.n	8019b9a <cosf+0x52>
 8019c72:	bf00      	nop
 8019c74:	f3af 8000 	nop.w
 8019c78:	54442d18 	.word	0x54442d18
 8019c7c:	3c1921fb 	.word	0x3c1921fb
 8019c80:	0801cbb8 	.word	0x0801cbb8
 8019c84:	0801cb58 	.word	0x0801cb58

08019c88 <with_errnof>:
 8019c88:	b510      	push	{r4, lr}
 8019c8a:	ed2d 8b02 	vpush	{d8}
 8019c8e:	eeb0 8a40 	vmov.f32	s16, s0
 8019c92:	4604      	mov	r4, r0
 8019c94:	f001 fa0e 	bl	801b0b4 <__errno>
 8019c98:	eeb0 0a48 	vmov.f32	s0, s16
 8019c9c:	ecbd 8b02 	vpop	{d8}
 8019ca0:	6004      	str	r4, [r0, #0]
 8019ca2:	bd10      	pop	{r4, pc}

08019ca4 <__math_invalidf>:
 8019ca4:	eef0 7a40 	vmov.f32	s15, s0
 8019ca8:	ee30 7a40 	vsub.f32	s14, s0, s0
 8019cac:	eef4 7a67 	vcmp.f32	s15, s15
 8019cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cb4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8019cb8:	d602      	bvs.n	8019cc0 <__math_invalidf+0x1c>
 8019cba:	2021      	movs	r0, #33	@ 0x21
 8019cbc:	f7ff bfe4 	b.w	8019c88 <with_errnof>
 8019cc0:	4770      	bx	lr

08019cc2 <__ieee754_sqrtf>:
 8019cc2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019cc6:	4770      	bx	lr

08019cc8 <__kernel_cos>:
 8019cc8:	eeb0 5b40 	vmov.f64	d5, d0
 8019ccc:	ee15 1a90 	vmov	r1, s11
 8019cd0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8019cd4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8019cd8:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8019cdc:	d204      	bcs.n	8019ce8 <__kernel_cos+0x20>
 8019cde:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8019ce2:	ee17 3a90 	vmov	r3, s15
 8019ce6:	b343      	cbz	r3, 8019d3a <__kernel_cos+0x72>
 8019ce8:	ee25 6b05 	vmul.f64	d6, d5, d5
 8019cec:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8019cf0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8019d60 <__kernel_cos+0x98>
 8019cf4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8019d68 <__kernel_cos+0xa0>
 8019cf8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8019cfc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8019d70 <__kernel_cos+0xa8>
 8019d00:	eea4 7b06 	vfma.f64	d7, d4, d6
 8019d04:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8019d78 <__kernel_cos+0xb0>
 8019d08:	eea7 4b06 	vfma.f64	d4, d7, d6
 8019d0c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8019d80 <__kernel_cos+0xb8>
 8019d10:	4b1f      	ldr	r3, [pc, #124]	@ (8019d90 <__kernel_cos+0xc8>)
 8019d12:	eea4 7b06 	vfma.f64	d7, d4, d6
 8019d16:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8019d88 <__kernel_cos+0xc0>
 8019d1a:	4299      	cmp	r1, r3
 8019d1c:	eea7 4b06 	vfma.f64	d4, d7, d6
 8019d20:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8019d24:	ee24 4b06 	vmul.f64	d4, d4, d6
 8019d28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8019d2c:	eea6 1b04 	vfma.f64	d1, d6, d4
 8019d30:	d804      	bhi.n	8019d3c <__kernel_cos+0x74>
 8019d32:	ee37 7b41 	vsub.f64	d7, d7, d1
 8019d36:	ee30 0b47 	vsub.f64	d0, d0, d7
 8019d3a:	4770      	bx	lr
 8019d3c:	4b15      	ldr	r3, [pc, #84]	@ (8019d94 <__kernel_cos+0xcc>)
 8019d3e:	4299      	cmp	r1, r3
 8019d40:	d809      	bhi.n	8019d56 <__kernel_cos+0x8e>
 8019d42:	2200      	movs	r2, #0
 8019d44:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8019d48:	ec43 2b16 	vmov	d6, r2, r3
 8019d4c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8019d50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019d54:	e7ed      	b.n	8019d32 <__kernel_cos+0x6a>
 8019d56:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8019d5a:	e7f7      	b.n	8019d4c <__kernel_cos+0x84>
 8019d5c:	f3af 8000 	nop.w
 8019d60:	be8838d4 	.word	0xbe8838d4
 8019d64:	bda8fae9 	.word	0xbda8fae9
 8019d68:	bdb4b1c4 	.word	0xbdb4b1c4
 8019d6c:	3e21ee9e 	.word	0x3e21ee9e
 8019d70:	809c52ad 	.word	0x809c52ad
 8019d74:	be927e4f 	.word	0xbe927e4f
 8019d78:	19cb1590 	.word	0x19cb1590
 8019d7c:	3efa01a0 	.word	0x3efa01a0
 8019d80:	16c15177 	.word	0x16c15177
 8019d84:	bf56c16c 	.word	0xbf56c16c
 8019d88:	5555554c 	.word	0x5555554c
 8019d8c:	3fa55555 	.word	0x3fa55555
 8019d90:	3fd33332 	.word	0x3fd33332
 8019d94:	3fe90000 	.word	0x3fe90000

08019d98 <__kernel_sin>:
 8019d98:	ee10 3a90 	vmov	r3, s1
 8019d9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019da0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8019da4:	d204      	bcs.n	8019db0 <__kernel_sin+0x18>
 8019da6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8019daa:	ee17 3a90 	vmov	r3, s15
 8019dae:	b35b      	cbz	r3, 8019e08 <__kernel_sin+0x70>
 8019db0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8019db4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8019db8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8019e10 <__kernel_sin+0x78>
 8019dbc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8019e18 <__kernel_sin+0x80>
 8019dc0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8019dc4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8019e20 <__kernel_sin+0x88>
 8019dc8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8019dcc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8019e28 <__kernel_sin+0x90>
 8019dd0:	eea7 4b06 	vfma.f64	d4, d7, d6
 8019dd4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8019e30 <__kernel_sin+0x98>
 8019dd8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8019ddc:	b930      	cbnz	r0, 8019dec <__kernel_sin+0x54>
 8019dde:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8019e38 <__kernel_sin+0xa0>
 8019de2:	eea6 4b07 	vfma.f64	d4, d6, d7
 8019de6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8019dea:	4770      	bx	lr
 8019dec:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8019df0:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8019df4:	eea1 7b04 	vfma.f64	d7, d1, d4
 8019df8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8019dfc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8019e40 <__kernel_sin+0xa8>
 8019e00:	eea5 1b07 	vfma.f64	d1, d5, d7
 8019e04:	ee30 0b41 	vsub.f64	d0, d0, d1
 8019e08:	4770      	bx	lr
 8019e0a:	bf00      	nop
 8019e0c:	f3af 8000 	nop.w
 8019e10:	5acfd57c 	.word	0x5acfd57c
 8019e14:	3de5d93a 	.word	0x3de5d93a
 8019e18:	8a2b9ceb 	.word	0x8a2b9ceb
 8019e1c:	be5ae5e6 	.word	0xbe5ae5e6
 8019e20:	57b1fe7d 	.word	0x57b1fe7d
 8019e24:	3ec71de3 	.word	0x3ec71de3
 8019e28:	19c161d5 	.word	0x19c161d5
 8019e2c:	bf2a01a0 	.word	0xbf2a01a0
 8019e30:	1110f8a6 	.word	0x1110f8a6
 8019e34:	3f811111 	.word	0x3f811111
 8019e38:	55555549 	.word	0x55555549
 8019e3c:	bfc55555 	.word	0xbfc55555
 8019e40:	55555549 	.word	0x55555549
 8019e44:	3fc55555 	.word	0x3fc55555

08019e48 <__ieee754_rem_pio2>:
 8019e48:	b570      	push	{r4, r5, r6, lr}
 8019e4a:	eeb0 7b40 	vmov.f64	d7, d0
 8019e4e:	ee17 5a90 	vmov	r5, s15
 8019e52:	4b99      	ldr	r3, [pc, #612]	@ (801a0b8 <__ieee754_rem_pio2+0x270>)
 8019e54:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8019e58:	429e      	cmp	r6, r3
 8019e5a:	b088      	sub	sp, #32
 8019e5c:	4604      	mov	r4, r0
 8019e5e:	d807      	bhi.n	8019e70 <__ieee754_rem_pio2+0x28>
 8019e60:	2200      	movs	r2, #0
 8019e62:	2300      	movs	r3, #0
 8019e64:	ed84 0b00 	vstr	d0, [r4]
 8019e68:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019e6c:	2000      	movs	r0, #0
 8019e6e:	e01b      	b.n	8019ea8 <__ieee754_rem_pio2+0x60>
 8019e70:	4b92      	ldr	r3, [pc, #584]	@ (801a0bc <__ieee754_rem_pio2+0x274>)
 8019e72:	429e      	cmp	r6, r3
 8019e74:	d83b      	bhi.n	8019eee <__ieee754_rem_pio2+0xa6>
 8019e76:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8019e7a:	2d00      	cmp	r5, #0
 8019e7c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 801a078 <__ieee754_rem_pio2+0x230>
 8019e80:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8019e84:	dd19      	ble.n	8019eba <__ieee754_rem_pio2+0x72>
 8019e86:	ee30 7b46 	vsub.f64	d7, d0, d6
 8019e8a:	429e      	cmp	r6, r3
 8019e8c:	d00e      	beq.n	8019eac <__ieee754_rem_pio2+0x64>
 8019e8e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 801a080 <__ieee754_rem_pio2+0x238>
 8019e92:	ee37 6b45 	vsub.f64	d6, d7, d5
 8019e96:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019e9a:	ed84 6b00 	vstr	d6, [r4]
 8019e9e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8019ea2:	ed84 7b02 	vstr	d7, [r4, #8]
 8019ea6:	2001      	movs	r0, #1
 8019ea8:	b008      	add	sp, #32
 8019eaa:	bd70      	pop	{r4, r5, r6, pc}
 8019eac:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801a088 <__ieee754_rem_pio2+0x240>
 8019eb0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 801a090 <__ieee754_rem_pio2+0x248>
 8019eb4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019eb8:	e7eb      	b.n	8019e92 <__ieee754_rem_pio2+0x4a>
 8019eba:	429e      	cmp	r6, r3
 8019ebc:	ee30 7b06 	vadd.f64	d7, d0, d6
 8019ec0:	d00e      	beq.n	8019ee0 <__ieee754_rem_pio2+0x98>
 8019ec2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 801a080 <__ieee754_rem_pio2+0x238>
 8019ec6:	ee37 6b05 	vadd.f64	d6, d7, d5
 8019eca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019ece:	ed84 6b00 	vstr	d6, [r4]
 8019ed2:	ee37 7b05 	vadd.f64	d7, d7, d5
 8019ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8019eda:	ed84 7b02 	vstr	d7, [r4, #8]
 8019ede:	e7e3      	b.n	8019ea8 <__ieee754_rem_pio2+0x60>
 8019ee0:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 801a088 <__ieee754_rem_pio2+0x240>
 8019ee4:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 801a090 <__ieee754_rem_pio2+0x248>
 8019ee8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019eec:	e7eb      	b.n	8019ec6 <__ieee754_rem_pio2+0x7e>
 8019eee:	4b74      	ldr	r3, [pc, #464]	@ (801a0c0 <__ieee754_rem_pio2+0x278>)
 8019ef0:	429e      	cmp	r6, r3
 8019ef2:	d870      	bhi.n	8019fd6 <__ieee754_rem_pio2+0x18e>
 8019ef4:	f000 f8ec 	bl	801a0d0 <fabs>
 8019ef8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8019efc:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801a098 <__ieee754_rem_pio2+0x250>
 8019f00:	eea0 7b06 	vfma.f64	d7, d0, d6
 8019f04:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8019f08:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8019f0c:	ee17 0a90 	vmov	r0, s15
 8019f10:	eeb1 4b45 	vneg.f64	d4, d5
 8019f14:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801a078 <__ieee754_rem_pio2+0x230>
 8019f18:	eea5 0b47 	vfms.f64	d0, d5, d7
 8019f1c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801a080 <__ieee754_rem_pio2+0x238>
 8019f20:	281f      	cmp	r0, #31
 8019f22:	ee25 7b07 	vmul.f64	d7, d5, d7
 8019f26:	ee30 6b47 	vsub.f64	d6, d0, d7
 8019f2a:	dc05      	bgt.n	8019f38 <__ieee754_rem_pio2+0xf0>
 8019f2c:	4b65      	ldr	r3, [pc, #404]	@ (801a0c4 <__ieee754_rem_pio2+0x27c>)
 8019f2e:	1e42      	subs	r2, r0, #1
 8019f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019f34:	42b3      	cmp	r3, r6
 8019f36:	d109      	bne.n	8019f4c <__ieee754_rem_pio2+0x104>
 8019f38:	ee16 3a90 	vmov	r3, s13
 8019f3c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8019f40:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8019f44:	2b10      	cmp	r3, #16
 8019f46:	ea4f 5226 	mov.w	r2, r6, asr #20
 8019f4a:	dc02      	bgt.n	8019f52 <__ieee754_rem_pio2+0x10a>
 8019f4c:	ed84 6b00 	vstr	d6, [r4]
 8019f50:	e01a      	b.n	8019f88 <__ieee754_rem_pio2+0x140>
 8019f52:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 801a088 <__ieee754_rem_pio2+0x240>
 8019f56:	eeb0 6b40 	vmov.f64	d6, d0
 8019f5a:	eea4 6b03 	vfma.f64	d6, d4, d3
 8019f5e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8019f62:	eea4 7b03 	vfma.f64	d7, d4, d3
 8019f66:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 801a090 <__ieee754_rem_pio2+0x248>
 8019f6a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8019f6e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8019f72:	ee13 3a90 	vmov	r3, s7
 8019f76:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8019f7a:	1ad3      	subs	r3, r2, r3
 8019f7c:	2b31      	cmp	r3, #49	@ 0x31
 8019f7e:	dc17      	bgt.n	8019fb0 <__ieee754_rem_pio2+0x168>
 8019f80:	eeb0 0b46 	vmov.f64	d0, d6
 8019f84:	ed84 3b00 	vstr	d3, [r4]
 8019f88:	ed94 6b00 	vldr	d6, [r4]
 8019f8c:	2d00      	cmp	r5, #0
 8019f8e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8019f92:	ee30 0b47 	vsub.f64	d0, d0, d7
 8019f96:	ed84 0b02 	vstr	d0, [r4, #8]
 8019f9a:	da85      	bge.n	8019ea8 <__ieee754_rem_pio2+0x60>
 8019f9c:	eeb1 6b46 	vneg.f64	d6, d6
 8019fa0:	eeb1 0b40 	vneg.f64	d0, d0
 8019fa4:	ed84 6b00 	vstr	d6, [r4]
 8019fa8:	ed84 0b02 	vstr	d0, [r4, #8]
 8019fac:	4240      	negs	r0, r0
 8019fae:	e77b      	b.n	8019ea8 <__ieee754_rem_pio2+0x60>
 8019fb0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 801a0a0 <__ieee754_rem_pio2+0x258>
 8019fb4:	eeb0 0b46 	vmov.f64	d0, d6
 8019fb8:	eea4 0b07 	vfma.f64	d0, d4, d7
 8019fbc:	ee36 6b40 	vsub.f64	d6, d6, d0
 8019fc0:	eea4 6b07 	vfma.f64	d6, d4, d7
 8019fc4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 801a0a8 <__ieee754_rem_pio2+0x260>
 8019fc8:	eeb0 7b46 	vmov.f64	d7, d6
 8019fcc:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8019fd0:	ee30 6b47 	vsub.f64	d6, d0, d7
 8019fd4:	e7ba      	b.n	8019f4c <__ieee754_rem_pio2+0x104>
 8019fd6:	4b3c      	ldr	r3, [pc, #240]	@ (801a0c8 <__ieee754_rem_pio2+0x280>)
 8019fd8:	429e      	cmp	r6, r3
 8019fda:	d906      	bls.n	8019fea <__ieee754_rem_pio2+0x1a2>
 8019fdc:	ee30 7b40 	vsub.f64	d7, d0, d0
 8019fe0:	ed80 7b02 	vstr	d7, [r0, #8]
 8019fe4:	ed80 7b00 	vstr	d7, [r0]
 8019fe8:	e740      	b.n	8019e6c <__ieee754_rem_pio2+0x24>
 8019fea:	ee10 3a10 	vmov	r3, s0
 8019fee:	1532      	asrs	r2, r6, #20
 8019ff0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8019ff4:	4618      	mov	r0, r3
 8019ff6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8019ffa:	ec41 0b17 	vmov	d7, r0, r1
 8019ffe:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801a002:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 801a0b0 <__ieee754_rem_pio2+0x268>
 801a006:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801a00a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a00e:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a012:	ee27 7b05 	vmul.f64	d7, d7, d5
 801a016:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801a01a:	a808      	add	r0, sp, #32
 801a01c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801a020:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a024:	ed8d 6b04 	vstr	d6, [sp, #16]
 801a028:	ee27 7b05 	vmul.f64	d7, d7, d5
 801a02c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a030:	2103      	movs	r1, #3
 801a032:	ed30 7b02 	vldmdb	r0!, {d7}
 801a036:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a03e:	460b      	mov	r3, r1
 801a040:	f101 31ff 	add.w	r1, r1, #4294967295
 801a044:	d0f5      	beq.n	801a032 <__ieee754_rem_pio2+0x1ea>
 801a046:	4921      	ldr	r1, [pc, #132]	@ (801a0cc <__ieee754_rem_pio2+0x284>)
 801a048:	9101      	str	r1, [sp, #4]
 801a04a:	2102      	movs	r1, #2
 801a04c:	9100      	str	r1, [sp, #0]
 801a04e:	a802      	add	r0, sp, #8
 801a050:	4621      	mov	r1, r4
 801a052:	f000 f9c1 	bl	801a3d8 <__kernel_rem_pio2>
 801a056:	2d00      	cmp	r5, #0
 801a058:	f6bf af26 	bge.w	8019ea8 <__ieee754_rem_pio2+0x60>
 801a05c:	ed94 7b00 	vldr	d7, [r4]
 801a060:	eeb1 7b47 	vneg.f64	d7, d7
 801a064:	ed84 7b00 	vstr	d7, [r4]
 801a068:	ed94 7b02 	vldr	d7, [r4, #8]
 801a06c:	eeb1 7b47 	vneg.f64	d7, d7
 801a070:	ed84 7b02 	vstr	d7, [r4, #8]
 801a074:	e79a      	b.n	8019fac <__ieee754_rem_pio2+0x164>
 801a076:	bf00      	nop
 801a078:	54400000 	.word	0x54400000
 801a07c:	3ff921fb 	.word	0x3ff921fb
 801a080:	1a626331 	.word	0x1a626331
 801a084:	3dd0b461 	.word	0x3dd0b461
 801a088:	1a600000 	.word	0x1a600000
 801a08c:	3dd0b461 	.word	0x3dd0b461
 801a090:	2e037073 	.word	0x2e037073
 801a094:	3ba3198a 	.word	0x3ba3198a
 801a098:	6dc9c883 	.word	0x6dc9c883
 801a09c:	3fe45f30 	.word	0x3fe45f30
 801a0a0:	2e000000 	.word	0x2e000000
 801a0a4:	3ba3198a 	.word	0x3ba3198a
 801a0a8:	252049c1 	.word	0x252049c1
 801a0ac:	397b839a 	.word	0x397b839a
 801a0b0:	00000000 	.word	0x00000000
 801a0b4:	41700000 	.word	0x41700000
 801a0b8:	3fe921fb 	.word	0x3fe921fb
 801a0bc:	4002d97b 	.word	0x4002d97b
 801a0c0:	413921fb 	.word	0x413921fb
 801a0c4:	0801cc98 	.word	0x0801cc98
 801a0c8:	7fefffff 	.word	0x7fefffff
 801a0cc:	0801cd18 	.word	0x0801cd18

0801a0d0 <fabs>:
 801a0d0:	ec51 0b10 	vmov	r0, r1, d0
 801a0d4:	4602      	mov	r2, r0
 801a0d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a0da:	ec43 2b10 	vmov	d0, r2, r3
 801a0de:	4770      	bx	lr

0801a0e0 <__ieee754_atan2f>:
 801a0e0:	ee10 2a90 	vmov	r2, s1
 801a0e4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 801a0e8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801a0ec:	b510      	push	{r4, lr}
 801a0ee:	eef0 7a40 	vmov.f32	s15, s0
 801a0f2:	d806      	bhi.n	801a102 <__ieee754_atan2f+0x22>
 801a0f4:	ee10 0a10 	vmov	r0, s0
 801a0f8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801a0fc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801a100:	d904      	bls.n	801a10c <__ieee754_atan2f+0x2c>
 801a102:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801a106:	eeb0 0a67 	vmov.f32	s0, s15
 801a10a:	bd10      	pop	{r4, pc}
 801a10c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801a110:	d103      	bne.n	801a11a <__ieee754_atan2f+0x3a>
 801a112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a116:	f000 b881 	b.w	801a21c <atanf>
 801a11a:	1794      	asrs	r4, r2, #30
 801a11c:	f004 0402 	and.w	r4, r4, #2
 801a120:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801a124:	b93b      	cbnz	r3, 801a136 <__ieee754_atan2f+0x56>
 801a126:	2c02      	cmp	r4, #2
 801a128:	d05c      	beq.n	801a1e4 <__ieee754_atan2f+0x104>
 801a12a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 801a1f8 <__ieee754_atan2f+0x118>
 801a12e:	2c03      	cmp	r4, #3
 801a130:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801a134:	e7e7      	b.n	801a106 <__ieee754_atan2f+0x26>
 801a136:	b939      	cbnz	r1, 801a148 <__ieee754_atan2f+0x68>
 801a138:	eddf 7a30 	vldr	s15, [pc, #192]	@ 801a1fc <__ieee754_atan2f+0x11c>
 801a13c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801a200 <__ieee754_atan2f+0x120>
 801a140:	2800      	cmp	r0, #0
 801a142:	fe67 7a27 	vselge.f32	s15, s14, s15
 801a146:	e7de      	b.n	801a106 <__ieee754_atan2f+0x26>
 801a148:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801a14c:	d110      	bne.n	801a170 <__ieee754_atan2f+0x90>
 801a14e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801a152:	f104 34ff 	add.w	r4, r4, #4294967295
 801a156:	d107      	bne.n	801a168 <__ieee754_atan2f+0x88>
 801a158:	2c02      	cmp	r4, #2
 801a15a:	d846      	bhi.n	801a1ea <__ieee754_atan2f+0x10a>
 801a15c:	4b29      	ldr	r3, [pc, #164]	@ (801a204 <__ieee754_atan2f+0x124>)
 801a15e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a162:	edd3 7a00 	vldr	s15, [r3]
 801a166:	e7ce      	b.n	801a106 <__ieee754_atan2f+0x26>
 801a168:	2c02      	cmp	r4, #2
 801a16a:	d841      	bhi.n	801a1f0 <__ieee754_atan2f+0x110>
 801a16c:	4b26      	ldr	r3, [pc, #152]	@ (801a208 <__ieee754_atan2f+0x128>)
 801a16e:	e7f6      	b.n	801a15e <__ieee754_atan2f+0x7e>
 801a170:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801a174:	d0e0      	beq.n	801a138 <__ieee754_atan2f+0x58>
 801a176:	1a5b      	subs	r3, r3, r1
 801a178:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801a17c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801a180:	da1a      	bge.n	801a1b8 <__ieee754_atan2f+0xd8>
 801a182:	2a00      	cmp	r2, #0
 801a184:	da01      	bge.n	801a18a <__ieee754_atan2f+0xaa>
 801a186:	313c      	adds	r1, #60	@ 0x3c
 801a188:	db19      	blt.n	801a1be <__ieee754_atan2f+0xde>
 801a18a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801a18e:	f000 f919 	bl	801a3c4 <fabsf>
 801a192:	f000 f843 	bl	801a21c <atanf>
 801a196:	eef0 7a40 	vmov.f32	s15, s0
 801a19a:	2c01      	cmp	r4, #1
 801a19c:	d012      	beq.n	801a1c4 <__ieee754_atan2f+0xe4>
 801a19e:	2c02      	cmp	r4, #2
 801a1a0:	d017      	beq.n	801a1d2 <__ieee754_atan2f+0xf2>
 801a1a2:	2c00      	cmp	r4, #0
 801a1a4:	d0af      	beq.n	801a106 <__ieee754_atan2f+0x26>
 801a1a6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 801a20c <__ieee754_atan2f+0x12c>
 801a1aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a1ae:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 801a210 <__ieee754_atan2f+0x130>
 801a1b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a1b6:	e7a6      	b.n	801a106 <__ieee754_atan2f+0x26>
 801a1b8:	eddf 7a11 	vldr	s15, [pc, #68]	@ 801a200 <__ieee754_atan2f+0x120>
 801a1bc:	e7ed      	b.n	801a19a <__ieee754_atan2f+0xba>
 801a1be:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801a214 <__ieee754_atan2f+0x134>
 801a1c2:	e7ea      	b.n	801a19a <__ieee754_atan2f+0xba>
 801a1c4:	ee17 3a90 	vmov	r3, s15
 801a1c8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801a1cc:	ee07 3a90 	vmov	s15, r3
 801a1d0:	e799      	b.n	801a106 <__ieee754_atan2f+0x26>
 801a1d2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801a20c <__ieee754_atan2f+0x12c>
 801a1d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a1da:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801a210 <__ieee754_atan2f+0x130>
 801a1de:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a1e2:	e790      	b.n	801a106 <__ieee754_atan2f+0x26>
 801a1e4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 801a210 <__ieee754_atan2f+0x130>
 801a1e8:	e78d      	b.n	801a106 <__ieee754_atan2f+0x26>
 801a1ea:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 801a218 <__ieee754_atan2f+0x138>
 801a1ee:	e78a      	b.n	801a106 <__ieee754_atan2f+0x26>
 801a1f0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801a214 <__ieee754_atan2f+0x134>
 801a1f4:	e787      	b.n	801a106 <__ieee754_atan2f+0x26>
 801a1f6:	bf00      	nop
 801a1f8:	c0490fdb 	.word	0xc0490fdb
 801a1fc:	bfc90fdb 	.word	0xbfc90fdb
 801a200:	3fc90fdb 	.word	0x3fc90fdb
 801a204:	0801ce2c 	.word	0x0801ce2c
 801a208:	0801ce20 	.word	0x0801ce20
 801a20c:	33bbbd2e 	.word	0x33bbbd2e
 801a210:	40490fdb 	.word	0x40490fdb
 801a214:	00000000 	.word	0x00000000
 801a218:	3f490fdb 	.word	0x3f490fdb

0801a21c <atanf>:
 801a21c:	b538      	push	{r3, r4, r5, lr}
 801a21e:	ee10 5a10 	vmov	r5, s0
 801a222:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801a226:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801a22a:	eef0 7a40 	vmov.f32	s15, s0
 801a22e:	d30f      	bcc.n	801a250 <atanf+0x34>
 801a230:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801a234:	d904      	bls.n	801a240 <atanf+0x24>
 801a236:	ee70 7a00 	vadd.f32	s15, s0, s0
 801a23a:	eeb0 0a67 	vmov.f32	s0, s15
 801a23e:	bd38      	pop	{r3, r4, r5, pc}
 801a240:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 801a378 <atanf+0x15c>
 801a244:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801a37c <atanf+0x160>
 801a248:	2d00      	cmp	r5, #0
 801a24a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 801a24e:	e7f4      	b.n	801a23a <atanf+0x1e>
 801a250:	4b4b      	ldr	r3, [pc, #300]	@ (801a380 <atanf+0x164>)
 801a252:	429c      	cmp	r4, r3
 801a254:	d810      	bhi.n	801a278 <atanf+0x5c>
 801a256:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801a25a:	d20a      	bcs.n	801a272 <atanf+0x56>
 801a25c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801a384 <atanf+0x168>
 801a260:	ee30 7a07 	vadd.f32	s14, s0, s14
 801a264:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a268:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801a26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a270:	dce3      	bgt.n	801a23a <atanf+0x1e>
 801a272:	f04f 33ff 	mov.w	r3, #4294967295
 801a276:	e013      	b.n	801a2a0 <atanf+0x84>
 801a278:	f000 f8a4 	bl	801a3c4 <fabsf>
 801a27c:	4b42      	ldr	r3, [pc, #264]	@ (801a388 <atanf+0x16c>)
 801a27e:	429c      	cmp	r4, r3
 801a280:	d84f      	bhi.n	801a322 <atanf+0x106>
 801a282:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801a286:	429c      	cmp	r4, r3
 801a288:	d841      	bhi.n	801a30e <atanf+0xf2>
 801a28a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801a28e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801a292:	eea0 7a27 	vfma.f32	s14, s0, s15
 801a296:	2300      	movs	r3, #0
 801a298:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a29c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a2a0:	1c5a      	adds	r2, r3, #1
 801a2a2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801a2a6:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 801a38c <atanf+0x170>
 801a2aa:	eddf 5a39 	vldr	s11, [pc, #228]	@ 801a390 <atanf+0x174>
 801a2ae:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 801a394 <atanf+0x178>
 801a2b2:	ee66 6a06 	vmul.f32	s13, s12, s12
 801a2b6:	eee6 5a87 	vfma.f32	s11, s13, s14
 801a2ba:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 801a398 <atanf+0x17c>
 801a2be:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801a2c2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 801a39c <atanf+0x180>
 801a2c6:	eee7 5a26 	vfma.f32	s11, s14, s13
 801a2ca:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 801a3a0 <atanf+0x184>
 801a2ce:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801a2d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801a3a4 <atanf+0x188>
 801a2d6:	eee7 5a26 	vfma.f32	s11, s14, s13
 801a2da:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 801a3a8 <atanf+0x18c>
 801a2de:	eea6 5a87 	vfma.f32	s10, s13, s14
 801a2e2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 801a3ac <atanf+0x190>
 801a2e6:	eea5 7a26 	vfma.f32	s14, s10, s13
 801a2ea:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 801a3b0 <atanf+0x194>
 801a2ee:	eea7 5a26 	vfma.f32	s10, s14, s13
 801a2f2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801a3b4 <atanf+0x198>
 801a2f6:	eea5 7a26 	vfma.f32	s14, s10, s13
 801a2fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a2fe:	eea5 7a86 	vfma.f32	s14, s11, s12
 801a302:	ee27 7a87 	vmul.f32	s14, s15, s14
 801a306:	d121      	bne.n	801a34c <atanf+0x130>
 801a308:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a30c:	e795      	b.n	801a23a <atanf+0x1e>
 801a30e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801a312:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a316:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a31a:	2301      	movs	r3, #1
 801a31c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a320:	e7be      	b.n	801a2a0 <atanf+0x84>
 801a322:	4b25      	ldr	r3, [pc, #148]	@ (801a3b8 <atanf+0x19c>)
 801a324:	429c      	cmp	r4, r3
 801a326:	d80b      	bhi.n	801a340 <atanf+0x124>
 801a328:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801a32c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a330:	eea0 7a27 	vfma.f32	s14, s0, s15
 801a334:	2302      	movs	r3, #2
 801a336:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a33a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a33e:	e7af      	b.n	801a2a0 <atanf+0x84>
 801a340:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801a344:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a348:	2303      	movs	r3, #3
 801a34a:	e7a9      	b.n	801a2a0 <atanf+0x84>
 801a34c:	4a1b      	ldr	r2, [pc, #108]	@ (801a3bc <atanf+0x1a0>)
 801a34e:	491c      	ldr	r1, [pc, #112]	@ (801a3c0 <atanf+0x1a4>)
 801a350:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801a354:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a358:	edd3 6a00 	vldr	s13, [r3]
 801a35c:	ee37 7a66 	vsub.f32	s14, s14, s13
 801a360:	2d00      	cmp	r5, #0
 801a362:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a366:	edd2 7a00 	vldr	s15, [r2]
 801a36a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a36e:	bfb8      	it	lt
 801a370:	eef1 7a67 	vneglt.f32	s15, s15
 801a374:	e761      	b.n	801a23a <atanf+0x1e>
 801a376:	bf00      	nop
 801a378:	bfc90fdb 	.word	0xbfc90fdb
 801a37c:	3fc90fdb 	.word	0x3fc90fdb
 801a380:	3edfffff 	.word	0x3edfffff
 801a384:	7149f2ca 	.word	0x7149f2ca
 801a388:	3f97ffff 	.word	0x3f97ffff
 801a38c:	3c8569d7 	.word	0x3c8569d7
 801a390:	3d4bda59 	.word	0x3d4bda59
 801a394:	bd6ef16b 	.word	0xbd6ef16b
 801a398:	3d886b35 	.word	0x3d886b35
 801a39c:	3dba2e6e 	.word	0x3dba2e6e
 801a3a0:	3e124925 	.word	0x3e124925
 801a3a4:	3eaaaaab 	.word	0x3eaaaaab
 801a3a8:	bd15a221 	.word	0xbd15a221
 801a3ac:	bd9d8795 	.word	0xbd9d8795
 801a3b0:	bde38e38 	.word	0xbde38e38
 801a3b4:	be4ccccd 	.word	0xbe4ccccd
 801a3b8:	401bffff 	.word	0x401bffff
 801a3bc:	0801ce48 	.word	0x0801ce48
 801a3c0:	0801ce38 	.word	0x0801ce38

0801a3c4 <fabsf>:
 801a3c4:	ee10 3a10 	vmov	r3, s0
 801a3c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a3cc:	ee00 3a10 	vmov	s0, r3
 801a3d0:	4770      	bx	lr
 801a3d2:	0000      	movs	r0, r0
 801a3d4:	0000      	movs	r0, r0
	...

0801a3d8 <__kernel_rem_pio2>:
 801a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3dc:	ed2d 8b06 	vpush	{d8-d10}
 801a3e0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801a3e4:	469b      	mov	fp, r3
 801a3e6:	460f      	mov	r7, r1
 801a3e8:	4bb9      	ldr	r3, [pc, #740]	@ (801a6d0 <__kernel_rem_pio2+0x2f8>)
 801a3ea:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 801a3ec:	9ea3      	ldr	r6, [sp, #652]	@ 0x28c
 801a3ee:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 801a3f2:	9001      	str	r0, [sp, #4]
 801a3f4:	f112 0f14 	cmn.w	r2, #20
 801a3f8:	bfa8      	it	ge
 801a3fa:	1ed3      	subge	r3, r2, #3
 801a3fc:	f10b 3aff 	add.w	sl, fp, #4294967295
 801a400:	bfb8      	it	lt
 801a402:	2300      	movlt	r3, #0
 801a404:	f06f 0517 	mvn.w	r5, #23
 801a408:	ed9f 6bab 	vldr	d6, [pc, #684]	@ 801a6b8 <__kernel_rem_pio2+0x2e0>
 801a40c:	bfa4      	itt	ge
 801a40e:	2018      	movge	r0, #24
 801a410:	fb93 f3f0 	sdivge	r3, r3, r0
 801a414:	fb03 5505 	mla	r5, r3, r5, r5
 801a418:	eba3 040a 	sub.w	r4, r3, sl
 801a41c:	4415      	add	r5, r2
 801a41e:	eb09 0c0a 	add.w	ip, r9, sl
 801a422:	a81a      	add	r0, sp, #104	@ 0x68
 801a424:	eb06 0e84 	add.w	lr, r6, r4, lsl #2
 801a428:	2200      	movs	r2, #0
 801a42a:	4562      	cmp	r2, ip
 801a42c:	dd0e      	ble.n	801a44c <__kernel_rem_pio2+0x74>
 801a42e:	aa1a      	add	r2, sp, #104	@ 0x68
 801a430:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801a434:	f50d 78d4 	add.w	r8, sp, #424	@ 0x1a8
 801a438:	2400      	movs	r4, #0
 801a43a:	454c      	cmp	r4, r9
 801a43c:	dc23      	bgt.n	801a486 <__kernel_rem_pio2+0xae>
 801a43e:	ed9f 7b9e 	vldr	d7, [pc, #632]	@ 801a6b8 <__kernel_rem_pio2+0x2e0>
 801a442:	f8dd e004 	ldr.w	lr, [sp, #4]
 801a446:	4694      	mov	ip, r2
 801a448:	2000      	movs	r0, #0
 801a44a:	e015      	b.n	801a478 <__kernel_rem_pio2+0xa0>
 801a44c:	42d4      	cmn	r4, r2
 801a44e:	d409      	bmi.n	801a464 <__kernel_rem_pio2+0x8c>
 801a450:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 801a454:	ee07 1a90 	vmov	s15, r1
 801a458:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a45c:	eca0 7b02 	vstmia	r0!, {d7}
 801a460:	3201      	adds	r2, #1
 801a462:	e7e2      	b.n	801a42a <__kernel_rem_pio2+0x52>
 801a464:	eeb0 7b46 	vmov.f64	d7, d6
 801a468:	e7f8      	b.n	801a45c <__kernel_rem_pio2+0x84>
 801a46a:	ecbe 5b02 	vldmia	lr!, {d5}
 801a46e:	ed3c 6b02 	vldmdb	ip!, {d6}
 801a472:	3001      	adds	r0, #1
 801a474:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a478:	4550      	cmp	r0, sl
 801a47a:	ddf6      	ble.n	801a46a <__kernel_rem_pio2+0x92>
 801a47c:	eca8 7b02 	vstmia	r8!, {d7}
 801a480:	3401      	adds	r4, #1
 801a482:	3208      	adds	r2, #8
 801a484:	e7d9      	b.n	801a43a <__kernel_rem_pio2+0x62>
 801a486:	aa06      	add	r2, sp, #24
 801a488:	ed9f 9b8d 	vldr	d9, [pc, #564]	@ 801a6c0 <__kernel_rem_pio2+0x2e8>
 801a48c:	ed9f ab8e 	vldr	d10, [pc, #568]	@ 801a6c8 <__kernel_rem_pio2+0x2f0>
 801a490:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801a494:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801a498:	9203      	str	r2, [sp, #12]
 801a49a:	9302      	str	r3, [sp, #8]
 801a49c:	464c      	mov	r4, r9
 801a49e:	00e3      	lsls	r3, r4, #3
 801a4a0:	9304      	str	r3, [sp, #16]
 801a4a2:	ab92      	add	r3, sp, #584	@ 0x248
 801a4a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a4a8:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801a4ac:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801a4ae:	ab06      	add	r3, sp, #24
 801a4b0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801a4b4:	461e      	mov	r6, r3
 801a4b6:	4620      	mov	r0, r4
 801a4b8:	2800      	cmp	r0, #0
 801a4ba:	dc4a      	bgt.n	801a552 <__kernel_rem_pio2+0x17a>
 801a4bc:	4628      	mov	r0, r5
 801a4be:	9305      	str	r3, [sp, #20]
 801a4c0:	f000 f9fe 	bl	801a8c0 <scalbn>
 801a4c4:	eeb0 8b40 	vmov.f64	d8, d0
 801a4c8:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801a4cc:	ee28 0b00 	vmul.f64	d0, d8, d0
 801a4d0:	f000 fa72 	bl	801a9b8 <floor>
 801a4d4:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801a4d8:	eea0 8b47 	vfms.f64	d8, d0, d7
 801a4dc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801a4e0:	2d00      	cmp	r5, #0
 801a4e2:	ee17 8a90 	vmov	r8, s15
 801a4e6:	9b05      	ldr	r3, [sp, #20]
 801a4e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a4ec:	ee38 8b47 	vsub.f64	d8, d8, d7
 801a4f0:	dd41      	ble.n	801a576 <__kernel_rem_pio2+0x19e>
 801a4f2:	1e60      	subs	r0, r4, #1
 801a4f4:	aa06      	add	r2, sp, #24
 801a4f6:	f1c5 0c18 	rsb	ip, r5, #24
 801a4fa:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801a4fe:	fa46 f20c 	asr.w	r2, r6, ip
 801a502:	4490      	add	r8, r2
 801a504:	fa02 f20c 	lsl.w	r2, r2, ip
 801a508:	1ab6      	subs	r6, r6, r2
 801a50a:	aa06      	add	r2, sp, #24
 801a50c:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801a510:	f1c5 0217 	rsb	r2, r5, #23
 801a514:	4116      	asrs	r6, r2
 801a516:	2e00      	cmp	r6, #0
 801a518:	dd3c      	ble.n	801a594 <__kernel_rem_pio2+0x1bc>
 801a51a:	f04f 0c00 	mov.w	ip, #0
 801a51e:	f108 0801 	add.w	r8, r8, #1
 801a522:	4660      	mov	r0, ip
 801a524:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801a528:	4564      	cmp	r4, ip
 801a52a:	dc66      	bgt.n	801a5fa <__kernel_rem_pio2+0x222>
 801a52c:	2d00      	cmp	r5, #0
 801a52e:	dd03      	ble.n	801a538 <__kernel_rem_pio2+0x160>
 801a530:	2d01      	cmp	r5, #1
 801a532:	d072      	beq.n	801a61a <__kernel_rem_pio2+0x242>
 801a534:	2d02      	cmp	r5, #2
 801a536:	d07a      	beq.n	801a62e <__kernel_rem_pio2+0x256>
 801a538:	2e02      	cmp	r6, #2
 801a53a:	d12b      	bne.n	801a594 <__kernel_rem_pio2+0x1bc>
 801a53c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801a540:	ee30 8b48 	vsub.f64	d8, d0, d8
 801a544:	b330      	cbz	r0, 801a594 <__kernel_rem_pio2+0x1bc>
 801a546:	4628      	mov	r0, r5
 801a548:	f000 f9ba 	bl	801a8c0 <scalbn>
 801a54c:	ee38 8b40 	vsub.f64	d8, d8, d0
 801a550:	e020      	b.n	801a594 <__kernel_rem_pio2+0x1bc>
 801a552:	ee20 7b09 	vmul.f64	d7, d0, d9
 801a556:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801a55a:	3801      	subs	r0, #1
 801a55c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801a560:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801a564:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a568:	eca6 0a01 	vstmia	r6!, {s0}
 801a56c:	ed32 0b02 	vldmdb	r2!, {d0}
 801a570:	ee37 0b00 	vadd.f64	d0, d7, d0
 801a574:	e7a0      	b.n	801a4b8 <__kernel_rem_pio2+0xe0>
 801a576:	d105      	bne.n	801a584 <__kernel_rem_pio2+0x1ac>
 801a578:	1e62      	subs	r2, r4, #1
 801a57a:	a906      	add	r1, sp, #24
 801a57c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801a580:	15f6      	asrs	r6, r6, #23
 801a582:	e7c8      	b.n	801a516 <__kernel_rem_pio2+0x13e>
 801a584:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801a588:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a590:	da31      	bge.n	801a5f6 <__kernel_rem_pio2+0x21e>
 801a592:	2600      	movs	r6, #0
 801a594:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a59c:	f040 809c 	bne.w	801a6d8 <__kernel_rem_pio2+0x300>
 801a5a0:	1e62      	subs	r2, r4, #1
 801a5a2:	2000      	movs	r0, #0
 801a5a4:	454a      	cmp	r2, r9
 801a5a6:	da49      	bge.n	801a63c <__kernel_rem_pio2+0x264>
 801a5a8:	2800      	cmp	r0, #0
 801a5aa:	d062      	beq.n	801a672 <__kernel_rem_pio2+0x29a>
 801a5ac:	3c01      	subs	r4, #1
 801a5ae:	ab06      	add	r3, sp, #24
 801a5b0:	3d18      	subs	r5, #24
 801a5b2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d0f8      	beq.n	801a5ac <__kernel_rem_pio2+0x1d4>
 801a5ba:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801a5be:	4628      	mov	r0, r5
 801a5c0:	f000 f97e 	bl	801a8c0 <scalbn>
 801a5c4:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 801a6c0 <__kernel_rem_pio2+0x2e8>
 801a5c8:	1c62      	adds	r2, r4, #1
 801a5ca:	a96a      	add	r1, sp, #424	@ 0x1a8
 801a5cc:	00d3      	lsls	r3, r2, #3
 801a5ce:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801a5d2:	4622      	mov	r2, r4
 801a5d4:	2a00      	cmp	r2, #0
 801a5d6:	f280 80a9 	bge.w	801a72c <__kernel_rem_pio2+0x354>
 801a5da:	4622      	mov	r2, r4
 801a5dc:	2a00      	cmp	r2, #0
 801a5de:	f2c0 80c7 	blt.w	801a770 <__kernel_rem_pio2+0x398>
 801a5e2:	a96a      	add	r1, sp, #424	@ 0x1a8
 801a5e4:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801a5e8:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 801a6b8 <__kernel_rem_pio2+0x2e0>
 801a5ec:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801a6d4 <__kernel_rem_pio2+0x2fc>
 801a5f0:	2000      	movs	r0, #0
 801a5f2:	1aa1      	subs	r1, r4, r2
 801a5f4:	e0b1      	b.n	801a75a <__kernel_rem_pio2+0x382>
 801a5f6:	2602      	movs	r6, #2
 801a5f8:	e78f      	b.n	801a51a <__kernel_rem_pio2+0x142>
 801a5fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801a5fe:	b948      	cbnz	r0, 801a614 <__kernel_rem_pio2+0x23c>
 801a600:	b122      	cbz	r2, 801a60c <__kernel_rem_pio2+0x234>
 801a602:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 801a606:	f843 2c04 	str.w	r2, [r3, #-4]
 801a60a:	2201      	movs	r2, #1
 801a60c:	f10c 0c01 	add.w	ip, ip, #1
 801a610:	4610      	mov	r0, r2
 801a612:	e789      	b.n	801a528 <__kernel_rem_pio2+0x150>
 801a614:	ebae 0202 	sub.w	r2, lr, r2
 801a618:	e7f5      	b.n	801a606 <__kernel_rem_pio2+0x22e>
 801a61a:	1e62      	subs	r2, r4, #1
 801a61c:	ab06      	add	r3, sp, #24
 801a61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a622:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a626:	a906      	add	r1, sp, #24
 801a628:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a62c:	e784      	b.n	801a538 <__kernel_rem_pio2+0x160>
 801a62e:	1e62      	subs	r2, r4, #1
 801a630:	ab06      	add	r3, sp, #24
 801a632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a636:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a63a:	e7f4      	b.n	801a626 <__kernel_rem_pio2+0x24e>
 801a63c:	ab06      	add	r3, sp, #24
 801a63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a642:	3a01      	subs	r2, #1
 801a644:	4318      	orrs	r0, r3
 801a646:	e7ad      	b.n	801a5a4 <__kernel_rem_pio2+0x1cc>
 801a648:	3301      	adds	r3, #1
 801a64a:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801a64e:	2800      	cmp	r0, #0
 801a650:	d0fa      	beq.n	801a648 <__kernel_rem_pio2+0x270>
 801a652:	9a04      	ldr	r2, [sp, #16]
 801a654:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801a658:	446a      	add	r2, sp
 801a65a:	eb04 000b 	add.w	r0, r4, fp
 801a65e:	a91a      	add	r1, sp, #104	@ 0x68
 801a660:	1c66      	adds	r6, r4, #1
 801a662:	3a98      	subs	r2, #152	@ 0x98
 801a664:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801a668:	4423      	add	r3, r4
 801a66a:	42b3      	cmp	r3, r6
 801a66c:	da04      	bge.n	801a678 <__kernel_rem_pio2+0x2a0>
 801a66e:	461c      	mov	r4, r3
 801a670:	e715      	b.n	801a49e <__kernel_rem_pio2+0xc6>
 801a672:	9a03      	ldr	r2, [sp, #12]
 801a674:	2301      	movs	r3, #1
 801a676:	e7e8      	b.n	801a64a <__kernel_rem_pio2+0x272>
 801a678:	9902      	ldr	r1, [sp, #8]
 801a67a:	f8dd c004 	ldr.w	ip, [sp, #4]
 801a67e:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801a682:	9104      	str	r1, [sp, #16]
 801a684:	ee07 1a90 	vmov	s15, r1
 801a688:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a68c:	2400      	movs	r4, #0
 801a68e:	eca0 7b02 	vstmia	r0!, {d7}
 801a692:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 801a6b8 <__kernel_rem_pio2+0x2e0>
 801a696:	4686      	mov	lr, r0
 801a698:	4554      	cmp	r4, sl
 801a69a:	dd03      	ble.n	801a6a4 <__kernel_rem_pio2+0x2cc>
 801a69c:	eca2 7b02 	vstmia	r2!, {d7}
 801a6a0:	3601      	adds	r6, #1
 801a6a2:	e7e2      	b.n	801a66a <__kernel_rem_pio2+0x292>
 801a6a4:	ecbc 5b02 	vldmia	ip!, {d5}
 801a6a8:	ed3e 6b02 	vldmdb	lr!, {d6}
 801a6ac:	3401      	adds	r4, #1
 801a6ae:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a6b2:	e7f1      	b.n	801a698 <__kernel_rem_pio2+0x2c0>
 801a6b4:	f3af 8000 	nop.w
	...
 801a6c4:	3e700000 	.word	0x3e700000
 801a6c8:	00000000 	.word	0x00000000
 801a6cc:	41700000 	.word	0x41700000
 801a6d0:	0801ce98 	.word	0x0801ce98
 801a6d4:	0801ce58 	.word	0x0801ce58
 801a6d8:	4268      	negs	r0, r5
 801a6da:	eeb0 0b48 	vmov.f64	d0, d8
 801a6de:	f000 f8ef 	bl	801a8c0 <scalbn>
 801a6e2:	ed9f 6b71 	vldr	d6, [pc, #452]	@ 801a8a8 <__kernel_rem_pio2+0x4d0>
 801a6e6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801a6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6ee:	db17      	blt.n	801a720 <__kernel_rem_pio2+0x348>
 801a6f0:	ed9f 7b6f 	vldr	d7, [pc, #444]	@ 801a8b0 <__kernel_rem_pio2+0x4d8>
 801a6f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 801a6f8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801a6fc:	aa06      	add	r2, sp, #24
 801a6fe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801a702:	eea5 0b46 	vfms.f64	d0, d5, d6
 801a706:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a70a:	3518      	adds	r5, #24
 801a70c:	ee10 3a10 	vmov	r3, s0
 801a710:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a714:	ee17 3a10 	vmov	r3, s14
 801a718:	3401      	adds	r4, #1
 801a71a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a71e:	e74c      	b.n	801a5ba <__kernel_rem_pio2+0x1e2>
 801a720:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a724:	aa06      	add	r2, sp, #24
 801a726:	ee10 3a10 	vmov	r3, s0
 801a72a:	e7f6      	b.n	801a71a <__kernel_rem_pio2+0x342>
 801a72c:	a806      	add	r0, sp, #24
 801a72e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801a732:	9001      	str	r0, [sp, #4]
 801a734:	ee07 0a90 	vmov	s15, r0
 801a738:	3a01      	subs	r2, #1
 801a73a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a73e:	ee27 7b00 	vmul.f64	d7, d7, d0
 801a742:	ee20 0b06 	vmul.f64	d0, d0, d6
 801a746:	ed21 7b02 	vstmdb	r1!, {d7}
 801a74a:	e743      	b.n	801a5d4 <__kernel_rem_pio2+0x1fc>
 801a74c:	ecbc 5b02 	vldmia	ip!, {d5}
 801a750:	ecb5 6b02 	vldmia	r5!, {d6}
 801a754:	3001      	adds	r0, #1
 801a756:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a75a:	4548      	cmp	r0, r9
 801a75c:	dc01      	bgt.n	801a762 <__kernel_rem_pio2+0x38a>
 801a75e:	4288      	cmp	r0, r1
 801a760:	ddf4      	ble.n	801a74c <__kernel_rem_pio2+0x374>
 801a762:	a842      	add	r0, sp, #264	@ 0x108
 801a764:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801a768:	ed81 7b00 	vstr	d7, [r1]
 801a76c:	3a01      	subs	r2, #1
 801a76e:	e735      	b.n	801a5dc <__kernel_rem_pio2+0x204>
 801a770:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801a772:	2a02      	cmp	r2, #2
 801a774:	dc0a      	bgt.n	801a78c <__kernel_rem_pio2+0x3b4>
 801a776:	2a00      	cmp	r2, #0
 801a778:	dc29      	bgt.n	801a7ce <__kernel_rem_pio2+0x3f6>
 801a77a:	d042      	beq.n	801a802 <__kernel_rem_pio2+0x42a>
 801a77c:	f008 0007 	and.w	r0, r8, #7
 801a780:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801a784:	ecbd 8b06 	vpop	{d8-d10}
 801a788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a78c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801a78e:	2a03      	cmp	r2, #3
 801a790:	d1f4      	bne.n	801a77c <__kernel_rem_pio2+0x3a4>
 801a792:	a942      	add	r1, sp, #264	@ 0x108
 801a794:	f1a3 0208 	sub.w	r2, r3, #8
 801a798:	440a      	add	r2, r1
 801a79a:	4611      	mov	r1, r2
 801a79c:	4620      	mov	r0, r4
 801a79e:	2800      	cmp	r0, #0
 801a7a0:	dc50      	bgt.n	801a844 <__kernel_rem_pio2+0x46c>
 801a7a2:	4621      	mov	r1, r4
 801a7a4:	2901      	cmp	r1, #1
 801a7a6:	dc5d      	bgt.n	801a864 <__kernel_rem_pio2+0x48c>
 801a7a8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 801a8b8 <__kernel_rem_pio2+0x4e0>
 801a7ac:	aa42      	add	r2, sp, #264	@ 0x108
 801a7ae:	4413      	add	r3, r2
 801a7b0:	2c01      	cmp	r4, #1
 801a7b2:	dc67      	bgt.n	801a884 <__kernel_rem_pio2+0x4ac>
 801a7b4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 801a7b8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801a7bc:	2e00      	cmp	r6, #0
 801a7be:	d167      	bne.n	801a890 <__kernel_rem_pio2+0x4b8>
 801a7c0:	ed87 5b00 	vstr	d5, [r7]
 801a7c4:	ed87 6b02 	vstr	d6, [r7, #8]
 801a7c8:	ed87 7b04 	vstr	d7, [r7, #16]
 801a7cc:	e7d6      	b.n	801a77c <__kernel_rem_pio2+0x3a4>
 801a7ce:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 801a8b8 <__kernel_rem_pio2+0x4e0>
 801a7d2:	aa42      	add	r2, sp, #264	@ 0x108
 801a7d4:	4413      	add	r3, r2
 801a7d6:	4622      	mov	r2, r4
 801a7d8:	2a00      	cmp	r2, #0
 801a7da:	da24      	bge.n	801a826 <__kernel_rem_pio2+0x44e>
 801a7dc:	b34e      	cbz	r6, 801a832 <__kernel_rem_pio2+0x45a>
 801a7de:	eeb1 7b46 	vneg.f64	d7, d6
 801a7e2:	ed87 7b00 	vstr	d7, [r7]
 801a7e6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801a7ea:	aa44      	add	r2, sp, #272	@ 0x110
 801a7ec:	2301      	movs	r3, #1
 801a7ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a7f2:	429c      	cmp	r4, r3
 801a7f4:	da20      	bge.n	801a838 <__kernel_rem_pio2+0x460>
 801a7f6:	b10e      	cbz	r6, 801a7fc <__kernel_rem_pio2+0x424>
 801a7f8:	eeb1 7b47 	vneg.f64	d7, d7
 801a7fc:	ed87 7b02 	vstr	d7, [r7, #8]
 801a800:	e7bc      	b.n	801a77c <__kernel_rem_pio2+0x3a4>
 801a802:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 801a8b8 <__kernel_rem_pio2+0x4e0>
 801a806:	aa42      	add	r2, sp, #264	@ 0x108
 801a808:	4413      	add	r3, r2
 801a80a:	2c00      	cmp	r4, #0
 801a80c:	da05      	bge.n	801a81a <__kernel_rem_pio2+0x442>
 801a80e:	b10e      	cbz	r6, 801a814 <__kernel_rem_pio2+0x43c>
 801a810:	eeb1 7b47 	vneg.f64	d7, d7
 801a814:	ed87 7b00 	vstr	d7, [r7]
 801a818:	e7b0      	b.n	801a77c <__kernel_rem_pio2+0x3a4>
 801a81a:	ed33 6b02 	vldmdb	r3!, {d6}
 801a81e:	3c01      	subs	r4, #1
 801a820:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a824:	e7f1      	b.n	801a80a <__kernel_rem_pio2+0x432>
 801a826:	ed33 7b02 	vldmdb	r3!, {d7}
 801a82a:	3a01      	subs	r2, #1
 801a82c:	ee36 6b07 	vadd.f64	d6, d6, d7
 801a830:	e7d2      	b.n	801a7d8 <__kernel_rem_pio2+0x400>
 801a832:	eeb0 7b46 	vmov.f64	d7, d6
 801a836:	e7d4      	b.n	801a7e2 <__kernel_rem_pio2+0x40a>
 801a838:	ecb2 6b02 	vldmia	r2!, {d6}
 801a83c:	3301      	adds	r3, #1
 801a83e:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a842:	e7d6      	b.n	801a7f2 <__kernel_rem_pio2+0x41a>
 801a844:	ed31 7b02 	vldmdb	r1!, {d7}
 801a848:	ed91 5b02 	vldr	d5, [r1, #8]
 801a84c:	3801      	subs	r0, #1
 801a84e:	ee37 6b05 	vadd.f64	d6, d7, d5
 801a852:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a856:	ed81 6b00 	vstr	d6, [r1]
 801a85a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801a85e:	ed81 7b02 	vstr	d7, [r1, #8]
 801a862:	e79c      	b.n	801a79e <__kernel_rem_pio2+0x3c6>
 801a864:	ed32 7b02 	vldmdb	r2!, {d7}
 801a868:	ed92 5b02 	vldr	d5, [r2, #8]
 801a86c:	3901      	subs	r1, #1
 801a86e:	ee37 6b05 	vadd.f64	d6, d7, d5
 801a872:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a876:	ed82 6b00 	vstr	d6, [r2]
 801a87a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801a87e:	ed82 7b02 	vstr	d7, [r2, #8]
 801a882:	e78f      	b.n	801a7a4 <__kernel_rem_pio2+0x3cc>
 801a884:	ed33 6b02 	vldmdb	r3!, {d6}
 801a888:	3c01      	subs	r4, #1
 801a88a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a88e:	e78f      	b.n	801a7b0 <__kernel_rem_pio2+0x3d8>
 801a890:	eeb1 5b45 	vneg.f64	d5, d5
 801a894:	eeb1 6b46 	vneg.f64	d6, d6
 801a898:	ed87 5b00 	vstr	d5, [r7]
 801a89c:	eeb1 7b47 	vneg.f64	d7, d7
 801a8a0:	ed87 6b02 	vstr	d6, [r7, #8]
 801a8a4:	e790      	b.n	801a7c8 <__kernel_rem_pio2+0x3f0>
 801a8a6:	bf00      	nop
 801a8a8:	00000000 	.word	0x00000000
 801a8ac:	41700000 	.word	0x41700000
 801a8b0:	00000000 	.word	0x00000000
 801a8b4:	3e700000 	.word	0x3e700000
	...

0801a8c0 <scalbn>:
 801a8c0:	ee10 1a90 	vmov	r1, s1
 801a8c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a8c8:	b98b      	cbnz	r3, 801a8ee <scalbn+0x2e>
 801a8ca:	ee10 3a10 	vmov	r3, s0
 801a8ce:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801a8d2:	4319      	orrs	r1, r3
 801a8d4:	d00a      	beq.n	801a8ec <scalbn+0x2c>
 801a8d6:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801a980 <scalbn+0xc0>
 801a8da:	4b35      	ldr	r3, [pc, #212]	@ (801a9b0 <scalbn+0xf0>)
 801a8dc:	ee20 0b07 	vmul.f64	d0, d0, d7
 801a8e0:	4298      	cmp	r0, r3
 801a8e2:	da0b      	bge.n	801a8fc <scalbn+0x3c>
 801a8e4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 801a988 <scalbn+0xc8>
 801a8e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 801a8ec:	4770      	bx	lr
 801a8ee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801a8f2:	4293      	cmp	r3, r2
 801a8f4:	d107      	bne.n	801a906 <scalbn+0x46>
 801a8f6:	ee30 0b00 	vadd.f64	d0, d0, d0
 801a8fa:	4770      	bx	lr
 801a8fc:	ee10 1a90 	vmov	r1, s1
 801a900:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a904:	3b36      	subs	r3, #54	@ 0x36
 801a906:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801a90a:	4290      	cmp	r0, r2
 801a90c:	dd0d      	ble.n	801a92a <scalbn+0x6a>
 801a90e:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 801a990 <scalbn+0xd0>
 801a912:	ee10 3a90 	vmov	r3, s1
 801a916:	eeb0 6b47 	vmov.f64	d6, d7
 801a91a:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 801a998 <scalbn+0xd8>
 801a91e:	2b00      	cmp	r3, #0
 801a920:	fe27 7b05 	vselge.f64	d7, d7, d5
 801a924:	ee27 0b06 	vmul.f64	d0, d7, d6
 801a928:	4770      	bx	lr
 801a92a:	4418      	add	r0, r3
 801a92c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 801a930:	4298      	cmp	r0, r3
 801a932:	dcec      	bgt.n	801a90e <scalbn+0x4e>
 801a934:	2800      	cmp	r0, #0
 801a936:	dd08      	ble.n	801a94a <scalbn+0x8a>
 801a938:	ec53 2b10 	vmov	r2, r3, d0
 801a93c:	f36f 511e 	bfc	r1, #20, #11
 801a940:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801a944:	ec43 2b10 	vmov	d0, r2, r3
 801a948:	4770      	bx	lr
 801a94a:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801a94e:	da09      	bge.n	801a964 <scalbn+0xa4>
 801a950:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801a988 <scalbn+0xc8>
 801a954:	ee10 3a90 	vmov	r3, s1
 801a958:	eeb0 6b47 	vmov.f64	d6, d7
 801a95c:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 801a9a0 <scalbn+0xe0>
 801a960:	2b00      	cmp	r3, #0
 801a962:	e7dd      	b.n	801a920 <scalbn+0x60>
 801a964:	ec53 2b10 	vmov	r2, r3, d0
 801a968:	3036      	adds	r0, #54	@ 0x36
 801a96a:	f36f 511e 	bfc	r1, #20, #11
 801a96e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801a972:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801a9a8 <scalbn+0xe8>
 801a976:	ec43 2b10 	vmov	d0, r2, r3
 801a97a:	e7b5      	b.n	801a8e8 <scalbn+0x28>
 801a97c:	f3af 8000 	nop.w
 801a980:	00000000 	.word	0x00000000
 801a984:	43500000 	.word	0x43500000
 801a988:	c2f8f359 	.word	0xc2f8f359
 801a98c:	01a56e1f 	.word	0x01a56e1f
 801a990:	8800759c 	.word	0x8800759c
 801a994:	7e37e43c 	.word	0x7e37e43c
 801a998:	8800759c 	.word	0x8800759c
 801a99c:	fe37e43c 	.word	0xfe37e43c
 801a9a0:	c2f8f359 	.word	0xc2f8f359
 801a9a4:	81a56e1f 	.word	0x81a56e1f
 801a9a8:	00000000 	.word	0x00000000
 801a9ac:	3c900000 	.word	0x3c900000
 801a9b0:	ffff3cb0 	.word	0xffff3cb0
 801a9b4:	00000000 	.word	0x00000000

0801a9b8 <floor>:
 801a9b8:	ee10 3a90 	vmov	r3, s1
 801a9bc:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801a9c0:	ee10 2a10 	vmov	r2, s0
 801a9c4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801a9c8:	2913      	cmp	r1, #19
 801a9ca:	b530      	push	{r4, r5, lr}
 801a9cc:	4615      	mov	r5, r2
 801a9ce:	dc33      	bgt.n	801aa38 <floor+0x80>
 801a9d0:	2900      	cmp	r1, #0
 801a9d2:	da18      	bge.n	801aa06 <floor+0x4e>
 801a9d4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801aa98 <floor+0xe0>
 801a9d8:	ee30 0b07 	vadd.f64	d0, d0, d7
 801a9dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801a9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9e4:	dd0a      	ble.n	801a9fc <floor+0x44>
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	da50      	bge.n	801aa8c <floor+0xd4>
 801a9ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a9ee:	4313      	orrs	r3, r2
 801a9f0:	2200      	movs	r2, #0
 801a9f2:	4293      	cmp	r3, r2
 801a9f4:	4b2a      	ldr	r3, [pc, #168]	@ (801aaa0 <floor+0xe8>)
 801a9f6:	bf08      	it	eq
 801a9f8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801a9fc:	4619      	mov	r1, r3
 801a9fe:	4610      	mov	r0, r2
 801aa00:	ec41 0b10 	vmov	d0, r0, r1
 801aa04:	e01f      	b.n	801aa46 <floor+0x8e>
 801aa06:	4827      	ldr	r0, [pc, #156]	@ (801aaa4 <floor+0xec>)
 801aa08:	4108      	asrs	r0, r1
 801aa0a:	ea03 0400 	and.w	r4, r3, r0
 801aa0e:	4314      	orrs	r4, r2
 801aa10:	d019      	beq.n	801aa46 <floor+0x8e>
 801aa12:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801aa98 <floor+0xe0>
 801aa16:	ee30 0b07 	vadd.f64	d0, d0, d7
 801aa1a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801aa1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa22:	ddeb      	ble.n	801a9fc <floor+0x44>
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	bfbe      	ittt	lt
 801aa28:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801aa2c:	410a      	asrlt	r2, r1
 801aa2e:	189b      	addlt	r3, r3, r2
 801aa30:	ea23 0300 	bic.w	r3, r3, r0
 801aa34:	2200      	movs	r2, #0
 801aa36:	e7e1      	b.n	801a9fc <floor+0x44>
 801aa38:	2933      	cmp	r1, #51	@ 0x33
 801aa3a:	dd05      	ble.n	801aa48 <floor+0x90>
 801aa3c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801aa40:	d101      	bne.n	801aa46 <floor+0x8e>
 801aa42:	ee30 0b00 	vadd.f64	d0, d0, d0
 801aa46:	bd30      	pop	{r4, r5, pc}
 801aa48:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801aa4c:	f04f 30ff 	mov.w	r0, #4294967295
 801aa50:	40e0      	lsrs	r0, r4
 801aa52:	4210      	tst	r0, r2
 801aa54:	d0f7      	beq.n	801aa46 <floor+0x8e>
 801aa56:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801aa98 <floor+0xe0>
 801aa5a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801aa5e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801aa62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa66:	ddc9      	ble.n	801a9fc <floor+0x44>
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	da02      	bge.n	801aa72 <floor+0xba>
 801aa6c:	2914      	cmp	r1, #20
 801aa6e:	d103      	bne.n	801aa78 <floor+0xc0>
 801aa70:	3301      	adds	r3, #1
 801aa72:	ea22 0200 	bic.w	r2, r2, r0
 801aa76:	e7c1      	b.n	801a9fc <floor+0x44>
 801aa78:	2401      	movs	r4, #1
 801aa7a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801aa7e:	fa04 f101 	lsl.w	r1, r4, r1
 801aa82:	440a      	add	r2, r1
 801aa84:	42aa      	cmp	r2, r5
 801aa86:	bf38      	it	cc
 801aa88:	191b      	addcc	r3, r3, r4
 801aa8a:	e7f2      	b.n	801aa72 <floor+0xba>
 801aa8c:	2200      	movs	r2, #0
 801aa8e:	4613      	mov	r3, r2
 801aa90:	e7b4      	b.n	801a9fc <floor+0x44>
 801aa92:	bf00      	nop
 801aa94:	f3af 8000 	nop.w
 801aa98:	8800759c 	.word	0x8800759c
 801aa9c:	7e37e43c 	.word	0x7e37e43c
 801aaa0:	bff00000 	.word	0xbff00000
 801aaa4:	000fffff 	.word	0x000fffff

0801aaa8 <abort>:
 801aaa8:	b508      	push	{r3, lr}
 801aaaa:	2006      	movs	r0, #6
 801aaac:	f000 fa90 	bl	801afd0 <raise>
 801aab0:	2001      	movs	r0, #1
 801aab2:	f7e9 faf1 	bl	8004098 <_exit>
	...

0801aab8 <malloc>:
 801aab8:	4b02      	ldr	r3, [pc, #8]	@ (801aac4 <malloc+0xc>)
 801aaba:	4601      	mov	r1, r0
 801aabc:	6818      	ldr	r0, [r3, #0]
 801aabe:	f000 b82d 	b.w	801ab1c <_malloc_r>
 801aac2:	bf00      	nop
 801aac4:	2400023c 	.word	0x2400023c

0801aac8 <free>:
 801aac8:	4b02      	ldr	r3, [pc, #8]	@ (801aad4 <free+0xc>)
 801aaca:	4601      	mov	r1, r0
 801aacc:	6818      	ldr	r0, [r3, #0]
 801aace:	f000 bb2d 	b.w	801b12c <_free_r>
 801aad2:	bf00      	nop
 801aad4:	2400023c 	.word	0x2400023c

0801aad8 <sbrk_aligned>:
 801aad8:	b570      	push	{r4, r5, r6, lr}
 801aada:	4e0f      	ldr	r6, [pc, #60]	@ (801ab18 <sbrk_aligned+0x40>)
 801aadc:	460c      	mov	r4, r1
 801aade:	6831      	ldr	r1, [r6, #0]
 801aae0:	4605      	mov	r5, r0
 801aae2:	b911      	cbnz	r1, 801aaea <sbrk_aligned+0x12>
 801aae4:	f000 fac4 	bl	801b070 <_sbrk_r>
 801aae8:	6030      	str	r0, [r6, #0]
 801aaea:	4621      	mov	r1, r4
 801aaec:	4628      	mov	r0, r5
 801aaee:	f000 fabf 	bl	801b070 <_sbrk_r>
 801aaf2:	1c43      	adds	r3, r0, #1
 801aaf4:	d103      	bne.n	801aafe <sbrk_aligned+0x26>
 801aaf6:	f04f 34ff 	mov.w	r4, #4294967295
 801aafa:	4620      	mov	r0, r4
 801aafc:	bd70      	pop	{r4, r5, r6, pc}
 801aafe:	1cc4      	adds	r4, r0, #3
 801ab00:	f024 0403 	bic.w	r4, r4, #3
 801ab04:	42a0      	cmp	r0, r4
 801ab06:	d0f8      	beq.n	801aafa <sbrk_aligned+0x22>
 801ab08:	1a21      	subs	r1, r4, r0
 801ab0a:	4628      	mov	r0, r5
 801ab0c:	f000 fab0 	bl	801b070 <_sbrk_r>
 801ab10:	3001      	adds	r0, #1
 801ab12:	d1f2      	bne.n	801aafa <sbrk_aligned+0x22>
 801ab14:	e7ef      	b.n	801aaf6 <sbrk_aligned+0x1e>
 801ab16:	bf00      	nop
 801ab18:	24003e00 	.word	0x24003e00

0801ab1c <_malloc_r>:
 801ab1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab20:	1ccd      	adds	r5, r1, #3
 801ab22:	f025 0503 	bic.w	r5, r5, #3
 801ab26:	3508      	adds	r5, #8
 801ab28:	2d0c      	cmp	r5, #12
 801ab2a:	bf38      	it	cc
 801ab2c:	250c      	movcc	r5, #12
 801ab2e:	2d00      	cmp	r5, #0
 801ab30:	4606      	mov	r6, r0
 801ab32:	db01      	blt.n	801ab38 <_malloc_r+0x1c>
 801ab34:	42a9      	cmp	r1, r5
 801ab36:	d904      	bls.n	801ab42 <_malloc_r+0x26>
 801ab38:	230c      	movs	r3, #12
 801ab3a:	6033      	str	r3, [r6, #0]
 801ab3c:	2000      	movs	r0, #0
 801ab3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ac18 <_malloc_r+0xfc>
 801ab46:	f000 f869 	bl	801ac1c <__malloc_lock>
 801ab4a:	f8d8 3000 	ldr.w	r3, [r8]
 801ab4e:	461c      	mov	r4, r3
 801ab50:	bb44      	cbnz	r4, 801aba4 <_malloc_r+0x88>
 801ab52:	4629      	mov	r1, r5
 801ab54:	4630      	mov	r0, r6
 801ab56:	f7ff ffbf 	bl	801aad8 <sbrk_aligned>
 801ab5a:	1c43      	adds	r3, r0, #1
 801ab5c:	4604      	mov	r4, r0
 801ab5e:	d158      	bne.n	801ac12 <_malloc_r+0xf6>
 801ab60:	f8d8 4000 	ldr.w	r4, [r8]
 801ab64:	4627      	mov	r7, r4
 801ab66:	2f00      	cmp	r7, #0
 801ab68:	d143      	bne.n	801abf2 <_malloc_r+0xd6>
 801ab6a:	2c00      	cmp	r4, #0
 801ab6c:	d04b      	beq.n	801ac06 <_malloc_r+0xea>
 801ab6e:	6823      	ldr	r3, [r4, #0]
 801ab70:	4639      	mov	r1, r7
 801ab72:	4630      	mov	r0, r6
 801ab74:	eb04 0903 	add.w	r9, r4, r3
 801ab78:	f000 fa7a 	bl	801b070 <_sbrk_r>
 801ab7c:	4581      	cmp	r9, r0
 801ab7e:	d142      	bne.n	801ac06 <_malloc_r+0xea>
 801ab80:	6821      	ldr	r1, [r4, #0]
 801ab82:	1a6d      	subs	r5, r5, r1
 801ab84:	4629      	mov	r1, r5
 801ab86:	4630      	mov	r0, r6
 801ab88:	f7ff ffa6 	bl	801aad8 <sbrk_aligned>
 801ab8c:	3001      	adds	r0, #1
 801ab8e:	d03a      	beq.n	801ac06 <_malloc_r+0xea>
 801ab90:	6823      	ldr	r3, [r4, #0]
 801ab92:	442b      	add	r3, r5
 801ab94:	6023      	str	r3, [r4, #0]
 801ab96:	f8d8 3000 	ldr.w	r3, [r8]
 801ab9a:	685a      	ldr	r2, [r3, #4]
 801ab9c:	bb62      	cbnz	r2, 801abf8 <_malloc_r+0xdc>
 801ab9e:	f8c8 7000 	str.w	r7, [r8]
 801aba2:	e00f      	b.n	801abc4 <_malloc_r+0xa8>
 801aba4:	6822      	ldr	r2, [r4, #0]
 801aba6:	1b52      	subs	r2, r2, r5
 801aba8:	d420      	bmi.n	801abec <_malloc_r+0xd0>
 801abaa:	2a0b      	cmp	r2, #11
 801abac:	d917      	bls.n	801abde <_malloc_r+0xc2>
 801abae:	1961      	adds	r1, r4, r5
 801abb0:	42a3      	cmp	r3, r4
 801abb2:	6025      	str	r5, [r4, #0]
 801abb4:	bf18      	it	ne
 801abb6:	6059      	strne	r1, [r3, #4]
 801abb8:	6863      	ldr	r3, [r4, #4]
 801abba:	bf08      	it	eq
 801abbc:	f8c8 1000 	streq.w	r1, [r8]
 801abc0:	5162      	str	r2, [r4, r5]
 801abc2:	604b      	str	r3, [r1, #4]
 801abc4:	4630      	mov	r0, r6
 801abc6:	f000 f82f 	bl	801ac28 <__malloc_unlock>
 801abca:	f104 000b 	add.w	r0, r4, #11
 801abce:	1d23      	adds	r3, r4, #4
 801abd0:	f020 0007 	bic.w	r0, r0, #7
 801abd4:	1ac2      	subs	r2, r0, r3
 801abd6:	bf1c      	itt	ne
 801abd8:	1a1b      	subne	r3, r3, r0
 801abda:	50a3      	strne	r3, [r4, r2]
 801abdc:	e7af      	b.n	801ab3e <_malloc_r+0x22>
 801abde:	6862      	ldr	r2, [r4, #4]
 801abe0:	42a3      	cmp	r3, r4
 801abe2:	bf0c      	ite	eq
 801abe4:	f8c8 2000 	streq.w	r2, [r8]
 801abe8:	605a      	strne	r2, [r3, #4]
 801abea:	e7eb      	b.n	801abc4 <_malloc_r+0xa8>
 801abec:	4623      	mov	r3, r4
 801abee:	6864      	ldr	r4, [r4, #4]
 801abf0:	e7ae      	b.n	801ab50 <_malloc_r+0x34>
 801abf2:	463c      	mov	r4, r7
 801abf4:	687f      	ldr	r7, [r7, #4]
 801abf6:	e7b6      	b.n	801ab66 <_malloc_r+0x4a>
 801abf8:	461a      	mov	r2, r3
 801abfa:	685b      	ldr	r3, [r3, #4]
 801abfc:	42a3      	cmp	r3, r4
 801abfe:	d1fb      	bne.n	801abf8 <_malloc_r+0xdc>
 801ac00:	2300      	movs	r3, #0
 801ac02:	6053      	str	r3, [r2, #4]
 801ac04:	e7de      	b.n	801abc4 <_malloc_r+0xa8>
 801ac06:	230c      	movs	r3, #12
 801ac08:	6033      	str	r3, [r6, #0]
 801ac0a:	4630      	mov	r0, r6
 801ac0c:	f000 f80c 	bl	801ac28 <__malloc_unlock>
 801ac10:	e794      	b.n	801ab3c <_malloc_r+0x20>
 801ac12:	6005      	str	r5, [r0, #0]
 801ac14:	e7d6      	b.n	801abc4 <_malloc_r+0xa8>
 801ac16:	bf00      	nop
 801ac18:	24003e04 	.word	0x24003e04

0801ac1c <__malloc_lock>:
 801ac1c:	4801      	ldr	r0, [pc, #4]	@ (801ac24 <__malloc_lock+0x8>)
 801ac1e:	f000 ba74 	b.w	801b10a <__retarget_lock_acquire_recursive>
 801ac22:	bf00      	nop
 801ac24:	24003f48 	.word	0x24003f48

0801ac28 <__malloc_unlock>:
 801ac28:	4801      	ldr	r0, [pc, #4]	@ (801ac30 <__malloc_unlock+0x8>)
 801ac2a:	f000 ba6f 	b.w	801b10c <__retarget_lock_release_recursive>
 801ac2e:	bf00      	nop
 801ac30:	24003f48 	.word	0x24003f48

0801ac34 <realloc>:
 801ac34:	4b02      	ldr	r3, [pc, #8]	@ (801ac40 <realloc+0xc>)
 801ac36:	460a      	mov	r2, r1
 801ac38:	4601      	mov	r1, r0
 801ac3a:	6818      	ldr	r0, [r3, #0]
 801ac3c:	f000 b802 	b.w	801ac44 <_realloc_r>
 801ac40:	2400023c 	.word	0x2400023c

0801ac44 <_realloc_r>:
 801ac44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac48:	4607      	mov	r7, r0
 801ac4a:	4614      	mov	r4, r2
 801ac4c:	460d      	mov	r5, r1
 801ac4e:	b921      	cbnz	r1, 801ac5a <_realloc_r+0x16>
 801ac50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac54:	4611      	mov	r1, r2
 801ac56:	f7ff bf61 	b.w	801ab1c <_malloc_r>
 801ac5a:	b92a      	cbnz	r2, 801ac68 <_realloc_r+0x24>
 801ac5c:	f000 fa66 	bl	801b12c <_free_r>
 801ac60:	4625      	mov	r5, r4
 801ac62:	4628      	mov	r0, r5
 801ac64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac68:	f000 faaa 	bl	801b1c0 <_malloc_usable_size_r>
 801ac6c:	4284      	cmp	r4, r0
 801ac6e:	4606      	mov	r6, r0
 801ac70:	d802      	bhi.n	801ac78 <_realloc_r+0x34>
 801ac72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ac76:	d8f4      	bhi.n	801ac62 <_realloc_r+0x1e>
 801ac78:	4621      	mov	r1, r4
 801ac7a:	4638      	mov	r0, r7
 801ac7c:	f7ff ff4e 	bl	801ab1c <_malloc_r>
 801ac80:	4680      	mov	r8, r0
 801ac82:	b908      	cbnz	r0, 801ac88 <_realloc_r+0x44>
 801ac84:	4645      	mov	r5, r8
 801ac86:	e7ec      	b.n	801ac62 <_realloc_r+0x1e>
 801ac88:	42b4      	cmp	r4, r6
 801ac8a:	4622      	mov	r2, r4
 801ac8c:	4629      	mov	r1, r5
 801ac8e:	bf28      	it	cs
 801ac90:	4632      	movcs	r2, r6
 801ac92:	f000 fa3c 	bl	801b10e <memcpy>
 801ac96:	4629      	mov	r1, r5
 801ac98:	4638      	mov	r0, r7
 801ac9a:	f000 fa47 	bl	801b12c <_free_r>
 801ac9e:	e7f1      	b.n	801ac84 <_realloc_r+0x40>

0801aca0 <std>:
 801aca0:	2300      	movs	r3, #0
 801aca2:	b510      	push	{r4, lr}
 801aca4:	4604      	mov	r4, r0
 801aca6:	e9c0 3300 	strd	r3, r3, [r0]
 801acaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801acae:	6083      	str	r3, [r0, #8]
 801acb0:	8181      	strh	r1, [r0, #12]
 801acb2:	6643      	str	r3, [r0, #100]	@ 0x64
 801acb4:	81c2      	strh	r2, [r0, #14]
 801acb6:	6183      	str	r3, [r0, #24]
 801acb8:	4619      	mov	r1, r3
 801acba:	2208      	movs	r2, #8
 801acbc:	305c      	adds	r0, #92	@ 0x5c
 801acbe:	f000 f956 	bl	801af6e <memset>
 801acc2:	4b0d      	ldr	r3, [pc, #52]	@ (801acf8 <std+0x58>)
 801acc4:	6263      	str	r3, [r4, #36]	@ 0x24
 801acc6:	4b0d      	ldr	r3, [pc, #52]	@ (801acfc <std+0x5c>)
 801acc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801acca:	4b0d      	ldr	r3, [pc, #52]	@ (801ad00 <std+0x60>)
 801accc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801acce:	4b0d      	ldr	r3, [pc, #52]	@ (801ad04 <std+0x64>)
 801acd0:	6323      	str	r3, [r4, #48]	@ 0x30
 801acd2:	4b0d      	ldr	r3, [pc, #52]	@ (801ad08 <std+0x68>)
 801acd4:	6224      	str	r4, [r4, #32]
 801acd6:	429c      	cmp	r4, r3
 801acd8:	d006      	beq.n	801ace8 <std+0x48>
 801acda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801acde:	4294      	cmp	r4, r2
 801ace0:	d002      	beq.n	801ace8 <std+0x48>
 801ace2:	33d0      	adds	r3, #208	@ 0xd0
 801ace4:	429c      	cmp	r4, r3
 801ace6:	d105      	bne.n	801acf4 <std+0x54>
 801ace8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801acec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801acf0:	f000 ba0a 	b.w	801b108 <__retarget_lock_init_recursive>
 801acf4:	bd10      	pop	{r4, pc}
 801acf6:	bf00      	nop
 801acf8:	0801aeb5 	.word	0x0801aeb5
 801acfc:	0801aed7 	.word	0x0801aed7
 801ad00:	0801af0f 	.word	0x0801af0f
 801ad04:	0801af33 	.word	0x0801af33
 801ad08:	24003e08 	.word	0x24003e08

0801ad0c <stdio_exit_handler>:
 801ad0c:	4a02      	ldr	r2, [pc, #8]	@ (801ad18 <stdio_exit_handler+0xc>)
 801ad0e:	4903      	ldr	r1, [pc, #12]	@ (801ad1c <stdio_exit_handler+0x10>)
 801ad10:	4803      	ldr	r0, [pc, #12]	@ (801ad20 <stdio_exit_handler+0x14>)
 801ad12:	f000 b869 	b.w	801ade8 <_fwalk_sglue>
 801ad16:	bf00      	nop
 801ad18:	24000230 	.word	0x24000230
 801ad1c:	0801bb25 	.word	0x0801bb25
 801ad20:	24000240 	.word	0x24000240

0801ad24 <cleanup_stdio>:
 801ad24:	6841      	ldr	r1, [r0, #4]
 801ad26:	4b0c      	ldr	r3, [pc, #48]	@ (801ad58 <cleanup_stdio+0x34>)
 801ad28:	4299      	cmp	r1, r3
 801ad2a:	b510      	push	{r4, lr}
 801ad2c:	4604      	mov	r4, r0
 801ad2e:	d001      	beq.n	801ad34 <cleanup_stdio+0x10>
 801ad30:	f000 fef8 	bl	801bb24 <_fflush_r>
 801ad34:	68a1      	ldr	r1, [r4, #8]
 801ad36:	4b09      	ldr	r3, [pc, #36]	@ (801ad5c <cleanup_stdio+0x38>)
 801ad38:	4299      	cmp	r1, r3
 801ad3a:	d002      	beq.n	801ad42 <cleanup_stdio+0x1e>
 801ad3c:	4620      	mov	r0, r4
 801ad3e:	f000 fef1 	bl	801bb24 <_fflush_r>
 801ad42:	68e1      	ldr	r1, [r4, #12]
 801ad44:	4b06      	ldr	r3, [pc, #24]	@ (801ad60 <cleanup_stdio+0x3c>)
 801ad46:	4299      	cmp	r1, r3
 801ad48:	d004      	beq.n	801ad54 <cleanup_stdio+0x30>
 801ad4a:	4620      	mov	r0, r4
 801ad4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad50:	f000 bee8 	b.w	801bb24 <_fflush_r>
 801ad54:	bd10      	pop	{r4, pc}
 801ad56:	bf00      	nop
 801ad58:	24003e08 	.word	0x24003e08
 801ad5c:	24003e70 	.word	0x24003e70
 801ad60:	24003ed8 	.word	0x24003ed8

0801ad64 <global_stdio_init.part.0>:
 801ad64:	b510      	push	{r4, lr}
 801ad66:	4b0b      	ldr	r3, [pc, #44]	@ (801ad94 <global_stdio_init.part.0+0x30>)
 801ad68:	4c0b      	ldr	r4, [pc, #44]	@ (801ad98 <global_stdio_init.part.0+0x34>)
 801ad6a:	4a0c      	ldr	r2, [pc, #48]	@ (801ad9c <global_stdio_init.part.0+0x38>)
 801ad6c:	601a      	str	r2, [r3, #0]
 801ad6e:	4620      	mov	r0, r4
 801ad70:	2200      	movs	r2, #0
 801ad72:	2104      	movs	r1, #4
 801ad74:	f7ff ff94 	bl	801aca0 <std>
 801ad78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801ad7c:	2201      	movs	r2, #1
 801ad7e:	2109      	movs	r1, #9
 801ad80:	f7ff ff8e 	bl	801aca0 <std>
 801ad84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ad88:	2202      	movs	r2, #2
 801ad8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad8e:	2112      	movs	r1, #18
 801ad90:	f7ff bf86 	b.w	801aca0 <std>
 801ad94:	24003f40 	.word	0x24003f40
 801ad98:	24003e08 	.word	0x24003e08
 801ad9c:	0801ad0d 	.word	0x0801ad0d

0801ada0 <__sfp_lock_acquire>:
 801ada0:	4801      	ldr	r0, [pc, #4]	@ (801ada8 <__sfp_lock_acquire+0x8>)
 801ada2:	f000 b9b2 	b.w	801b10a <__retarget_lock_acquire_recursive>
 801ada6:	bf00      	nop
 801ada8:	24003f49 	.word	0x24003f49

0801adac <__sfp_lock_release>:
 801adac:	4801      	ldr	r0, [pc, #4]	@ (801adb4 <__sfp_lock_release+0x8>)
 801adae:	f000 b9ad 	b.w	801b10c <__retarget_lock_release_recursive>
 801adb2:	bf00      	nop
 801adb4:	24003f49 	.word	0x24003f49

0801adb8 <__sinit>:
 801adb8:	b510      	push	{r4, lr}
 801adba:	4604      	mov	r4, r0
 801adbc:	f7ff fff0 	bl	801ada0 <__sfp_lock_acquire>
 801adc0:	6a23      	ldr	r3, [r4, #32]
 801adc2:	b11b      	cbz	r3, 801adcc <__sinit+0x14>
 801adc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801adc8:	f7ff bff0 	b.w	801adac <__sfp_lock_release>
 801adcc:	4b04      	ldr	r3, [pc, #16]	@ (801ade0 <__sinit+0x28>)
 801adce:	6223      	str	r3, [r4, #32]
 801add0:	4b04      	ldr	r3, [pc, #16]	@ (801ade4 <__sinit+0x2c>)
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	2b00      	cmp	r3, #0
 801add6:	d1f5      	bne.n	801adc4 <__sinit+0xc>
 801add8:	f7ff ffc4 	bl	801ad64 <global_stdio_init.part.0>
 801addc:	e7f2      	b.n	801adc4 <__sinit+0xc>
 801adde:	bf00      	nop
 801ade0:	0801ad25 	.word	0x0801ad25
 801ade4:	24003f40 	.word	0x24003f40

0801ade8 <_fwalk_sglue>:
 801ade8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801adec:	4607      	mov	r7, r0
 801adee:	4688      	mov	r8, r1
 801adf0:	4614      	mov	r4, r2
 801adf2:	2600      	movs	r6, #0
 801adf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801adf8:	f1b9 0901 	subs.w	r9, r9, #1
 801adfc:	d505      	bpl.n	801ae0a <_fwalk_sglue+0x22>
 801adfe:	6824      	ldr	r4, [r4, #0]
 801ae00:	2c00      	cmp	r4, #0
 801ae02:	d1f7      	bne.n	801adf4 <_fwalk_sglue+0xc>
 801ae04:	4630      	mov	r0, r6
 801ae06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae0a:	89ab      	ldrh	r3, [r5, #12]
 801ae0c:	2b01      	cmp	r3, #1
 801ae0e:	d907      	bls.n	801ae20 <_fwalk_sglue+0x38>
 801ae10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ae14:	3301      	adds	r3, #1
 801ae16:	d003      	beq.n	801ae20 <_fwalk_sglue+0x38>
 801ae18:	4629      	mov	r1, r5
 801ae1a:	4638      	mov	r0, r7
 801ae1c:	47c0      	blx	r8
 801ae1e:	4306      	orrs	r6, r0
 801ae20:	3568      	adds	r5, #104	@ 0x68
 801ae22:	e7e9      	b.n	801adf8 <_fwalk_sglue+0x10>

0801ae24 <iprintf>:
 801ae24:	b40f      	push	{r0, r1, r2, r3}
 801ae26:	b507      	push	{r0, r1, r2, lr}
 801ae28:	4906      	ldr	r1, [pc, #24]	@ (801ae44 <iprintf+0x20>)
 801ae2a:	ab04      	add	r3, sp, #16
 801ae2c:	6808      	ldr	r0, [r1, #0]
 801ae2e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae32:	6881      	ldr	r1, [r0, #8]
 801ae34:	9301      	str	r3, [sp, #4]
 801ae36:	f000 fb4d 	bl	801b4d4 <_vfiprintf_r>
 801ae3a:	b003      	add	sp, #12
 801ae3c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ae40:	b004      	add	sp, #16
 801ae42:	4770      	bx	lr
 801ae44:	2400023c 	.word	0x2400023c

0801ae48 <sniprintf>:
 801ae48:	b40c      	push	{r2, r3}
 801ae4a:	b530      	push	{r4, r5, lr}
 801ae4c:	4b18      	ldr	r3, [pc, #96]	@ (801aeb0 <sniprintf+0x68>)
 801ae4e:	1e0c      	subs	r4, r1, #0
 801ae50:	681d      	ldr	r5, [r3, #0]
 801ae52:	b09d      	sub	sp, #116	@ 0x74
 801ae54:	da08      	bge.n	801ae68 <sniprintf+0x20>
 801ae56:	238b      	movs	r3, #139	@ 0x8b
 801ae58:	602b      	str	r3, [r5, #0]
 801ae5a:	f04f 30ff 	mov.w	r0, #4294967295
 801ae5e:	b01d      	add	sp, #116	@ 0x74
 801ae60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ae64:	b002      	add	sp, #8
 801ae66:	4770      	bx	lr
 801ae68:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801ae6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ae70:	f04f 0300 	mov.w	r3, #0
 801ae74:	931b      	str	r3, [sp, #108]	@ 0x6c
 801ae76:	bf14      	ite	ne
 801ae78:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ae7c:	4623      	moveq	r3, r4
 801ae7e:	9304      	str	r3, [sp, #16]
 801ae80:	9307      	str	r3, [sp, #28]
 801ae82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ae86:	9002      	str	r0, [sp, #8]
 801ae88:	9006      	str	r0, [sp, #24]
 801ae8a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ae8e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ae90:	ab21      	add	r3, sp, #132	@ 0x84
 801ae92:	a902      	add	r1, sp, #8
 801ae94:	4628      	mov	r0, r5
 801ae96:	9301      	str	r3, [sp, #4]
 801ae98:	f000 f9f6 	bl	801b288 <_svfiprintf_r>
 801ae9c:	1c43      	adds	r3, r0, #1
 801ae9e:	bfbc      	itt	lt
 801aea0:	238b      	movlt	r3, #139	@ 0x8b
 801aea2:	602b      	strlt	r3, [r5, #0]
 801aea4:	2c00      	cmp	r4, #0
 801aea6:	d0da      	beq.n	801ae5e <sniprintf+0x16>
 801aea8:	9b02      	ldr	r3, [sp, #8]
 801aeaa:	2200      	movs	r2, #0
 801aeac:	701a      	strb	r2, [r3, #0]
 801aeae:	e7d6      	b.n	801ae5e <sniprintf+0x16>
 801aeb0:	2400023c 	.word	0x2400023c

0801aeb4 <__sread>:
 801aeb4:	b510      	push	{r4, lr}
 801aeb6:	460c      	mov	r4, r1
 801aeb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aebc:	f000 f8b2 	bl	801b024 <_read_r>
 801aec0:	2800      	cmp	r0, #0
 801aec2:	bfab      	itete	ge
 801aec4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801aec6:	89a3      	ldrhlt	r3, [r4, #12]
 801aec8:	181b      	addge	r3, r3, r0
 801aeca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801aece:	bfac      	ite	ge
 801aed0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801aed2:	81a3      	strhlt	r3, [r4, #12]
 801aed4:	bd10      	pop	{r4, pc}

0801aed6 <__swrite>:
 801aed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aeda:	461f      	mov	r7, r3
 801aedc:	898b      	ldrh	r3, [r1, #12]
 801aede:	05db      	lsls	r3, r3, #23
 801aee0:	4605      	mov	r5, r0
 801aee2:	460c      	mov	r4, r1
 801aee4:	4616      	mov	r6, r2
 801aee6:	d505      	bpl.n	801aef4 <__swrite+0x1e>
 801aee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aeec:	2302      	movs	r3, #2
 801aeee:	2200      	movs	r2, #0
 801aef0:	f000 f886 	bl	801b000 <_lseek_r>
 801aef4:	89a3      	ldrh	r3, [r4, #12]
 801aef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aefa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801aefe:	81a3      	strh	r3, [r4, #12]
 801af00:	4632      	mov	r2, r6
 801af02:	463b      	mov	r3, r7
 801af04:	4628      	mov	r0, r5
 801af06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af0a:	f000 b8c1 	b.w	801b090 <_write_r>

0801af0e <__sseek>:
 801af0e:	b510      	push	{r4, lr}
 801af10:	460c      	mov	r4, r1
 801af12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af16:	f000 f873 	bl	801b000 <_lseek_r>
 801af1a:	1c43      	adds	r3, r0, #1
 801af1c:	89a3      	ldrh	r3, [r4, #12]
 801af1e:	bf15      	itete	ne
 801af20:	6560      	strne	r0, [r4, #84]	@ 0x54
 801af22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801af26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801af2a:	81a3      	strheq	r3, [r4, #12]
 801af2c:	bf18      	it	ne
 801af2e:	81a3      	strhne	r3, [r4, #12]
 801af30:	bd10      	pop	{r4, pc}

0801af32 <__sclose>:
 801af32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af36:	f000 b853 	b.w	801afe0 <_close_r>

0801af3a <memmove>:
 801af3a:	4288      	cmp	r0, r1
 801af3c:	b510      	push	{r4, lr}
 801af3e:	eb01 0402 	add.w	r4, r1, r2
 801af42:	d902      	bls.n	801af4a <memmove+0x10>
 801af44:	4284      	cmp	r4, r0
 801af46:	4623      	mov	r3, r4
 801af48:	d807      	bhi.n	801af5a <memmove+0x20>
 801af4a:	1e43      	subs	r3, r0, #1
 801af4c:	42a1      	cmp	r1, r4
 801af4e:	d008      	beq.n	801af62 <memmove+0x28>
 801af50:	f811 2b01 	ldrb.w	r2, [r1], #1
 801af54:	f803 2f01 	strb.w	r2, [r3, #1]!
 801af58:	e7f8      	b.n	801af4c <memmove+0x12>
 801af5a:	4402      	add	r2, r0
 801af5c:	4601      	mov	r1, r0
 801af5e:	428a      	cmp	r2, r1
 801af60:	d100      	bne.n	801af64 <memmove+0x2a>
 801af62:	bd10      	pop	{r4, pc}
 801af64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801af68:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801af6c:	e7f7      	b.n	801af5e <memmove+0x24>

0801af6e <memset>:
 801af6e:	4402      	add	r2, r0
 801af70:	4603      	mov	r3, r0
 801af72:	4293      	cmp	r3, r2
 801af74:	d100      	bne.n	801af78 <memset+0xa>
 801af76:	4770      	bx	lr
 801af78:	f803 1b01 	strb.w	r1, [r3], #1
 801af7c:	e7f9      	b.n	801af72 <memset+0x4>

0801af7e <_raise_r>:
 801af7e:	291f      	cmp	r1, #31
 801af80:	b538      	push	{r3, r4, r5, lr}
 801af82:	4605      	mov	r5, r0
 801af84:	460c      	mov	r4, r1
 801af86:	d904      	bls.n	801af92 <_raise_r+0x14>
 801af88:	2316      	movs	r3, #22
 801af8a:	6003      	str	r3, [r0, #0]
 801af8c:	f04f 30ff 	mov.w	r0, #4294967295
 801af90:	bd38      	pop	{r3, r4, r5, pc}
 801af92:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801af94:	b112      	cbz	r2, 801af9c <_raise_r+0x1e>
 801af96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801af9a:	b94b      	cbnz	r3, 801afb0 <_raise_r+0x32>
 801af9c:	4628      	mov	r0, r5
 801af9e:	f000 f865 	bl	801b06c <_getpid_r>
 801afa2:	4622      	mov	r2, r4
 801afa4:	4601      	mov	r1, r0
 801afa6:	4628      	mov	r0, r5
 801afa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801afac:	f000 b84c 	b.w	801b048 <_kill_r>
 801afb0:	2b01      	cmp	r3, #1
 801afb2:	d00a      	beq.n	801afca <_raise_r+0x4c>
 801afb4:	1c59      	adds	r1, r3, #1
 801afb6:	d103      	bne.n	801afc0 <_raise_r+0x42>
 801afb8:	2316      	movs	r3, #22
 801afba:	6003      	str	r3, [r0, #0]
 801afbc:	2001      	movs	r0, #1
 801afbe:	e7e7      	b.n	801af90 <_raise_r+0x12>
 801afc0:	2100      	movs	r1, #0
 801afc2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801afc6:	4620      	mov	r0, r4
 801afc8:	4798      	blx	r3
 801afca:	2000      	movs	r0, #0
 801afcc:	e7e0      	b.n	801af90 <_raise_r+0x12>
	...

0801afd0 <raise>:
 801afd0:	4b02      	ldr	r3, [pc, #8]	@ (801afdc <raise+0xc>)
 801afd2:	4601      	mov	r1, r0
 801afd4:	6818      	ldr	r0, [r3, #0]
 801afd6:	f7ff bfd2 	b.w	801af7e <_raise_r>
 801afda:	bf00      	nop
 801afdc:	2400023c 	.word	0x2400023c

0801afe0 <_close_r>:
 801afe0:	b538      	push	{r3, r4, r5, lr}
 801afe2:	4d06      	ldr	r5, [pc, #24]	@ (801affc <_close_r+0x1c>)
 801afe4:	2300      	movs	r3, #0
 801afe6:	4604      	mov	r4, r0
 801afe8:	4608      	mov	r0, r1
 801afea:	602b      	str	r3, [r5, #0]
 801afec:	f7e9 f898 	bl	8004120 <_close>
 801aff0:	1c43      	adds	r3, r0, #1
 801aff2:	d102      	bne.n	801affa <_close_r+0x1a>
 801aff4:	682b      	ldr	r3, [r5, #0]
 801aff6:	b103      	cbz	r3, 801affa <_close_r+0x1a>
 801aff8:	6023      	str	r3, [r4, #0]
 801affa:	bd38      	pop	{r3, r4, r5, pc}
 801affc:	24003f44 	.word	0x24003f44

0801b000 <_lseek_r>:
 801b000:	b538      	push	{r3, r4, r5, lr}
 801b002:	4d07      	ldr	r5, [pc, #28]	@ (801b020 <_lseek_r+0x20>)
 801b004:	4604      	mov	r4, r0
 801b006:	4608      	mov	r0, r1
 801b008:	4611      	mov	r1, r2
 801b00a:	2200      	movs	r2, #0
 801b00c:	602a      	str	r2, [r5, #0]
 801b00e:	461a      	mov	r2, r3
 801b010:	f7e9 f8ad 	bl	800416e <_lseek>
 801b014:	1c43      	adds	r3, r0, #1
 801b016:	d102      	bne.n	801b01e <_lseek_r+0x1e>
 801b018:	682b      	ldr	r3, [r5, #0]
 801b01a:	b103      	cbz	r3, 801b01e <_lseek_r+0x1e>
 801b01c:	6023      	str	r3, [r4, #0]
 801b01e:	bd38      	pop	{r3, r4, r5, pc}
 801b020:	24003f44 	.word	0x24003f44

0801b024 <_read_r>:
 801b024:	b538      	push	{r3, r4, r5, lr}
 801b026:	4d07      	ldr	r5, [pc, #28]	@ (801b044 <_read_r+0x20>)
 801b028:	4604      	mov	r4, r0
 801b02a:	4608      	mov	r0, r1
 801b02c:	4611      	mov	r1, r2
 801b02e:	2200      	movs	r2, #0
 801b030:	602a      	str	r2, [r5, #0]
 801b032:	461a      	mov	r2, r3
 801b034:	f7e9 f83b 	bl	80040ae <_read>
 801b038:	1c43      	adds	r3, r0, #1
 801b03a:	d102      	bne.n	801b042 <_read_r+0x1e>
 801b03c:	682b      	ldr	r3, [r5, #0]
 801b03e:	b103      	cbz	r3, 801b042 <_read_r+0x1e>
 801b040:	6023      	str	r3, [r4, #0]
 801b042:	bd38      	pop	{r3, r4, r5, pc}
 801b044:	24003f44 	.word	0x24003f44

0801b048 <_kill_r>:
 801b048:	b538      	push	{r3, r4, r5, lr}
 801b04a:	4d07      	ldr	r5, [pc, #28]	@ (801b068 <_kill_r+0x20>)
 801b04c:	2300      	movs	r3, #0
 801b04e:	4604      	mov	r4, r0
 801b050:	4608      	mov	r0, r1
 801b052:	4611      	mov	r1, r2
 801b054:	602b      	str	r3, [r5, #0]
 801b056:	f7e9 f80f 	bl	8004078 <_kill>
 801b05a:	1c43      	adds	r3, r0, #1
 801b05c:	d102      	bne.n	801b064 <_kill_r+0x1c>
 801b05e:	682b      	ldr	r3, [r5, #0]
 801b060:	b103      	cbz	r3, 801b064 <_kill_r+0x1c>
 801b062:	6023      	str	r3, [r4, #0]
 801b064:	bd38      	pop	{r3, r4, r5, pc}
 801b066:	bf00      	nop
 801b068:	24003f44 	.word	0x24003f44

0801b06c <_getpid_r>:
 801b06c:	f7e8 bffc 	b.w	8004068 <_getpid>

0801b070 <_sbrk_r>:
 801b070:	b538      	push	{r3, r4, r5, lr}
 801b072:	4d06      	ldr	r5, [pc, #24]	@ (801b08c <_sbrk_r+0x1c>)
 801b074:	2300      	movs	r3, #0
 801b076:	4604      	mov	r4, r0
 801b078:	4608      	mov	r0, r1
 801b07a:	602b      	str	r3, [r5, #0]
 801b07c:	f7e9 f884 	bl	8004188 <_sbrk>
 801b080:	1c43      	adds	r3, r0, #1
 801b082:	d102      	bne.n	801b08a <_sbrk_r+0x1a>
 801b084:	682b      	ldr	r3, [r5, #0]
 801b086:	b103      	cbz	r3, 801b08a <_sbrk_r+0x1a>
 801b088:	6023      	str	r3, [r4, #0]
 801b08a:	bd38      	pop	{r3, r4, r5, pc}
 801b08c:	24003f44 	.word	0x24003f44

0801b090 <_write_r>:
 801b090:	b538      	push	{r3, r4, r5, lr}
 801b092:	4d07      	ldr	r5, [pc, #28]	@ (801b0b0 <_write_r+0x20>)
 801b094:	4604      	mov	r4, r0
 801b096:	4608      	mov	r0, r1
 801b098:	4611      	mov	r1, r2
 801b09a:	2200      	movs	r2, #0
 801b09c:	602a      	str	r2, [r5, #0]
 801b09e:	461a      	mov	r2, r3
 801b0a0:	f7e9 f822 	bl	80040e8 <_write>
 801b0a4:	1c43      	adds	r3, r0, #1
 801b0a6:	d102      	bne.n	801b0ae <_write_r+0x1e>
 801b0a8:	682b      	ldr	r3, [r5, #0]
 801b0aa:	b103      	cbz	r3, 801b0ae <_write_r+0x1e>
 801b0ac:	6023      	str	r3, [r4, #0]
 801b0ae:	bd38      	pop	{r3, r4, r5, pc}
 801b0b0:	24003f44 	.word	0x24003f44

0801b0b4 <__errno>:
 801b0b4:	4b01      	ldr	r3, [pc, #4]	@ (801b0bc <__errno+0x8>)
 801b0b6:	6818      	ldr	r0, [r3, #0]
 801b0b8:	4770      	bx	lr
 801b0ba:	bf00      	nop
 801b0bc:	2400023c 	.word	0x2400023c

0801b0c0 <__libc_init_array>:
 801b0c0:	b570      	push	{r4, r5, r6, lr}
 801b0c2:	4d0d      	ldr	r5, [pc, #52]	@ (801b0f8 <__libc_init_array+0x38>)
 801b0c4:	4c0d      	ldr	r4, [pc, #52]	@ (801b0fc <__libc_init_array+0x3c>)
 801b0c6:	1b64      	subs	r4, r4, r5
 801b0c8:	10a4      	asrs	r4, r4, #2
 801b0ca:	2600      	movs	r6, #0
 801b0cc:	42a6      	cmp	r6, r4
 801b0ce:	d109      	bne.n	801b0e4 <__libc_init_array+0x24>
 801b0d0:	4d0b      	ldr	r5, [pc, #44]	@ (801b100 <__libc_init_array+0x40>)
 801b0d2:	4c0c      	ldr	r4, [pc, #48]	@ (801b104 <__libc_init_array+0x44>)
 801b0d4:	f000 fe66 	bl	801bda4 <_init>
 801b0d8:	1b64      	subs	r4, r4, r5
 801b0da:	10a4      	asrs	r4, r4, #2
 801b0dc:	2600      	movs	r6, #0
 801b0de:	42a6      	cmp	r6, r4
 801b0e0:	d105      	bne.n	801b0ee <__libc_init_array+0x2e>
 801b0e2:	bd70      	pop	{r4, r5, r6, pc}
 801b0e4:	f855 3b04 	ldr.w	r3, [r5], #4
 801b0e8:	4798      	blx	r3
 801b0ea:	3601      	adds	r6, #1
 801b0ec:	e7ee      	b.n	801b0cc <__libc_init_array+0xc>
 801b0ee:	f855 3b04 	ldr.w	r3, [r5], #4
 801b0f2:	4798      	blx	r3
 801b0f4:	3601      	adds	r6, #1
 801b0f6:	e7f2      	b.n	801b0de <__libc_init_array+0x1e>
 801b0f8:	0801ceb0 	.word	0x0801ceb0
 801b0fc:	0801ceb0 	.word	0x0801ceb0
 801b100:	0801ceb0 	.word	0x0801ceb0
 801b104:	0801cec4 	.word	0x0801cec4

0801b108 <__retarget_lock_init_recursive>:
 801b108:	4770      	bx	lr

0801b10a <__retarget_lock_acquire_recursive>:
 801b10a:	4770      	bx	lr

0801b10c <__retarget_lock_release_recursive>:
 801b10c:	4770      	bx	lr

0801b10e <memcpy>:
 801b10e:	440a      	add	r2, r1
 801b110:	4291      	cmp	r1, r2
 801b112:	f100 33ff 	add.w	r3, r0, #4294967295
 801b116:	d100      	bne.n	801b11a <memcpy+0xc>
 801b118:	4770      	bx	lr
 801b11a:	b510      	push	{r4, lr}
 801b11c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b120:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b124:	4291      	cmp	r1, r2
 801b126:	d1f9      	bne.n	801b11c <memcpy+0xe>
 801b128:	bd10      	pop	{r4, pc}
	...

0801b12c <_free_r>:
 801b12c:	b538      	push	{r3, r4, r5, lr}
 801b12e:	4605      	mov	r5, r0
 801b130:	2900      	cmp	r1, #0
 801b132:	d041      	beq.n	801b1b8 <_free_r+0x8c>
 801b134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b138:	1f0c      	subs	r4, r1, #4
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	bfb8      	it	lt
 801b13e:	18e4      	addlt	r4, r4, r3
 801b140:	f7ff fd6c 	bl	801ac1c <__malloc_lock>
 801b144:	4a1d      	ldr	r2, [pc, #116]	@ (801b1bc <_free_r+0x90>)
 801b146:	6813      	ldr	r3, [r2, #0]
 801b148:	b933      	cbnz	r3, 801b158 <_free_r+0x2c>
 801b14a:	6063      	str	r3, [r4, #4]
 801b14c:	6014      	str	r4, [r2, #0]
 801b14e:	4628      	mov	r0, r5
 801b150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b154:	f7ff bd68 	b.w	801ac28 <__malloc_unlock>
 801b158:	42a3      	cmp	r3, r4
 801b15a:	d908      	bls.n	801b16e <_free_r+0x42>
 801b15c:	6820      	ldr	r0, [r4, #0]
 801b15e:	1821      	adds	r1, r4, r0
 801b160:	428b      	cmp	r3, r1
 801b162:	bf01      	itttt	eq
 801b164:	6819      	ldreq	r1, [r3, #0]
 801b166:	685b      	ldreq	r3, [r3, #4]
 801b168:	1809      	addeq	r1, r1, r0
 801b16a:	6021      	streq	r1, [r4, #0]
 801b16c:	e7ed      	b.n	801b14a <_free_r+0x1e>
 801b16e:	461a      	mov	r2, r3
 801b170:	685b      	ldr	r3, [r3, #4]
 801b172:	b10b      	cbz	r3, 801b178 <_free_r+0x4c>
 801b174:	42a3      	cmp	r3, r4
 801b176:	d9fa      	bls.n	801b16e <_free_r+0x42>
 801b178:	6811      	ldr	r1, [r2, #0]
 801b17a:	1850      	adds	r0, r2, r1
 801b17c:	42a0      	cmp	r0, r4
 801b17e:	d10b      	bne.n	801b198 <_free_r+0x6c>
 801b180:	6820      	ldr	r0, [r4, #0]
 801b182:	4401      	add	r1, r0
 801b184:	1850      	adds	r0, r2, r1
 801b186:	4283      	cmp	r3, r0
 801b188:	6011      	str	r1, [r2, #0]
 801b18a:	d1e0      	bne.n	801b14e <_free_r+0x22>
 801b18c:	6818      	ldr	r0, [r3, #0]
 801b18e:	685b      	ldr	r3, [r3, #4]
 801b190:	6053      	str	r3, [r2, #4]
 801b192:	4408      	add	r0, r1
 801b194:	6010      	str	r0, [r2, #0]
 801b196:	e7da      	b.n	801b14e <_free_r+0x22>
 801b198:	d902      	bls.n	801b1a0 <_free_r+0x74>
 801b19a:	230c      	movs	r3, #12
 801b19c:	602b      	str	r3, [r5, #0]
 801b19e:	e7d6      	b.n	801b14e <_free_r+0x22>
 801b1a0:	6820      	ldr	r0, [r4, #0]
 801b1a2:	1821      	adds	r1, r4, r0
 801b1a4:	428b      	cmp	r3, r1
 801b1a6:	bf04      	itt	eq
 801b1a8:	6819      	ldreq	r1, [r3, #0]
 801b1aa:	685b      	ldreq	r3, [r3, #4]
 801b1ac:	6063      	str	r3, [r4, #4]
 801b1ae:	bf04      	itt	eq
 801b1b0:	1809      	addeq	r1, r1, r0
 801b1b2:	6021      	streq	r1, [r4, #0]
 801b1b4:	6054      	str	r4, [r2, #4]
 801b1b6:	e7ca      	b.n	801b14e <_free_r+0x22>
 801b1b8:	bd38      	pop	{r3, r4, r5, pc}
 801b1ba:	bf00      	nop
 801b1bc:	24003e04 	.word	0x24003e04

0801b1c0 <_malloc_usable_size_r>:
 801b1c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b1c4:	1f18      	subs	r0, r3, #4
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	bfbc      	itt	lt
 801b1ca:	580b      	ldrlt	r3, [r1, r0]
 801b1cc:	18c0      	addlt	r0, r0, r3
 801b1ce:	4770      	bx	lr

0801b1d0 <__ssputs_r>:
 801b1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b1d4:	688e      	ldr	r6, [r1, #8]
 801b1d6:	461f      	mov	r7, r3
 801b1d8:	42be      	cmp	r6, r7
 801b1da:	680b      	ldr	r3, [r1, #0]
 801b1dc:	4682      	mov	sl, r0
 801b1de:	460c      	mov	r4, r1
 801b1e0:	4690      	mov	r8, r2
 801b1e2:	d82d      	bhi.n	801b240 <__ssputs_r+0x70>
 801b1e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b1e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b1ec:	d026      	beq.n	801b23c <__ssputs_r+0x6c>
 801b1ee:	6965      	ldr	r5, [r4, #20]
 801b1f0:	6909      	ldr	r1, [r1, #16]
 801b1f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b1f6:	eba3 0901 	sub.w	r9, r3, r1
 801b1fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b1fe:	1c7b      	adds	r3, r7, #1
 801b200:	444b      	add	r3, r9
 801b202:	106d      	asrs	r5, r5, #1
 801b204:	429d      	cmp	r5, r3
 801b206:	bf38      	it	cc
 801b208:	461d      	movcc	r5, r3
 801b20a:	0553      	lsls	r3, r2, #21
 801b20c:	d527      	bpl.n	801b25e <__ssputs_r+0x8e>
 801b20e:	4629      	mov	r1, r5
 801b210:	f7ff fc84 	bl	801ab1c <_malloc_r>
 801b214:	4606      	mov	r6, r0
 801b216:	b360      	cbz	r0, 801b272 <__ssputs_r+0xa2>
 801b218:	6921      	ldr	r1, [r4, #16]
 801b21a:	464a      	mov	r2, r9
 801b21c:	f7ff ff77 	bl	801b10e <memcpy>
 801b220:	89a3      	ldrh	r3, [r4, #12]
 801b222:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b22a:	81a3      	strh	r3, [r4, #12]
 801b22c:	6126      	str	r6, [r4, #16]
 801b22e:	6165      	str	r5, [r4, #20]
 801b230:	444e      	add	r6, r9
 801b232:	eba5 0509 	sub.w	r5, r5, r9
 801b236:	6026      	str	r6, [r4, #0]
 801b238:	60a5      	str	r5, [r4, #8]
 801b23a:	463e      	mov	r6, r7
 801b23c:	42be      	cmp	r6, r7
 801b23e:	d900      	bls.n	801b242 <__ssputs_r+0x72>
 801b240:	463e      	mov	r6, r7
 801b242:	6820      	ldr	r0, [r4, #0]
 801b244:	4632      	mov	r2, r6
 801b246:	4641      	mov	r1, r8
 801b248:	f7ff fe77 	bl	801af3a <memmove>
 801b24c:	68a3      	ldr	r3, [r4, #8]
 801b24e:	1b9b      	subs	r3, r3, r6
 801b250:	60a3      	str	r3, [r4, #8]
 801b252:	6823      	ldr	r3, [r4, #0]
 801b254:	4433      	add	r3, r6
 801b256:	6023      	str	r3, [r4, #0]
 801b258:	2000      	movs	r0, #0
 801b25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b25e:	462a      	mov	r2, r5
 801b260:	f7ff fcf0 	bl	801ac44 <_realloc_r>
 801b264:	4606      	mov	r6, r0
 801b266:	2800      	cmp	r0, #0
 801b268:	d1e0      	bne.n	801b22c <__ssputs_r+0x5c>
 801b26a:	6921      	ldr	r1, [r4, #16]
 801b26c:	4650      	mov	r0, sl
 801b26e:	f7ff ff5d 	bl	801b12c <_free_r>
 801b272:	230c      	movs	r3, #12
 801b274:	f8ca 3000 	str.w	r3, [sl]
 801b278:	89a3      	ldrh	r3, [r4, #12]
 801b27a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b27e:	81a3      	strh	r3, [r4, #12]
 801b280:	f04f 30ff 	mov.w	r0, #4294967295
 801b284:	e7e9      	b.n	801b25a <__ssputs_r+0x8a>
	...

0801b288 <_svfiprintf_r>:
 801b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b28c:	4698      	mov	r8, r3
 801b28e:	898b      	ldrh	r3, [r1, #12]
 801b290:	061b      	lsls	r3, r3, #24
 801b292:	b09d      	sub	sp, #116	@ 0x74
 801b294:	4607      	mov	r7, r0
 801b296:	460d      	mov	r5, r1
 801b298:	4614      	mov	r4, r2
 801b29a:	d510      	bpl.n	801b2be <_svfiprintf_r+0x36>
 801b29c:	690b      	ldr	r3, [r1, #16]
 801b29e:	b973      	cbnz	r3, 801b2be <_svfiprintf_r+0x36>
 801b2a0:	2140      	movs	r1, #64	@ 0x40
 801b2a2:	f7ff fc3b 	bl	801ab1c <_malloc_r>
 801b2a6:	6028      	str	r0, [r5, #0]
 801b2a8:	6128      	str	r0, [r5, #16]
 801b2aa:	b930      	cbnz	r0, 801b2ba <_svfiprintf_r+0x32>
 801b2ac:	230c      	movs	r3, #12
 801b2ae:	603b      	str	r3, [r7, #0]
 801b2b0:	f04f 30ff 	mov.w	r0, #4294967295
 801b2b4:	b01d      	add	sp, #116	@ 0x74
 801b2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2ba:	2340      	movs	r3, #64	@ 0x40
 801b2bc:	616b      	str	r3, [r5, #20]
 801b2be:	2300      	movs	r3, #0
 801b2c0:	9309      	str	r3, [sp, #36]	@ 0x24
 801b2c2:	2320      	movs	r3, #32
 801b2c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b2c8:	f8cd 800c 	str.w	r8, [sp, #12]
 801b2cc:	2330      	movs	r3, #48	@ 0x30
 801b2ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801b46c <_svfiprintf_r+0x1e4>
 801b2d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b2d6:	f04f 0901 	mov.w	r9, #1
 801b2da:	4623      	mov	r3, r4
 801b2dc:	469a      	mov	sl, r3
 801b2de:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b2e2:	b10a      	cbz	r2, 801b2e8 <_svfiprintf_r+0x60>
 801b2e4:	2a25      	cmp	r2, #37	@ 0x25
 801b2e6:	d1f9      	bne.n	801b2dc <_svfiprintf_r+0x54>
 801b2e8:	ebba 0b04 	subs.w	fp, sl, r4
 801b2ec:	d00b      	beq.n	801b306 <_svfiprintf_r+0x7e>
 801b2ee:	465b      	mov	r3, fp
 801b2f0:	4622      	mov	r2, r4
 801b2f2:	4629      	mov	r1, r5
 801b2f4:	4638      	mov	r0, r7
 801b2f6:	f7ff ff6b 	bl	801b1d0 <__ssputs_r>
 801b2fa:	3001      	adds	r0, #1
 801b2fc:	f000 80a7 	beq.w	801b44e <_svfiprintf_r+0x1c6>
 801b300:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b302:	445a      	add	r2, fp
 801b304:	9209      	str	r2, [sp, #36]	@ 0x24
 801b306:	f89a 3000 	ldrb.w	r3, [sl]
 801b30a:	2b00      	cmp	r3, #0
 801b30c:	f000 809f 	beq.w	801b44e <_svfiprintf_r+0x1c6>
 801b310:	2300      	movs	r3, #0
 801b312:	f04f 32ff 	mov.w	r2, #4294967295
 801b316:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b31a:	f10a 0a01 	add.w	sl, sl, #1
 801b31e:	9304      	str	r3, [sp, #16]
 801b320:	9307      	str	r3, [sp, #28]
 801b322:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b326:	931a      	str	r3, [sp, #104]	@ 0x68
 801b328:	4654      	mov	r4, sl
 801b32a:	2205      	movs	r2, #5
 801b32c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b330:	484e      	ldr	r0, [pc, #312]	@ (801b46c <_svfiprintf_r+0x1e4>)
 801b332:	f7e4 ffed 	bl	8000310 <memchr>
 801b336:	9a04      	ldr	r2, [sp, #16]
 801b338:	b9d8      	cbnz	r0, 801b372 <_svfiprintf_r+0xea>
 801b33a:	06d0      	lsls	r0, r2, #27
 801b33c:	bf44      	itt	mi
 801b33e:	2320      	movmi	r3, #32
 801b340:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b344:	0711      	lsls	r1, r2, #28
 801b346:	bf44      	itt	mi
 801b348:	232b      	movmi	r3, #43	@ 0x2b
 801b34a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b34e:	f89a 3000 	ldrb.w	r3, [sl]
 801b352:	2b2a      	cmp	r3, #42	@ 0x2a
 801b354:	d015      	beq.n	801b382 <_svfiprintf_r+0xfa>
 801b356:	9a07      	ldr	r2, [sp, #28]
 801b358:	4654      	mov	r4, sl
 801b35a:	2000      	movs	r0, #0
 801b35c:	f04f 0c0a 	mov.w	ip, #10
 801b360:	4621      	mov	r1, r4
 801b362:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b366:	3b30      	subs	r3, #48	@ 0x30
 801b368:	2b09      	cmp	r3, #9
 801b36a:	d94b      	bls.n	801b404 <_svfiprintf_r+0x17c>
 801b36c:	b1b0      	cbz	r0, 801b39c <_svfiprintf_r+0x114>
 801b36e:	9207      	str	r2, [sp, #28]
 801b370:	e014      	b.n	801b39c <_svfiprintf_r+0x114>
 801b372:	eba0 0308 	sub.w	r3, r0, r8
 801b376:	fa09 f303 	lsl.w	r3, r9, r3
 801b37a:	4313      	orrs	r3, r2
 801b37c:	9304      	str	r3, [sp, #16]
 801b37e:	46a2      	mov	sl, r4
 801b380:	e7d2      	b.n	801b328 <_svfiprintf_r+0xa0>
 801b382:	9b03      	ldr	r3, [sp, #12]
 801b384:	1d19      	adds	r1, r3, #4
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	9103      	str	r1, [sp, #12]
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	bfbb      	ittet	lt
 801b38e:	425b      	neglt	r3, r3
 801b390:	f042 0202 	orrlt.w	r2, r2, #2
 801b394:	9307      	strge	r3, [sp, #28]
 801b396:	9307      	strlt	r3, [sp, #28]
 801b398:	bfb8      	it	lt
 801b39a:	9204      	strlt	r2, [sp, #16]
 801b39c:	7823      	ldrb	r3, [r4, #0]
 801b39e:	2b2e      	cmp	r3, #46	@ 0x2e
 801b3a0:	d10a      	bne.n	801b3b8 <_svfiprintf_r+0x130>
 801b3a2:	7863      	ldrb	r3, [r4, #1]
 801b3a4:	2b2a      	cmp	r3, #42	@ 0x2a
 801b3a6:	d132      	bne.n	801b40e <_svfiprintf_r+0x186>
 801b3a8:	9b03      	ldr	r3, [sp, #12]
 801b3aa:	1d1a      	adds	r2, r3, #4
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	9203      	str	r2, [sp, #12]
 801b3b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b3b4:	3402      	adds	r4, #2
 801b3b6:	9305      	str	r3, [sp, #20]
 801b3b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801b47c <_svfiprintf_r+0x1f4>
 801b3bc:	7821      	ldrb	r1, [r4, #0]
 801b3be:	2203      	movs	r2, #3
 801b3c0:	4650      	mov	r0, sl
 801b3c2:	f7e4 ffa5 	bl	8000310 <memchr>
 801b3c6:	b138      	cbz	r0, 801b3d8 <_svfiprintf_r+0x150>
 801b3c8:	9b04      	ldr	r3, [sp, #16]
 801b3ca:	eba0 000a 	sub.w	r0, r0, sl
 801b3ce:	2240      	movs	r2, #64	@ 0x40
 801b3d0:	4082      	lsls	r2, r0
 801b3d2:	4313      	orrs	r3, r2
 801b3d4:	3401      	adds	r4, #1
 801b3d6:	9304      	str	r3, [sp, #16]
 801b3d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b3dc:	4824      	ldr	r0, [pc, #144]	@ (801b470 <_svfiprintf_r+0x1e8>)
 801b3de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b3e2:	2206      	movs	r2, #6
 801b3e4:	f7e4 ff94 	bl	8000310 <memchr>
 801b3e8:	2800      	cmp	r0, #0
 801b3ea:	d036      	beq.n	801b45a <_svfiprintf_r+0x1d2>
 801b3ec:	4b21      	ldr	r3, [pc, #132]	@ (801b474 <_svfiprintf_r+0x1ec>)
 801b3ee:	bb1b      	cbnz	r3, 801b438 <_svfiprintf_r+0x1b0>
 801b3f0:	9b03      	ldr	r3, [sp, #12]
 801b3f2:	3307      	adds	r3, #7
 801b3f4:	f023 0307 	bic.w	r3, r3, #7
 801b3f8:	3308      	adds	r3, #8
 801b3fa:	9303      	str	r3, [sp, #12]
 801b3fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b3fe:	4433      	add	r3, r6
 801b400:	9309      	str	r3, [sp, #36]	@ 0x24
 801b402:	e76a      	b.n	801b2da <_svfiprintf_r+0x52>
 801b404:	fb0c 3202 	mla	r2, ip, r2, r3
 801b408:	460c      	mov	r4, r1
 801b40a:	2001      	movs	r0, #1
 801b40c:	e7a8      	b.n	801b360 <_svfiprintf_r+0xd8>
 801b40e:	2300      	movs	r3, #0
 801b410:	3401      	adds	r4, #1
 801b412:	9305      	str	r3, [sp, #20]
 801b414:	4619      	mov	r1, r3
 801b416:	f04f 0c0a 	mov.w	ip, #10
 801b41a:	4620      	mov	r0, r4
 801b41c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b420:	3a30      	subs	r2, #48	@ 0x30
 801b422:	2a09      	cmp	r2, #9
 801b424:	d903      	bls.n	801b42e <_svfiprintf_r+0x1a6>
 801b426:	2b00      	cmp	r3, #0
 801b428:	d0c6      	beq.n	801b3b8 <_svfiprintf_r+0x130>
 801b42a:	9105      	str	r1, [sp, #20]
 801b42c:	e7c4      	b.n	801b3b8 <_svfiprintf_r+0x130>
 801b42e:	fb0c 2101 	mla	r1, ip, r1, r2
 801b432:	4604      	mov	r4, r0
 801b434:	2301      	movs	r3, #1
 801b436:	e7f0      	b.n	801b41a <_svfiprintf_r+0x192>
 801b438:	ab03      	add	r3, sp, #12
 801b43a:	9300      	str	r3, [sp, #0]
 801b43c:	462a      	mov	r2, r5
 801b43e:	4b0e      	ldr	r3, [pc, #56]	@ (801b478 <_svfiprintf_r+0x1f0>)
 801b440:	a904      	add	r1, sp, #16
 801b442:	4638      	mov	r0, r7
 801b444:	f3af 8000 	nop.w
 801b448:	1c42      	adds	r2, r0, #1
 801b44a:	4606      	mov	r6, r0
 801b44c:	d1d6      	bne.n	801b3fc <_svfiprintf_r+0x174>
 801b44e:	89ab      	ldrh	r3, [r5, #12]
 801b450:	065b      	lsls	r3, r3, #25
 801b452:	f53f af2d 	bmi.w	801b2b0 <_svfiprintf_r+0x28>
 801b456:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b458:	e72c      	b.n	801b2b4 <_svfiprintf_r+0x2c>
 801b45a:	ab03      	add	r3, sp, #12
 801b45c:	9300      	str	r3, [sp, #0]
 801b45e:	462a      	mov	r2, r5
 801b460:	4b05      	ldr	r3, [pc, #20]	@ (801b478 <_svfiprintf_r+0x1f0>)
 801b462:	a904      	add	r1, sp, #16
 801b464:	4638      	mov	r0, r7
 801b466:	f000 f9bb 	bl	801b7e0 <_printf_i>
 801b46a:	e7ed      	b.n	801b448 <_svfiprintf_r+0x1c0>
 801b46c:	0801cb22 	.word	0x0801cb22
 801b470:	0801cb2c 	.word	0x0801cb2c
 801b474:	00000000 	.word	0x00000000
 801b478:	0801b1d1 	.word	0x0801b1d1
 801b47c:	0801cb28 	.word	0x0801cb28

0801b480 <__sfputc_r>:
 801b480:	6893      	ldr	r3, [r2, #8]
 801b482:	3b01      	subs	r3, #1
 801b484:	2b00      	cmp	r3, #0
 801b486:	b410      	push	{r4}
 801b488:	6093      	str	r3, [r2, #8]
 801b48a:	da08      	bge.n	801b49e <__sfputc_r+0x1e>
 801b48c:	6994      	ldr	r4, [r2, #24]
 801b48e:	42a3      	cmp	r3, r4
 801b490:	db01      	blt.n	801b496 <__sfputc_r+0x16>
 801b492:	290a      	cmp	r1, #10
 801b494:	d103      	bne.n	801b49e <__sfputc_r+0x1e>
 801b496:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b49a:	f000 bb6b 	b.w	801bb74 <__swbuf_r>
 801b49e:	6813      	ldr	r3, [r2, #0]
 801b4a0:	1c58      	adds	r0, r3, #1
 801b4a2:	6010      	str	r0, [r2, #0]
 801b4a4:	7019      	strb	r1, [r3, #0]
 801b4a6:	4608      	mov	r0, r1
 801b4a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b4ac:	4770      	bx	lr

0801b4ae <__sfputs_r>:
 801b4ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4b0:	4606      	mov	r6, r0
 801b4b2:	460f      	mov	r7, r1
 801b4b4:	4614      	mov	r4, r2
 801b4b6:	18d5      	adds	r5, r2, r3
 801b4b8:	42ac      	cmp	r4, r5
 801b4ba:	d101      	bne.n	801b4c0 <__sfputs_r+0x12>
 801b4bc:	2000      	movs	r0, #0
 801b4be:	e007      	b.n	801b4d0 <__sfputs_r+0x22>
 801b4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b4c4:	463a      	mov	r2, r7
 801b4c6:	4630      	mov	r0, r6
 801b4c8:	f7ff ffda 	bl	801b480 <__sfputc_r>
 801b4cc:	1c43      	adds	r3, r0, #1
 801b4ce:	d1f3      	bne.n	801b4b8 <__sfputs_r+0xa>
 801b4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b4d4 <_vfiprintf_r>:
 801b4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4d8:	460d      	mov	r5, r1
 801b4da:	b09d      	sub	sp, #116	@ 0x74
 801b4dc:	4614      	mov	r4, r2
 801b4de:	4698      	mov	r8, r3
 801b4e0:	4606      	mov	r6, r0
 801b4e2:	b118      	cbz	r0, 801b4ec <_vfiprintf_r+0x18>
 801b4e4:	6a03      	ldr	r3, [r0, #32]
 801b4e6:	b90b      	cbnz	r3, 801b4ec <_vfiprintf_r+0x18>
 801b4e8:	f7ff fc66 	bl	801adb8 <__sinit>
 801b4ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b4ee:	07d9      	lsls	r1, r3, #31
 801b4f0:	d405      	bmi.n	801b4fe <_vfiprintf_r+0x2a>
 801b4f2:	89ab      	ldrh	r3, [r5, #12]
 801b4f4:	059a      	lsls	r2, r3, #22
 801b4f6:	d402      	bmi.n	801b4fe <_vfiprintf_r+0x2a>
 801b4f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b4fa:	f7ff fe06 	bl	801b10a <__retarget_lock_acquire_recursive>
 801b4fe:	89ab      	ldrh	r3, [r5, #12]
 801b500:	071b      	lsls	r3, r3, #28
 801b502:	d501      	bpl.n	801b508 <_vfiprintf_r+0x34>
 801b504:	692b      	ldr	r3, [r5, #16]
 801b506:	b99b      	cbnz	r3, 801b530 <_vfiprintf_r+0x5c>
 801b508:	4629      	mov	r1, r5
 801b50a:	4630      	mov	r0, r6
 801b50c:	f000 fb70 	bl	801bbf0 <__swsetup_r>
 801b510:	b170      	cbz	r0, 801b530 <_vfiprintf_r+0x5c>
 801b512:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b514:	07dc      	lsls	r4, r3, #31
 801b516:	d504      	bpl.n	801b522 <_vfiprintf_r+0x4e>
 801b518:	f04f 30ff 	mov.w	r0, #4294967295
 801b51c:	b01d      	add	sp, #116	@ 0x74
 801b51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b522:	89ab      	ldrh	r3, [r5, #12]
 801b524:	0598      	lsls	r0, r3, #22
 801b526:	d4f7      	bmi.n	801b518 <_vfiprintf_r+0x44>
 801b528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b52a:	f7ff fdef 	bl	801b10c <__retarget_lock_release_recursive>
 801b52e:	e7f3      	b.n	801b518 <_vfiprintf_r+0x44>
 801b530:	2300      	movs	r3, #0
 801b532:	9309      	str	r3, [sp, #36]	@ 0x24
 801b534:	2320      	movs	r3, #32
 801b536:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b53a:	f8cd 800c 	str.w	r8, [sp, #12]
 801b53e:	2330      	movs	r3, #48	@ 0x30
 801b540:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b6f0 <_vfiprintf_r+0x21c>
 801b544:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b548:	f04f 0901 	mov.w	r9, #1
 801b54c:	4623      	mov	r3, r4
 801b54e:	469a      	mov	sl, r3
 801b550:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b554:	b10a      	cbz	r2, 801b55a <_vfiprintf_r+0x86>
 801b556:	2a25      	cmp	r2, #37	@ 0x25
 801b558:	d1f9      	bne.n	801b54e <_vfiprintf_r+0x7a>
 801b55a:	ebba 0b04 	subs.w	fp, sl, r4
 801b55e:	d00b      	beq.n	801b578 <_vfiprintf_r+0xa4>
 801b560:	465b      	mov	r3, fp
 801b562:	4622      	mov	r2, r4
 801b564:	4629      	mov	r1, r5
 801b566:	4630      	mov	r0, r6
 801b568:	f7ff ffa1 	bl	801b4ae <__sfputs_r>
 801b56c:	3001      	adds	r0, #1
 801b56e:	f000 80a7 	beq.w	801b6c0 <_vfiprintf_r+0x1ec>
 801b572:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b574:	445a      	add	r2, fp
 801b576:	9209      	str	r2, [sp, #36]	@ 0x24
 801b578:	f89a 3000 	ldrb.w	r3, [sl]
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	f000 809f 	beq.w	801b6c0 <_vfiprintf_r+0x1ec>
 801b582:	2300      	movs	r3, #0
 801b584:	f04f 32ff 	mov.w	r2, #4294967295
 801b588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b58c:	f10a 0a01 	add.w	sl, sl, #1
 801b590:	9304      	str	r3, [sp, #16]
 801b592:	9307      	str	r3, [sp, #28]
 801b594:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b598:	931a      	str	r3, [sp, #104]	@ 0x68
 801b59a:	4654      	mov	r4, sl
 801b59c:	2205      	movs	r2, #5
 801b59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b5a2:	4853      	ldr	r0, [pc, #332]	@ (801b6f0 <_vfiprintf_r+0x21c>)
 801b5a4:	f7e4 feb4 	bl	8000310 <memchr>
 801b5a8:	9a04      	ldr	r2, [sp, #16]
 801b5aa:	b9d8      	cbnz	r0, 801b5e4 <_vfiprintf_r+0x110>
 801b5ac:	06d1      	lsls	r1, r2, #27
 801b5ae:	bf44      	itt	mi
 801b5b0:	2320      	movmi	r3, #32
 801b5b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b5b6:	0713      	lsls	r3, r2, #28
 801b5b8:	bf44      	itt	mi
 801b5ba:	232b      	movmi	r3, #43	@ 0x2b
 801b5bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b5c0:	f89a 3000 	ldrb.w	r3, [sl]
 801b5c4:	2b2a      	cmp	r3, #42	@ 0x2a
 801b5c6:	d015      	beq.n	801b5f4 <_vfiprintf_r+0x120>
 801b5c8:	9a07      	ldr	r2, [sp, #28]
 801b5ca:	4654      	mov	r4, sl
 801b5cc:	2000      	movs	r0, #0
 801b5ce:	f04f 0c0a 	mov.w	ip, #10
 801b5d2:	4621      	mov	r1, r4
 801b5d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b5d8:	3b30      	subs	r3, #48	@ 0x30
 801b5da:	2b09      	cmp	r3, #9
 801b5dc:	d94b      	bls.n	801b676 <_vfiprintf_r+0x1a2>
 801b5de:	b1b0      	cbz	r0, 801b60e <_vfiprintf_r+0x13a>
 801b5e0:	9207      	str	r2, [sp, #28]
 801b5e2:	e014      	b.n	801b60e <_vfiprintf_r+0x13a>
 801b5e4:	eba0 0308 	sub.w	r3, r0, r8
 801b5e8:	fa09 f303 	lsl.w	r3, r9, r3
 801b5ec:	4313      	orrs	r3, r2
 801b5ee:	9304      	str	r3, [sp, #16]
 801b5f0:	46a2      	mov	sl, r4
 801b5f2:	e7d2      	b.n	801b59a <_vfiprintf_r+0xc6>
 801b5f4:	9b03      	ldr	r3, [sp, #12]
 801b5f6:	1d19      	adds	r1, r3, #4
 801b5f8:	681b      	ldr	r3, [r3, #0]
 801b5fa:	9103      	str	r1, [sp, #12]
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	bfbb      	ittet	lt
 801b600:	425b      	neglt	r3, r3
 801b602:	f042 0202 	orrlt.w	r2, r2, #2
 801b606:	9307      	strge	r3, [sp, #28]
 801b608:	9307      	strlt	r3, [sp, #28]
 801b60a:	bfb8      	it	lt
 801b60c:	9204      	strlt	r2, [sp, #16]
 801b60e:	7823      	ldrb	r3, [r4, #0]
 801b610:	2b2e      	cmp	r3, #46	@ 0x2e
 801b612:	d10a      	bne.n	801b62a <_vfiprintf_r+0x156>
 801b614:	7863      	ldrb	r3, [r4, #1]
 801b616:	2b2a      	cmp	r3, #42	@ 0x2a
 801b618:	d132      	bne.n	801b680 <_vfiprintf_r+0x1ac>
 801b61a:	9b03      	ldr	r3, [sp, #12]
 801b61c:	1d1a      	adds	r2, r3, #4
 801b61e:	681b      	ldr	r3, [r3, #0]
 801b620:	9203      	str	r2, [sp, #12]
 801b622:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b626:	3402      	adds	r4, #2
 801b628:	9305      	str	r3, [sp, #20]
 801b62a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b700 <_vfiprintf_r+0x22c>
 801b62e:	7821      	ldrb	r1, [r4, #0]
 801b630:	2203      	movs	r2, #3
 801b632:	4650      	mov	r0, sl
 801b634:	f7e4 fe6c 	bl	8000310 <memchr>
 801b638:	b138      	cbz	r0, 801b64a <_vfiprintf_r+0x176>
 801b63a:	9b04      	ldr	r3, [sp, #16]
 801b63c:	eba0 000a 	sub.w	r0, r0, sl
 801b640:	2240      	movs	r2, #64	@ 0x40
 801b642:	4082      	lsls	r2, r0
 801b644:	4313      	orrs	r3, r2
 801b646:	3401      	adds	r4, #1
 801b648:	9304      	str	r3, [sp, #16]
 801b64a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b64e:	4829      	ldr	r0, [pc, #164]	@ (801b6f4 <_vfiprintf_r+0x220>)
 801b650:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b654:	2206      	movs	r2, #6
 801b656:	f7e4 fe5b 	bl	8000310 <memchr>
 801b65a:	2800      	cmp	r0, #0
 801b65c:	d03f      	beq.n	801b6de <_vfiprintf_r+0x20a>
 801b65e:	4b26      	ldr	r3, [pc, #152]	@ (801b6f8 <_vfiprintf_r+0x224>)
 801b660:	bb1b      	cbnz	r3, 801b6aa <_vfiprintf_r+0x1d6>
 801b662:	9b03      	ldr	r3, [sp, #12]
 801b664:	3307      	adds	r3, #7
 801b666:	f023 0307 	bic.w	r3, r3, #7
 801b66a:	3308      	adds	r3, #8
 801b66c:	9303      	str	r3, [sp, #12]
 801b66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b670:	443b      	add	r3, r7
 801b672:	9309      	str	r3, [sp, #36]	@ 0x24
 801b674:	e76a      	b.n	801b54c <_vfiprintf_r+0x78>
 801b676:	fb0c 3202 	mla	r2, ip, r2, r3
 801b67a:	460c      	mov	r4, r1
 801b67c:	2001      	movs	r0, #1
 801b67e:	e7a8      	b.n	801b5d2 <_vfiprintf_r+0xfe>
 801b680:	2300      	movs	r3, #0
 801b682:	3401      	adds	r4, #1
 801b684:	9305      	str	r3, [sp, #20]
 801b686:	4619      	mov	r1, r3
 801b688:	f04f 0c0a 	mov.w	ip, #10
 801b68c:	4620      	mov	r0, r4
 801b68e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b692:	3a30      	subs	r2, #48	@ 0x30
 801b694:	2a09      	cmp	r2, #9
 801b696:	d903      	bls.n	801b6a0 <_vfiprintf_r+0x1cc>
 801b698:	2b00      	cmp	r3, #0
 801b69a:	d0c6      	beq.n	801b62a <_vfiprintf_r+0x156>
 801b69c:	9105      	str	r1, [sp, #20]
 801b69e:	e7c4      	b.n	801b62a <_vfiprintf_r+0x156>
 801b6a0:	fb0c 2101 	mla	r1, ip, r1, r2
 801b6a4:	4604      	mov	r4, r0
 801b6a6:	2301      	movs	r3, #1
 801b6a8:	e7f0      	b.n	801b68c <_vfiprintf_r+0x1b8>
 801b6aa:	ab03      	add	r3, sp, #12
 801b6ac:	9300      	str	r3, [sp, #0]
 801b6ae:	462a      	mov	r2, r5
 801b6b0:	4b12      	ldr	r3, [pc, #72]	@ (801b6fc <_vfiprintf_r+0x228>)
 801b6b2:	a904      	add	r1, sp, #16
 801b6b4:	4630      	mov	r0, r6
 801b6b6:	f3af 8000 	nop.w
 801b6ba:	4607      	mov	r7, r0
 801b6bc:	1c78      	adds	r0, r7, #1
 801b6be:	d1d6      	bne.n	801b66e <_vfiprintf_r+0x19a>
 801b6c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b6c2:	07d9      	lsls	r1, r3, #31
 801b6c4:	d405      	bmi.n	801b6d2 <_vfiprintf_r+0x1fe>
 801b6c6:	89ab      	ldrh	r3, [r5, #12]
 801b6c8:	059a      	lsls	r2, r3, #22
 801b6ca:	d402      	bmi.n	801b6d2 <_vfiprintf_r+0x1fe>
 801b6cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b6ce:	f7ff fd1d 	bl	801b10c <__retarget_lock_release_recursive>
 801b6d2:	89ab      	ldrh	r3, [r5, #12]
 801b6d4:	065b      	lsls	r3, r3, #25
 801b6d6:	f53f af1f 	bmi.w	801b518 <_vfiprintf_r+0x44>
 801b6da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b6dc:	e71e      	b.n	801b51c <_vfiprintf_r+0x48>
 801b6de:	ab03      	add	r3, sp, #12
 801b6e0:	9300      	str	r3, [sp, #0]
 801b6e2:	462a      	mov	r2, r5
 801b6e4:	4b05      	ldr	r3, [pc, #20]	@ (801b6fc <_vfiprintf_r+0x228>)
 801b6e6:	a904      	add	r1, sp, #16
 801b6e8:	4630      	mov	r0, r6
 801b6ea:	f000 f879 	bl	801b7e0 <_printf_i>
 801b6ee:	e7e4      	b.n	801b6ba <_vfiprintf_r+0x1e6>
 801b6f0:	0801cb22 	.word	0x0801cb22
 801b6f4:	0801cb2c 	.word	0x0801cb2c
 801b6f8:	00000000 	.word	0x00000000
 801b6fc:	0801b4af 	.word	0x0801b4af
 801b700:	0801cb28 	.word	0x0801cb28

0801b704 <_printf_common>:
 801b704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b708:	4616      	mov	r6, r2
 801b70a:	4698      	mov	r8, r3
 801b70c:	688a      	ldr	r2, [r1, #8]
 801b70e:	690b      	ldr	r3, [r1, #16]
 801b710:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b714:	4293      	cmp	r3, r2
 801b716:	bfb8      	it	lt
 801b718:	4613      	movlt	r3, r2
 801b71a:	6033      	str	r3, [r6, #0]
 801b71c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b720:	4607      	mov	r7, r0
 801b722:	460c      	mov	r4, r1
 801b724:	b10a      	cbz	r2, 801b72a <_printf_common+0x26>
 801b726:	3301      	adds	r3, #1
 801b728:	6033      	str	r3, [r6, #0]
 801b72a:	6823      	ldr	r3, [r4, #0]
 801b72c:	0699      	lsls	r1, r3, #26
 801b72e:	bf42      	ittt	mi
 801b730:	6833      	ldrmi	r3, [r6, #0]
 801b732:	3302      	addmi	r3, #2
 801b734:	6033      	strmi	r3, [r6, #0]
 801b736:	6825      	ldr	r5, [r4, #0]
 801b738:	f015 0506 	ands.w	r5, r5, #6
 801b73c:	d106      	bne.n	801b74c <_printf_common+0x48>
 801b73e:	f104 0a19 	add.w	sl, r4, #25
 801b742:	68e3      	ldr	r3, [r4, #12]
 801b744:	6832      	ldr	r2, [r6, #0]
 801b746:	1a9b      	subs	r3, r3, r2
 801b748:	42ab      	cmp	r3, r5
 801b74a:	dc26      	bgt.n	801b79a <_printf_common+0x96>
 801b74c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b750:	6822      	ldr	r2, [r4, #0]
 801b752:	3b00      	subs	r3, #0
 801b754:	bf18      	it	ne
 801b756:	2301      	movne	r3, #1
 801b758:	0692      	lsls	r2, r2, #26
 801b75a:	d42b      	bmi.n	801b7b4 <_printf_common+0xb0>
 801b75c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801b760:	4641      	mov	r1, r8
 801b762:	4638      	mov	r0, r7
 801b764:	47c8      	blx	r9
 801b766:	3001      	adds	r0, #1
 801b768:	d01e      	beq.n	801b7a8 <_printf_common+0xa4>
 801b76a:	6823      	ldr	r3, [r4, #0]
 801b76c:	6922      	ldr	r2, [r4, #16]
 801b76e:	f003 0306 	and.w	r3, r3, #6
 801b772:	2b04      	cmp	r3, #4
 801b774:	bf02      	ittt	eq
 801b776:	68e5      	ldreq	r5, [r4, #12]
 801b778:	6833      	ldreq	r3, [r6, #0]
 801b77a:	1aed      	subeq	r5, r5, r3
 801b77c:	68a3      	ldr	r3, [r4, #8]
 801b77e:	bf0c      	ite	eq
 801b780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b784:	2500      	movne	r5, #0
 801b786:	4293      	cmp	r3, r2
 801b788:	bfc4      	itt	gt
 801b78a:	1a9b      	subgt	r3, r3, r2
 801b78c:	18ed      	addgt	r5, r5, r3
 801b78e:	2600      	movs	r6, #0
 801b790:	341a      	adds	r4, #26
 801b792:	42b5      	cmp	r5, r6
 801b794:	d11a      	bne.n	801b7cc <_printf_common+0xc8>
 801b796:	2000      	movs	r0, #0
 801b798:	e008      	b.n	801b7ac <_printf_common+0xa8>
 801b79a:	2301      	movs	r3, #1
 801b79c:	4652      	mov	r2, sl
 801b79e:	4641      	mov	r1, r8
 801b7a0:	4638      	mov	r0, r7
 801b7a2:	47c8      	blx	r9
 801b7a4:	3001      	adds	r0, #1
 801b7a6:	d103      	bne.n	801b7b0 <_printf_common+0xac>
 801b7a8:	f04f 30ff 	mov.w	r0, #4294967295
 801b7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7b0:	3501      	adds	r5, #1
 801b7b2:	e7c6      	b.n	801b742 <_printf_common+0x3e>
 801b7b4:	18e1      	adds	r1, r4, r3
 801b7b6:	1c5a      	adds	r2, r3, #1
 801b7b8:	2030      	movs	r0, #48	@ 0x30
 801b7ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b7be:	4422      	add	r2, r4
 801b7c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b7c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b7c8:	3302      	adds	r3, #2
 801b7ca:	e7c7      	b.n	801b75c <_printf_common+0x58>
 801b7cc:	2301      	movs	r3, #1
 801b7ce:	4622      	mov	r2, r4
 801b7d0:	4641      	mov	r1, r8
 801b7d2:	4638      	mov	r0, r7
 801b7d4:	47c8      	blx	r9
 801b7d6:	3001      	adds	r0, #1
 801b7d8:	d0e6      	beq.n	801b7a8 <_printf_common+0xa4>
 801b7da:	3601      	adds	r6, #1
 801b7dc:	e7d9      	b.n	801b792 <_printf_common+0x8e>
	...

0801b7e0 <_printf_i>:
 801b7e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b7e4:	7e0f      	ldrb	r7, [r1, #24]
 801b7e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b7e8:	2f78      	cmp	r7, #120	@ 0x78
 801b7ea:	4691      	mov	r9, r2
 801b7ec:	4680      	mov	r8, r0
 801b7ee:	460c      	mov	r4, r1
 801b7f0:	469a      	mov	sl, r3
 801b7f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b7f6:	d807      	bhi.n	801b808 <_printf_i+0x28>
 801b7f8:	2f62      	cmp	r7, #98	@ 0x62
 801b7fa:	d80a      	bhi.n	801b812 <_printf_i+0x32>
 801b7fc:	2f00      	cmp	r7, #0
 801b7fe:	f000 80d1 	beq.w	801b9a4 <_printf_i+0x1c4>
 801b802:	2f58      	cmp	r7, #88	@ 0x58
 801b804:	f000 80b8 	beq.w	801b978 <_printf_i+0x198>
 801b808:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b80c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b810:	e03a      	b.n	801b888 <_printf_i+0xa8>
 801b812:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b816:	2b15      	cmp	r3, #21
 801b818:	d8f6      	bhi.n	801b808 <_printf_i+0x28>
 801b81a:	a101      	add	r1, pc, #4	@ (adr r1, 801b820 <_printf_i+0x40>)
 801b81c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b820:	0801b879 	.word	0x0801b879
 801b824:	0801b88d 	.word	0x0801b88d
 801b828:	0801b809 	.word	0x0801b809
 801b82c:	0801b809 	.word	0x0801b809
 801b830:	0801b809 	.word	0x0801b809
 801b834:	0801b809 	.word	0x0801b809
 801b838:	0801b88d 	.word	0x0801b88d
 801b83c:	0801b809 	.word	0x0801b809
 801b840:	0801b809 	.word	0x0801b809
 801b844:	0801b809 	.word	0x0801b809
 801b848:	0801b809 	.word	0x0801b809
 801b84c:	0801b98b 	.word	0x0801b98b
 801b850:	0801b8b7 	.word	0x0801b8b7
 801b854:	0801b945 	.word	0x0801b945
 801b858:	0801b809 	.word	0x0801b809
 801b85c:	0801b809 	.word	0x0801b809
 801b860:	0801b9ad 	.word	0x0801b9ad
 801b864:	0801b809 	.word	0x0801b809
 801b868:	0801b8b7 	.word	0x0801b8b7
 801b86c:	0801b809 	.word	0x0801b809
 801b870:	0801b809 	.word	0x0801b809
 801b874:	0801b94d 	.word	0x0801b94d
 801b878:	6833      	ldr	r3, [r6, #0]
 801b87a:	1d1a      	adds	r2, r3, #4
 801b87c:	681b      	ldr	r3, [r3, #0]
 801b87e:	6032      	str	r2, [r6, #0]
 801b880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b884:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b888:	2301      	movs	r3, #1
 801b88a:	e09c      	b.n	801b9c6 <_printf_i+0x1e6>
 801b88c:	6833      	ldr	r3, [r6, #0]
 801b88e:	6820      	ldr	r0, [r4, #0]
 801b890:	1d19      	adds	r1, r3, #4
 801b892:	6031      	str	r1, [r6, #0]
 801b894:	0606      	lsls	r6, r0, #24
 801b896:	d501      	bpl.n	801b89c <_printf_i+0xbc>
 801b898:	681d      	ldr	r5, [r3, #0]
 801b89a:	e003      	b.n	801b8a4 <_printf_i+0xc4>
 801b89c:	0645      	lsls	r5, r0, #25
 801b89e:	d5fb      	bpl.n	801b898 <_printf_i+0xb8>
 801b8a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b8a4:	2d00      	cmp	r5, #0
 801b8a6:	da03      	bge.n	801b8b0 <_printf_i+0xd0>
 801b8a8:	232d      	movs	r3, #45	@ 0x2d
 801b8aa:	426d      	negs	r5, r5
 801b8ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b8b0:	4858      	ldr	r0, [pc, #352]	@ (801ba14 <_printf_i+0x234>)
 801b8b2:	230a      	movs	r3, #10
 801b8b4:	e011      	b.n	801b8da <_printf_i+0xfa>
 801b8b6:	6821      	ldr	r1, [r4, #0]
 801b8b8:	6833      	ldr	r3, [r6, #0]
 801b8ba:	0608      	lsls	r0, r1, #24
 801b8bc:	f853 5b04 	ldr.w	r5, [r3], #4
 801b8c0:	d402      	bmi.n	801b8c8 <_printf_i+0xe8>
 801b8c2:	0649      	lsls	r1, r1, #25
 801b8c4:	bf48      	it	mi
 801b8c6:	b2ad      	uxthmi	r5, r5
 801b8c8:	2f6f      	cmp	r7, #111	@ 0x6f
 801b8ca:	4852      	ldr	r0, [pc, #328]	@ (801ba14 <_printf_i+0x234>)
 801b8cc:	6033      	str	r3, [r6, #0]
 801b8ce:	bf14      	ite	ne
 801b8d0:	230a      	movne	r3, #10
 801b8d2:	2308      	moveq	r3, #8
 801b8d4:	2100      	movs	r1, #0
 801b8d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b8da:	6866      	ldr	r6, [r4, #4]
 801b8dc:	60a6      	str	r6, [r4, #8]
 801b8de:	2e00      	cmp	r6, #0
 801b8e0:	db05      	blt.n	801b8ee <_printf_i+0x10e>
 801b8e2:	6821      	ldr	r1, [r4, #0]
 801b8e4:	432e      	orrs	r6, r5
 801b8e6:	f021 0104 	bic.w	r1, r1, #4
 801b8ea:	6021      	str	r1, [r4, #0]
 801b8ec:	d04b      	beq.n	801b986 <_printf_i+0x1a6>
 801b8ee:	4616      	mov	r6, r2
 801b8f0:	fbb5 f1f3 	udiv	r1, r5, r3
 801b8f4:	fb03 5711 	mls	r7, r3, r1, r5
 801b8f8:	5dc7      	ldrb	r7, [r0, r7]
 801b8fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b8fe:	462f      	mov	r7, r5
 801b900:	42bb      	cmp	r3, r7
 801b902:	460d      	mov	r5, r1
 801b904:	d9f4      	bls.n	801b8f0 <_printf_i+0x110>
 801b906:	2b08      	cmp	r3, #8
 801b908:	d10b      	bne.n	801b922 <_printf_i+0x142>
 801b90a:	6823      	ldr	r3, [r4, #0]
 801b90c:	07df      	lsls	r7, r3, #31
 801b90e:	d508      	bpl.n	801b922 <_printf_i+0x142>
 801b910:	6923      	ldr	r3, [r4, #16]
 801b912:	6861      	ldr	r1, [r4, #4]
 801b914:	4299      	cmp	r1, r3
 801b916:	bfde      	ittt	le
 801b918:	2330      	movle	r3, #48	@ 0x30
 801b91a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b91e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b922:	1b92      	subs	r2, r2, r6
 801b924:	6122      	str	r2, [r4, #16]
 801b926:	f8cd a000 	str.w	sl, [sp]
 801b92a:	464b      	mov	r3, r9
 801b92c:	aa03      	add	r2, sp, #12
 801b92e:	4621      	mov	r1, r4
 801b930:	4640      	mov	r0, r8
 801b932:	f7ff fee7 	bl	801b704 <_printf_common>
 801b936:	3001      	adds	r0, #1
 801b938:	d14a      	bne.n	801b9d0 <_printf_i+0x1f0>
 801b93a:	f04f 30ff 	mov.w	r0, #4294967295
 801b93e:	b004      	add	sp, #16
 801b940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b944:	6823      	ldr	r3, [r4, #0]
 801b946:	f043 0320 	orr.w	r3, r3, #32
 801b94a:	6023      	str	r3, [r4, #0]
 801b94c:	4832      	ldr	r0, [pc, #200]	@ (801ba18 <_printf_i+0x238>)
 801b94e:	2778      	movs	r7, #120	@ 0x78
 801b950:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b954:	6823      	ldr	r3, [r4, #0]
 801b956:	6831      	ldr	r1, [r6, #0]
 801b958:	061f      	lsls	r7, r3, #24
 801b95a:	f851 5b04 	ldr.w	r5, [r1], #4
 801b95e:	d402      	bmi.n	801b966 <_printf_i+0x186>
 801b960:	065f      	lsls	r7, r3, #25
 801b962:	bf48      	it	mi
 801b964:	b2ad      	uxthmi	r5, r5
 801b966:	6031      	str	r1, [r6, #0]
 801b968:	07d9      	lsls	r1, r3, #31
 801b96a:	bf44      	itt	mi
 801b96c:	f043 0320 	orrmi.w	r3, r3, #32
 801b970:	6023      	strmi	r3, [r4, #0]
 801b972:	b11d      	cbz	r5, 801b97c <_printf_i+0x19c>
 801b974:	2310      	movs	r3, #16
 801b976:	e7ad      	b.n	801b8d4 <_printf_i+0xf4>
 801b978:	4826      	ldr	r0, [pc, #152]	@ (801ba14 <_printf_i+0x234>)
 801b97a:	e7e9      	b.n	801b950 <_printf_i+0x170>
 801b97c:	6823      	ldr	r3, [r4, #0]
 801b97e:	f023 0320 	bic.w	r3, r3, #32
 801b982:	6023      	str	r3, [r4, #0]
 801b984:	e7f6      	b.n	801b974 <_printf_i+0x194>
 801b986:	4616      	mov	r6, r2
 801b988:	e7bd      	b.n	801b906 <_printf_i+0x126>
 801b98a:	6833      	ldr	r3, [r6, #0]
 801b98c:	6825      	ldr	r5, [r4, #0]
 801b98e:	6961      	ldr	r1, [r4, #20]
 801b990:	1d18      	adds	r0, r3, #4
 801b992:	6030      	str	r0, [r6, #0]
 801b994:	062e      	lsls	r6, r5, #24
 801b996:	681b      	ldr	r3, [r3, #0]
 801b998:	d501      	bpl.n	801b99e <_printf_i+0x1be>
 801b99a:	6019      	str	r1, [r3, #0]
 801b99c:	e002      	b.n	801b9a4 <_printf_i+0x1c4>
 801b99e:	0668      	lsls	r0, r5, #25
 801b9a0:	d5fb      	bpl.n	801b99a <_printf_i+0x1ba>
 801b9a2:	8019      	strh	r1, [r3, #0]
 801b9a4:	2300      	movs	r3, #0
 801b9a6:	6123      	str	r3, [r4, #16]
 801b9a8:	4616      	mov	r6, r2
 801b9aa:	e7bc      	b.n	801b926 <_printf_i+0x146>
 801b9ac:	6833      	ldr	r3, [r6, #0]
 801b9ae:	1d1a      	adds	r2, r3, #4
 801b9b0:	6032      	str	r2, [r6, #0]
 801b9b2:	681e      	ldr	r6, [r3, #0]
 801b9b4:	6862      	ldr	r2, [r4, #4]
 801b9b6:	2100      	movs	r1, #0
 801b9b8:	4630      	mov	r0, r6
 801b9ba:	f7e4 fca9 	bl	8000310 <memchr>
 801b9be:	b108      	cbz	r0, 801b9c4 <_printf_i+0x1e4>
 801b9c0:	1b80      	subs	r0, r0, r6
 801b9c2:	6060      	str	r0, [r4, #4]
 801b9c4:	6863      	ldr	r3, [r4, #4]
 801b9c6:	6123      	str	r3, [r4, #16]
 801b9c8:	2300      	movs	r3, #0
 801b9ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b9ce:	e7aa      	b.n	801b926 <_printf_i+0x146>
 801b9d0:	6923      	ldr	r3, [r4, #16]
 801b9d2:	4632      	mov	r2, r6
 801b9d4:	4649      	mov	r1, r9
 801b9d6:	4640      	mov	r0, r8
 801b9d8:	47d0      	blx	sl
 801b9da:	3001      	adds	r0, #1
 801b9dc:	d0ad      	beq.n	801b93a <_printf_i+0x15a>
 801b9de:	6823      	ldr	r3, [r4, #0]
 801b9e0:	079b      	lsls	r3, r3, #30
 801b9e2:	d413      	bmi.n	801ba0c <_printf_i+0x22c>
 801b9e4:	68e0      	ldr	r0, [r4, #12]
 801b9e6:	9b03      	ldr	r3, [sp, #12]
 801b9e8:	4298      	cmp	r0, r3
 801b9ea:	bfb8      	it	lt
 801b9ec:	4618      	movlt	r0, r3
 801b9ee:	e7a6      	b.n	801b93e <_printf_i+0x15e>
 801b9f0:	2301      	movs	r3, #1
 801b9f2:	4632      	mov	r2, r6
 801b9f4:	4649      	mov	r1, r9
 801b9f6:	4640      	mov	r0, r8
 801b9f8:	47d0      	blx	sl
 801b9fa:	3001      	adds	r0, #1
 801b9fc:	d09d      	beq.n	801b93a <_printf_i+0x15a>
 801b9fe:	3501      	adds	r5, #1
 801ba00:	68e3      	ldr	r3, [r4, #12]
 801ba02:	9903      	ldr	r1, [sp, #12]
 801ba04:	1a5b      	subs	r3, r3, r1
 801ba06:	42ab      	cmp	r3, r5
 801ba08:	dcf2      	bgt.n	801b9f0 <_printf_i+0x210>
 801ba0a:	e7eb      	b.n	801b9e4 <_printf_i+0x204>
 801ba0c:	2500      	movs	r5, #0
 801ba0e:	f104 0619 	add.w	r6, r4, #25
 801ba12:	e7f5      	b.n	801ba00 <_printf_i+0x220>
 801ba14:	0801cb33 	.word	0x0801cb33
 801ba18:	0801cb44 	.word	0x0801cb44

0801ba1c <__sflush_r>:
 801ba1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ba20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba24:	0716      	lsls	r6, r2, #28
 801ba26:	4605      	mov	r5, r0
 801ba28:	460c      	mov	r4, r1
 801ba2a:	d454      	bmi.n	801bad6 <__sflush_r+0xba>
 801ba2c:	684b      	ldr	r3, [r1, #4]
 801ba2e:	2b00      	cmp	r3, #0
 801ba30:	dc02      	bgt.n	801ba38 <__sflush_r+0x1c>
 801ba32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ba34:	2b00      	cmp	r3, #0
 801ba36:	dd48      	ble.n	801baca <__sflush_r+0xae>
 801ba38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ba3a:	2e00      	cmp	r6, #0
 801ba3c:	d045      	beq.n	801baca <__sflush_r+0xae>
 801ba3e:	2300      	movs	r3, #0
 801ba40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ba44:	682f      	ldr	r7, [r5, #0]
 801ba46:	6a21      	ldr	r1, [r4, #32]
 801ba48:	602b      	str	r3, [r5, #0]
 801ba4a:	d030      	beq.n	801baae <__sflush_r+0x92>
 801ba4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ba4e:	89a3      	ldrh	r3, [r4, #12]
 801ba50:	0759      	lsls	r1, r3, #29
 801ba52:	d505      	bpl.n	801ba60 <__sflush_r+0x44>
 801ba54:	6863      	ldr	r3, [r4, #4]
 801ba56:	1ad2      	subs	r2, r2, r3
 801ba58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ba5a:	b10b      	cbz	r3, 801ba60 <__sflush_r+0x44>
 801ba5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ba5e:	1ad2      	subs	r2, r2, r3
 801ba60:	2300      	movs	r3, #0
 801ba62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ba64:	6a21      	ldr	r1, [r4, #32]
 801ba66:	4628      	mov	r0, r5
 801ba68:	47b0      	blx	r6
 801ba6a:	1c43      	adds	r3, r0, #1
 801ba6c:	89a3      	ldrh	r3, [r4, #12]
 801ba6e:	d106      	bne.n	801ba7e <__sflush_r+0x62>
 801ba70:	6829      	ldr	r1, [r5, #0]
 801ba72:	291d      	cmp	r1, #29
 801ba74:	d82b      	bhi.n	801bace <__sflush_r+0xb2>
 801ba76:	4a2a      	ldr	r2, [pc, #168]	@ (801bb20 <__sflush_r+0x104>)
 801ba78:	40ca      	lsrs	r2, r1
 801ba7a:	07d6      	lsls	r6, r2, #31
 801ba7c:	d527      	bpl.n	801bace <__sflush_r+0xb2>
 801ba7e:	2200      	movs	r2, #0
 801ba80:	6062      	str	r2, [r4, #4]
 801ba82:	04d9      	lsls	r1, r3, #19
 801ba84:	6922      	ldr	r2, [r4, #16]
 801ba86:	6022      	str	r2, [r4, #0]
 801ba88:	d504      	bpl.n	801ba94 <__sflush_r+0x78>
 801ba8a:	1c42      	adds	r2, r0, #1
 801ba8c:	d101      	bne.n	801ba92 <__sflush_r+0x76>
 801ba8e:	682b      	ldr	r3, [r5, #0]
 801ba90:	b903      	cbnz	r3, 801ba94 <__sflush_r+0x78>
 801ba92:	6560      	str	r0, [r4, #84]	@ 0x54
 801ba94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ba96:	602f      	str	r7, [r5, #0]
 801ba98:	b1b9      	cbz	r1, 801baca <__sflush_r+0xae>
 801ba9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ba9e:	4299      	cmp	r1, r3
 801baa0:	d002      	beq.n	801baa8 <__sflush_r+0x8c>
 801baa2:	4628      	mov	r0, r5
 801baa4:	f7ff fb42 	bl	801b12c <_free_r>
 801baa8:	2300      	movs	r3, #0
 801baaa:	6363      	str	r3, [r4, #52]	@ 0x34
 801baac:	e00d      	b.n	801baca <__sflush_r+0xae>
 801baae:	2301      	movs	r3, #1
 801bab0:	4628      	mov	r0, r5
 801bab2:	47b0      	blx	r6
 801bab4:	4602      	mov	r2, r0
 801bab6:	1c50      	adds	r0, r2, #1
 801bab8:	d1c9      	bne.n	801ba4e <__sflush_r+0x32>
 801baba:	682b      	ldr	r3, [r5, #0]
 801babc:	2b00      	cmp	r3, #0
 801babe:	d0c6      	beq.n	801ba4e <__sflush_r+0x32>
 801bac0:	2b1d      	cmp	r3, #29
 801bac2:	d001      	beq.n	801bac8 <__sflush_r+0xac>
 801bac4:	2b16      	cmp	r3, #22
 801bac6:	d11e      	bne.n	801bb06 <__sflush_r+0xea>
 801bac8:	602f      	str	r7, [r5, #0]
 801baca:	2000      	movs	r0, #0
 801bacc:	e022      	b.n	801bb14 <__sflush_r+0xf8>
 801bace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bad2:	b21b      	sxth	r3, r3
 801bad4:	e01b      	b.n	801bb0e <__sflush_r+0xf2>
 801bad6:	690f      	ldr	r7, [r1, #16]
 801bad8:	2f00      	cmp	r7, #0
 801bada:	d0f6      	beq.n	801baca <__sflush_r+0xae>
 801badc:	0793      	lsls	r3, r2, #30
 801bade:	680e      	ldr	r6, [r1, #0]
 801bae0:	bf08      	it	eq
 801bae2:	694b      	ldreq	r3, [r1, #20]
 801bae4:	600f      	str	r7, [r1, #0]
 801bae6:	bf18      	it	ne
 801bae8:	2300      	movne	r3, #0
 801baea:	eba6 0807 	sub.w	r8, r6, r7
 801baee:	608b      	str	r3, [r1, #8]
 801baf0:	f1b8 0f00 	cmp.w	r8, #0
 801baf4:	dde9      	ble.n	801baca <__sflush_r+0xae>
 801baf6:	6a21      	ldr	r1, [r4, #32]
 801baf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801bafa:	4643      	mov	r3, r8
 801bafc:	463a      	mov	r2, r7
 801bafe:	4628      	mov	r0, r5
 801bb00:	47b0      	blx	r6
 801bb02:	2800      	cmp	r0, #0
 801bb04:	dc08      	bgt.n	801bb18 <__sflush_r+0xfc>
 801bb06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bb0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bb0e:	81a3      	strh	r3, [r4, #12]
 801bb10:	f04f 30ff 	mov.w	r0, #4294967295
 801bb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb18:	4407      	add	r7, r0
 801bb1a:	eba8 0800 	sub.w	r8, r8, r0
 801bb1e:	e7e7      	b.n	801baf0 <__sflush_r+0xd4>
 801bb20:	20400001 	.word	0x20400001

0801bb24 <_fflush_r>:
 801bb24:	b538      	push	{r3, r4, r5, lr}
 801bb26:	690b      	ldr	r3, [r1, #16]
 801bb28:	4605      	mov	r5, r0
 801bb2a:	460c      	mov	r4, r1
 801bb2c:	b913      	cbnz	r3, 801bb34 <_fflush_r+0x10>
 801bb2e:	2500      	movs	r5, #0
 801bb30:	4628      	mov	r0, r5
 801bb32:	bd38      	pop	{r3, r4, r5, pc}
 801bb34:	b118      	cbz	r0, 801bb3e <_fflush_r+0x1a>
 801bb36:	6a03      	ldr	r3, [r0, #32]
 801bb38:	b90b      	cbnz	r3, 801bb3e <_fflush_r+0x1a>
 801bb3a:	f7ff f93d 	bl	801adb8 <__sinit>
 801bb3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d0f3      	beq.n	801bb2e <_fflush_r+0xa>
 801bb46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801bb48:	07d0      	lsls	r0, r2, #31
 801bb4a:	d404      	bmi.n	801bb56 <_fflush_r+0x32>
 801bb4c:	0599      	lsls	r1, r3, #22
 801bb4e:	d402      	bmi.n	801bb56 <_fflush_r+0x32>
 801bb50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bb52:	f7ff fada 	bl	801b10a <__retarget_lock_acquire_recursive>
 801bb56:	4628      	mov	r0, r5
 801bb58:	4621      	mov	r1, r4
 801bb5a:	f7ff ff5f 	bl	801ba1c <__sflush_r>
 801bb5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bb60:	07da      	lsls	r2, r3, #31
 801bb62:	4605      	mov	r5, r0
 801bb64:	d4e4      	bmi.n	801bb30 <_fflush_r+0xc>
 801bb66:	89a3      	ldrh	r3, [r4, #12]
 801bb68:	059b      	lsls	r3, r3, #22
 801bb6a:	d4e1      	bmi.n	801bb30 <_fflush_r+0xc>
 801bb6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bb6e:	f7ff facd 	bl	801b10c <__retarget_lock_release_recursive>
 801bb72:	e7dd      	b.n	801bb30 <_fflush_r+0xc>

0801bb74 <__swbuf_r>:
 801bb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb76:	460e      	mov	r6, r1
 801bb78:	4614      	mov	r4, r2
 801bb7a:	4605      	mov	r5, r0
 801bb7c:	b118      	cbz	r0, 801bb86 <__swbuf_r+0x12>
 801bb7e:	6a03      	ldr	r3, [r0, #32]
 801bb80:	b90b      	cbnz	r3, 801bb86 <__swbuf_r+0x12>
 801bb82:	f7ff f919 	bl	801adb8 <__sinit>
 801bb86:	69a3      	ldr	r3, [r4, #24]
 801bb88:	60a3      	str	r3, [r4, #8]
 801bb8a:	89a3      	ldrh	r3, [r4, #12]
 801bb8c:	071a      	lsls	r2, r3, #28
 801bb8e:	d501      	bpl.n	801bb94 <__swbuf_r+0x20>
 801bb90:	6923      	ldr	r3, [r4, #16]
 801bb92:	b943      	cbnz	r3, 801bba6 <__swbuf_r+0x32>
 801bb94:	4621      	mov	r1, r4
 801bb96:	4628      	mov	r0, r5
 801bb98:	f000 f82a 	bl	801bbf0 <__swsetup_r>
 801bb9c:	b118      	cbz	r0, 801bba6 <__swbuf_r+0x32>
 801bb9e:	f04f 37ff 	mov.w	r7, #4294967295
 801bba2:	4638      	mov	r0, r7
 801bba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bba6:	6823      	ldr	r3, [r4, #0]
 801bba8:	6922      	ldr	r2, [r4, #16]
 801bbaa:	1a98      	subs	r0, r3, r2
 801bbac:	6963      	ldr	r3, [r4, #20]
 801bbae:	b2f6      	uxtb	r6, r6
 801bbb0:	4283      	cmp	r3, r0
 801bbb2:	4637      	mov	r7, r6
 801bbb4:	dc05      	bgt.n	801bbc2 <__swbuf_r+0x4e>
 801bbb6:	4621      	mov	r1, r4
 801bbb8:	4628      	mov	r0, r5
 801bbba:	f7ff ffb3 	bl	801bb24 <_fflush_r>
 801bbbe:	2800      	cmp	r0, #0
 801bbc0:	d1ed      	bne.n	801bb9e <__swbuf_r+0x2a>
 801bbc2:	68a3      	ldr	r3, [r4, #8]
 801bbc4:	3b01      	subs	r3, #1
 801bbc6:	60a3      	str	r3, [r4, #8]
 801bbc8:	6823      	ldr	r3, [r4, #0]
 801bbca:	1c5a      	adds	r2, r3, #1
 801bbcc:	6022      	str	r2, [r4, #0]
 801bbce:	701e      	strb	r6, [r3, #0]
 801bbd0:	6962      	ldr	r2, [r4, #20]
 801bbd2:	1c43      	adds	r3, r0, #1
 801bbd4:	429a      	cmp	r2, r3
 801bbd6:	d004      	beq.n	801bbe2 <__swbuf_r+0x6e>
 801bbd8:	89a3      	ldrh	r3, [r4, #12]
 801bbda:	07db      	lsls	r3, r3, #31
 801bbdc:	d5e1      	bpl.n	801bba2 <__swbuf_r+0x2e>
 801bbde:	2e0a      	cmp	r6, #10
 801bbe0:	d1df      	bne.n	801bba2 <__swbuf_r+0x2e>
 801bbe2:	4621      	mov	r1, r4
 801bbe4:	4628      	mov	r0, r5
 801bbe6:	f7ff ff9d 	bl	801bb24 <_fflush_r>
 801bbea:	2800      	cmp	r0, #0
 801bbec:	d0d9      	beq.n	801bba2 <__swbuf_r+0x2e>
 801bbee:	e7d6      	b.n	801bb9e <__swbuf_r+0x2a>

0801bbf0 <__swsetup_r>:
 801bbf0:	b538      	push	{r3, r4, r5, lr}
 801bbf2:	4b29      	ldr	r3, [pc, #164]	@ (801bc98 <__swsetup_r+0xa8>)
 801bbf4:	4605      	mov	r5, r0
 801bbf6:	6818      	ldr	r0, [r3, #0]
 801bbf8:	460c      	mov	r4, r1
 801bbfa:	b118      	cbz	r0, 801bc04 <__swsetup_r+0x14>
 801bbfc:	6a03      	ldr	r3, [r0, #32]
 801bbfe:	b90b      	cbnz	r3, 801bc04 <__swsetup_r+0x14>
 801bc00:	f7ff f8da 	bl	801adb8 <__sinit>
 801bc04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc08:	0719      	lsls	r1, r3, #28
 801bc0a:	d422      	bmi.n	801bc52 <__swsetup_r+0x62>
 801bc0c:	06da      	lsls	r2, r3, #27
 801bc0e:	d407      	bmi.n	801bc20 <__swsetup_r+0x30>
 801bc10:	2209      	movs	r2, #9
 801bc12:	602a      	str	r2, [r5, #0]
 801bc14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bc18:	81a3      	strh	r3, [r4, #12]
 801bc1a:	f04f 30ff 	mov.w	r0, #4294967295
 801bc1e:	e033      	b.n	801bc88 <__swsetup_r+0x98>
 801bc20:	0758      	lsls	r0, r3, #29
 801bc22:	d512      	bpl.n	801bc4a <__swsetup_r+0x5a>
 801bc24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bc26:	b141      	cbz	r1, 801bc3a <__swsetup_r+0x4a>
 801bc28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bc2c:	4299      	cmp	r1, r3
 801bc2e:	d002      	beq.n	801bc36 <__swsetup_r+0x46>
 801bc30:	4628      	mov	r0, r5
 801bc32:	f7ff fa7b 	bl	801b12c <_free_r>
 801bc36:	2300      	movs	r3, #0
 801bc38:	6363      	str	r3, [r4, #52]	@ 0x34
 801bc3a:	89a3      	ldrh	r3, [r4, #12]
 801bc3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801bc40:	81a3      	strh	r3, [r4, #12]
 801bc42:	2300      	movs	r3, #0
 801bc44:	6063      	str	r3, [r4, #4]
 801bc46:	6923      	ldr	r3, [r4, #16]
 801bc48:	6023      	str	r3, [r4, #0]
 801bc4a:	89a3      	ldrh	r3, [r4, #12]
 801bc4c:	f043 0308 	orr.w	r3, r3, #8
 801bc50:	81a3      	strh	r3, [r4, #12]
 801bc52:	6923      	ldr	r3, [r4, #16]
 801bc54:	b94b      	cbnz	r3, 801bc6a <__swsetup_r+0x7a>
 801bc56:	89a3      	ldrh	r3, [r4, #12]
 801bc58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801bc5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801bc60:	d003      	beq.n	801bc6a <__swsetup_r+0x7a>
 801bc62:	4621      	mov	r1, r4
 801bc64:	4628      	mov	r0, r5
 801bc66:	f000 f83f 	bl	801bce8 <__smakebuf_r>
 801bc6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc6e:	f013 0201 	ands.w	r2, r3, #1
 801bc72:	d00a      	beq.n	801bc8a <__swsetup_r+0x9a>
 801bc74:	2200      	movs	r2, #0
 801bc76:	60a2      	str	r2, [r4, #8]
 801bc78:	6962      	ldr	r2, [r4, #20]
 801bc7a:	4252      	negs	r2, r2
 801bc7c:	61a2      	str	r2, [r4, #24]
 801bc7e:	6922      	ldr	r2, [r4, #16]
 801bc80:	b942      	cbnz	r2, 801bc94 <__swsetup_r+0xa4>
 801bc82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801bc86:	d1c5      	bne.n	801bc14 <__swsetup_r+0x24>
 801bc88:	bd38      	pop	{r3, r4, r5, pc}
 801bc8a:	0799      	lsls	r1, r3, #30
 801bc8c:	bf58      	it	pl
 801bc8e:	6962      	ldrpl	r2, [r4, #20]
 801bc90:	60a2      	str	r2, [r4, #8]
 801bc92:	e7f4      	b.n	801bc7e <__swsetup_r+0x8e>
 801bc94:	2000      	movs	r0, #0
 801bc96:	e7f7      	b.n	801bc88 <__swsetup_r+0x98>
 801bc98:	2400023c 	.word	0x2400023c

0801bc9c <__swhatbuf_r>:
 801bc9c:	b570      	push	{r4, r5, r6, lr}
 801bc9e:	460c      	mov	r4, r1
 801bca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bca4:	2900      	cmp	r1, #0
 801bca6:	b096      	sub	sp, #88	@ 0x58
 801bca8:	4615      	mov	r5, r2
 801bcaa:	461e      	mov	r6, r3
 801bcac:	da0d      	bge.n	801bcca <__swhatbuf_r+0x2e>
 801bcae:	89a3      	ldrh	r3, [r4, #12]
 801bcb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801bcb4:	f04f 0100 	mov.w	r1, #0
 801bcb8:	bf14      	ite	ne
 801bcba:	2340      	movne	r3, #64	@ 0x40
 801bcbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801bcc0:	2000      	movs	r0, #0
 801bcc2:	6031      	str	r1, [r6, #0]
 801bcc4:	602b      	str	r3, [r5, #0]
 801bcc6:	b016      	add	sp, #88	@ 0x58
 801bcc8:	bd70      	pop	{r4, r5, r6, pc}
 801bcca:	466a      	mov	r2, sp
 801bccc:	f000 f848 	bl	801bd60 <_fstat_r>
 801bcd0:	2800      	cmp	r0, #0
 801bcd2:	dbec      	blt.n	801bcae <__swhatbuf_r+0x12>
 801bcd4:	9901      	ldr	r1, [sp, #4]
 801bcd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801bcda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801bcde:	4259      	negs	r1, r3
 801bce0:	4159      	adcs	r1, r3
 801bce2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801bce6:	e7eb      	b.n	801bcc0 <__swhatbuf_r+0x24>

0801bce8 <__smakebuf_r>:
 801bce8:	898b      	ldrh	r3, [r1, #12]
 801bcea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bcec:	079d      	lsls	r5, r3, #30
 801bcee:	4606      	mov	r6, r0
 801bcf0:	460c      	mov	r4, r1
 801bcf2:	d507      	bpl.n	801bd04 <__smakebuf_r+0x1c>
 801bcf4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801bcf8:	6023      	str	r3, [r4, #0]
 801bcfa:	6123      	str	r3, [r4, #16]
 801bcfc:	2301      	movs	r3, #1
 801bcfe:	6163      	str	r3, [r4, #20]
 801bd00:	b003      	add	sp, #12
 801bd02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd04:	ab01      	add	r3, sp, #4
 801bd06:	466a      	mov	r2, sp
 801bd08:	f7ff ffc8 	bl	801bc9c <__swhatbuf_r>
 801bd0c:	9f00      	ldr	r7, [sp, #0]
 801bd0e:	4605      	mov	r5, r0
 801bd10:	4639      	mov	r1, r7
 801bd12:	4630      	mov	r0, r6
 801bd14:	f7fe ff02 	bl	801ab1c <_malloc_r>
 801bd18:	b948      	cbnz	r0, 801bd2e <__smakebuf_r+0x46>
 801bd1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bd1e:	059a      	lsls	r2, r3, #22
 801bd20:	d4ee      	bmi.n	801bd00 <__smakebuf_r+0x18>
 801bd22:	f023 0303 	bic.w	r3, r3, #3
 801bd26:	f043 0302 	orr.w	r3, r3, #2
 801bd2a:	81a3      	strh	r3, [r4, #12]
 801bd2c:	e7e2      	b.n	801bcf4 <__smakebuf_r+0xc>
 801bd2e:	89a3      	ldrh	r3, [r4, #12]
 801bd30:	6020      	str	r0, [r4, #0]
 801bd32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bd36:	81a3      	strh	r3, [r4, #12]
 801bd38:	9b01      	ldr	r3, [sp, #4]
 801bd3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801bd3e:	b15b      	cbz	r3, 801bd58 <__smakebuf_r+0x70>
 801bd40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bd44:	4630      	mov	r0, r6
 801bd46:	f000 f81d 	bl	801bd84 <_isatty_r>
 801bd4a:	b128      	cbz	r0, 801bd58 <__smakebuf_r+0x70>
 801bd4c:	89a3      	ldrh	r3, [r4, #12]
 801bd4e:	f023 0303 	bic.w	r3, r3, #3
 801bd52:	f043 0301 	orr.w	r3, r3, #1
 801bd56:	81a3      	strh	r3, [r4, #12]
 801bd58:	89a3      	ldrh	r3, [r4, #12]
 801bd5a:	431d      	orrs	r5, r3
 801bd5c:	81a5      	strh	r5, [r4, #12]
 801bd5e:	e7cf      	b.n	801bd00 <__smakebuf_r+0x18>

0801bd60 <_fstat_r>:
 801bd60:	b538      	push	{r3, r4, r5, lr}
 801bd62:	4d07      	ldr	r5, [pc, #28]	@ (801bd80 <_fstat_r+0x20>)
 801bd64:	2300      	movs	r3, #0
 801bd66:	4604      	mov	r4, r0
 801bd68:	4608      	mov	r0, r1
 801bd6a:	4611      	mov	r1, r2
 801bd6c:	602b      	str	r3, [r5, #0]
 801bd6e:	f7e8 f9e3 	bl	8004138 <_fstat>
 801bd72:	1c43      	adds	r3, r0, #1
 801bd74:	d102      	bne.n	801bd7c <_fstat_r+0x1c>
 801bd76:	682b      	ldr	r3, [r5, #0]
 801bd78:	b103      	cbz	r3, 801bd7c <_fstat_r+0x1c>
 801bd7a:	6023      	str	r3, [r4, #0]
 801bd7c:	bd38      	pop	{r3, r4, r5, pc}
 801bd7e:	bf00      	nop
 801bd80:	24003f44 	.word	0x24003f44

0801bd84 <_isatty_r>:
 801bd84:	b538      	push	{r3, r4, r5, lr}
 801bd86:	4d06      	ldr	r5, [pc, #24]	@ (801bda0 <_isatty_r+0x1c>)
 801bd88:	2300      	movs	r3, #0
 801bd8a:	4604      	mov	r4, r0
 801bd8c:	4608      	mov	r0, r1
 801bd8e:	602b      	str	r3, [r5, #0]
 801bd90:	f7e8 f9e2 	bl	8004158 <_isatty>
 801bd94:	1c43      	adds	r3, r0, #1
 801bd96:	d102      	bne.n	801bd9e <_isatty_r+0x1a>
 801bd98:	682b      	ldr	r3, [r5, #0]
 801bd9a:	b103      	cbz	r3, 801bd9e <_isatty_r+0x1a>
 801bd9c:	6023      	str	r3, [r4, #0]
 801bd9e:	bd38      	pop	{r3, r4, r5, pc}
 801bda0:	24003f44 	.word	0x24003f44

0801bda4 <_init>:
 801bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bda6:	bf00      	nop
 801bda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bdaa:	bc08      	pop	{r3}
 801bdac:	469e      	mov	lr, r3
 801bdae:	4770      	bx	lr

0801bdb0 <_fini>:
 801bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdb2:	bf00      	nop
 801bdb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bdb6:	bc08      	pop	{r3}
 801bdb8:	469e      	mov	lr, r3
 801bdba:	4770      	bx	lr
