moveDistance() 同步移動功能 - 使用說明 (完整版)
===============================================

## 📌 功能改進

### 🔄 **舊版本 vs 新版本**

#### 舊版本（PID角度控制）
- 線速度：用戶指定
- 角速度：基於 PID 控制 `angular_velocity = kp_theta * angle_error`
- 問題：位置和角度可能不同步到達，純旋轉時可能震盪

#### 新版本（統一同步計算）
- 線速度：用戶指定（不變）
- 角速度：**動態計算**，確保位置和角度同時到達目標
- **純旋轉優化**：不再使用PID，改用基於時間的平滑角速度計算
- 優點：精確的時間同步，更平滑的運動軌跡

## ⚙️ **同步角速度計算邏輯**

### 1. 移動 + 旋轉情況
```cpp
// 根據剩餘距離和當前線速度估算到達時間
estimated_time_to_goal = remaining_distance / current_linear_speed;

// 計算在估計時間內完成角度旋轉所需的角速度
synchronized_angular_velocity = angle_error / estimated_time_to_goal;
```

### 2. 純旋轉情況（新增改進✨）
```cpp
// 估算完成剩餘角度所需的合理時間
float desired_rotation_time = fabs(angle_error) / 1.5f; // 1.5 rad/s 作為基準

// 確保旋轉時間在合理範圍內（0.2-3.0秒）
desired_rotation_time = fmax(desired_rotation_time, 0.2f);
desired_rotation_time = fmin(desired_rotation_time, 3.0f);

// 計算平滑角速度
synchronized_angular_velocity = angle_error / desired_rotation_time;
```

### 3. 安全限制
- **最大角速度限制**：防止過快旋轉
- **最小有效角速度**：確保小角度也能有效旋轉
- **純旋轉專用最小角速度**：0.05 rad/s，比一般情況更高
- **後備PID控制**：當距離太小或速度太慢時的安全機制

## 🎯 **使用範例**

### 1. 基本同步移動
```cpp
// 機器人會在移動1米的同時旋轉90度
// 到達目標位置時剛好完成旋轉
setmoveDistance(1.0f, 0.0f, 90.0f, 0.5f, 1); // x=1m, y=0m, 90度, 0.5m/s, 啟用加減速
```

### 2. 純旋轉情況（改進重點✨）
```cpp
// 純旋轉：原地旋轉90度，現在更平滑
setmoveDistance(0.0f, 0.0f, 90.0f, 0.0f, 1);  // 線速度為0，只旋轉90度

// 純旋轉：原地旋轉180度
setmoveDistance(0.0f, 0.0f, 180.0f, 0.0f, 1); // 大角度純旋轉

// 純旋轉：小角度微調
setmoveDistance(0.0f, 0.0f, 15.0f, 0.0f, 1);  // 小角度也能平滑執行
```

### 3. 不同場景範例
```cpp
// 場景1：直線移動 + 旋轉
setmoveDistance(2.0f, 0.0f, 180.0f, 0.3f, 1); // 2米直線，同時轉180度

// 場景2：對角線移動 + 小角度調整
setmoveDistance(1.0f, 1.0f, 45.0f, 0.4f, 1);  // 對角線移動，同時微調角度

// 場景3：純旋轉（各種角度）
setmoveDistance(0.0f, 0.0f, 360.0f, 0.0f, 1); // 完整一圈旋轉
setmoveDistance(0.0f, 0.0f, -90.0f, 0.0f, 1); // 反向旋轉90度
```

## 📊 **效果比較**

### 移動+旋轉同步效果
```
舊版本時序:
時間軸: |----1s----|----2s----|----3s----|----4s----|
位置:   [====移動中====][到達]
角度:   [==旋轉==][完成]               <- 角度提前完成
結果:   位置和角度不同步

新版本時序:
時間軸: |----1s----|----2s----|----3s----|----4s----|
位置:   [====移動中====][到達]
角度:   [====旋轉中====][完成]         <- 同步完成
結果:   位置和角度完美同步！
```

### 純旋轉平滑效果
```
舊版本（PID控制）:
時間軸: |----1s----|----2s----|----3s----|----4s----|
角速度: [高][低][高][低][高][低]           <- PID震盪
角度:   [===不平滑的旋轉===][完成]
結果:   可能震盪，速度不穩定

新版本（時間基準）:
時間軸: |----1s----|----2s----|----3s----|----4s----|
角速度: [====平滑增加====][====平滑減少====]
角度:   [====平滑旋轉====][完成]
結果:   平滑旋轉，可預測的時間完成
```

## ⚡ **技術細節**

### 純旋轉時間計算
- **基準角速度**：1.5 rad/s （約86度/秒）
- **時間範圍**：0.2-3.0秒，避免過快或過慢
- **小角度處理**：即使1度也能平滑執行

### 角速度安全機制
```cpp
// 1. 時間限制
desired_rotation_time = fmax(fabs(angle_error) / 1.5f, 0.2f);
desired_rotation_time = fmin(desired_rotation_time, 3.0f);

// 2. 最大角速度限制
if (fabs(synchronized_angular_velocity) > max_speed) {
    synchronized_angular_velocity = (synchronized_angular_velocity > 0) ? 
        max_speed : -max_speed;
}

// 3. 純旋轉專用最小角速度
if (fabs(synchronized_angular_velocity) < min_pure_rotation_velocity) {
    synchronized_angular_velocity = (angle_error > 0) ? 
        min_pure_rotation_velocity : -min_pure_rotation_velocity;
}
```

### 加減速整合
- 純旋轉也支援加減速控制
- 使用統一的 `calculateAngleScale()` 函數
- 啟動時緩慢加速，完成前緩慢減速

## 🎉 **優勢總結**

### 🔄 **移動 + 旋轉**
1. **⏰ 精確同步**：位置和角度在同一時刻到達目標
2. **🎯 運動效率**：無需分步驟，一次性完成位移和旋轉
3. **🔄 平滑軌跡**：避免了角度提前完成後的等待或補償

### 🌀 **純旋轉**
1. **🎯 平滑控制**：不再有PID震盪，角速度平滑變化
2. **⏱️ 可預測時間**：基於物理時間計算，完成時間可預估
3. **🔧 適應性強**：從1度到360度都能平滑執行
4. **⚡ 快速響應**：小角度不會因PID增益過小而反應遲鈍

### 🛡️ **通用優勢**
1. **⚡ 適應性強**：自動適應不同的距離和角度組合
2. **🛡️ 安全可靠**：多重安全限制和後備機制
3. **🔧 易於調試**：基於物理參數而非經驗調參

## 💡 **調試提示**

如果效果不理想，可以調整以下參數：

### 純旋轉相關
- **基準角速度**：修改 `1.5f` 來調整旋轉速度偏好
- **時間範圍**：調整 `0.2f-3.0f` 來改變旋轉時間限制
- **最小角速度**：調整 `min_pure_rotation_velocity = 0.05f`

### 同步移動相關
- `max_speed`：影響最大角速度限制
- `min_effective_angular_velocity`：影響小角度的處理
- `theta_threshold`：影響角度完成的精度判斷

## 🚀 **測試建議**

1. **純旋轉測試**：
   - 測試小角度（5-15度）的平滑性
   - 測試大角度（180-360度）的穩定性
   - 測試負角度的正確性

2. **同步移動測試**：
   - 測試短距離大角度的同步性
   - 測試長距離小角度的精度
   - 測試加減速的平滑性

## ✅ **系統狀態**

✅ **移動+旋轉同步**：完全實現
✅ **純旋轉平滑控制**：完全實現  
✅ **統一速度控制系統**：完全整合
✅ **加減速支援**：全面支援
✅ **安全限制機制**：完整實現

現在您的機器人具有了真正的同步移動和平滑純旋轉能力！🚀
